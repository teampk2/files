// ====== START OF FILE: 401kCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8.28 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Landmark, TrendingUp } from "lucide-react";

export default function FourOhOneKCalculator() {
  const [currentAge, setCurrentAge] = useState<string>('');
  const [retirementAge, setRetirementAge] = useState<string>('');
  const [currentBalance, setCurrentBalance] = useState<string>('0');
  const [annualContribution, setAnnualContribution] = useState<string>('');
  const [employerMatchPercent, setEmployerMatchPercent] = useState<string>('0'); // % of contribution matched
  const [matchUpToPercent, setMatchUpToPercent] = useState<string>('0'); // % of salary matched up to
  const [annualSalaryForMatch, setAnnualSalaryForMatch] = useState<string>(''); // Needed if match is % of salary
  const [annualRateOfReturn, setAnnualRateOfReturn] = useState<string>(''); // %

  const [estimatedBalance, setEstimatedBalance] = useState<string | null>(null);
  const [totalContributions, setTotalContributions] = useState<string | null>(null);
  const [totalGrowth, setTotalGrowth] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculate401k = () => {
    setError(null);
    setEstimatedBalance(null);
    setTotalContributions(null);
    setTotalGrowth(null);

    const age = parseInt(currentAge);
    const retAge = parseInt(retirementAge);
    let P0 = parseFloat(currentBalance);
    let PMT_employee = parseFloat(annualContribution);
    const employerMatch = parseFloat(employerMatchPercent) / 100;
    const matchUpTo = parseFloat(matchUpToPercent) / 100;
    const salary = parseFloat(annualSalaryForMatch);
    const r_annual = parseFloat(annualRateOfReturn) / 100;

    if (isNaN(age) || age <= 0 || isNaN(retAge) || retAge <= age || isNaN(P0) || P0 < 0 || isNaN(PMT_employee) || PMT_employee < 0 || isNaN(r_annual) || r_annual < 0) {
      setError('Ages, balances, contributions, and rate must be valid non-negative numbers. Retirement age must be greater than current age.');
      return;
    }
    if ((employerMatch > 0 || matchUpTo > 0) && (isNaN(salary) || salary <= 0)) {
      setError('Annual salary is required if employer match parameters are set.');
      return;
    }
     if (isNaN(employerMatch) || employerMatch < 0 || isNaN(matchUpTo) || matchUpTo < 0) {
        setError('Employer match percentages must be non-negative.');
        return;
    }


    const yearsToRetirement = retAge - age;
    let futureVal = P0;
    let totalEmployeeContrib = P0; // Initial balance counts as first contribution for this sum
    let totalEmployerContrib = 0;

    for (let i = 0; i < yearsToRetirement; i++) {
      let actualEmployerMatchAmount = 0;
      if (salary > 0 && employerMatch > 0 && matchUpTo > 0) {
        const maxMatchableContribution = salary * matchUpTo;
        const matchedAmount = Math.min(PMT_employee, maxMatchableContribution) * employerMatch;
        actualEmployerMatchAmount = matchedAmount;
      }
      
      const totalAnnualAdd = PMT_employee + actualEmployerMatchAmount;
      futureVal = (futureVal + totalAnnualAdd) * (1 + r_annual); // Assume contributions + match at start of year, then compound
      
      totalEmployeeContrib += PMT_employee;
      totalEmployerContrib += actualEmployerMatchAmount;
    }
    
    const totalOverallContributions = totalEmployeeContrib + totalEmployerContrib;
    const growth = futureVal - totalOverallContributions;

    setEstimatedBalance(futureVal.toFixed(2));
    setTotalContributions(totalOverallContributions.toFixed(2));
    setTotalGrowth(growth.toFixed(2));
  };

  const resetForm = () => {
    setCurrentAge(''); setRetirementAge(''); setCurrentBalance('0'); setAnnualContribution('');
    setEmployerMatchPercent('0'); setMatchUpToPercent('0'); setAnnualSalaryForMatch(''); setAnnualRateOfReturn('');
    setEstimatedBalance(null); setTotalContributions(null); setTotalGrowth(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>401(k) Growth Estimator (Simplified)</AlertTitle><AlertDescription>Estimate the future value of your 401(k) savings. Assumes annual contributions and compounding. Does not account for taxes, fees, or specific plan rules. Consult a financial advisor.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your 401(k) details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="currentAge401k">Current Age</Label><Input id="currentAge401k" type="number" value={currentAge} onChange={e=>setCurrentAge(e.target.value)} placeholder="e.g., 30"/></div>
              <div><Label htmlFor="retAge401k">Retirement Age</Label><Input id="retAge401k" type="number" value={retirementAge} onChange={e=>setRetirementAge(e.target.value)} placeholder="e.g., 65"/></div>
            </div>
            <div><Label htmlFor="currentBal401k">Current 401(k) Balance ($)</Label><Input id="currentBal401k" type="number" value={currentBalance} onChange={e=>setCurrentBalance(e.target.value)} placeholder="e.g., 50000"/></div>
            <div><Label htmlFor="annualContrib401k">Your Annual Contribution ($)</Label><Input id="annualContrib401k" type="number" value={annualContribution} onChange={e=>setAnnualContribution(e.target.value)} placeholder="e.g., 10000"/></div>
            <p className="text-sm font-medium text-muted-foreground pt-2 border-t">Employer Match (Optional):</p>
            <div className="grid grid-cols-2 gap-4">
                <div><Label htmlFor="employerMatchPc">Match Percentage (%)</Label><Input id="employerMatchPc" type="number" value={employerMatchPercent} onChange={e=>setEmployerMatchPercent(e.target.value)} placeholder="e.g., 50 (for 50%)"/></div>
                <div><Label htmlFor="matchUpToPc">Up to Percent of Salary (%)</Label><Input id="matchUpToPc" type="number" value={matchUpToPercent} onChange={e=>setMatchUpToPercent(e.target.value)} placeholder="e.g., 6 (for 6%)"/></div>
            </div>
            <div><Label htmlFor="annualSalaryMatch">Your Annual Salary (for match calc.) ($)</Label><Input id="annualSalaryMatch" type="number" value={annualSalaryForMatch} onChange={e=>setAnnualSalaryForMatch(e.target.value)} placeholder="e.g., 80000"/></div>
            <div><Label htmlFor="returnRate401k">Expected Annual Rate of Return (%)</Label><Input id="returnRate401k" type="number" value={annualRateOfReturn} onChange={e=>setAnnualRateOfReturn(e.target.value)} placeholder="e.g., 7"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate401k}>Calculate 401(k)</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(estimatedBalance || error) && (
          <Card>
            <CardHeader><CardDescription>401(k) Projection</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {estimatedBalance && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Est. Balance at Retirement</p><p className="text-2xl font-bold text-primary">${estimatedBalance}</p></div><CopyButton textToCopy={estimatedBalance}/></div>)}
              {totalContributions && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Contributions (You + Employer)</p><p className="font-semibold">${totalContributions}</p></div>)}
              {totalGrowth && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Investment Growth</p><p className="font-semibold">${totalGrowth}</p></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: 401kCalculator.tsx ======
==================================================

// ====== START OF FILE: AccelerationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.71 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal } from "lucide-react";

type CalculationTarget = 'acceleration' | 'finalVelocity' | 'initialVelocity' | 'time';

export default function AccelerationCalculator() {
  const [target, setTarget] = useState<CalculationTarget>('acceleration');
  const [initialVelocity, setInitialVelocity] = useState<string>('');
  const [finalVelocity, setFinalVelocity] = useState<string>('');
  const [time, setTime] = useState<string>('');
  const [acceleration, setAcceleration] = useState<string>('');
  
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculate = () => {
    setError(null);
    setResult(null);

    const v0 = parseFloat(initialVelocity);
    const v = parseFloat(finalVelocity);
    const t = parseFloat(time);
    const a = parseFloat(acceleration);

    let calculatedValue: number | null = null;

    try {
      switch (target) {
        case 'acceleration':
          if (isNaN(v) || isNaN(v0) || isNaN(t) || t === 0) throw new Error("Final Velocity, Initial Velocity, and Time (non-zero) are required.");
          calculatedValue = (v - v0) / t;
          break;
        case 'finalVelocity':
          if (isNaN(v0) || isNaN(a) || isNaN(t)) throw new Error("Initial Velocity, Acceleration, and Time are required.");
          calculatedValue = v0 + (a * t);
          break;
        case 'initialVelocity':
          if (isNaN(v) || isNaN(a) || isNaN(t)) throw new Error("Final Velocity, Acceleration, and Time are required.");
          calculatedValue = v - (a * t);
          break;
        case 'time':
          if (isNaN(v) || isNaN(v0) || isNaN(a) || a === 0) throw new Error("Final Velocity, Initial Velocity, and Acceleration (non-zero) are required.");
          calculatedValue = (v - v0) / a;
          break;
        default:
          throw new Error("Invalid calculation target.");
      }
      if (calculatedValue !== null && !isNaN(calculatedValue) && isFinite(calculatedValue)) {
        setResult(calculatedValue.toFixed(4));
      } else {
        throw new Error("Calculation resulted in an invalid number.");
      }
    } catch (e: any) {
      setError(e.message || "An error occurred during calculation.");
    }
  };
  
  const resetForm = () => {
    setInitialVelocity('');
    setFinalVelocity('');
    setTime('');
    setAcceleration('');
    setResult(null);
    setError(null);
    // setTarget('acceleration'); // Optionally reset target
  };

  const renderInputs = () => {
    const commonInputClass = "mt-1";
    return (
      <>
        {target !== 'initialVelocity' && (
          <div>
            <Label htmlFor="initialVelocity">Initial Velocity (v₀) (m/s)</Label>
            <Input id="initialVelocity" type="number" value={initialVelocity} onChange={(e) => setInitialVelocity(e.target.value)} placeholder="e.g., 0" className={commonInputClass} />
          </div>
        )}
        {target !== 'finalVelocity' && (
          <div>
            <Label htmlFor="finalVelocity">Final Velocity (v) (m/s)</Label>
            <Input id="finalVelocity" type="number" value={finalVelocity} onChange={(e) => setFinalVelocity(e.target.value)} placeholder="e.g., 10" className={commonInputClass} />
          </div>
        )}
        {target !== 'time' && (
          <div>
            <Label htmlFor="time">Time (t) (s)</Label>
            <Input id="time" type="number" value={time} onChange={(e) => setTime(e.target.value)} placeholder="e.g., 5" className={commonInputClass} />
          </div>
        )}
        {target !== 'acceleration' && (
          <div>
            <Label htmlFor="acceleration">Acceleration (a) (m/s²)</Label>
            <Input id="acceleration" type="number" value={acceleration} onChange={(e) => setAcceleration(e.target.value)} placeholder="e.g., 2" className={commonInputClass} />
          </div>
        )}
      </>
    );
  };
  
  const getResultLabel = () => {
    switch (target) {
      case 'acceleration': return 'Calculated Acceleration (a)';
      case 'finalVelocity': return 'Calculated Final Velocity (v)';
      case 'initialVelocity': return 'Calculated Initial Velocity (v₀)';
      case 'time': return 'Calculated Time (t)';
      default: return 'Result';
    }
  };
  
  const getResultUnit = () => {
    switch (target) {
      case 'acceleration': return 'm/s²';
      case 'finalVelocity':
      case 'initialVelocity': return 'm/s';
      case 'time': return 's';
      default: return '';
    }
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate one variable of constant acceleration given the others.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="calculationTarget">Calculate:</Label>
              <Select value={target} onValueChange={(value: CalculationTarget) => { setTarget(value); setResult(null); setError(null); }}>
                <SelectTrigger id="calculationTarget">
                  <SelectValue placeholder="Select variable to calculate" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="acceleration">Acceleration (a)</SelectItem>
                  <SelectItem value="finalVelocity">Final Velocity (v)</SelectItem>
                  <SelectItem value="initialVelocity">Initial Velocity (v₀)</SelectItem>
                  <SelectItem value="time">Time (t)</SelectItem>
                </SelectContent>
              </Select>
            </div>
            {renderInputs()}
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculate}>Calculate</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(result !== null || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Calculation Result</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {result !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">{getResultLabel()}</p>
                    <p className="text-3xl font-bold text-primary">{result} <span className="text-lg">{getResultUnit()}</span></p>
                  </div>
                  <CopyButton textToCopy={`${result} ${getResultUnit()}`} />
                </div>
              )}
            </CardContent>
            <CardFooter>
                <p className="text-xs text-muted-foreground">
                    This calculator uses the standard kinematic equation: v = v₀ + at. Ensure units are consistent (m/s for velocity, s for time, m/s² for acceleration).
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: AccelerationCalculator.tsx ======
==================================================

// ====== START OF FILE: AccuracyCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.2 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Target } from "lucide-react";

// Accuracy = (TP + TN) / (TP + TN + FP + FN)
// TP = True Positives, TN = True Negatives, FP = False Positives, FN = False Negatives

export default function AccuracyCalculator() {
  const [truePositives, setTruePositives] = useState<string>('');
  const [trueNegatives, setTrueNegatives] = useState<string>('');
  const [falsePositives, setFalsePositives] = useState<string>('');
  const [falseNegatives, setFalseNegatives] = useState<string>('');

  const [accuracy, setAccuracy] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateAccuracy = () => {
    setError(null); setAccuracy(null);
    const TP = parseInt(truePositives);
    const TN = parseInt(trueNegatives);
    const FP = parseInt(falsePositives);
    const FN = parseInt(falseNegatives);

    if (isNaN(TP)||TP<0||isNaN(TN)||TN<0||isNaN(FP)||FP<0||isNaN(FN)||FN<0) {
      setError('All values (TP, TN, FP, FN) must be non-negative integers.');
      return;
    }
    const totalPopulation = TP + TN + FP + FN;
    if (totalPopulation === 0) {
        setError('Total number of samples cannot be zero.');
        return;
    }
    const acc = (TP + TN) / totalPopulation;
    setAccuracy((acc * 100).toFixed(2));
  };
  
  const resetForm = () => {
    setTruePositives(''); setTrueNegatives(''); setFalsePositives(''); setFalseNegatives('');
    setAccuracy(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Classification Accuracy Calculator</AlertTitle><AlertDescription>Calculate the accuracy of a binary classification model from its confusion matrix values (True/False Positives/Negatives).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter confusion matrix values.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="truePositives">True Positives (TP)</Label><Input id="truePositives" type="number" value={truePositives} onChange={e=>setTruePositives(e.target.value)}/></div>
              <div><Label htmlFor="trueNegatives">True Negatives (TN)</Label><Input id="trueNegatives" type="number" value={trueNegatives} onChange={e=>setTrueNegatives(e.target.value)}/></div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="falsePositives">False Positives (FP)</Label><Input id="falsePositives" type="number" value={falsePositives} onChange={e=>setFalsePositives(e.target.value)}/></div>
              <div><Label htmlFor="falseNegatives">False Negatives (FN)</Label><Input id="falseNegatives" type="number" value={falseNegatives} onChange={e=>setFalseNegatives(e.target.value)}/></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateAccuracy}>Calculate Accuracy</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(accuracy || error) && (
          <Card>
            <CardHeader><CardDescription>Model Accuracy</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {accuracy && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Accuracy</p><p className="text-2xl font-bold text-primary">{accuracy}%</p></div><CopyButton textToCopy={accuracy}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: AccuracyCalculator.tsx ======
==================================================

// ====== START OF FILE: AgeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 9.52 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, CalendarCheck2 } from "lucide-react";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { format, differenceInYears, differenceInMonths, differenceInDays, differenceInHours, differenceInMinutes, differenceInSeconds, isValid, addYears, subYears } from 'date-fns';
import { cn } from '@/lib/utils';


interface AgeResult {
  years: number;
  months: number;
  days: number;
  totalMonths: number;
  totalDays: number;
  totalHours: number;
  totalMinutes: number;
  totalSeconds: number;
  nextBirthdayIn?: string;
}

export default function AgeCalculator() {
  const [birthDate, setBirthDate] = useState<Date | undefined>(undefined);
  const [targetDate, setTargetDate] = useState<Date | undefined>(new Date());
  const [ageResult, setAgeResult] = useState<AgeResult | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateAge = () => {
    setError(null);
    setAgeResult(null);

    if (!birthDate || !targetDate || !isValid(birthDate) || !isValid(targetDate)) {
      setError('Please select valid dates for birth date and target date.');
      return;
    }

    if (birthDate > targetDate) {
      setError('Birth date cannot be after the target date.');
      return;
    }

    const years = differenceInYears(targetDate, birthDate);
    let tempDateForMonths = addYears(birthDate, years);
    const months = differenceInMonths(targetDate, tempDateForMonths);
    let tempDateForDays = addYears(birthDate, years);
    tempDateForDays = differenceInMonths(targetDate, tempDateForDays) > 0 ? addMonths(tempDateForDays, months) : tempDateForDays;
    const days = differenceInDays(targetDate, tempDateForDays);
    
    const totalMonths = differenceInMonths(targetDate, birthDate);
    const totalDays = differenceInDays(targetDate, birthDate);
    const totalHours = differenceInHours(targetDate, birthDate);
    const totalMinutes = differenceInMinutes(targetDate, birthDate);
    const totalSeconds = differenceInSeconds(targetDate, birthDate);

    // Next birthday
    let nextBirthday = new Date(targetDate.getFullYear(), birthDate.getMonth(), birthDate.getDate());
    if (nextBirthday <= targetDate) {
        nextBirthday = addYears(nextBirthday, 1);
    }
    const daysToNextBirthday = differenceInDays(nextBirthday, targetDate);
    const nextBirthdayIn = `${daysToNextBirthday} day(s)`;


    setAgeResult({ years, months, days, totalMonths, totalDays, totalHours, totalMinutes, totalSeconds, nextBirthdayIn });
  };

  // Helper function to add months, simplified, consider date-fns addMonths if more precision needed
  const addMonths = (date: Date, months: number): Date => {
    const d = new Date(date);
    d.setMonth(d.getMonth() + months);
    return d;
  }


  const resetForm = () => {
    setBirthDate(undefined);
    setTargetDate(new Date());
    setAgeResult(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your birth date and a target date to calculate age.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="birthDate">Date of Birth</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    id="birthDate"
                    variant={"outline"}
                    className={cn(
                      "w-full justify-start text-left font-normal",
                      !birthDate && "text-muted-foreground"
                    )}
                  >
                    <CalendarCheck2 className="mr-2 h-4 w-4" />
                    {birthDate ? format(birthDate, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                  <Calendar
                    mode="single"
                    selected={birthDate}
                    onSelect={setBirthDate}
                    captionLayout="dropdown-buttons"
                    fromYear={subYears(new Date(), 120).getFullYear()}
                    toYear={new Date().getFullYear()}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>
            <div>
              <Label htmlFor="targetDate">Age at Date Of</Label>
               <Popover>
                <PopoverTrigger asChild>
                  <Button
                    id="targetDate"
                    variant={"outline"}
                    className={cn(
                      "w-full justify-start text-left font-normal",
                      !targetDate && "text-muted-foreground"
                    )}
                  >
                    <CalendarCheck2 className="mr-2 h-4 w-4" />
                    {targetDate ? format(targetDate, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                  <Calendar
                    mode="single"
                    selected={targetDate}
                    onSelect={setTargetDate}
                    captionLayout="dropdown-buttons"
                    fromYear={subYears(new Date(), 120).getFullYear()}
                    toYear={addYears(new Date(), 50).getFullYear()}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateAge}>Calculate Age</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(ageResult || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Calculated Age</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {ageResult && (
                <div className="space-y-3">
                  <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                    <div>
                      <p className="text-sm text-muted-foreground">Age</p>
                      <p className="text-3xl font-bold text-primary">
                        {ageResult.years} <span className="text-xl">years</span>, {ageResult.months} <span className="text-xl">months</span>, {ageResult.days} <span className="text-xl">days</span>
                      </p>
                    </div>
                    <CopyButton textToCopy={`${ageResult.years} years, ${ageResult.months} months, ${ageResult.days} days`} />
                  </div>
                  <div className="grid grid-cols-2 gap-2 text-sm">
                    <div className="p-2 bg-muted rounded-md">
                      <p className="text-muted-foreground">Total Months</p>
                      <p className="font-semibold">{ageResult.totalMonths.toLocaleString()}</p>
                    </div>
                    <div className="p-2 bg-muted rounded-md">
                      <p className="text-muted-foreground">Total Days</p>
                      <p className="font-semibold">{ageResult.totalDays.toLocaleString()}</p>
                    </div>
                     <div className="p-2 bg-muted rounded-md">
                      <p className="text-muted-foreground">Total Hours</p>
                      <p className="font-semibold">{ageResult.totalHours.toLocaleString()}</p>
                    </div>
                    <div className="p-2 bg-muted rounded-md">
                      <p className="text-muted-foreground">Total Minutes</p>
                      <p className="font-semibold">{ageResult.totalMinutes.toLocaleString()}</p>
                    </div>
                     <div className="p-2 bg-muted rounded-md col-span-2">
                      <p className="text-muted-foreground">Total Seconds</p>
                      <p className="font-semibold">{ageResult.totalSeconds.toLocaleString()}</p>
                    </div>
                    {ageResult.nextBirthdayIn && (
                       <div className="p-2 bg-muted rounded-md col-span-2">
                        <p className="text-muted-foreground">Next Birthday In</p>
                        <p className="font-semibold">{ageResult.nextBirthdayIn}</p>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </CardContent>
            <CardFooter>
                <p className="text-xs text-muted-foreground">
                    Calculates age based on the selected birth date and target date. Results include years, months, days, and total durations.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: AgeCalculator.tsx ======
==================================================

// ====== START OF FILE: AirConditionerSizeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.16 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from "@/components/ui/checkbox";
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, AirVent } from "lucide-react";

// Simplified AC Sizing - similar to BTU calculator but more focused.
// Factors: Room Area, Ceiling Height, Sunlight, People, Kitchen.

export default function AirConditionerSizeCalculator() {
  const [roomArea, setRoomArea] = useState<string>(''); // sq ft or sq m
  const [areaUnit, setAreaUnit] = useState<'sqft' | 'sqm'>('sqft');
  const [ceilingHeightFt, setCeilingHeightFt] = useState<string>('8'); // Assume ft for simplicity
  const [sunlight, setSunlight] = useState<'shaded' | 'moderate' | 'sunny'>('moderate');
  const [numPeople, setNumPeople] = useState<string>('2');
  const [isKitchen, setIsKitchen] = useState<boolean>(false);

  const [recommendedBtu, setRecommendedBtu] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateAcSize = () => {
    setError(null); setRecommendedBtu(null);
    let areaSqFtNum = parseFloat(roomArea);
    const heightFtNum = parseFloat(ceilingHeightFt);
    const peopleNum = parseInt(numPeople);

    if (isNaN(areaSqFtNum) || areaSqFtNum <= 0 || isNaN(heightFtNum) || heightFtNum <= 0 || isNaN(peopleNum) || peopleNum < 1) {
      setError('Valid Room Area (>0), Ceiling Height (>0 ft), and Number of People (>=1) required.');
      return;
    }
    if (areaUnit === 'sqm') areaSqFtNum *= 10.7639; // Convert sqm to sqft

    // Base BTU (very rough: e.g., from Energy Star or common charts)
    // Example: 100 sq ft ~ 5000 BTU, 500 sq ft ~ 12000 BTU. This is non-linear.
    // A simpler formula: (Area * 20) is a common starting point.
    let btu = areaSqFtNum * 20;

    // Adjust for ceiling height (standard is 8ft, add 10% for each foot above)
    if (heightFtNum > 8) btu *= (1 + (heightFtNum - 8) * 0.10);
    
    // Adjust for sunlight
    if (sunlight === 'sunny') btu *= 1.10; // Increase by 10% for sunny rooms
    else if (sunlight === 'shaded') btu *= 0.90; // Decrease by 10% for shaded (less common adjustment)

    // Adjust for people (add ~600 BTU per person over 2)
    if (peopleNum > 2) btu += (peopleNum - 2) * 600;

    // Adjust for kitchen (add ~4000 BTU if it's a kitchen)
    if (isKitchen) btu += 4000;

    setRecommendedBtu(Math.ceil(btu / 500) * 500 + " BTU/hr"); // Round up to nearest 500 or 1000 BTU
  };

  const resetForm = () => {
    setRoomArea(''); setCeilingHeightFt('8'); setSunlight('moderate'); setNumPeople('2'); setIsKitchen(false);
    setRecommendedBtu(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>AC Sizing Calculator (BTU Estimate)</AlertTitle><AlertDescription>Estimate the required BTU cooling capacity for a room air conditioner. This is a simplified calculation; consult an HVAC professional for precise sizing based on climate, insulation, window types, etc.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter room details for BTU estimation.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="roomAreaAC">Room Area</Label><Input id="roomAreaAC" type="number" value={roomArea} onChange={e=>setRoomArea(e.target.value)} placeholder="e.g., 250"/></div>
              <div><Label htmlFor="areaUnitAC">Unit</Label><Select value={areaUnit} onValueChange={(v:'sqft'|'sqm')=>setAreaUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="sqft">sq ft</SelectItem><SelectItem value="sqm">sq m</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="ceilingHeightAC">Ceiling Height (feet)</Label><Input id="ceilingHeightAC" type="number" value={ceilingHeightFt} onChange={e=>setCeilingHeightFt(e.target.value)} placeholder="Default: 8 ft"/></div>
            <div><Label htmlFor="sunlightAC">Sun Exposure</Label><Select value={sunlight} onValueChange={(v:'shaded'|'moderate'|'sunny')=>setSunlight(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="shaded">Shaded</SelectItem><SelectItem value="moderate">Moderate Sun</SelectItem><SelectItem value="sunny">Very Sunny</SelectItem></SelectContent></Select></div>
            <div><Label htmlFor="numPeopleAC">Number of People Usually in Room</Label><Input id="numPeopleAC" type="number" value={numPeople} onChange={e=>setNumPeople(e.target.value)} placeholder="e.g., 2"/></div>
            <div className="flex items-center space-x-2"><Checkbox id="isKitchenAC" checked={isKitchen} onCheckedChange={(c)=>setIsKitchen(!!c)}/><Label htmlFor="isKitchenAC">Is this a kitchen?</Label></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateAcSize}>Estimate BTU</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(recommendedBtu || error) && (
          <Card>
            <CardHeader><CardDescription>Recommended AC Size</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {recommendedBtu && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Est. Cooling Capacity Needed</p><p className="text-2xl font-bold text-primary">{recommendedBtu}</p></div><CopyButton textToCopy={recommendedBtu}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: AirConditionerSizeCalculator.tsx ======
==================================================

// ====== START OF FILE: AirQualityIndexCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8.15 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info } from "lucide-react";

// Simplified AQI breakpoints and calculation (US EPA standard for PM2.5)
// Pollutant: PM2.5 (µg/m³)
const aqiBreakpointsPM25 = [
  { Clow: 0.0, Chigh: 12.0, Ilow: 0, Ihigh: 50 },     // Good
  { Clow: 12.1, Chigh: 35.4, Ilow: 51, Ihigh: 100 },   // Moderate
  { Clow: 35.5, Chigh: 55.4, Ilow: 101, Ihigh: 150 },  // Unhealthy for Sensitive Groups
  { Clow: 55.5, Chigh: 150.4, Ilow: 151, Ihigh: 200 }, // Unhealthy
  { Clow: 150.5, Chigh: 250.4, Ilow: 201, Ihigh: 300 },// Very Unhealthy
  { Clow: 250.5, Chigh: 350.4, Ilow: 301, Ihigh: 400 },// Hazardous
  { Clow: 350.5, Chigh: 500.4, Ilow: 401, Ihigh: 500 },// Hazardous
];
// Other pollutants (O3, CO, SO2, NO2) have different breakpoints. This is a simplified example.

type PollutantType = 'pm25'; // Extend with 'o3', 'co', etc. for a full calculator

interface AqiResult {
  aqi: number;
  category: string;
  color: string;
  healthImplications: string;
}

export default function AirQualityIndexCalculator() {
  const [pollutant, setPollutant] = useState<PollutantType>('pm25');
  const [concentration, setConcentration] = useState<string>('');
  
  const [aqiResult, setAqiResult] = useState<AqiResult | null>(null);
  const [error, setError] = useState<string | null>(null);

  const getAqiCategory = (aqiValue: number): Pick<AqiResult, 'category' | 'color' | 'healthImplications'> => {
    if (aqiValue <= 50) return { category: "Good", color: "bg-green-500", healthImplications: "Air quality is considered satisfactory, and air pollution poses little or no risk." };
    if (aqiValue <= 100) return { category: "Moderate", color: "bg-yellow-400", healthImplications: "Air quality is acceptable; however, for some pollutants there may be a moderate health concern for a very small number of people who are unusually sensitive to air pollution." };
    if (aqiValue <= 150) return { category: "Unhealthy for Sensitive Groups", color: "bg-orange-500", healthImplications: "Members of sensitive groups may experience health effects. The general public is not likely to be affected." };
    if (aqiValue <= 200) return { category: "Unhealthy", color: "bg-red-500", healthImplications: "Everyone may begin to experience health effects; members of sensitive groups may experience more serious health effects." };
    if (aqiValue <= 300) return { category: "Very Unhealthy", color: "bg-purple-600 text-white", healthImplications: "Health alert: everyone may experience more serious health effects." };
    return { category: "Hazardous", color: "bg-maroon-700 text-white", healthImplications: "Health warnings of emergency conditions. The entire population is more likely to be affected." }; // Maroon isn't a default tailwind color, use a dark red or similar.
  };


  const calculateAqi = () => {
    setError(null);
    setAqiResult(null);

    const C = parseFloat(concentration); // Concentration of pollutant

    if (isNaN(C) || C < 0) {
      setError('Please enter a valid non-negative concentration value.');
      return;
    }

    let calculatedAqi: number | null = null;

    if (pollutant === 'pm25') {
      const breakpoint = aqiBreakpointsPM25.find(bp => C >= bp.Clow && C <= bp.Chigh);
      if (!breakpoint) {
        if (C > aqiBreakpointsPM25[aqiBreakpointsPM25.length - 1].Chigh) { // If concentration exceeds max breakpoint
            const lastBp = aqiBreakpointsPM25[aqiBreakpointsPM25.length - 1];
            // Extrapolate, or cap at 500. Capping is simpler.
            calculatedAqi = 500; // Or some value > 500 based on further extrapolation logic if desired
        } else {
            setError('Concentration is out of the defined PM2.5 range for direct calculation or too low.');
            return;
        }
      } else {
        const { Clow, Chigh, Ilow, Ihigh } = breakpoint;
        calculatedAqi = ((Ihigh - Ilow) / (Chigh - Clow)) * (C - Clow) + Ilow;
      }
    } else {
      setError('Calculation for selected pollutant is not yet implemented.');
      return;
    }
    
    if (calculatedAqi !== null) {
      const finalAqi = Math.round(calculatedAqi);
      const categoryInfo = getAqiCategory(finalAqi);
      setAqiResult({ aqi: finalAqi, ...categoryInfo });
    }
  };
  
  const resetForm = () => {
    setConcentration('');
    setAqiResult(null);
    setError(null);
    // setPollutant('pm25'); // Optionally reset pollutant
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate Air Quality Index (AQI) based on pollutant concentration.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="pollutantType">Pollutant Type</Label>
              <Select value={pollutant} onValueChange={(value: PollutantType) => setPollutant(value)}>
                <SelectTrigger id="pollutantType">
                  <SelectValue placeholder="Select pollutant" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="pm25">PM2.5 (Particulate Matter &lt; 2.5µm)</SelectItem>
                  {/* Add other pollutants here when implemented */}
                  {/* <SelectItem value="o3" disabled>Ozone (O₃) - Coming Soon</SelectItem> */}
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="concentration">Concentration (µg/m³ for PM2.5)</Label>
              <Input id="concentration" type="number" value={concentration} onChange={(e) => setConcentration(e.target.value)} placeholder="e.g., 25.5" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateAqi}>Calculate AQI</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(aqiResult || error) && (
          <Card>
            <CardHeader>
              <CardDescription>AQI Result</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {aqiResult && (
                <div className="space-y-3">
                  <div className={`flex justify-between items-center p-4 rounded-md ${aqiResult.color}`}>
                    <div>
                      <p className="text-sm opacity-80">{pollutant.toUpperCase()} AQI</p>
                      <p className="text-4xl font-bold">{aqiResult.aqi}</p>
                      <p className="text-lg font-semibold">{aqiResult.category}</p>
                    </div>
                    <CopyButton textToCopy={String(aqiResult.aqi)} variant="outline" className="bg-white/20 hover:bg-white/30 border-white/50 text-current" />
                  </div>
                  <Alert>
                    <Info className="h-4 w-4" />
                    <AlertTitle>Health Implications</AlertTitle>
                    <AlertDescription>{aqiResult.healthImplications}</AlertDescription>
                  </Alert>
                </div>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    This AQI calculator is based on US EPA standards for PM2.5. Other pollutants and standards may vary. This tool is for informational purposes only.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: AirQualityIndexCalculator.tsx ======
==================================================

// ====== START OF FILE: AiTrainingCostCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.59 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Brain } from "lucide-react";

export default function AiTrainingCostCalculator() {
  const [trainingHours, setTrainingHours] = useState<string>('');
  const [costPerHour, setCostPerHour] = useState<string>('');
  const [powerConsumptionWatts, setPowerConsumptionWatts] = useState<string>(''); // Optional
  const [costPerKwh, setCostPerKwh] = useState<string>(''); // Optional

  const [computeCost, setComputeCost] = useState<string | null>(null);
  const [electricityCost, setElectricityCost] = useState<string | null>(null);
  const [totalCost, setTotalCost] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateCost = () => {
    setError(null);
    setComputeCost(null);
    setElectricityCost(null);
    setTotalCost(null);

    const hours = parseFloat(trainingHours);
    const costPH = parseFloat(costPerHour);
    const powerW = parseFloat(powerConsumptionWatts) || 0;
    const costKwh = parseFloat(costPerKwh) || 0;

    if (isNaN(hours) || hours <= 0 || isNaN(costPH) || costPH < 0) {
      setError('Training hours (>0) and cost per hour (>=0) must be valid numbers.');
      return;
    }
    if ((powerConsumptionWatts && (isNaN(powerW) || powerW < 0)) || (costPerKwh && (isNaN(costKwh) || costKwh < 0))) {
        setError('Power consumption and cost per kWh must be non-negative if entered.');
        return;
    }

    const totalComputeCost = hours * costPH;
    setComputeCost(totalComputeCost.toFixed(2));
    
    let totalElecCost = 0;
    if (powerW > 0 && costKwh > 0) {
        const totalKwhUsed = (powerW / 1000) * hours;
        totalElecCost = totalKwhUsed * costKwh;
        setElectricityCost(totalElecCost.toFixed(2));
    }

    const finalTotalCost = totalComputeCost + totalElecCost;
    setTotalCost(finalTotalCost.toFixed(2));
  };

  const resetForm = () => {
    setTrainingHours('');
    setCostPerHour('');
    setPowerConsumptionWatts('');
    setCostPerKwh('');
    setComputeCost(null);
    setElectricityCost(null);
    setTotalCost(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>AI Training Cost Estimator</AlertTitle>
        <AlertDescription>
          Estimate the cost of training an AI model based on compute hours and optional electricity consumption. This is a simplified estimate and doesn't include data storage, networking, or personnel costs.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter training parameters.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="trainingHours">Training Duration (hours)</Label><Input id="trainingHours" type="number" value={trainingHours} onChange={e => setTrainingHours(e.target.value)} placeholder="e.g., 24"/></div>
            <div><Label htmlFor="costPerHour">Compute Cost per Hour ($)</Label><Input id="costPerHour" type="number" value={costPerHour} onChange={e => setCostPerHour(e.target.value)} placeholder="e.g., 1.10 (for an A100 GPU)"/></div>
            <p className="text-sm font-medium text-muted-foreground pt-2 border-t">Optional: Electricity Cost</p>
            <div><Label htmlFor="powerConsumption">GPU/System Power Consumption (Watts)</Label><Input id="powerConsumption" type="number" value={powerConsumptionWatts} onChange={e => setPowerConsumptionWatts(e.target.value)} placeholder="e.g., 400"/></div>
            <div><Label htmlFor="costPerKwh">Cost per kWh ($)</Label><Input id="costPerKwh" type="number" step="0.01" value={costPerKwh} onChange={e => setCostPerKwh(e.target.value)} placeholder="e.g., 0.15"/></div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateCost}>Estimate Cost</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(totalCost || error) && (
          <Card>
            <CardHeader><CardDescription>Cost Estimation</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {computeCost && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Compute Cost</p><p className="font-semibold">${computeCost}</p></div>)}
              {electricityCost && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Electricity Cost</p><p className="font-semibold">${electricityCost}</p></div>)}
              {totalCost && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Total Estimated Cost</p><p className="text-2xl font-bold text-primary">${totalCost}</p></div>
                  <CopyButton textToCopy={totalCost} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: AiTrainingCostCalculator.tsx ======
==================================================

// ====== START OF FILE: AlgebraCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.89 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal } from "lucide-react";

// NOTE: Building a full-fledged algebra calculator that can parse and solve
// a wide range of equations/expressions is a very complex task.
// It typically requires a math expression parser, a symbolic math engine, etc.
// This component will be a very simplified version or a placeholder.
// For this example, let's make it solve linear equations of the form ax + b = c.

export default function AlgebraCalculator() {
  const [equation, setEquation] = useState<string>(''); // e.g., "2x + 5 = 15"
  const [variable, setVariable] = useState<string>('x');
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const solveLinearEquation = () => {
    setError(null);
    setResult(null);

    // Basic parser for "ax + b = c" or "ax - b = c" or "ax = c" or "x + b = c" or "x - b = c"
    // This is a very naive parser.
    const cleanedEquation = equation.replace(/\s+/g, '');
    const parts = cleanedEquation.split('=');
    if (parts.length !== 2) {
      setError("Invalid equation format. Use format like '2x + 5 = 15'.");
      return;
    }

    const lhs = parts[0];
    const rhs = parseFloat(parts[1]);

    if (isNaN(rhs)) {
      setError("Invalid right-hand side of the equation.");
      return;
    }

    let a = 0; // coefficient of x
    let b = 0; // constant on LHS

    // Try to parse LHS: "ax+b" or "ax-b" or "x+b" or "x-b" or "ax" or "x"
    const termRegex = /([+-]?(?:\d*\.)?\d*)([a-zA-Z]?)/g;
    let match;
    let foundX = false;

    while((match = termRegex.exec(lhs)) !== null) {
        if (match[0] === '') continue; // Skip empty matches that can occur with leading +
        
        const valStr = match[1];
        const varStr = match[2];

        let numVal;
        if (valStr === '+' || valStr === '') numVal = 1;
        else if (valStr === '-') numVal = -1;
        else numVal = parseFloat(valStr);

        if (isNaN(numVal)) {
            setError(`Invalid term: ${match[0]}`);
            return;
        }

        if (varStr === variable) {
            a += numVal;
            foundX = true;
        } else if (varStr === '') { // constant term
            b += numVal;
        } else {
            setError(`Unknown variable '${varStr}'. This calculator only solves for '${variable}'.`);
            return;
        }
    }
    
    if (!foundX) {
        setError(`Variable '${variable}' not found in the left side of equation.`);
        return;
    }


    if (a === 0) {
      if (b === rhs) {
        setError("Infinite solutions (e.g., 5 = 5).");
      } else {
        setError("No solution (e.g., 5 = 10).");
      }
      return;
    }

    // Equation is ax + b = c  => ax = c - b => x = (c - b) / a
    const solution = (rhs - b) / a;
    setResult(`${variable} = ${solution.toFixed(4)}`);
  };
  
  const resetForm = () => {
    setEquation('');
    setResult(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Terminal className="h-4 w-4" />
        <AlertTitle>Simplified Algebra Calculator</AlertTitle>
        <AlertDescription>
          This calculator can solve simple linear equations in the form of <strong>ax + b = c</strong> (e.g., 2x + 5 = 15, 3x = 9, x - 4 = 10).
          For more complex algebra, specialized tools are recommended.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter a linear equation to solve for '{variable}'.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="equation">Equation</Label>
              <Input 
                id="equation" 
                type="text" 
                value={equation} 
                onChange={(e) => setEquation(e.target.value)} 
                placeholder="e.g., 2x + 5 = 15" 
              />
            </div>
            {/* Optionally, allow changing the variable to solve for
            <div>
              <Label htmlFor="variable">Variable to Solve For</Label>
              <Input id="variable" type="text" value={variable} onChange={(e) => setVariable(e.target.value)} placeholder="e.g., x" />
            </div>
            */}
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={solveLinearEquation}>Solve Equation</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(result || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Solution</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {result && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Result</p>
                    <p className="text-3xl font-bold text-primary">{result}</p>
                  </div>
                  <CopyButton textToCopy={result} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: AlgebraCalculator.tsx ======
==================================================

// ====== START OF FILE: AmortizationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 11.14 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { ScrollArea } from "@/components/ui/scroll-area";
import CopyButton from '@/components/shared/CopyButton';
import { Terminal, ListOrdered, Info, AreaChart, TrendingDown } from "lucide-react";
import {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  type ChartConfig,
} from "@/components/ui/chart"
import {
  Area,
  XAxis,
  YAxis,
  CartesianGrid,
  ResponsiveContainer,
  AreaChart as RechartsAreaChart,
} from "recharts"
import { TooltipProvider } from '@/components/ui/tooltip';


interface AmortizationEntry {
  month: number;
  payment: number;
  principal: number;
  interest: number;
  balance: number;
}

const chartConfig = {
  balance: {
    label: "Remaining Balance",
    color: "hsl(var(--primary))",
  },
  principal: {
    label: "Principal Paid",
    color: "hsl(var(--chart-2))",
  },
  interest: {
    label: "Interest Paid",
    color: "hsl(var(--destructive))",
  },
} satisfies ChartConfig

export default function AmortizationCalculator() {
  const [loanAmount, setLoanAmount] = useState<string>('');
  const [interestRate, setInterestRate] = useState<string>(''); // Annual %
  const [loanTermYears, setLoanTermYears] = useState<string>('');
  
  const [monthlyPayment, setMonthlyPayment] = useState<string | null>(null);
  const [totalInterestPaid, setTotalInterestPaid] = useState<string | null>(null);
  const [totalRepayment, setTotalRepayment] = useState<string | null>(null);
  const [schedule, setSchedule] = useState<AmortizationEntry[]>([]);
  const [chartData, setChartData] = useState<any[]>([]);
  const [error, setError] = useState<string | null>(null);

  const calculateAmortization = () => {
    setError(null);
    setMonthlyPayment(null);
    setTotalInterestPaid(null);
    setTotalRepayment(null);
    setSchedule([]);
    setChartData([]);

    const P = parseFloat(loanAmount);
    const annualRate = parseFloat(interestRate) / 100;
    const termYears = parseInt(loanTermYears);

    if (isNaN(P) || P <= 0 || isNaN(annualRate) || annualRate < 0 || isNaN(termYears) || termYears <= 0) {
      setError('Please enter valid positive numbers for loan amount, interest rate, and term (years).');
      return;
    }

    const monthlyRate = annualRate / 12;
    const numberOfPayments = termYears * 12;

    let M; // Monthly Payment
    if (monthlyRate === 0) {
        M = P / numberOfPayments;
    } else {
        M = P * (monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments)) / (Math.pow(1 + monthlyRate, numberOfPayments) - 1);
    }
    
    if (isNaN(M) || !isFinite(M)) {
        setError('Could not calculate monthly payment. Check inputs.');
        return;
    }
    setMonthlyPayment(M.toFixed(2));

    let balance = P;
    let currentTotalInterest = 0;
    let currentTotalPrincipal = 0;
    const newSchedule: AmortizationEntry[] = [];
    const newChartData = [];

    for (let i = 1; i <= numberOfPayments; i++) {
      const interestPayment = balance * monthlyRate;
      const principalPayment = M - interestPayment;
      balance -= principalPayment;
      currentTotalInterest += interestPayment;
      currentTotalPrincipal += principalPayment;
      
      const entry = {
        month: i,
        payment: M,
        principal: principalPayment,
        interest: interestPayment,
        balance: balance < 0.005 ? 0 : balance,
      };
      newSchedule.push(entry);

      // Add data point for the chart, e.g., every year
      if (i % 12 === 0 || i === numberOfPayments) {
        newChartData.push({
          year: Math.ceil(i/12),
          balance: parseFloat(entry.balance.toFixed(2)),
          principal: parseFloat(currentTotalPrincipal.toFixed(2)),
          interest: parseFloat(currentTotalInterest.toFixed(2)),
        });
      }

      if (balance <= 0.005) break; 
    }
    
    setSchedule(newSchedule);
    setChartData(newChartData);
    setTotalInterestPaid(currentTotalInterest.toFixed(2));
    const finalTotalRepayment = P + currentTotalInterest;
    setTotalRepayment(finalTotalRepayment.toFixed(2));
  };
  
  const resetForm = () => {
    setLoanAmount(''); setInterestRate(''); setLoanTermYears('');
    setMonthlyPayment(null); setTotalInterestPaid(null); setTotalRepayment(null);
    setSchedule([]); setChartData([]); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Mortgage Amortization Schedule</AlertTitle><AlertDescription>See how your mortgage is paid down over time, with a breakdown of principal and interest payments.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Enter Mortgage Details</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="loanAmountMA">Loan Amount ($)</Label><Input id="loanAmountMA" type="number" value={loanAmount} onChange={(e) => setLoanAmount(e.target.value)} placeholder="e.g., 250000" /></div>
            <div><Label htmlFor="interestRateMA">Annual Interest Rate (%)</Label><Input id="interestRateMA" type="number" value={interestRate} onChange={(e) => setInterestRate(e.target.value)} placeholder="e.g., 6.5" /></div>
            <div><Label htmlFor="loanTermYearsMA">Loan Term (Years)</Label><Input id="loanTermYearsMA" type="number" value={loanTermYears} onChange={(e) => setLoanTermYears(e.target.value)} placeholder="e.g., 30" /></div>
          </CardContent>
          <CardFooter className="flex flex-col sm:flex-row justify-between gap-2"><Button onClick={calculateAmortization} className="w-full sm:w-auto">Generate Schedule</Button><Button variant="outline" onClick={resetForm} className="w-full sm:w-auto">Reset</Button></CardFooter>
        </Card>

        <div className="lg:col-span-2 space-y-6">
          {(monthlyPayment || totalInterestPaid || totalRepayment || error) && (
            <Card>
                <CardHeader><CardTitle className="font-headline">Loan Summary</CardTitle></CardHeader>
                <CardContent>
                    {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
                    <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                        <div className="p-3 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Monthly Payment (P&I)</p><div className="flex justify-between items-center"><p className="text-xl font-semibold">${monthlyPayment}</p>{monthlyPayment && <CopyButton textToCopy={monthlyPayment} size="icon" variant="ghost"/>}</div></div>
                        <div className="p-3 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Principal Paid</p><p className="text-xl font-semibold">${parseFloat(loanAmount).toFixed(2)}</p></div>
                        <div className="p-3 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Interest Paid</p><div className="flex justify-between items-center"><p className="text-xl font-semibold">${totalInterestPaid}</p>{totalInterestPaid && <CopyButton textToCopy={totalInterestPaid} size="icon" variant="ghost"/>}</div></div>
                    </div>
                </CardContent>
            </Card>
          )}

          {chartData.length > 0 && (
            <TooltipProvider>
              <Card>
                <CardHeader>
                  <CardTitle className="font-headline">Loan Balance Over Time</CardTitle>
                  <CardDescription>Visual breakdown of your loan balance, principal, and interest paid over the years.</CardDescription>
                </CardHeader>
                <CardContent>
                  <ChartContainer config={chartConfig} className="w-full h-[250px]">
                    <RechartsAreaChart data={chartData} margin={{ left: -20, right: 20 }}>
                      <defs>
                        <linearGradient id="fillBalance" x1="0" y1="0" x2="0" y2="1">
                          <stop offset="5%" stopColor="var(--color-balance)" stopOpacity={0.8}/>
                          <stop offset="95%" stopColor="var(--color-balance)" stopOpacity={0.1}/>
                        </linearGradient>
                         <linearGradient id="fillPrincipal" x1="0" y1="0" x2="0" y2="1">
                          <stop offset="5%" stopColor="var(--color-principal)" stopOpacity={0.8}/>
                          <stop offset="95%" stopColor="var(--color-principal)" stopOpacity={0.1}/>
                        </linearGradient>
                      </defs>
                      <CartesianGrid vertical={false} />
                      <XAxis dataKey="year" tickLine={false} axisLine={false} tickMargin={8} tickFormatter={(value) => `Year ${value}`} />
                      <YAxis tickLine={false} axisLine={false} tickMargin={8} tickFormatter={(value) => `$${value/1000}k`} />
                      <ChartTooltip content={<ChartTooltipContent indicator="dot" />} />
                      <Area type="monotone" dataKey="balance" stackId="1" stroke="var(--color-balance)" fill="url(#fillBalance)" strokeWidth={2}/>
                      <Area type="monotone" dataKey="principal" stackId="2" stroke="var(--color-principal)" fill="url(#fillPrincipal)" strokeWidth={2}/>
                    </RechartsAreaChart>
                  </ChartContainer>
                </CardContent>
              </Card>
            </TooltipProvider>
          )}

        </div>
      </div>
      {schedule.length > 0 && (
        <Card>
          <CardHeader>
            <div className="flex items-center gap-2"><ListOrdered className="h-5 w-5 text-primary"/><h3 className="font-semibold">Full Amortization Schedule</h3></div>
          </CardHeader>
          <CardContent>
            <ScrollArea className="h-[400px] w-full border rounded-md">
              <Table>
                <TableHeader className="sticky top-0 bg-muted/80 backdrop-blur-sm"><TableRow><TableHead className="w-[80px]">Month</TableHead><TableHead>Payment</TableHead><TableHead>Principal</TableHead><TableHead>Interest</TableHead><TableHead className="text-right">Balance</TableHead></TableRow></TableHeader>
                <TableBody>
                  {schedule.map((entry) => (
                    <TableRow key={entry.month}>
                      <TableCell>{entry.month}</TableCell>
                      <TableCell>${entry.payment.toFixed(2)}</TableCell>
                      <TableCell>${entry.principal.toFixed(2)}</TableCell>
                      <TableCell>${entry.interest.toFixed(2)}</TableCell>
                      <TableCell className="text-right">${entry.balance.toFixed(2)}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </ScrollArea>
          </CardContent>
        </Card>
      )}
    </div>
  );
}


// ====== END OF FILE: AmortizationCalculator.tsx ======
==================================================

// ====== START OF FILE: AnnuityCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8.53 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal } from "lucide-react";

export default function AnnuityCalculator() {
  const [principal, setPrincipal] = useState<string>('');
  const [rate, setRate] = useState<string>('');
  const [term, setTerm] = useState<string>(''); // years
  const [contribution, setContribution] = useState<string>('0'); // periodic contribution
  const [contributionFrequency, setContributionFrequency] = useState<string>('12'); // monthly
  const [compoundingFrequency, setCompoundingFrequency] = useState<string>('12'); // monthly
  
  const [futureValue, setFutureValue] = useState<string | null>(null);
  const [totalContributions, setTotalContributions] = useState<string | null>(null);
  const [totalInterest, setTotalInterest] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateAnnuity = () => {
    setError(null);
    setFutureValue(null);
    setTotalContributions(null);
    setTotalInterest(null);

    const P = parseFloat(principal);
    const r = parseFloat(rate) / 100; // annual rate
    const t = parseFloat(term); // years
    const PMT = parseFloat(contribution);
    const n_contrib = parseInt(contributionFrequency); // contribution frequency per year
    const n_compound = parseInt(compoundingFrequency); // compounding frequency per year

    if (isNaN(P) || isNaN(r) || isNaN(t) || isNaN(PMT) || isNaN(n_contrib) || isNaN(n_compound) || P < 0 || r < 0 || t <= 0 || PMT < 0 || n_contrib <=0 || n_compound <=0) {
      setError("Please enter valid positive numbers for principal, rate, term, and frequencies. Contribution can be zero.");
      return;
    }

    // Simplified Future Value of an Annuity Due (contributions at start of period) for regular contributions
    // FV = P(1 + r/n_compound)^(n_compound*t) + PMT * [((1 + r/n_compound)^(n_compound*t) - 1) / (r/n_compound)] * (1 + r/n_compound)
    // This formula assumes compounding and contribution frequencies are aligned or handled simply.
    // For simplicity, let's assume periodic rate and periods align with compounding.
    // A truly accurate diverse-frequency annuity calculator is much more complex.

    // Simplified: Calculate future value of initial principal
    const fvPrincipal = P * Math.pow((1 + r / n_compound), (n_compound * t));

    // Simplified: Calculate future value of series of contributions (ordinary annuity)
    let fvContributions = 0;
    if (PMT > 0 && r > 0) {
      // Assuming contributions happen at the same frequency as compounding for this simplified version
      const numTotalContributions = t * n_contrib;
      const effectiveRatePerContributionPeriod = r / n_contrib;
      fvContributions = PMT * ((Math.pow(1 + effectiveRatePerContributionPeriod, numTotalContributions) - 1) / effectiveRatePerContributionPeriod);
    } else if (PMT > 0 && r === 0) {
      fvContributions = PMT * t * n_contrib;
    }


    const totalFV = fvPrincipal + fvContributions;
    const calculatedTotalContributions = P + (PMT * t * n_contrib);
    const calculatedTotalInterest = totalFV - calculatedTotalContributions;

    setFutureValue(totalFV.toFixed(2));
    setTotalContributions(calculatedTotalContributions.toFixed(2));
    setTotalInterest(calculatedTotalInterest.toFixed(2));
  };
  
  const resetForm = () => {
    setPrincipal('');
    setRate('');
    setTerm('');
    setContribution('0');
    setFutureValue(null);
    setTotalContributions(null);
    setTotalInterest(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate the future value of an annuity (e.g., savings, investment).</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="principal">Initial Principal ($)</Label>
              <Input id="principal" type="number" value={principal} onChange={(e) => setPrincipal(e.target.value)} placeholder="e.g., 1000" />
            </div>
            <div>
              <Label htmlFor="rate">Annual Interest Rate (%)</Label>
              <Input id="rate" type="number" value={rate} onChange={(e) => setRate(e.target.value)} placeholder="e.g., 5" />
            </div>
            <div>
              <Label htmlFor="term">Term (Years)</Label>
              <Input id="term" type="number" value={term} onChange={(e) => setTerm(e.target.value)} placeholder="e.g., 10" />
            </div>
             <div>
              <Label htmlFor="contribution">Periodic Contribution ($)</Label>
              <Input id="contribution" type="number" value={contribution} onChange={(e) => setContribution(e.target.value)} placeholder="e.g., 100 (optional)" />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="contributionFrequency">Contribution Frequency</Label>
                <Select value={contributionFrequency} onValueChange={setContributionFrequency}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="12">Monthly</SelectItem>
                    <SelectItem value="4">Quarterly</SelectItem>
                    <SelectItem value="1">Annually</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="compoundingFrequency">Compounding Frequency</Label>
                <Select value={compoundingFrequency} onValueChange={setCompoundingFrequency}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="12">Monthly</SelectItem>
                    <SelectItem value="4">Quarterly</SelectItem>
                    <SelectItem value="1">Annually</SelectItem>
                    <SelectItem value="365">Daily</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateAnnuity}>Calculate</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(futureValue !== null || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Calculation Result</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {futureValue !== null && (
                <>
                  <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                    <div>
                      <p className="text-sm text-muted-foreground">Future Value</p>
                      <p className="text-3xl font-bold text-primary">${futureValue}</p>
                    </div>
                    <CopyButton textToCopy={futureValue} />
                  </div>
                  <div className="p-3 bg-muted rounded-md">
                    <p className="text-sm text-muted-foreground">Total Contributions</p>
                    <p className="text-xl font-semibold">${totalContributions}</p>
                  </div>
                  <div className="p-3 bg-muted rounded-md">
                    <p className="text-sm text-muted-foreground">Total Interest Earned</p>
                    <p className="text-xl font-semibold">${totalInterest}</p>
                  </div>
                </>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    This is a simplified annuity calculation. For precise financial planning, consult a professional.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: AnnuityCalculator.tsx ======
==================================================

// ====== START OF FILE: AnnuityPayoutCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.46 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal } from "lucide-react";

export default function AnnuityPayoutCalculator() {
  const [principal, setPrincipal] = useState<string>(''); // Current value of annuity
  const [rate, setRate] = useState<string>(''); // Annual interest rate
  const [payoutTerm, setPayoutTerm] = useState<string>(''); // Years for payout
  const [payoutFrequency, setPayoutFrequency] = useState<string>('12'); // Payouts per year

  const [periodicPayout, setPeriodicPayout] = useState<string | null>(null);
  const [totalPayout, setTotalPayout] = useState<string | null>(null);
  const [totalInterestEarnedDuringPayout, setTotalInterestEarnedDuringPayout] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePayout = () => {
    setError(null);
    setPeriodicPayout(null);
    setTotalPayout(null);
    setTotalInterestEarnedDuringPayout(null);

    const P = parseFloat(principal);
    const r_annual = parseFloat(rate) / 100;
    const t_years = parseFloat(payoutTerm);
    const n_freq = parseInt(payoutFrequency);

    if (isNaN(P) || P <= 0 || isNaN(r_annual) || r_annual < 0 || isNaN(t_years) || t_years <= 0 || isNaN(n_freq) || n_freq <= 0) {
      setError("Please enter valid positive numbers for all fields.");
      return;
    }

    const r_periodic = r_annual / n_freq;
    const N_total_payments = t_years * n_freq;

    let PMT;
    if (r_periodic === 0) { // 0% interest rate
        PMT = P / N_total_payments;
    } else {
        PMT = P * (r_periodic * Math.pow(1 + r_periodic, N_total_payments)) / (Math.pow(1 + r_periodic, N_total_payments) - 1);
    }
    

    if (isNaN(PMT) || !isFinite(PMT)) {
        setError("Could not calculate payout. Check inputs, especially if rate is very low or term very long.");
        return;
    }
    
    const calculatedTotalPayout = PMT * N_total_payments;
    const calculatedTotalInterest = calculatedTotalPayout - P;

    setPeriodicPayout(PMT.toFixed(2));
    setTotalPayout(calculatedTotalPayout.toFixed(2));
    setTotalInterestEarnedDuringPayout(calculatedTotalInterest.toFixed(2));
  };

  const resetForm = () => {
    setPrincipal('');
    setRate('');
    setPayoutTerm('');
    setPayoutFrequency('12');
    setPeriodicPayout(null);
    setTotalPayout(null);
    setTotalInterestEarnedDuringPayout(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate the periodic payout from an annuity.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="principal">Annuity Principal ($)</Label>
              <Input id="principal" type="number" value={principal} onChange={(e) => setPrincipal(e.target.value)} placeholder="e.g., 100000" />
            </div>
            <div>
              <Label htmlFor="rate">Annual Interest Rate (%)</Label>
              <Input id="rate" type="number" value={rate} onChange={(e) => setRate(e.target.value)} placeholder="e.g., 4" />
            </div>
            <div>
              <Label htmlFor="payoutTerm">Payout Term (Years)</Label>
              <Input id="payoutTerm" type="number" value={payoutTerm} onChange={(e) => setPayoutTerm(e.target.value)} placeholder="e.g., 20" />
            </div>
            <div>
              <Label htmlFor="payoutFrequency">Payout Frequency</Label>
              <Select value={payoutFrequency} onValueChange={setPayoutFrequency}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="12">Monthly</SelectItem>
                  <SelectItem value="4">Quarterly</SelectItem>
                  <SelectItem value="1">Annually</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculatePayout}>Calculate Payout</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(periodicPayout !== null || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Calculation Result</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {periodicPayout !== null && (
                <>
                  <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                    <div>
                      <p className="text-sm text-muted-foreground">Periodic Payout</p>
                      <p className="text-3xl font-bold text-primary">${periodicPayout}</p>
                    </div>
                    <CopyButton textToCopy={periodicPayout} />
                  </div>
                   <div className="p-3 bg-muted rounded-md">
                    <p className="text-sm text-muted-foreground">Total Paid Out</p>
                    <p className="text-xl font-semibold">${totalPayout}</p>
                  </div>
                  <div className="p-3 bg-muted rounded-md">
                    <p className="text-sm text-muted-foreground">Total Interest (during payout)</p>
                    <p className="text-xl font-semibold">${totalInterestEarnedDuringPayout}</p>
                  </div>
                </>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    This calculator estimates annuity payouts. Consult a financial advisor for personal advice.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: AnnuityPayoutCalculator.tsx ======
==================================================

// ====== START OF FILE: AnorexicBMICalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.74 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, AlertTriangle } from "lucide-react";

interface BmiResult {
  bmi: number;
  category: string;
  color: string;
}

export default function AnorexicBMICalculator() {
  const [height, setHeight] = useState<string>('');
  const [weight, setWeight] = useState<string>('');
  const [heightUnit, setHeightUnit] = useState<'cm' | 'in'>('cm');
  const [weightUnit, setWeightUnit] = useState<'kg' | 'lb'>('kg');
  
  const [bmiResult, setBmiResult] = useState<BmiResult | null>(null);
  const [error, setError] = useState<string | null>(null);

  const getBmiCategory = (bmiValue: number): Pick<BmiResult, 'category' | 'color'> => {
    // Standard BMI categories
    if (bmiValue < 16) return { category: "Severe Thinness", color: "text-red-600" };
    if (bmiValue < 17) return { category: "Moderate Thinness", color: "text-orange-600" };
    if (bmiValue < 18.5) return { category: "Mild Thinness", color: "text-yellow-600" };
    if (bmiValue < 25) return { category: "Normal", color: "text-green-600" };
    if (bmiValue < 30) return { category: "Overweight", color: "text-yellow-600" };
    if (bmiValue < 35) return { category: "Obese Class I", color: "text-orange-600" };
    if (bmiValue < 40) return { category: "Obese Class II", color: "text-red-600" };
    return { category: "Obese Class III (Morbidly Obese)", color: "text-red-700" };
  };

  const calculateBmi = () => {
    setError(null);
    setBmiResult(null);

    let h = parseFloat(height);
    let w = parseFloat(weight);

    if (isNaN(h) || h <= 0 || isNaN(w) || w <= 0) {
      setError('Please enter valid positive numbers for height and weight.');
      return;
    }

    // Convert to metric units (meters and kg)
    if (heightUnit === 'in') h = h * 0.0254; // inches to meters
    else h = h / 100; // cm to meters

    if (weightUnit === 'lb') w = w * 0.453592; // pounds to kg

    if (h === 0) {
        setError('Height cannot be zero.');
        return;
    }

    const bmiValue = w / (h * h);
    const categoryInfo = getBmiCategory(bmiValue);
    setBmiResult({ bmi: parseFloat(bmiValue.toFixed(1)), ...categoryInfo });
  };
  
  const resetForm = () => {
    setHeight('');
    setWeight('');
    setBmiResult(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <AlertTriangle className="h-4 w-4" />
        <AlertTitle className="font-semibold">Important Medical Disclaimer</AlertTitle>
        <AlertDescription>
          This calculator provides a Body Mass Index (BMI) value based on standard formulas.
          BMI is a general screening tool and <strong className="font-semibold">does not diagnose body fatness, eating disorders like anorexia nervosa, or overall health.</strong>
          Anorexia nervosa is a serious mental illness with severe health consequences, diagnosed by qualified medical professionals based on comprehensive criteria, not just BMI.
          If you have concerns about your weight, eating habits, or health, please consult a doctor or a qualified healthcare provider. Do not use this tool for self-diagnosis or to guide treatment.
        </AlertDescription>
      </Alert>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate Body Mass Index (BMI). Note the disclaimer above.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="height">Height</Label>
                <Input id="height" type="number" value={height} onChange={(e) => setHeight(e.target.value)} placeholder="e.g., 170" />
              </div>
              <div>
                <Label htmlFor="heightUnit">Unit</Label>
                <Select value={heightUnit} onValueChange={(value: 'cm' | 'in') => setHeightUnit(value)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="cm">cm</SelectItem>
                    <SelectItem value="in">inches</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="weight">Weight</Label>
                <Input id="weight" type="number" value={weight} onChange={(e) => setWeight(e.target.value)} placeholder="e.g., 65" />
              </div>
              <div>
                <Label htmlFor="weightUnit">Unit</Label>
                 <Select value={weightUnit} onValueChange={(value: 'kg' | 'lb') => setWeightUnit(value)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="kg">kg</SelectItem>
                    <SelectItem value="lb">pounds</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateBmi}>Calculate BMI</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(bmiResult || error) && (
          <Card>
            <CardHeader>
              <CardDescription>BMI Result</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {bmiResult && (
                <div className="space-y-3">
                  <div className={`flex justify-between items-center p-4 rounded-md bg-opacity-10 ${bmiResult.category === 'Normal' ? 'bg-green-500/10' : bmiResult.category.includes('Thinness') ? 'bg-yellow-500/10' : 'bg-red-500/10'}`}>
                    <div>
                      <p className="text-sm text-muted-foreground">Your BMI</p>
                      <p className={`text-4xl font-bold ${bmiResult.color}`}>{bmiResult.bmi}</p>
                      <p className={`text-lg font-semibold ${bmiResult.color}`}>{bmiResult.category}</p>
                    </div>
                    <CopyButton textToCopy={String(bmiResult.bmi)} variant="ghost" />
                  </div>
                   <Alert>
                    <Info className="h-4 w-4" />
                    <AlertTitle>BMI Categories (WHO Standard)</AlertTitle>
                    <AlertDescription>
                        Below 18.5: Underweight<br/>
                        18.5 – 24.9: Normal weight<br/>
                        25.0 – 29.9: Overweight<br/>
                        30.0 and above: Obese
                    </AlertDescription>
                  </Alert>
                </div>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    BMI is a general indicator. Consult a healthcare professional for personalized health advice.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: AnorexicBMICalculator.tsx ======
==================================================

// ====== START OF FILE: AprCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 9.14 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal } from "lucide-react";

export default function AprCalculator() {
  const [loanAmount, setLoanAmount] = useState<string>('');
  const [interestRate, setInterestRate] = useState<string>('');
  const [loanTerm, setLoanTerm] = useState<string>(''); // In years
  const [fees, setFees] = useState<string>('0');
  const [apr, setApr] = useState<string | null>(null);
  const [monthlyPayment, setMonthlyPayment] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateApr = () => {
    setError(null);
    setApr(null);
    setMonthlyPayment(null);

    const P = parseFloat(loanAmount); // Principal loan amount
    const r_nominal = parseFloat(interestRate) / 100; // Nominal annual interest rate
    const t = parseFloat(loanTerm); // Loan term in years
    const F = parseFloat(fees); // Total fees

    if (isNaN(P) || P <= 0 || isNaN(r_nominal) || r_nominal < 0 || isNaN(t) || t <= 0 || isNaN(F) || F < 0) {
      setError('Please enter valid positive numbers for all fields. Fees can be zero.');
      return;
    }

    const n = 12; // Number of payments per year
    const N = t * n; // Total number of payments

    // Calculate monthly payment without fees (for initial estimation)
    // M = P * [i(1+i)^N] / [(1+i)^N-1] where i = r_nominal / n
    const i_monthly_nominal = r_nominal / n;
    let M_no_fees;
    if (i_monthly_nominal === 0) { // Edge case for 0% interest
        M_no_fees = P / N;
    } else {
        M_no_fees = P * (i_monthly_nominal * Math.pow(1 + i_monthly_nominal, N)) / (Math.pow(1 + i_monthly_nominal, N) - 1);
    }
    setMonthlyPayment(M_no_fees.toFixed(2));
    
    // APR calculation is complex as it's the rate that makes PV of payments equal to (Loan Amount - Fees)
    // This often requires an iterative method (like Newton-Raphson) or financial function.
    // For simplicity, we'll use an approximation or focus on providing the nominal rate if fees are zero.
    // A true APR calculation involves finding the rate `i_apr` such that:
    // (P - F) = M_no_fees * [1 - (1 + i_apr/n)^-N] / (i_apr/n)
    // This is hard to solve directly for i_apr.

    // Simplified APR: if fees are 0, APR is the nominal rate.
    // If fees are involved, the APR will be higher.
    // For a more accurate frontend calculation, a library or a more complex iterative function is needed.
    // Here's a common approximation:
    // APR ≈ ( (Fees / Loan Amount) / Loan Term_years + Nominal Rate_annual ) * 100
    // This is a very rough estimate. Let's try to get closer.

    // Using an iterative approach (bisection method) to find the APR
    // We are looking for a monthly rate `i_apr_monthly` such that P - F = sum(M / (1 + i_apr_monthly)^k) for k=1 to N
    // where M is the monthly payment calculated with the nominal rate.
    const actualLoanAmount = P - F;
    if (actualLoanAmount <= 0) {
        setError("Loan amount must be greater than total fees.");
        return;
    }

    let lowRate = 0;
    let highRate = 1; // Assume APR won't exceed 100% monthly
    let midRate;
    let calculatedPv;
    let iterations = 0;

    // M (monthly payment) should be based on loan amount P not P-F for calculation to find APR of P-F
    const M_for_apr_calc = M_no_fees;


    // If M_for_apr_calc * N is less than actualLoanAmount, it means negative effective interest, APR could be 0 or negative if fees are high.
    if (M_for_apr_calc * N < actualLoanAmount) {
      // This scenario suggests the fees are extremely high or interest is negative.
      // For simplicity, if APR is effectively negative due to fees, we can cap it at 0 or show an error.
      // Or, it might mean the nominal rate itself leads to paying back less than P-F.
      // This gets complex. Let's assume positive APRs for now.
      // If nominal interest is 0 and there are fees, APR is > 0
      // If nominal interest > 0 and fees are 0, APR = nominal.
    }


    while (highRate - lowRate > 0.000001 && iterations < 100) { // 0.0001% precision for monthly rate
        midRate = (lowRate + highRate) / 2;
        if (midRate === 0) { // Avoid division by zero if midRate is 0
             calculatedPv = M_for_apr_calc * N;
        } else {
            calculatedPv = M_for_apr_calc * (1 - Math.pow(1 + midRate, -N)) / midRate;
        }

        if (calculatedPv > actualLoanAmount) {
            lowRate = midRate;
        } else {
            highRate = midRate;
        }
        iterations++;
    }
    
    const aprMonthly = (lowRate + highRate) / 2;
    const finalApr = aprMonthly * n * 100;

    if (finalApr < 0 || isNaN(finalApr) || !isFinite(finalApr)) {
      // If fees are very high, APR can be strange. If fees are 0, APR should be nominal rate.
      if (F === 0) {
        setApr((r_nominal * 100).toFixed(2));
      } else {
        // A simple estimation if iterative method fails or gives weird results
        const estimatedApr = (r_nominal + (F / P) / t) * 100;
        setApr(estimatedApr.toFixed(2));
         setError("Could not calculate precise APR with given values. Showing an estimate. Ensure loan amount is greater than fees.");
      }
    } else {
       setApr(finalApr.toFixed(2));
    }


  };

  const resetForm = () => {
    setLoanAmount('');
    setInterestRate('');
    setLoanTerm('');
    setFees('0');
    setApr(null);
    setMonthlyPayment(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your loan details to calculate the APR.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="loanAmount">Loan Amount ($)</Label>
              <Input id="loanAmount" type="number" value={loanAmount} onChange={(e) => setLoanAmount(e.target.value)} placeholder="e.g., 10000" />
            </div>
            <div>
              <Label htmlFor="interestRate">Nominal Interest Rate (%)</Label>
              <Input id="interestRate" type="number" value={interestRate} onChange={(e) => setInterestRate(e.target.value)} placeholder="e.g., 5" />
            </div>
            <div>
              <Label htmlFor="loanTerm">Loan Term (Years)</Label>
              <Input id="loanTerm" type="number" value={loanTerm} onChange={(e) => setLoanTerm(e.target.value)} placeholder="e.g., 5" />
            </div>
            <div>
              <Label htmlFor="fees">Loan Fees ($)</Label>
              <Input id="fees" type="number" value={fees} onChange={(e) => setFees(e.target.value)} placeholder="e.g., 200" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateApr}>Calculate APR</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(apr !== null || monthlyPayment !== null || error ) && (
          <Card>
            <CardHeader>
              <CardDescription>Calculation Results</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {monthlyPayment !== null && (
                <div className="flex justify-between items-center p-3 bg-muted rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Estimated Monthly Payment</p>
                    <p className="text-2xl font-semibold">${monthlyPayment}</p>
                  </div>
                  <CopyButton textToCopy={monthlyPayment} />
                </div>
              )}
              {apr !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Annual Percentage Rate (APR)</p>
                    <p className="text-3xl font-bold text-primary">{apr}%</p>
                  </div>
                  <CopyButton textToCopy={apr} />
                </div>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    The APR is the annual cost of a loan to a borrower — including fees. Like an interest rate, the APR is expressed as a percentage. Unlike an interest rate, however, it includes other charges or fees such as mortgage insurance, most closing costs, discount points and loan origination fees.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: AprCalculator.tsx ======
==================================================

// ====== START OF FILE: AreaCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.45 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal } from "lucide-react";

type Shape = 'rectangle' | 'circle' | 'triangle' | 'square';

export default function AreaCalculator() {
  const [shape, setShape] = useState<Shape>('rectangle');
  const [dimension1, setDimension1] = useState<string>(''); // Length for rectangle/square, Radius for circle, Base for triangle
  const [dimension2, setDimension2] = useState<string>(''); // Width for rectangle, Height for triangle
  
  const [area, setArea] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateArea = () => {
    setError(null);
    setArea(null);

    const d1 = parseFloat(dimension1);
    const d2 = parseFloat(dimension2);

    let calculatedArea: number | null = null;

    try {
      switch (shape) {
        case 'rectangle':
          if (isNaN(d1) || d1 <= 0 || isNaN(d2) || d2 <= 0) throw new Error("Please enter valid positive length and width.");
          calculatedArea = d1 * d2;
          break;
        case 'square':
          if (isNaN(d1) || d1 <= 0) throw new Error("Please enter a valid positive side length.");
          calculatedArea = d1 * d1;
          break;
        case 'circle':
          if (isNaN(d1) || d1 <= 0) throw new Error("Please enter a valid positive radius.");
          calculatedArea = Math.PI * d1 * d1;
          break;
        case 'triangle':
          if (isNaN(d1) || d1 <= 0 || isNaN(d2) || d2 <= 0) throw new Error("Please enter valid positive base and height.");
          calculatedArea = 0.5 * d1 * d2;
          break;
        default:
          throw new Error("Invalid shape selected.");
      }
      if (calculatedArea !== null) {
        setArea(calculatedArea.toFixed(4));
      }
    } catch (e: any) {
      setError(e.message);
    }
  };
  
  const resetForm = () => {
    setDimension1('');
    setDimension2('');
    setArea(null);
    setError(null);
  };

  const renderInputs = () => {
    switch (shape) {
      case 'rectangle':
        return (
          <>
            <div>
              <Label htmlFor="length">Length</Label>
              <Input id="length" type="number" value={dimension1} onChange={(e) => setDimension1(e.target.value)} placeholder="e.g., 10" />
            </div>
            <div>
              <Label htmlFor="width">Width</Label>
              <Input id="width" type="number" value={dimension2} onChange={(e) => setDimension2(e.target.value)} placeholder="e.g., 5" />
            </div>
          </>
        );
      case 'square':
        return (
          <div>
            <Label htmlFor="side">Side Length</Label>
            <Input id="side" type="number" value={dimension1} onChange={(e) => setDimension1(e.target.value)} placeholder="e.g., 7" />
          </div>
        );
      case 'circle':
        return (
          <div>
            <Label htmlFor="radius">Radius</Label>
            <Input id="radius" type="number" value={dimension1} onChange={(e) => setDimension1(e.target.value)} placeholder="e.g., 3" />
          </div>
        );
      case 'triangle':
        return (
          <>
            <div>
              <Label htmlFor="base">Base</Label>
              <Input id="base" type="number" value={dimension1} onChange={(e) => setDimension1(e.target.value)} placeholder="e.g., 6" />
            </div>
            <div>
              <Label htmlFor="height">Height</Label>
              <Input id="height" type="number" value={dimension2} onChange={(e) => setDimension2(e.target.value)} placeholder="e.g., 4" />
            </div>
          </>
        );
      default:
        return null;
    }
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate the area of common geometric shapes.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="shape">Select Shape</Label>
              <Select value={shape} onValueChange={(value: Shape) => { setShape(value); resetForm(); }}>
                <SelectTrigger id="shape"><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="rectangle">Rectangle</SelectItem>
                  <SelectItem value="square">Square</SelectItem>
                  <SelectItem value="circle">Circle</SelectItem>
                  <SelectItem value="triangle">Triangle</SelectItem>
                </SelectContent>
              </Select>
            </div>
            {renderInputs()}
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateArea}>Calculate Area</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(area !== null || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Calculated Area</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {area !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Area</p>
                    <p className="text-3xl font-bold text-primary">{area} <span className="text-lg">units²</span></p>
                  </div>
                  <CopyButton textToCopy={area} />
                </div>
              )}
            </CardContent>
            <CardFooter>
              <p className="text-xs text-muted-foreground">Ensure all dimensions are in the same unit for accurate results.</p>
            </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: AreaCalculator.tsx ======
==================================================

// ====== START OF FILE: ArmyBodyFatCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.89 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, User } from "lucide-react";

export default function ArmyBodyFatCalculator() {
  const [gender, setGender] = useState<'male' | 'female'>('male');
  const [unitSystem, setUnitSystem] = useState<'imperial' | 'metric'>('imperial');
  const [heightVal, setHeightVal] = useState<string>('');
  const [neckVal, setNeckVal] = useState<string>('');
  const [waistVal, setWaistVal] = useState<string>('');
  const [hipVal, setHipVal] = useState<string>(''); // Female only
  
  const [bodyFatPercentage, setBodyFatPercentage] = useState<string | null>(null);
  const [fatMass, setFatMass] = useState<string | null>(null);
  const [leanMass, setLeanMass] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateBodyFat = () => {
    setError(null);
    setBodyFatPercentage(null);
    setFatMass(null);
    setLeanMass(null);

    let h = parseFloat(heightVal);
    let neck = parseFloat(neckVal);
    let waist = parseFloat(waistVal);
    let hip = parseFloat(hipVal);

    if(unitSystem === 'metric') {
      h *= 0.393701; // cm to inches
      neck *= 0.393701;
      waist *= 0.393701;
      if (gender === 'female') hip *= 0.393701;
    }

    if (isNaN(h) || h <= 0 || isNaN(neck) || neck <= 0 || isNaN(waist) || waist <= 0) {
      setError("Height, neck, and waist measurements must be positive numbers.");
      return;
    }
    if (gender === 'female' && (isNaN(hip) || hip <= 0)) {
      setError("Hip measurement is required for females.");
      return;
    }
    if (gender === 'female' && waist + hip <= neck) {
        setError("For females, the sum of waist and hip must be greater than the neck measurement.");
        return;
    }
     if (gender === 'male' && waist <= neck) {
        setError("For males, the waist measurement must be greater than the neck measurement.");
        return;
    }


    let bfp: number;
    if (gender === 'male') {
      // Formula for men: %BF = 86.010 * log10(waist - neck) - 70.041 * log10(height) + 36.76
      bfp = 86.010 * Math.log10(waist - neck) - 70.041 * Math.log10(h) + 36.76;
    } else { // female
      // Formula for women: %BF = 163.205 * log10(waist + hip - neck) - 97.684 * log10(height) - 78.387
      bfp = 163.205 * Math.log10(waist + hip - neck) - 97.684 * Math.log10(h) - 78.387;
    }

    if (isNaN(bfp) || !isFinite(bfp) || bfp < 0) {
        setError("Could not calculate body fat with the provided measurements. Please ensure they are accurate.");
        return;
    }
    
    setBodyFatPercentage(bfp.toFixed(1));
  };
  
  const resetForm = () => {
    setHeightVal(''); setNeckVal(''); setWaistVal(''); setHipVal('');
    setBodyFatPercentage(null); setFatMass(null); setLeanMass(null); setError(null);
  };

  return (
    <div className="space-y-6">
       <Alert>
          <Info className="h-4 w-4" />
          <AlertTitle>U.S. Army Body Fat Calculator (AR 600-9)</AlertTitle>
          <AlertDescription>
            Estimate body fat percentage using the circumference method outlined in U.S. Army Regulation 600-9. This is an estimation; results can vary from other methods like calipers or DEXA scans.
          </AlertDescription>
        </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your measurements. Ensure unit consistency.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="genderABF">Gender</Label>
              <Select value={gender} onValueChange={(value: 'male' | 'female') => setGender(value)}>
                <SelectTrigger id="genderABF"><SelectValue /></SelectTrigger>
                <SelectContent><SelectItem value="male">Male</SelectItem><SelectItem value="female">Female</SelectItem></SelectContent>
              </Select>
            </div>
             <div>
              <Label htmlFor="unitSystemABF">Unit System</Label>
              <Select value={unitSystem} onValueChange={(value: 'imperial' | 'metric') => setUnitSystem(value)}>
                <SelectTrigger id="unitSystemABF"><SelectValue /></SelectTrigger>
                <SelectContent><SelectItem value="imperial">Imperial (inches)</SelectItem><SelectItem value="metric">Metric (cm)</SelectItem></SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="heightABF">Height ({unitSystem})</Label>
              <Input id="heightABF" type="number" value={heightVal} onChange={(e) => setHeightVal(e.target.value)} />
            </div>
            <div>
              <Label htmlFor="neckABF">Neck Circumference ({unitSystem})</Label>
              <Input id="neckABF" type="number" value={neckVal} onChange={(e) => setNeckVal(e.target.value)} />
            </div>
            <div>
              <Label htmlFor="waistABF">Waist Circumference ({unitSystem} at navel)</Label>
              <Input id="waistABF" type="number" value={waistVal} onChange={(e) => setWaistVal(e.target.value)} />
            </div>
            {gender === 'female' && (
              <div>
                <Label htmlFor="hipABF">Hip Circumference ({unitSystem} at largest point)</Label>
                <Input id="hipABF" type="number" value={hipVal} onChange={(e) => setHipVal(e.target.value)} />
              </div>
            )}
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateBodyFat}>Calculate</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(bodyFatPercentage !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Body Fat %</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {bodyFatPercentage !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Body Fat Percentage</p><p className="text-3xl font-bold text-primary">{bodyFatPercentage}%</p></div>
                  <CopyButton textToCopy={bodyFatPercentage} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}



// ====== END OF FILE: ArmyBodyFatCalculator.tsx ======
==================================================

// ====== START OF FILE: AudioDelayCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.12 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Speaker } from "lucide-react";

// Common formula for audio delay: Delay (ms) = Distance (meters or feet) / Speed of Sound (m/s or ft/s) * 1000
// Speed of sound ~343 m/s or ~1125 ft/s at 20°C (68°F)

const SPEED_OF_SOUND_MS = 343;
const SPEED_OF_SOUND_FTS = 1125;

type DistanceUnitAudio = 'meters' | 'feet';

export default function AudioDelayCalculator() {
  const [distance, setDistance] = useState<string>('');
  const [unit, setUnit] = useState<DistanceUnitAudio>('meters');
  const [temperature, setTemperature] = useState<string>('20'); // Celsius, for more accurate speed of sound later

  const [delayMs, setDelayMs] = useState<string | null>(null);
  const [speedOfSoundUsed, setSpeedOfSoundUsed] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateAudioDelay = () => {
    setError(null); setDelayMs(null); setSpeedOfSoundUsed(null);
    const dist = parseFloat(distance);
    const tempC = parseFloat(temperature); // Currently for info, could be used to adjust speed of sound

    if (isNaN(dist) || dist <= 0) {
      setError('Distance must be a positive number.');
      return;
    }
    if (isNaN(tempC)) {
        setError('Temperature must be a valid number for context, though not used in this simplified calculation yet.');
        // For now, calculation proceeds with fixed speed of sound
    }


    let speedOfSound = unit === 'meters' ? SPEED_OF_SOUND_MS : SPEED_OF_SOUND_FTS;
    // Future enhancement: Adjust speed of sound based on temperature:
    // V_air = 331.3 * sqrt(1 + TempC / 273.15) m/s
    // For simplicity, using fixed values for now.

    const delaySeconds = dist / speedOfSound;
    const calculatedDelayMs = delaySeconds * 1000;

    setSpeedOfSoundUsed(`${speedOfSound.toFixed(0)} ${unit === 'meters' ? 'm/s' : 'ft/s'} (approx. at ${tempC}°C)`);
    setDelayMs(calculatedDelayMs.toFixed(2));
  };

  const resetForm = () => {
    setDistance(''); setTemperature('20');
    setDelayMs(null); setSpeedOfSoundUsed(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Audio Delay Calculator</AlertTitle><AlertDescription>Estimate audio delay based on distance from the sound source. Assumes standard speed of sound in air at ~20°C (68°F).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter distance and conditions.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="distanceAudio">Distance from Source</Label><Input id="distanceAudio" type="number" value={distance} onChange={e=>setDistance(e.target.value)} placeholder="e.g., 10"/></div>
              <div><Label htmlFor="unitAudio">Unit</Label><Select value={unit} onValueChange={(v:DistanceUnitAudio)=>setUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="meters">Meters</SelectItem><SelectItem value="feet">Feet</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="tempAudio">Air Temperature (°C) (For reference)</Label><Input id="tempAudio" type="number" value={temperature} onChange={e=>setTemperature(e.target.value)} placeholder="Default: 20"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateAudioDelay}>Calculate Delay</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(delayMs || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Audio Delay</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {speedOfSoundUsed && (<div className="p-1.5 bg-muted rounded-md text-xs">Speed of Sound Used: <strong className="font-semibold">{speedOfSoundUsed}</strong></div>)}
              {delayMs && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Audio Delay</p><p className="text-2xl font-bold text-primary">{delayMs} ms</p></div><CopyButton textToCopy={delayMs}/></div>)}
              <AlertDescription className="text-xs pt-2">This is a physical delay. System latency in audio equipment is additional.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: AudioDelayCalculator.tsx ======
==================================================

// ====== START OF FILE: AverageCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.24 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal } from "lucide-react";

export default function AverageCalculator() {
  const [numbersInput, setNumbersInput] = useState<string>('');
  
  const [average, setAverage] = useState<string | null>(null);
  const [count, setCount] = useState<number | null>(null);
  const [sum, setSum] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateAverage = () => {
    setError(null);
    setAverage(null);
    setCount(null);
    setSum(null);

    const numbersArray = numbersInput
      .split(/[\s,]+/) // Split by spaces or commas
      .filter(n => n.trim() !== '') // Remove empty strings
      .map(n => parseFloat(n));

    if (numbersArray.some(isNaN)) {
      setError('Invalid input. Please enter numbers separated by commas or spaces.');
      return;
    }

    if (numbersArray.length === 0) {
      setError('Please enter at least one number.');
      return;
    }

    const calculatedSum = numbersArray.reduce((acc, curr) => acc + curr, 0);
    const calculatedAverage = calculatedSum / numbersArray.length;

    setAverage(calculatedAverage.toFixed(4));
    setCount(numbersArray.length);
    setSum(calculatedSum.toFixed(4));
  };
  
  const resetForm = () => {
    setNumbersInput('');
    setAverage(null);
    setCount(null);
    setSum(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate the average of a set of numbers.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="numbersInput">Enter Numbers (comma or space separated)</Label>
              <Textarea
                id="numbersInput"
                value={numbersInput}
                onChange={(e) => setNumbersInput(e.target.value)}
                placeholder="e.g., 10, 20.5, 30, 15"
                rows={4}
              />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateAverage}>Calculate Average</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(average !== null || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Calculation Result</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {average !== null && (
                <>
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Average</p>
                    <p className="text-3xl font-bold text-primary">{average}</p>
                  </div>
                  <CopyButton textToCopy={average} />
                </div>
                 <div className="grid grid-cols-2 gap-2 text-sm">
                    <div className="p-2 bg-muted rounded-md">
                      <p className="text-muted-foreground">Count</p>
                      <p className="font-semibold">{count}</p>
                    </div>
                    <div className="p-2 bg-muted rounded-md">
                      <p className="text-muted-foreground">Sum</p>
                      <p className="font-semibold">{sum}</p>
                    </div>
                  </div>
                </>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: AverageCalculator.tsx ======
==================================================

// ====== START OF FILE: AverageReturnCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.32 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal } from "lucide-react";

export default function AverageReturnCalculator() {
  const [initialValue, setInitialValue] = useState<string>('');
  const [finalValue, setFinalValue] = useState<string>('');
  const [investmentPeriod, setInvestmentPeriod] = useState<string>(''); // Years
  
  const [averageAnnualReturn, setAverageAnnualReturn] = useState<string | null>(null);
  const [totalReturn, setTotalReturn] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateAverageReturn = () => {
    setError(null);
    setAverageAnnualReturn(null);
    setTotalReturn(null);

    const IV = parseFloat(initialValue);
    const FV = parseFloat(finalValue);
    const T = parseFloat(investmentPeriod);

    if (isNaN(IV) || IV <= 0 || isNaN(FV) || FV < 0 || isNaN(T) || T <= 0) {
      setError('Please enter valid positive numbers for initial value, final value, and period (years).');
      return;
    }
    
    if (IV > FV && T > 0) {
        // Handle loss scenario, CAGR formula still works
    }


    // Total Return Percentage
    const calculatedTotalReturn = ((FV - IV) / IV) * 100;
    setTotalReturn(calculatedTotalReturn.toFixed(2));

    // Average Annual Return (Compound Annual Growth Rate - CAGR)
    // CAGR = ( (FV / IV)^(1/T) - 1 ) * 100
    if (T === 0) {
        setError("Investment period cannot be zero for annual return calculation.");
        return;
    }
    const cagr = (Math.pow(FV / IV, 1 / T) - 1) * 100;
    
    if (isNaN(cagr) || !isFinite(cagr)) {
        setError("Could not calculate average annual return. Ensure initial value is not zero and values are reasonable.");
        return;
    }

    setAverageAnnualReturn(cagr.toFixed(2));
  };
  
  const resetForm = () => {
    setInitialValue('');
    setFinalValue('');
    setInvestmentPeriod('');
    setAverageAnnualReturn(null);
    setTotalReturn(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate the average annual return (CAGR) of an investment.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="initialValue">Initial Investment Value ($)</Label>
              <Input id="initialValue" type="number" value={initialValue} onChange={(e) => setInitialValue(e.target.value)} placeholder="e.g., 1000" />
            </div>
            <div>
              <Label htmlFor="finalValue">Final Investment Value ($)</Label>
              <Input id="finalValue" type="number" value={finalValue} onChange={(e) => setFinalValue(e.target.value)} placeholder="e.g., 1500" />
            </div>
            <div>
              <Label htmlFor="investmentPeriod">Investment Period (Years)</Label>
              <Input id="investmentPeriod" type="number" value={investmentPeriod} onChange={(e) => setInvestmentPeriod(e.target.value)} placeholder="e.g., 5" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateAverageReturn}>Calculate</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(averageAnnualReturn !== null || totalReturn !== null || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Investment Return Summary</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
               {totalReturn !== null && (
                <div className="p-3 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Total Return</p>
                  <p className="text-2xl font-semibold">{totalReturn}%</p>
                </div>
              )}
              {averageAnnualReturn !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Average Annual Return (CAGR)</p>
                    <p className="text-3xl font-bold text-primary">{averageAnnualReturn}%</p>
                  </div>
                  <CopyButton textToCopy={averageAnnualReturn} />
                </div>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    CAGR represents the mean annual growth rate of an investment over a specified period longer than one year.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: AverageReturnCalculator.tsx ======
==================================================

// ====== START OF FILE: BacCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.98 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, AlertTriangle, Info } from "lucide-react";

// Simplified Widmark Formula: BAC % = ( (Alcohol Consumed in grams) / (Body weight in grams * Gender Constant) ) * 100 - (Hours Passed * Metabolism Rate)
// Gender constants: Male ~0.68, Female ~0.55
// Metabolism Rate ~0.015% per hour
// 1 standard drink (US) ~ 14 grams of pure alcohol.

export default function BacCalculator() {
  const [gender, setGender] = useState<'male' | 'female'>('male');
  const [weight, setWeight] = useState<string>(''); // lbs
  const [numDrinks, setNumDrinks] = useState<string>(''); // standard drinks
  const [hoursPassed, setHoursPassed] = useState<string>(''); // since last drink
  
  const [bacPercentage, setBacPercentage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateBac = () => {
    setError(null);
    setBacPercentage(null);

    const bodyWeightLbs = parseFloat(weight);
    const drinks = parseFloat(numDrinks);
    const timeHours = parseFloat(hoursPassed);

    if (isNaN(bodyWeightLbs) || bodyWeightLbs <= 0 || isNaN(drinks) || drinks < 0 || isNaN(timeHours) || timeHours < 0) {
      setError('Please enter valid positive numbers for weight, drinks, and hours.');
      return;
    }

    const alcoholGrams = drinks * 14; // 14g alcohol per standard drink
    const bodyWeightGrams = bodyWeightLbs * 453.592; // lbs to grams
    const genderConstant = gender === 'male' ? 0.68 : 0.55;
    const metabolismRate = 0.015; // % per hour

    if (bodyWeightGrams === 0) {
        setError("Body weight cannot be zero.");
        return;
    }

    let bac = ( (alcoholGrams) / (bodyWeightGrams * genderConstant) ) * 100;
    bac = bac - (timeHours * metabolismRate);

    // BAC cannot be negative
    bac = Math.max(0, bac);
    
    setBacPercentage(bac.toFixed(3));
  };
  
  const resetForm = () => {
    setWeight('');
    setNumDrinks('');
    setHoursPassed('');
    setBacPercentage(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
        <Alert variant="destructive">
            <AlertTriangle className="h-4 w-4" />
            <AlertTitle className="font-semibold">Important Disclaimer</AlertTitle>
            <AlertDescription>
            This BAC calculator provides an <strong className="font-semibold">ESTIMATE ONLY</strong> based on the Widmark formula and average values. Individual BAC levels can vary significantly due to factors like food intake, metabolism, health conditions, medications, and type of alcohol.
            <strong className="font-semibold">DO NOT rely on this calculator to determine if it is safe to drive or operate machinery.</strong> The only safe BAC for driving is 0.00%. Always make responsible decisions. If in doubt, do not drive.
            </AlertDescription>
        </Alert>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate Blood Alcohol Content (BAC). See disclaimer above.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="gender">Biological Gender</Label>
              <Select value={gender} onValueChange={(value: 'male' | 'female') => setGender(value)}>
                <SelectTrigger id="gender"><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="male">Male</SelectItem>
                  <SelectItem value="female">Female</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="weight">Body Weight (lbs)</Label>
              <Input id="weight" type="number" value={weight} onChange={(e) => setWeight(e.target.value)} placeholder="e.g., 160" />
            </div>
            <div>
              <Label htmlFor="numDrinks">Number of Standard Drinks Consumed</Label>
              <Input id="numDrinks" type="number" value={numDrinks} onChange={(e) => setNumDrinks(e.target.value)} placeholder="e.g., 3" />
               <p className="text-xs text-muted-foreground mt-1">1 standard drink ≈ 12oz beer (5% ABV), 5oz wine (12% ABV), 1.5oz spirits (40% ABV).</p>
            </div>
            <div>
              <Label htmlFor="hoursPassed">Hours Since Last Drink</Label>
              <Input id="hoursPassed" type="number" value={hoursPassed} onChange={(e) => setHoursPassed(e.target.value)} placeholder="e.g., 2" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateBac}>Estimate BAC</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(bacPercentage !== null || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Estimated BAC Result</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {bacPercentage !== null && (
                <div className="space-y-3">
                  <div className={`flex justify-between items-center p-3 rounded-md ${parseFloat(bacPercentage) >= 0.08 ? 'bg-red-500/20' : parseFloat(bacPercentage) > 0 ? 'bg-yellow-500/20' : 'bg-green-500/20'}`}>
                    <div>
                      <p className="text-sm text-muted-foreground">Estimated BAC (%)</p>
                      <p className={`text-3xl font-bold ${parseFloat(bacPercentage) >= 0.08 ? 'text-red-600' : parseFloat(bacPercentage) > 0 ? 'text-yellow-600' : 'text-green-600'}`}>{bacPercentage}%</p>
                    </div>
                    <CopyButton textToCopy={bacPercentage} />
                  </div>
                  <Alert className={`${parseFloat(bacPercentage) >= 0.08 ? 'border-red-500/50 text-red-700 dark:text-red-400 [&>svg]:text-red-600' : parseFloat(bacPercentage) > 0.01 ? 'border-yellow-500/50 text-yellow-700 dark:text-yellow-400 [&>svg]:text-yellow-600' : 'border-green-500/50 text-green-700 dark:text-green-400 [&>svg]:text-green-600'}`}>
                    <Info className="h-4 w-4" />
                    <AlertTitle>Interpretation (General Guidelines)</AlertTitle>
                    <AlertDescription>
                      {parseFloat(bacPercentage) >= 0.08 ? "Likely over the legal limit for driving in many places. Impairment is significant." :
                       parseFloat(bacPercentage) >= 0.05 ? "Impairment of coordination and judgment may occur. Driving may be illegal." :
                       parseFloat(bacPercentage) > 0.01 ? "Some effects may be present. Driving could still be impaired." :
                       "Minimal or no alcohol detected by this estimate."}
                       <br/>
                       <strong className="font-semibold">Always prioritize safety. If you've been drinking, do not drive.</strong>
                    </AlertDescription>
                  </Alert>
                </div>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                   Legal limits and effects vary by jurisdiction and individual. This tool is for informational purposes only.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BacCalculator.tsx ======
==================================================

// ====== START OF FILE: BandwidthCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.93 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Network, Timer } from "lucide-react";

type FileSizeUnit = 'KB' | 'MB' | 'GB';
type SpeedUnitBandwidth = 'Kbps' | 'Mbps' | 'Gbps'; // Kilobits, Megabits, Gigabits per second
type TargetBandwidth = 'time' | 'size' | 'speed';

export default function BandwidthCalculator() {
  const [target, setTarget] = useState<TargetBandwidth>('time');
  const [fileSize, setFileSize] = useState<string>('');
  const [fileSizeUnit, setFileSizeUnit] = useState<FileSizeUnit>('MB');
  const [connectionSpeed, setConnectionSpeed] = useState<string>('');
  const [speedUnit, setSpeedUnit] = useState<SpeedUnitBandwidth>('Mbps');
  const [transferTimeSeconds, setTransferTimeSeconds] = useState<string>(''); // For solving size/speed

  const [resultValue, setResultValue] = useState<string | null>(null);
  const [resultLabel, setResultLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const calculate = () => {
    setError(null); setResultValue(null); setResultLabel('');
    const sizeVal = parseFloat(fileSize);
    const speedVal = parseFloat(connectionSpeed);
    const timeSecVal = parseFloat(transferTimeSeconds);

    // Convert file size to bits
    let sizeInBits: number | undefined;
    if (target !== 'size') {
        if (isNaN(sizeVal) || sizeVal <=0) { setError('File size must be positive.'); return; }
        if (fileSizeUnit === 'KB') sizeInBits = sizeVal * 1024 * 8;
        else if (fileSizeUnit === 'MB') sizeInBits = sizeVal * 1024 * 1024 * 8;
        else sizeInBits = sizeVal * 1024 * 1024 * 1024 * 8; // GB
    }

    // Convert connection speed to bits per second (bps)
    let speedInBps: number | undefined;
     if (target !== 'speed') {
        if (isNaN(speedVal) || speedVal <=0) { setError('Connection speed must be positive.'); return;}
        if (speedUnit === 'Kbps') speedInBps = speedVal * 1000;
        else if (speedUnit === 'Mbps') speedInBps = speedVal * 1000 * 1000;
        else speedInBps = speedVal * 1000 * 1000 * 1000; // Gbps
    }
    
    let calcResult: number;
    try {
        if (target === 'time') {
            if (sizeInBits === undefined || speedInBps === undefined || speedInBps === 0) throw new Error("Valid file size and non-zero speed required.");
            calcResult = sizeInBits / speedInBps; // Time in seconds
            const h = Math.floor(calcResult / 3600);
            const m = Math.floor((calcResult % 3600) / 60);
            const s = (calcResult % 60).toFixed(2);
            setResultValue(`${h}h ${m}m ${s}s`);
            setResultLabel('Est. Transfer Time');
        } else if (target === 'size') {
            if (speedInBps === undefined || speedInBps === 0 || isNaN(timeSecVal) || timeSecVal <=0) throw new Error("Valid speed and non-zero time required.");
            calcResult = (speedInBps * timeSecVal) / 8; // Size in Bytes
            if (fileSizeUnit === 'KB') calcResult /= 1024;
            else if (fileSizeUnit === 'MB') calcResult /= (1024*1024);
            else if (fileSizeUnit === 'GB') calcResult /= (1024*1024*1024);
            setResultValue(`${calcResult.toFixed(2)}`);
            setResultLabel(`Est. File Size (${fileSizeUnit})`);
        } else { // speed
             if (sizeInBits === undefined || isNaN(timeSecVal) || timeSecVal <=0) throw new Error("Valid file size and non-zero time required.");
            calcResult = sizeInBits / timeSecVal; // Speed in bps
            if (speedUnit === 'Kbps') calcResult /= 1000;
            else if (speedUnit === 'Mbps') calcResult /= (1000*1000);
            else if (speedUnit === 'Gbps') calcResult /= (1000*1000*1000);
            setResultValue(`${calcResult.toFixed(2)}`);
            setResultLabel(`Required Speed (${speedUnit})`);
        }
    } catch (e:any) { setError(e.message); }
  };
  
  const resetForm = () => {
    setFileSize(''); setConnectionSpeed(''); setTransferTimeSeconds('');
    setResultValue(null); setResultLabel(''); setError(null);
  };
  
  const renderInputs = () => (
    <>
        {target !== 'size' && <div className="grid grid-cols-[2fr_1fr] gap-2"><div><Label htmlFor="fileSizeBW">File Size</Label><Input id="fileSizeBW" type="number" value={fileSize} onChange={e=>setFileSize(e.target.value)}/></div><div><Label htmlFor="fileSizeUnitBW">Unit</Label><Select value={fileSizeUnit} onValueChange={(v:FileSizeUnit)=>setFileSizeUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="KB">KB</SelectItem><SelectItem value="MB">MB</SelectItem><SelectItem value="GB">GB</SelectItem></SelectContent></Select></div></div>}
        {target !== 'speed' && <div className="grid grid-cols-[2fr_1fr] gap-2"><div><Label htmlFor="connSpeedBW">Connection Speed</Label><Input id="connSpeedBW" type="number" value={connectionSpeed} onChange={e=>setConnectionSpeed(e.target.value)}/></div><div><Label htmlFor="speedUnitBW">Unit</Label><Select value={speedUnit} onValueChange={(v:SpeedUnitBandwidth)=>setSpeedUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="Kbps">Kbps</SelectItem><SelectItem value="Mbps">Mbps</SelectItem><SelectItem value="Gbps">Gbps</SelectItem></SelectContent></Select></div></div>}
        {target !== 'time' && <div><Label htmlFor="transferTimeBW">Transfer Time (seconds)</Label><Input id="transferTimeBW" type="number" value={transferTimeSeconds} onChange={e=>setTransferTimeSeconds(e.target.value)} placeholder="e.g., 60"/></div>}
    </>
  );

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Bandwidth & Download Time Calculator</AlertTitle><AlertDescription>Estimate data transfer times, required bandwidth, or file sizes. Note: 1 Byte (B) = 8 bits (b). Speeds usually in bits/sec, sizes in Bytes.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Solve for Time, Size, or Speed.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="targetBandwidth">Calculate:</Label><Select value={target} onValueChange={(v:TargetBandwidth)=>{setTarget(v);resetForm();}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="time">Transfer Time</SelectItem><SelectItem value="size">File Size</SelectItem><SelectItem value="speed">Connection Speed</SelectItem></SelectContent></Select></div>
            {renderInputs()}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(resultValue || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {resultValue && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">{resultLabel}</p><p className="text-2xl font-bold text-primary">{resultValue}</p></div><CopyButton textToCopy={resultValue}/></div>)}
              <AlertDescription className="text-xs pt-2">This is a theoretical calculation. Actual times vary due to network overhead, server load, latency, etc.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: BandwidthCalculator.tsx ======
==================================================

// ====== START OF FILE: BasicCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.23 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Eraser } from 'lucide-react';

export default function BasicCalculator() {
  const [displayValue, setDisplayValue] = useState<string>('0');
  const [firstOperand, setFirstOperand] = useState<number | null>(null);
  const [operator, setOperator] = useState<string | null>(null);
  const [waitingForSecondOperand, setWaitingForSecondOperand] = useState<boolean>(false);
  const [history, setHistory] = useState<string>('');

  const inputDigit = (digit: string) => {
    if (waitingForSecondOperand) {
      setDisplayValue(digit);
      setWaitingForSecondOperand(false);
    } else {
      setDisplayValue(displayValue === '0' ? digit : displayValue + digit);
    }
  };

  const inputDecimal = () => {
    if (waitingForSecondOperand) {
      setDisplayValue('0.');
      setWaitingForSecondOperand(false);
      return;
    }
    if (!displayValue.includes('.')) {
      setDisplayValue(displayValue + '.');
    }
  };

  const handleOperator = (nextOperator: string) => {
    const inputValue = parseFloat(displayValue);

    if (operator && waitingForSecondOperand) {
      setOperator(nextOperator);
      setHistory(prev => prev.slice(0, -2) + ` ${nextOperator} `);
      return;
    }

    if (firstOperand === null) {
      setFirstOperand(inputValue);
      setHistory(`${inputValue} ${nextOperator} `);
    } else if (operator) {
      const result = performCalculation();
      setDisplayValue(String(parseFloat(result.toFixed(7))));
      setFirstOperand(result);
      setHistory(prev => `${prev} ${inputValue} = ${result} ${nextOperator} `)
    }
    
    setWaitingForSecondOperand(true);
    setOperator(nextOperator);
  };

  const performCalculation = (): number => {
    if (firstOperand === null || operator === null) return parseFloat(displayValue);
    const secondOperand = parseFloat(displayValue);
    let result = 0;
    switch (operator) {
      case '+': result = firstOperand + secondOperand; break;
      case '-': result = firstOperand - secondOperand; break;
      case '*': result = firstOperand * secondOperand; break;
      case '/': result = firstOperand / secondOperand; break;
      default: return secondOperand;
    }
    return result;
  };

  const handleEquals = () => {
    if (operator && firstOperand !== null) {
      const result = performCalculation();
      const secondOperand = parseFloat(displayValue);
      setHistory(prev => `${prev} ${secondOperand} = `)
      setDisplayValue(String(parseFloat(result.toFixed(7))));
      setFirstOperand(null); // Reset for new calculation
      setOperator(null);
      setWaitingForSecondOperand(true); // Ready for new input or chain
    }
  };

  const clearAll = () => {
    setDisplayValue('0');
    setFirstOperand(null);
    setOperator(null);
    setWaitingForSecondOperand(false);
    setHistory('');
  };
  
  const clearEntry = () => {
    setDisplayValue('0');
    // If waiting for second operand, it effectively clears the current input for the second operand
    // If not, it clears the current first operand entry
  };

  const toggleSign = () => {
    setDisplayValue(String(parseFloat(displayValue) * -1));
  };

  const percentage = () => {
    setDisplayValue(String(parseFloat(displayValue) / 100));
  };

  const buttons = [
    { label: 'AC', action: clearAll, className: 'col-span-2 bg-destructive hover:bg-destructive/90' },
    { label: 'C', action: clearEntry, className: 'bg-secondary hover:bg-secondary/80' },
    { label: '/', action: () => handleOperator('/'), className: 'bg-accent hover:bg-accent/90' },
    { label: '7', action: () => inputDigit('7') },
    { label: '8', action: () => inputDigit('8') },
    { label: '9', action: () => inputDigit('9') },
    { label: '*', action: () => handleOperator('*'), className: 'bg-accent hover:bg-accent/90' },
    { label: '4', action: () => inputDigit('4') },
    { label: '5', action: () => inputDigit('5') },
    { label: '6', action: () => inputDigit('6') },
    { label: '-', action: () => handleOperator('-'), className: 'bg-accent hover:bg-accent/90' },
    { label: '1', action: () => inputDigit('1') },
    { label: '2', action: () => inputDigit('2') },
    { label: '3', action: () => inputDigit('3') },
    { label: '+', action: () => handleOperator('+'), className: 'bg-accent hover:bg-accent/90' },
    { label: '0', action: () => inputDigit('0'), className: 'col-span-2' },
    { label: '.', action: inputDecimal },
    { label: '=', action: handleEquals, className: 'bg-primary hover:bg-primary/90' },
  ];
  
  // Add ± and % if desired
  // { label: '±', action: toggleSign, className: 'bg-secondary hover:bg-secondary/80' },
  // { label: '%', action: percentage, className: 'bg-secondary hover:bg-secondary/80' },


  return (
    <Card className="max-w-sm mx-auto shadow-2xl">
      <CardHeader>
        <CardTitle className="text-sm text-muted-foreground text-right h-6 overflow-x-auto">
          {history || 'Calculation History'}
        </CardTitle>
        <div className="flex items-center">
          <Input
            type="text"
            value={displayValue}
            readOnly
            className="text-4xl font-mono text-right h-16 py-2 pr-4 bg-background focus-visible:ring-0 focus-visible:ring-offset-0 border-0 shadow-none"
            aria-label="Calculator display"
          />
          <CopyButton textToCopy={displayValue} variant="ghost" size="icon" />
        </div>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-4 gap-2">
          {buttons.map((btn) => (
            <Button
              key={btn.label}
              onClick={btn.action}
              className={`text-xl h-16 ${btn.className || ''}`}
              variant={btn.className ? 'default' : 'outline'}
            >
              {btn.label}
            </Button>
          ))}
        </div>
      </CardContent>
      <CardFooter className="justify-end">
         <Button variant="ghost" onClick={clearAll} size="sm">
           <Eraser className="mr-2 h-4 w-4" /> Reset Calculator
         </Button>
      </CardFooter>
    </Card>
  );
}


// ====== END OF FILE: BasicCalculator.tsx ======
==================================================

// ====== START OF FILE: BatteryCapacityCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.16 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, BatteryCharging as BatteryIcon } from "lucide-react";

type CapacityTarget = 'watt_hours' | 'milliamp_hours' | 'voltage';
// Formula: Wh = (mAh * V) / 1000  OR mAh = (Wh * 1000) / V OR V = (Wh * 1000) / mAh

export default function BatteryCapacityCalculator() {
  const [target, setTarget] = useState<CapacityTarget>('watt_hours');
  const [wattHours, setWattHours] = useState<string>('');
  const [milliampHours, setMilliampHours] = useState<string>('');
  const [voltage, setVoltage] = useState<string>('');

  const [result, setResult] = useState<string | null>(null);
  const [resultUnitLabel, setResultUnitLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const calculate = () => {
    setError(null); setResult(null); setResultUnitLabel('');
    const Wh = parseFloat(wattHours);
    const mAh = parseFloat(milliampHours);
    const V = parseFloat(voltage);
    let calcValue: number;

    try {
      if (target === 'watt_hours') {
        if (isNaN(mAh) || mAh <=0 || isNaN(V) || V <=0) throw new Error("mAh and Voltage must be positive.");
        calcValue = (mAh * V) / 1000;
        setResultUnitLabel('Wh (Watt-hours)');
      } else if (target === 'milliamp_hours') {
        if (isNaN(Wh) || Wh <=0 || isNaN(V) || V <=0) throw new Error("Wh and Voltage must be positive.");
        calcValue = (Wh * 1000) / V;
        setResultUnitLabel('mAh (milliampere-hours)');
      } else { // voltage
        if (isNaN(Wh) || Wh <=0 || isNaN(mAh) || mAh <=0) throw new Error("Wh and mAh must be positive.");
        if (mAh === 0) throw new Error("mAh cannot be zero for voltage calculation.");
        calcValue = (Wh * 1000) / mAh;
        setResultUnitLabel('V (Volts)');
      }
      if(isNaN(calcValue) || !isFinite(calcValue) || calcValue <0) throw new Error("Calculation resulted in an invalid or negative number.");
      setResult(calcValue.toFixed(2));
    } catch (e:any) {setError(e.message);}
  };

  const resetForm = () => {
    setWattHours(''); setMilliampHours(''); setVoltage('');
    setResult(null); setError(null); setResultUnitLabel('');
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Battery Capacity Converter/Calculator</AlertTitle><AlertDescription>Calculate Watt-hours (Wh), milliampere-hours (mAh), or Voltage (V) given the other two values. Useful for understanding battery energy and capacity.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Solve for the unknown battery property.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="targetBatteryCap">Calculate:</Label><Select value={target} onValueChange={(v:CapacityTarget)=>{setTarget(v);resetForm();}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="watt_hours">Watt-hours (Wh)</SelectItem><SelectItem value="milliamp_hours">milliamp-hours (mAh)</SelectItem><SelectItem value="voltage">Voltage (V)</SelectItem></SelectContent></Select></div>
            {target !== 'watt_hours' && <div><Label htmlFor="wattHoursBC">Watt-hours (Wh)</Label><Input id="wattHoursBC" type="number" value={wattHours} onChange={e=>setWattHours(e.target.value)}/></div>}
            {target !== 'milliamp_hours' && <div><Label htmlFor="milliampHoursBC">milliamp-hours (mAh)</Label><Input id="milliampHoursBC" type="number" value={milliampHours} onChange={e=>setMilliampHours(e.target.value)}/></div>}
            {target !== 'voltage' && <div><Label htmlFor="voltageBC">Voltage (V)</Label><Input id="voltageBC" type="number" value={voltage} onChange={e=>setVoltage(e.target.value)}/></div>}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Calculated {target.replace('_', ' ')}</p><p className="text-2xl font-bold text-primary">{result} {resultUnitLabel}</p></div><CopyButton textToCopy={`${result} ${resultUnitLabel}`}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: BatteryCapacityCalculator.tsx ======
==================================================

// ====== START OF FILE: BatteryLifeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.74 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal } from "lucide-react";

export default function BatteryLifeCalculator() {
  const [capacity, setCapacity] = useState<string>(''); // mAh
  const [consumption, setConsumption] = useState<string>(''); // mA
  const [resultUnit, setResultUnit] = useState<'hours' | 'minutes' | 'days'>('hours');

  const [life, setLife] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateLife = () => {
    setError(null);
    setLife(null);

    const cap = parseFloat(capacity);
    const cons = parseFloat(consumption);

    if (isNaN(cap) || cap <= 0 || isNaN(cons) || cons <= 0) {
      setError('Please enter valid positive numbers for capacity and consumption.');
      return;
    }

    let calculatedLifeHours = cap / cons;
    let displayLife: number;

    switch(resultUnit) {
        case 'minutes':
            displayLife = calculatedLifeHours * 60;
            break;
        case 'days':
            displayLife = calculatedLifeHours / 24;
            break;
        case 'hours':
        default:
            displayLife = calculatedLifeHours;
            break;
    }

    setLife(displayLife.toFixed(2));
  };
  
  const resetForm = () => {
    setCapacity('');
    setConsumption('');
    setLife(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate device battery life based on capacity and consumption.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="capacity">Battery Capacity (mAh)</Label>
              <Input id="capacity" type="number" value={capacity} onChange={(e) => setCapacity(e.target.value)} placeholder="e.g., 3000" />
            </div>
            <div>
              <Label htmlFor="consumption">Average Device Consumption (mA)</Label>
              <Input id="consumption" type="number" value={consumption} onChange={(e) => setConsumption(e.target.value)} placeholder="e.g., 150" />
            </div>
            <div>
              <Label htmlFor="resultUnit">Display Result In</Label>
              <Select value={resultUnit} onValueChange={(value: 'hours' | 'minutes' | 'days') => setResultUnit(value)}>
                <SelectTrigger id="resultUnit"><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="hours">Hours</SelectItem>
                  <SelectItem value="minutes">Minutes</SelectItem>
                  <SelectItem value="days">Days</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateLife}>Calculate Life</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(life !== null || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Estimated Battery Life</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {life !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Estimated Life</p>
                    <p className="text-3xl font-bold text-primary">{life} <span className="text-lg">{resultUnit}</span></p>
                  </div>
                  <CopyButton textToCopy={`${life} ${resultUnit}`} />
                </div>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                   Actual battery life may vary due to usage patterns, battery health, and other factors.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BatteryLifeCalculator.tsx ======
==================================================

// ====== START OF FILE: BigNumberCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.59 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info } from "lucide-react";

type Operation = 'add' | 'subtract' | 'multiply' | 'divide';

export default function BigNumberCalculator() {
  const [number1, setNumber1] = useState<string>('');
  const [number2, setNumber2] = useState<string>('');
  const [operation, setOperation] = useState<Operation>('add');
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculate = () => {
    setError(null);
    setResult(null);

    try {
      if (number1.trim() === '' || number2.trim() === '') {
        throw new Error("Please enter both numbers.");
      }

      // Validate if inputs are indeed numbers (potentially very large)
      // For simplicity, we'll rely on BigInt for integer arithmetic.
      // Note: BigInt only supports integers. For large decimal arithmetic, a dedicated library would be needed.
      if (!/^-?\d+$/.test(number1) || !/^-?\d+$/.test(number2)) {
        throw new Error("Inputs must be valid integers for BigInt operations.");
      }
      
      const num1 = BigInt(number1);
      const num2 = BigInt(number2);
      let calculatedResult: BigInt;

      switch (operation) {
        case 'add':
          calculatedResult = num1 + num2;
          break;
        case 'subtract':
          calculatedResult = num1 - num2;
          break;
        case 'multiply':
          calculatedResult = num1 * num2;
          break;
        case 'divide':
          if (num2 === 0n) {
            throw new Error("Cannot divide by zero.");
          }
          calculatedResult = num1 / num2; // Integer division
          break;
        default:
          throw new Error("Invalid operation.");
      }
      setResult(calculatedResult.toString());
    } catch (e: any) {
      setError(e.message || "An error occurred during calculation.");
    }
  };

  const resetForm = () => {
    setNumber1('');
    setNumber2('');
    setResult(null);
    setError(null);
    setOperation('add');
  };

  return (
    <div className="space-y-6">
       <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Note on Big Number Operations</AlertTitle>
        <AlertDescription>
          This calculator uses BigInt for arithmetic, supporting very large integers. Division is integer division. For decimal arithmetic with large numbers, specialized libraries are typically required.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Perform arithmetic operations on very large integers.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="number1">First Number</Label>
              <Input id="number1" type="text" value={number1} onChange={(e) => setNumber1(e.target.value)} placeholder="Enter a large integer" />
            </div>
            <div>
              <Label htmlFor="operation">Operation</Label>
              <Select value={operation} onValueChange={(value: Operation) => setOperation(value)}>
                <SelectTrigger id="operation">
                  <SelectValue placeholder="Select operation" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="add">Add (+)</SelectItem>
                  <SelectItem value="subtract">Subtract (-)</SelectItem>
                  <SelectItem value="multiply">Multiply (*)</SelectItem>
                  <SelectItem value="divide">Divide (/)</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="number2">Second Number</Label>
              <Input id="number2" type="text" value={number2} onChange={(e) => setNumber2(e.target.value)} placeholder="Enter another large integer" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculate}>Calculate</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(result !== null || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Result</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {result !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Result</p>
                    <p className="text-2xl font-bold text-primary break-all">{result}</p>
                  </div>
                  <CopyButton textToCopy={result} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BigNumberCalculator.tsx ======
==================================================

// ====== START OF FILE: BinaryCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8.22 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal } from "lucide-react";

type Base = 'binary' | 'decimal' | 'hex' | 'octal';
type BinaryOperation = 'add' | 'subtract'; // More can be added

export default function BinaryCalculator() {
  const [inputValue, setInputValue] = useState<string>('');
  const [inputBase, setInputBase] = useState<Base>('decimal');
  const [outputBase, setOutputBase] = useState<Base>('binary');
  
  const [conversionResult, setConversionResult] = useState<string | null>(null);
  const [conversionError, setConversionError] = useState<string | null>(null);

  const [binaryNum1, setBinaryNum1] = useState<string>('');
  const [binaryNum2, setBinaryNum2] = useState<string>('');
  const [binaryOperation, setBinaryOperation] = useState<BinaryOperation>('add');
  const [arithmeticResult, setArithmeticResult] = useState<string | null>(null);
  const [arithmeticError, setArithmeticError] = useState<string | null>(null);

  const handleConversion = () => {
    setConversionError(null);
    setConversionResult(null);
    try {
      if (inputValue.trim() === '') throw new Error("Input value cannot be empty.");
      let decimalValue: number;
      switch (inputBase) {
        case 'binary':
          if (!/^[01]+$/.test(inputValue)) throw new Error("Invalid binary input.");
          decimalValue = parseInt(inputValue, 2);
          break;
        case 'decimal':
          if (!/^-?\d+$/.test(inputValue)) throw new Error("Invalid decimal input.");
          decimalValue = parseInt(inputValue, 10);
          break;
        case 'hex':
          if (!/^[0-9a-fA-F]+$/.test(inputValue)) throw new Error("Invalid hexadecimal input.");
          decimalValue = parseInt(inputValue, 16);
          break;
        case 'octal':
          if (!/^[0-7]+$/.test(inputValue)) throw new Error("Invalid octal input.");
          decimalValue = parseInt(inputValue, 8);
          break;
        default: throw new Error("Invalid input base.");
      }

      if (isNaN(decimalValue)) throw new Error("Failed to parse input value.");

      let resultString: string;
      switch (outputBase) {
        case 'binary': resultString = decimalValue.toString(2); break;
        case 'decimal': resultString = decimalValue.toString(10); break;
        case 'hex': resultString = decimalValue.toString(16).toUpperCase(); break;
        case 'octal': resultString = decimalValue.toString(8); break;
        default: throw new Error("Invalid output base.");
      }
      setConversionResult(resultString);
    } catch (e: any) {
      setConversionError(e.message);
    }
  };

  const handleArithmetic = () => {
    setArithmeticError(null);
    setArithmeticResult(null);
    try {
      if (binaryNum1.trim() === '' || binaryNum2.trim() === '') throw new Error("Both binary numbers are required.");
      if (!/^[01]+$/.test(binaryNum1) || !/^[01]+$/.test(binaryNum2)) throw new Error("Inputs must be valid binary numbers.");

      const num1Dec = parseInt(binaryNum1, 2);
      const num2Dec = parseInt(binaryNum2, 2);
      let resultDec: number;

      switch (binaryOperation) {
        case 'add': resultDec = num1Dec + num2Dec; break;
        case 'subtract': resultDec = num1Dec - num2Dec; break;
        default: throw new Error("Invalid binary operation.");
      }
      setArithmeticResult(resultDec.toString(2));
    } catch (e:any) {
      setArithmeticError(e.message);
    }
  };

  return (
    <div className="space-y-8">
      <Card>
        <CardHeader>
          <CardDescription>Convert numbers between binary, decimal, hexadecimal, and octal.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 items-end">
            <div>
              <Label htmlFor="inputValue">Input Value</Label>
              <Input id="inputValue" value={inputValue} onChange={(e) => setInputValue(e.target.value)} placeholder="e.g., 1010 or 10 or A" />
            </div>
            <div>
              <Label htmlFor="inputBase">From Base</Label>
              <Select value={inputBase} onValueChange={(v: Base) => setInputBase(v)}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="binary">Binary</SelectItem>
                  <SelectItem value="decimal">Decimal</SelectItem>
                  <SelectItem value="hex">Hexadecimal</SelectItem>
                  <SelectItem value="octal">Octal</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="outputBase">To Base</Label>
              <Select value={outputBase} onValueChange={(v: Base) => setOutputBase(v)}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="binary">Binary</SelectItem>
                  <SelectItem value="decimal">Decimal</SelectItem>
                  <SelectItem value="hex">Hexadecimal</SelectItem>
                  <SelectItem value="octal">Octal</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          {conversionError && <Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{conversionError}</AlertDescription></Alert>}
          {conversionResult && (
            <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
              <div><p className="text-sm text-muted-foreground">Conversion Result</p><p className="text-2xl font-bold text-primary">{conversionResult}</p></div>
              <CopyButton textToCopy={conversionResult} />
            </div>
          )}
        </CardContent>
        <CardFooter>
          <Button onClick={handleConversion}>Convert</Button>
        </CardFooter>
      </Card>

      <Card>
        <CardHeader>
          <CardDescription>Perform basic arithmetic (addition, subtraction) on binary numbers.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 items-end">
            <div>
              <Label htmlFor="binaryNum1">Binary Number 1</Label>
              <Input id="binaryNum1" value={binaryNum1} onChange={(e) => setBinaryNum1(e.target.value)} placeholder="e.g., 1010" />
            </div>
            <div>
              <Label htmlFor="binaryOperation">Operation</Label>
              <Select value={binaryOperation} onValueChange={(v: BinaryOperation) => setBinaryOperation(v)}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="add">Add (+)</SelectItem>
                  <SelectItem value="subtract">Subtract (-)</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="binaryNum2">Binary Number 2</Label>
              <Input id="binaryNum2" value={binaryNum2} onChange={(e) => setBinaryNum2(e.target.value)} placeholder="e.g., 0101" />
            </div>
          </div>
          {arithmeticError && <Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{arithmeticError}</AlertDescription></Alert>}
          {arithmeticResult && (
            <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
              <div><p className="text-sm text-muted-foreground">Arithmetic Result (Binary)</p><p className="text-2xl font-bold text-primary">{arithmeticResult}</p></div>
              <CopyButton textToCopy={arithmeticResult} />
            </div>
          )}
        </CardContent>
        <CardFooter>
          <Button onClick={handleArithmetic}>Calculate Binary</Button>
        </CardFooter>
      </Card>
    </div>
  );
}


// ====== END OF FILE: BinaryCalculator.tsx ======
==================================================

// ====== START OF FILE: BlockchainGasFeeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.95 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Link as LinkIcon } from "lucide-react";

export default function BlockchainGasFeeCalculator() {
  const [gasUnits, setGasUnits] = useState<string>('21000'); // Standard ETH transfer
  const [baseFeeGwei, setBaseFeeGwei] = useState<string>(''); // Varies
  const [priorityFeeGwei, setPriorityFeeGwei] = useState<string>('2'); // Tip

  const [totalFeeGwei, setTotalFeeGwei] = useState<string | null>(null);
  const [totalFeeEth, setTotalFeeEth] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateGasFee = () => {
    setError(null);
    setTotalFeeGwei(null);
    setTotalFeeEth(null);

    const units = parseInt(gasUnits);
    const base = parseFloat(baseFeeGwei);
    const priority = parseFloat(priorityFeeGwei);

    if (isNaN(units) || units <= 0 || isNaN(base) || base < 0 || isNaN(priority) || priority < 0) {
      setError('Please enter valid, non-negative numbers for all fields. Gas units must be positive.');
      return;
    }

    const totalGasPriceGwei = base + priority;
    const calculatedFeeGwei = units * totalGasPriceGwei;
    const calculatedFeeEth = calculatedFeeGwei / 1_000_000_000; // 1 billion Gwei in 1 ETH

    setTotalFeeGwei(calculatedFeeGwei.toFixed(0));
    setTotalFeeEth(calculatedFeeEth.toFixed(6));
  };

  const resetForm = () => {
    setGasUnits('21000');
    setBaseFeeGwei('');
    setPriorityFeeGwei('2');
    setTotalFeeGwei(null);
    setTotalFeeEth(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Blockchain Gas Fee Estimator (EIP-1559)</AlertTitle>
        <AlertDescription>
          Estimate the gas fee for a blockchain transaction (like Ethereum). Fees are highly volatile and depend on network congestion. This is a simplified calculation.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter transaction details.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="gasUnits">Gas Units (Gas Limit)</Label>
              <Input id="gasUnits" type="number" value={gasUnits} onChange={e => setGasUnits(e.target.value)} placeholder="e.g., 21000 for a transfer" />
            </div>
            <div>
              <Label htmlFor="baseFeeGwei">Base Fee (Gwei)</Label>
              <Input id="baseFeeGwei" type="number" value={baseFeeGwei} onChange={e => setBaseFeeGwei(e.target.value)} placeholder="Check current network fee" />
            </div>
            <div>
              <Label htmlFor="priorityFeeGwei">Priority Fee / Tip (Gwei)</Label>
              <Input id="priorityFeeGwei" type="number" value={priorityFeeGwei} onChange={e => setPriorityFeeGwei(e.target.value)} placeholder="e.g., 2" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateGasFee}>Calculate Fee</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(totalFeeEth || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Estimated Transaction Fee</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalFeeGwei && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Total Fee in Gwei</p>
                  <p className="font-semibold">{totalFeeGwei} Gwei</p>
                </div>
              )}
              {totalFeeEth && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Total Fee in ETH</p>
                    <p className="text-2xl font-bold text-primary">{totalFeeEth} ETH</p>
                  </div>
                  <CopyButton textToCopy={totalFeeEth} />
                </div>
              )}
              <AlertDescription className="text-xs pt-2">
                Total Fee = (Base Fee + Priority Fee) × Gas Units. 1 ETH = 1,000,000,000 Gwei.
              </AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BlockchainGasFeeCalculator.tsx ======
==================================================

// ====== START OF FILE: BloodAlcoholEliminationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.52 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Hourglass } from "lucide-react";

const ALCOHOL_ELIMINATION_RATE_PERCENT_PER_HOUR = 0.015; // Average

export default function BloodAlcoholEliminationCalculator() {
  const [initialBac, setInitialBac] = useState<string>(''); // Percentage, e.g., 0.08

  const [timeToZero, setTimeToZero] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateEliminationTime = () => {
    setError(null);
    setTimeToZero(null);

    const bac = parseFloat(initialBac);

    if (isNaN(bac) || bac < 0 || bac > 0.5) { // BAC > 0.5 is extremely high and likely fatal
      setError('Please enter a valid initial BAC (e.g., 0.02 to 0.40).');
      return;
    }
    if (bac === 0) {
        setTimeToZero("0 hours (BAC is already zero)");
        return;
    }


    const hours = bac / ALCOHOL_ELIMINATION_RATE_PERCENT_PER_HOUR;
    
    const totalMinutes = Math.round(hours * 60);
    const displayHours = Math.floor(totalMinutes / 60);
    const displayMinutes = totalMinutes % 60;

    setTimeToZero(`${displayHours} hours and ${displayMinutes} minutes`);
  };

  const resetForm = () => {
    setInitialBac('');
    setTimeToZero(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Important Disclaimer - Estimation Only</AlertTitle>
        <AlertDescription>
          This calculator provides a <strong className="font-semibold">ROUGH ESTIMATE</strong> of alcohol elimination time based on an average metabolic rate (approx. 0.015% BAC reduction per hour). Individual rates vary significantly due to factors like metabolism, gender, weight, food intake, liver health, and medications. <strong className="font-semibold">DO NOT rely on this calculator to determine if it is safe to drive or perform any activity requiring impairment-free judgment.</strong> The only safe BAC for driving is 0.00%. This tool is for educational purposes only.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate time for BAC to reach zero.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="initialBac">Initial Blood Alcohol Content (BAC %)</Label>
              <Input id="initialBac" type="number" step="0.001" value={initialBac} onChange={(e) => setInitialBac(e.target.value)} placeholder="e.g., 0.08 for 0.08%" />
            </div>
            <AlertDescription className="text-xs">
                Uses an average elimination rate of {ALCOHOL_ELIMINATION_RATE_PERCENT_PER_HOUR * 100}% BAC per hour.
            </AlertDescription>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateEliminationTime}>Estimate Time</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(timeToZero || error) && (
          <Card>
            <CardHeader><CardDescription>Elimination Time Estimate</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {timeToZero && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Est. Time to Reach 0.00% BAC</p><p className="text-2xl font-bold text-primary">{timeToZero}</p></div>
                  <CopyButton textToCopy={timeToZero} />
                </div>
              )}
            </CardContent>
            <CardFooter>
                <p className="text-xs text-muted-foreground">Remember, this is a rough estimate. Factors vary widely.</p>
            </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BloodAlcoholEliminationCalculator.tsx ======
==================================================

// ====== START OF FILE: BloodPressureClassificationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.88 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, HeartPulse } from "lucide-react";

interface BpCategoryInfo {
  category: string;
  recommendation: string;
  colorClass: string;
}

// Based on 2017 ACC/AHA guidelines (simplified ranges)
const bpCategories: ( (sys: number, dia: number) => BpCategoryInfo | null )[] = [
  (sys, dia) => sys >= 180 || dia >= 120 ? { category: "Hypertensive Crisis", recommendation: "Consult your doctor immediately or seek emergency care.", colorClass: "bg-red-700 text-white" } : null,
  (sys, dia) => sys >= 140 || dia >= 90 ? { category: "Hypertension Stage 2", recommendation: "Consult your doctor. Lifestyle changes and possibly medication needed.", colorClass: "bg-red-600 text-white" } : null,
  (sys, dia) => (sys >= 130 && sys <= 139) || (dia >= 80 && dia <= 89) ? { category: "Hypertension Stage 1", recommendation: "Consult your doctor. Lifestyle changes recommended, medication may be considered.", colorClass: "bg-orange-500 text-white" } : null,
  (sys, dia) => sys >= 120 && sys <= 129 && dia < 80 ? { category: "Elevated", recommendation: "Adopt healthy lifestyle habits and monitor your blood pressure.", colorClass: "bg-yellow-400 text-black" } : null,
  (sys, dia) => sys < 120 && dia < 80 ? { category: "Normal", recommendation: "Maintain a healthy lifestyle.", colorClass: "bg-green-500 text-white" } : null,
];


export default function BloodPressureClassificationCalculator() {
  const [systolic, setSystolic] = useState<string>('');
  const [diastolic, setDiastolic] = useState<string>('');

  const [classification, setClassification] = useState<BpCategoryInfo | null>(null);
  const [error, setError] = useState<string | null>(null);

  const classifyBloodPressure = () => {
    setError(null); setClassification(null);
    const sys = parseInt(systolic);
    const dia = parseInt(diastolic);

    if (isNaN(sys) || sys <=30 || sys >=300 || isNaN(dia) || dia <=20 || dia >= 200) { // Basic validation
      setError('Please enter valid systolic (e.g., 70-250) and diastolic (e.g., 40-150) pressures.');
      return;
    }
    if (sys < dia) {
        setError("Systolic pressure should generally be higher than diastolic pressure.");
        return;
    }

    for (const getClass of bpCategories) {
        const catInfo = getClass(sys, dia);
        if (catInfo) {
            setClassification(catInfo);
            return;
        }
    }
    // Fallback if no category matched (should not happen if bpCategories cover all ranges)
    setError("Could not classify blood pressure with given values. Please check inputs or consult guidelines.");
  };

  const resetForm = () => {
    setSystolic(''); setDiastolic('');
    setClassification(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle className="font-bold text-lg">MEDICAL DISCLAIMER - FOR INFORMATIONAL PURPOSES ONLY</AlertTitle>
        <AlertDescription className="text-base">
          This Blood Pressure Classification Calculator provides information based on general guidelines (e.g., 2017 ACC/AHA). It is <strong className="font-semibold">NOT A SUBSTITUTE FOR PROFESSIONAL MEDICAL ADVICE, DIAGNOSIS, OR TREATMENT</strong>. Blood pressure readings can vary and should be interpreted by a qualified healthcare professional who understands your individual medical history. <strong className="font-semibold">ALWAYS consult your doctor</strong> for any health concerns or before making decisions about your health or treatment. Do not use this tool for self-diagnosis. If you are experiencing a medical emergency, call emergency services immediately.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your blood pressure readings (mmHg).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="systolicBP">Systolic Pressure (Top Number)</Label><Input id="systolicBP" type="number" value={systolic} onChange={e=>setSystolic(e.target.value)} placeholder="e.g., 120"/></div>
            <div><Label htmlFor="diastolicBP">Diastolic Pressure (Bottom Number)</Label><Input id="diastolicBP" type="number" value={diastolic} onChange={e=>setDiastolic(e.target.value)} placeholder="e.g., 80"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={classifyBloodPressure}>Classify BP</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(classification || error) && (
          <Card className={`${classification?.colorClass || ''} border-2 ${classification?.colorClass.replace('bg-','border-') || 'border-border'}`}>
            <CardHeader><CardDescription className={`font-semibold ${classification ? 'opacity-90' : ''}`}>Blood Pressure Classification</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {classification && (<>
                <div className="p-3 rounded-md text-center">
                    <p className="text-2xl font-bold">{classification.category}</p>
                </div>
                <AlertDescription className="text-sm"><strong className="font-medium">Recommendation:</strong> {classification.recommendation}</AlertDescription>
              </>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BloodPressureClassificationCalculator.tsx ======
==================================================

// ====== START OF FILE: BmiCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8.81 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, AlertTriangle } from "lucide-react";

interface BmiResult {
  bmi: number;
  category: string;
  color: string;
}

export default function BmiCalculator() {
  const [height, setHeight] = useState<string>('');
  const [weight, setWeight] = useState<string>('');
  const [heightUnit, setHeightUnit] = useState<'cm' | 'in' | 'ftin'>('cm');
  const [weightUnit, setWeightUnit] = useState<'kg' | 'lb'>('kg');
  const [feet, setFeet] = useState<string>('');
  const [inches, setInches] = useState<string>('');
  
  const [bmiResult, setBmiResult] = useState<BmiResult | null>(null);
  const [error, setError] = useState<string | null>(null);

  const getBmiCategory = (bmiValue: number): Pick<BmiResult, 'category' | 'color'> => {
    if (bmiValue < 18.5) return { category: "Underweight", color: "text-yellow-600" };
    if (bmiValue < 25) return { category: "Normal weight", color: "text-green-600" };
    if (bmiValue < 30) return { category: "Overweight", color: "text-orange-500" };
    return { category: "Obese", color: "text-red-600" };
  };

  const calculateBmi = () => {
    setError(null);
    setBmiResult(null);

    let hCm: number;
    let wKg: number;

    // Height conversion
    if (heightUnit === 'cm') {
      hCm = parseFloat(height);
    } else if (heightUnit === 'in') {
      hCm = parseFloat(height) * 2.54;
    } else if (heightUnit === 'ftin') {
      const ft = parseFloat(feet);
      const inc = parseFloat(inches);
      if (isNaN(ft) || ft < 0 || isNaN(inc) || inc < 0 || inc >= 12) {
        setError('Please enter valid feet and inches (0-11).');
        return;
      }
      hCm = (ft * 12 + inc) * 2.54;
    } else {
      setError('Invalid height unit.');
      return;
    }

    // Weight conversion
    if (weightUnit === 'kg') {
      wKg = parseFloat(weight);
    } else if (weightUnit === 'lb') {
      wKg = parseFloat(weight) * 0.453592;
    } else {
      setError('Invalid weight unit.');
      return;
    }

    if (isNaN(hCm) || hCm <= 0 || isNaN(wKg) || wKg <= 0) {
      setError('Please enter valid positive numbers for height and weight.');
      return;
    }

    const hMeters = hCm / 100;
    const bmiValue = wKg / (hMeters * hMeters);
    const categoryInfo = getBmiCategory(bmiValue);
    setBmiResult({ bmi: parseFloat(bmiValue.toFixed(1)), ...categoryInfo });
  };
  
  const resetForm = () => {
    setHeight('');
    setWeight('');
    setFeet('');
    setInches('');
    setBmiResult(null);
    setError(null);
  };

  return (
    <TooltipProvider>
      <div className="space-y-6">
        <Alert>
          <Info className="h-4 w-4" />
          <AlertTitle>Medical Disclaimer</AlertTitle>
          <AlertDescription>
            BMI is a general screening tool and may not be accurate for all body types (e.g., athletes). It does not diagnose health conditions. Consult a healthcare professional for personalized medical advice.
          </AlertDescription>
        </Alert>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardDescription>Calculate your Body Mass Index (BMI).</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Tooltip>
                    <TooltipTrigger className="text-left w-full"><Label>Height Unit</Label></TooltipTrigger>
                    <TooltipContent><p>Choose your preferred unit for height.</p></TooltipContent>
                </Tooltip>
                <Select value={heightUnit} onValueChange={(value: 'cm' | 'in' | 'ftin') => setHeightUnit(value)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="cm">Centimeters (cm)</SelectItem>
                    <SelectItem value="in">Inches (in)</SelectItem>
                    <SelectItem value="ftin">Feet & Inches (ft, in)</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {heightUnit === 'ftin' ? (
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="feet">Feet (ft)</Label>
                    <Input id="feet" type="number" value={feet} onChange={(e) => setFeet(e.target.value)} placeholder="e.g., 5" />
                  </div>
                  <div>
                    <Label htmlFor="inches">Inches (in)</Label>
                    <Input id="inches" type="number" value={inches} onChange={(e) => setInches(e.target.value)} placeholder="e.g., 10" />
                  </div>
                </div>
              ) : (
                <div>
                   <Tooltip>
                        <TooltipTrigger className="w-full text-left"><Label htmlFor="height">Height</Label></TooltipTrigger>
                        <TooltipContent><p>Enter your total height in the selected unit.</p></TooltipContent>
                    </Tooltip>
                  <Input id="height" type="number" value={height} onChange={(e) => setHeight(e.target.value)} placeholder={heightUnit === 'cm' ? "e.g., 170" : "e.g., 68"} />
                </div>
              )}
              
              <div className="grid grid-cols-2 gap-4 items-end">
                <div>
                  <Tooltip>
                    <TooltipTrigger className="w-full text-left"><Label htmlFor="weight">Weight</Label></TooltipTrigger>
                    <TooltipContent><p>Enter your body weight.</p></TooltipContent>
                  </Tooltip>
                  <Input id="weight" type="number" value={weight} onChange={(e) => setWeight(e.target.value)} placeholder={weightUnit === 'kg' ? "e.g., 65" : "e.g., 150"} />
                </div>
                <div>
                  <Label htmlFor="weightUnit">Unit</Label>
                   <Select value={weightUnit} onValueChange={(value: 'kg' | 'lb') => setWeightUnit(value)}>
                    <SelectTrigger><SelectValue /></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="kg">Kilograms (kg)</SelectItem>
                      <SelectItem value="lb">Pounds (lb)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button onClick={calculateBmi}>Calculate BMI</Button>
              <Button variant="outline" onClick={resetForm}>Reset</Button>
            </CardFooter>
          </Card>

          {(bmiResult || error) && (
            <Card>
              <CardHeader>
                <CardDescription>BMI Result</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {error && (
                  <Alert variant="destructive">
                    <Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription>
                  </Alert>
                )}
                {bmiResult && (
                  <div className="space-y-3">
                    <div className={`flex justify-between items-center p-4 rounded-md bg-opacity-10 ${bmiResult.color.replace('text-', 'bg-')}/10`}>
                      <div>
                        <p className="text-sm text-muted-foreground">Your BMI</p>
                        <p className={`text-4xl font-bold ${bmiResult.color}`}>{bmiResult.bmi}</p>
                        <p className={`text-lg font-semibold ${bmiResult.color}`}>{bmiResult.category}</p>
                      </div>
                      <CopyButton textToCopy={String(bmiResult.bmi)} variant="ghost" />
                    </div>
                     <Alert>
                      <Info className="h-4 w-4" />
                      <AlertTitle>BMI Categories (WHO Standard)</AlertTitle>
                      <AlertDescription>
                          Below 18.5: Underweight<br/>
                          18.5 – 24.9: Normal weight<br/>
                          25.0 – 29.9: Overweight<br/>
                          30.0 and above: Obese
                      </AlertDescription>
                    </Alert>
                  </div>
                )}
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </TooltipProvider>
  );
}



// ====== END OF FILE: BmiCalculator.tsx ======
==================================================

// ====== START OF FILE: BmrCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.26 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, HeartPulse } from "lucide-react";

// Mifflin-St Jeor Equation:
// For men: BMR = 10 * weight (kg) + 6.25 * height (cm) - 5 * age (y) + 5
// For women: BMR = 10 * weight (kg) + 6.25 * height (cm) - 5 * age (y) - 161

export default function BmrCalculator() {
  const [gender, setGender] = useState<'male' | 'female'>('male');
  const [age, setAge] = useState<string>('');
  const [heightCm, setHeightCm] = useState<string>('');
  const [weightKg, setWeightKg] = useState<string>('');
  
  const [bmr, setBmr] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateBmr = () => {
    setError(null);
    setBmr(null);

    const ageVal = parseInt(age);
    const heightVal = parseFloat(heightCm);
    const weightVal = parseFloat(weightKg);

    if (isNaN(ageVal) || ageVal <= 0 || isNaN(heightVal) || heightVal <= 0 || isNaN(weightVal) || weightVal <= 0) {
      setError('Please enter valid positive numbers for age, height (cm), and weight (kg).');
      return;
    }

    let calculatedBmr: number;
    if (gender === 'male') {
      calculatedBmr = (10 * weightVal) + (6.25 * heightVal) - (5 * ageVal) + 5;
    } else { // female
      calculatedBmr = (10 * weightVal) + (6.25 * heightVal) - (5 * ageVal) - 161;
    }
    
    if (isNaN(calculatedBmr) || calculatedBmr <= 0) {
        setError("Could not calculate BMR with the provided values. Please check your inputs.");
        return;
    }

    setBmr(calculatedBmr.toFixed(0));
  };
  
  const resetForm = () => {
    setGender('male');
    setAge('');
    setHeightCm('');
    setWeightKg('');
    setBmr(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>What is BMR?</AlertTitle>
        <AlertDescription>
          Basal Metabolic Rate (BMR) is the number of calories your body needs to accomplish its most basic (basal) life-sustaining functions. This calculator uses the Mifflin-St Jeor equation.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate your Basal Metabolic Rate (BMR).</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="gender">Biological Gender</Label>
              <Select value={gender} onValueChange={(value: 'male' | 'female') => setGender(value)}>
                <SelectTrigger id="gender"><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="male">Male</SelectItem>
                  <SelectItem value="female">Female</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="age">Age (Years)</Label>
              <Input id="age" type="number" value={age} onChange={(e) => setAge(e.target.value)} placeholder="e.g., 30" />
            </div>
            <div>
              <Label htmlFor="heightCm">Height (cm)</Label>
              <Input id="heightCm" type="number" value={heightCm} onChange={(e) => setHeightCm(e.target.value)} placeholder="e.g., 175" />
            </div>
            <div>
              <Label htmlFor="weightKg">Weight (kg)</Label>
              <Input id="weightKg" type="number" value={weightKg} onChange={(e) => setWeightKg(e.target.value)} placeholder="e.g., 70" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateBmr}>Calculate BMR</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(bmr !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Your Estimated BMR</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {bmr !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">BMR (Calories/day)</p><p className="text-3xl font-bold text-primary">{bmr}</p></div>
                  <CopyButton textToCopy={bmr} />
                </div>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    BMR is an estimate. Actual calorie needs vary based on activity level and other factors.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BmrCalculator.tsx ======
==================================================

// ====== START OF FILE: BodyFatCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8.39 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info } from "lucide-react";

// Using a simplified U.S. Navy formula for Body Fat Percentage
// Male: %BF = 86.010 * log10(waist - neck) - 70.041 * log10(height) + 36.76 (measurements in cm)
// Female: %BF = 163.205 * log10(waist + hip - neck) - 97.684 * log10(height) - 78.387 (measurements in cm)

export default function BodyFatCalculator() {
  const [gender, setGender] = useState<'male' | 'female'>('male');
  const [height, setHeight] = useState<string>(''); // cm
  const [neck, setNeck] = useState<string>(''); // cm
  const [waist, setWaist] = useState<string>(''); // cm
  const [hip, setHip] = useState<string>(''); // cm (female only)
  
  const [unitSystem, setUnitSystem] = useState<'metric' | 'imperial'>('metric');
  const [heightInches, setHeightInches] = useState<string>('');
  const [neckInches, setNeckInches] = useState<string>('');
  const [waistInches, setWaistInches] = useState<string>('');
  const [hipInches, setHipInches] = useState<string>('');


  const [bodyFatPercentage, setBodyFatPercentage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const toCm = (inches: number) => inches * 2.54;

  const calculateBodyFat = () => {
    setError(null);
    setBodyFatPercentage(null);

    let hCm: number, nCm: number, wCm: number, hipCm: number | undefined;

    if (unitSystem === 'metric') {
      hCm = parseFloat(height);
      nCm = parseFloat(neck);
      wCm = parseFloat(waist);
      if (gender === 'female') hipCm = parseFloat(hip);
    } else { // Imperial
      hCm = toCm(parseFloat(heightInches));
      nCm = toCm(parseFloat(neckInches));
      wCm = toCm(parseFloat(waistInches));
      if (gender === 'female') hipCm = toCm(parseFloat(hipInches));
    }

    if (isNaN(hCm) || hCm <= 0 || isNaN(nCm) || nCm <= 0 || isNaN(wCm) || wCm <= 0) {
      setError("Please enter valid positive values for height, neck, and waist.");
      return;
    }
    if (gender === 'female' && (hipCm === undefined || isNaN(hipCm) || hipCm <= 0)) {
        setError("Please enter valid positive hip measurement for females.");
        return;
    }

    let bfp: number;
    try {
        if (gender === 'male') {
            if (wCm - nCm <= 0) throw new Error("Waist minus neck measurement must be positive.");
            bfp = 86.010 * Math.log10(wCm - nCm) - 70.041 * Math.log10(hCm) + 36.76;
        } else { // female
            if (!hipCm || (wCm + hipCm - nCm <= 0)) throw new Error("Waist plus hip minus neck measurement must be positive.");
            bfp = 163.205 * Math.log10(wCm + hipCm - nCm) - 97.684 * Math.log10(hCm) - 78.387;
        }
    } catch (e: any) {
        setError(e.message || "Calculation error. Ensure measurements are logical (e.g., height > 0).");
        return;
    }
    
    if (isNaN(bfp) || !isFinite(bfp)) {
        setError("Could not calculate body fat. Please check your inputs. Some combinations of values may not be valid for this formula.");
        return;
    }
    
    bfp = Math.max(0, Math.min(100, bfp)); // Clamp result
    setBodyFatPercentage(bfp.toFixed(1));
  };
  
  const resetForm = () => {
    setHeight(''); setNeck(''); setWaist(''); setHip('');
    setHeightInches(''); setNeckInches(''); setWaistInches(''); setHipInches('');
    setBodyFatPercentage(null); setError(null);
  };

  return (
    <div className="space-y-6">
       <Alert>
          <Info className="h-4 w-4" />
          <AlertTitle>Estimation Disclaimer</AlertTitle>
          <AlertDescription>
            This calculator uses a common formula (U.S. Navy method) to estimate body fat percentage. Results are estimates and can vary from clinical measurements. Consult a healthcare professional for accurate assessment.
          </AlertDescription>
        </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate body fat percentage using tape measurements.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="gender">Gender</Label>
              <Select value={gender} onValueChange={(value: 'male' | 'female') => setGender(value)}>
                <SelectTrigger id="gender"><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="male">Male</SelectItem>
                  <SelectItem value="female">Female</SelectItem>
                </SelectContent>
              </Select>
            </div>
             <div>
              <Label htmlFor="unitSystem">Unit System</Label>
              <Select value={unitSystem} onValueChange={(value: 'metric' | 'imperial') => setUnitSystem(value)}>
                <SelectTrigger id="unitSystem"><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="metric">Metric (cm)</SelectItem>
                  <SelectItem value="imperial">Imperial (inches)</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {unitSystem === 'metric' ? (
              <>
                <div><Label htmlFor="height">Height (cm)</Label><Input id="height" type="number" value={height} onChange={(e) => setHeight(e.target.value)} placeholder="e.g., 175" /></div>
                <div><Label htmlFor="neck">Neck Circumference (cm)</Label><Input id="neck" type="number" value={neck} onChange={(e) => setNeck(e.target.value)} placeholder="e.g., 38" /></div>
                <div><Label htmlFor="waist">Waist Circumference (cm)</Label><Input id="waist" type="number" value={waist} onChange={(e) => setWaist(e.target.value)} placeholder="e.g., 85" /></div>
                {gender === 'female' && (<div><Label htmlFor="hip">Hip Circumference (cm)</Label><Input id="hip" type="number" value={hip} onChange={(e) => setHip(e.target.value)} placeholder="e.g., 95" /></div>)}
              </>
            ) : (
               <>
                <div><Label htmlFor="heightInches">Height (inches)</Label><Input id="heightInches" type="number" value={heightInches} onChange={(e) => setHeightInches(e.target.value)} placeholder="e.g., 69" /></div>
                <div><Label htmlFor="neckInches">Neck Circumference (inches)</Label><Input id="neckInches" type="number" value={neckInches} onChange={(e) => setNeckInches(e.target.value)} placeholder="e.g., 15" /></div>
                <div><Label htmlFor="waistInches">Waist Circumference (inches)</Label><Input id="waistInches" type="number" value={waistInches} onChange={(e) => setWaistInches(e.target.value)} placeholder="e.g., 33" /></div>
                {gender === 'female' && (<div><Label htmlFor="hipInches">Hip Circumference (inches)</Label><Input id="hipInches" type="number" value={hipInches} onChange={(e) => setHipInches(e.target.value)} placeholder="e.g., 37" /></div>)}
              </>
            )}
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateBodyFat}>Calculate</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(bodyFatPercentage !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Body Fat %</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {bodyFatPercentage !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Body Fat Percentage</p><p className="text-3xl font-bold text-primary">{bodyFatPercentage}%</p></div>
                  <CopyButton textToCopy={bodyFatPercentage} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BodyFatCalculator.tsx ======
==================================================

// ====== START OF FILE: BodyFrameSizeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.46 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, UserRound as BodyIcon } from "lucide-react";

type GenderBodyFrame = 'male' | 'female';
type UnitSystemBodyFrame = 'imperial' | 'metric';
type FrameSizeResult = 'Small' | 'Medium' | 'Large' | 'N/A';

export default function BodyFrameSizeCalculator() {
  const [gender, setGender] = useState<GenderBodyFrame>('female');
  const [height, setHeight] = useState<string>('');
  const [wrist, setWrist] = useState<string>('');
  const [units, setUnits] = useState<UnitSystemBodyFrame>('imperial');

  const [frameSize, setFrameSize] = useState<FrameSizeResult | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateFrame = () => {
    setError(null); setFrameSize(null);
    let h = parseFloat(height);
    let w = parseFloat(wrist);

    if (isNaN(h) || h <= 0 || isNaN(w) || w <= 0) {
      setError("Height and Wrist Circumference must be positive numbers.");
      return;
    }

    // Convert all inputs to inches for calculation
    let heightInches = h;
    let wristInches = w;
    if (units === 'metric') {
      heightInches = h / 2.54;
      wristInches = w / 2.54;
    }

    let result: FrameSizeResult = 'N/A';
    if (gender === 'male') {
      // Simplified male logic
      if (heightInches > 65) { // 5'5"
        if (wristInches >= 6.5 && wristInches <= 7.5) result = 'Medium';
        else if (wristInches < 6.5) result = 'Small';
        else result = 'Large';
      } else {
        // Simplified for shorter men
        if (wristInches >= 6.25 && wristInches <= 7.25) result = 'Medium';
        else if (wristInches < 6.25) result = 'Small';
        else result = 'Large';
      }
    } else { // female
      if (heightInches < 62) { // Under 5'2"
        if (wristInches >= 5.5 && wristInches <= 5.75) result = 'Medium';
        else if (wristInches < 5.5) result = 'Small';
        else result = 'Large';
      } else if (heightInches >= 62 && heightInches <= 65) { // 5'2" to 5'5"
        if (wristInches >= 6 && wristInches <= 6.25) result = 'Medium';
        else if (wristInches < 6) result = 'Small';
        else result = 'Large';
      } else { // Over 5'5"
        if (wristInches >= 6.25 && wristInches <= 6.5) result = 'Medium';
        else if (wristInches < 6.25) result = 'Small';
        else result = 'Large';
      }
    }
    setFrameSize(result);
  };

  const resetForm = () => {
    setHeight(''); setWrist(''); setFrameSize(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Body Frame Size Estimator</AlertTitle>
        <AlertDescription>
          This is an illustrative tool to estimate body frame size (small, medium, large) based on height and wrist circumference. It is not a medical standard and is for informational purposes only.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your measurements.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="genderBFS">Biological Sex</Label><Select value={gender} onValueChange={(v:GenderBodyFrame)=>setGender(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="female">Female</SelectItem><SelectItem value="male">Male</SelectItem></SelectContent></Select></div>
            <div><Label htmlFor="unitsBFS">Unit System</Label><Select value={units} onValueChange={(v:UnitSystemBodyFrame)=>setUnits(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Imperial (inches)</SelectItem><SelectItem value="metric">Metric (cm)</SelectItem></SelectContent></Select></div>
            <div><Label htmlFor="heightBFS">Height ({units})</Label><Input id="heightBFS" type="number" value={height} onChange={e=>setHeight(e.target.value)} /></div>
            <div><Label htmlFor="wristBFS">Wrist Circumference ({units})</Label><Input id="wristBFS" type="number" value={wrist} onChange={e=>setWrist(e.target.value)} /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateFrame}>Estimate Frame Size</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(frameSize || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Body Frame Size</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {frameSize && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Estimated Frame Size</p><p className="text-2xl font-bold text-primary">{frameSize}</p></div><CopyButton textToCopy={frameSize}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BodyFrameSizeCalculator.tsx ======
==================================================

// ====== START OF FILE: BodySurfaceAreaCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.62 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info } from "lucide-react";

// Mosteller formula for BSA: BSA (m²) = sqrt((Height(cm) * Weight(kg)) / 3600)
// Du Bois formula: BSA (m²) = 0.007184 * Height(cm)^0.725 * Weight(kg)^0.425

type BsaFormula = 'mosteller' | 'dubois';

export default function BodySurfaceAreaCalculator() {
  const [height, setHeight] = useState<string>(''); // cm
  const [weight, setWeight] = useState<string>(''); // kg
  const [formula, setFormula] = useState<BsaFormula>('mosteller');
  
  const [bsa, setBsa] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateBsa = () => {
    setError(null);
    setBsa(null);

    const h = parseFloat(height);
    const w = parseFloat(weight);

    if (isNaN(h) || h <= 0 || isNaN(w) || w <= 0) {
      setError('Please enter valid positive numbers for height (cm) and weight (kg).');
      return;
    }

    let calculatedBsa: number;
    if (formula === 'mosteller') {
      calculatedBsa = Math.sqrt((h * w) / 3600);
    } else if (formula === 'dubois') {
      calculatedBsa = 0.007184 * Math.pow(h, 0.725) * Math.pow(w, 0.425);
    } else {
      setError("Invalid formula selected.");
      return;
    }
    
    if (isNaN(calculatedBsa) || !isFinite(calculatedBsa)) {
        setError("Could not calculate BSA. Check inputs.");
        return;
    }

    setBsa(calculatedBsa.toFixed(4));
  };
  
  const resetForm = () => {
    setHeight('');
    setWeight('');
    setBsa(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Medical Disclaimer</AlertTitle>
        <AlertDescription>
          Body Surface Area (BSA) calculations are used in medicine, often for drug dosage. This tool is for informational purposes only and should not replace professional medical advice.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate Body Surface Area (BSA).</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="height">Height (cm)</Label>
              <Input id="height" type="number" value={height} onChange={(e) => setHeight(e.target.value)} placeholder="e.g., 170" />
            </div>
            <div>
              <Label htmlFor="weight">Weight (kg)</Label>
              <Input id="weight" type="number" value={weight} onChange={(e) => setWeight(e.target.value)} placeholder="e.g., 70" />
            </div>
            <div>
              <Label htmlFor="formula">Formula</Label>
              <Select value={formula} onValueChange={(value: BsaFormula) => setFormula(value)}>
                <SelectTrigger id="formula"><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="mosteller">Mosteller</SelectItem>
                  <SelectItem value="dubois">Du Bois</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateBsa}>Calculate BSA</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(bsa !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated BSA</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {bsa !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">BSA (m²)</p><p className="text-3xl font-bold text-primary">{bsa} m²</p></div>
                  <CopyButton textToCopy={bsa} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BodySurfaceAreaCalculator.tsx ======
==================================================

// ====== START OF FILE: BodyTypeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.89 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Info } from "lucide-react";

// This is a highly simplified, questionnaire-based body type calculator.
// Body types (somatotypes) are a spectrum and less scientifically rigid than other measures.

interface Answers {
  frame: string;
  muscleGain: string;
  fatGain: string;
  metabolism: string;
}

type BodyType = 'Ectomorph' | 'Mesomorph' | 'Endomorph' | 'Combination' | 'Not Determined';

const initialAnswers: Answers = {
  frame: '',
  muscleGain: '',
  fatGain: '',
  metabolism: '',
};

export default function BodyTypeCalculator() {
  const [answers, setAnswers] = useState<Answers>(initialAnswers);
  const [bodyTypeResult, setBodyTypeResult] = useState<BodyType | null>(null);
  const [resultDescription, setResultDescription] = useState<string | null>(null);

  const handleAnswerChange = (question: keyof Answers, value: string) => {
    setAnswers(prev => ({ ...prev, [question]: value }));
  };

  const determineBodyType = () => {
    let ectomorphScore = 0;
    let mesomorphScore = 0;
    let endomorphScore = 0;

    // Frame
    if (answers.frame === 'small') ectomorphScore++;
    if (answers.frame === 'medium') mesomorphScore++;
    if (answers.frame === 'large') endomorphScore++;

    // Muscle Gain
    if (answers.muscleGain === 'hard') ectomorphScore++;
    if (answers.muscleGain === 'easy') mesomorphScore++;
    if (answers.muscleGain === 'veryeasy') endomorphScore++; // Endomorphs can also gain muscle, but often with fat

    // Fat Gain
    if (answers.fatGain === 'hard') ectomorphScore++;
    if (answers.fatGain === 'moderate') mesomorphScore++;
    if (answers.fatGain === 'easy') endomorphScore++;

    // Metabolism
    if (answers.metabolism === 'fast') ectomorphScore++;
    if (answers.metabolism === 'moderate') mesomorphScore++;
    if (answers.metabolism === 'slow') endomorphScore++;
    
    let determinedType: BodyType = 'Not Determined';
    let description = '';

    if (ectomorphScore > mesomorphScore && ectomorphScore > endomorphScore) {
      determinedType = 'Ectomorph';
      description = "Ectomorphs tend to be lean, find it harder to gain muscle and fat, and often have a faster metabolism. They may have a smaller bone structure.";
    } else if (mesomorphScore > ectomorphScore && mesomorphScore > endomorphScore) {
      determinedType = 'Mesomorph';
      description = "Mesomorphs often have an athletic build, can gain muscle relatively easily, and typically have a moderate metabolism. They tend to gain and lose weight without too much difficulty.";
    } else if (endomorphScore > ectomorphScore && endomorphScore > mesomorphScore) {
      determinedType = 'Endomorph';
      description = "Endomorphs tend to have a larger bone structure, can gain fat and muscle more easily, and may have a slower metabolism. They might find it harder to lose fat.";
    } else {
      determinedType = 'Combination';
      description = "Your answers suggest a combination of traits from different body types. Many people don't fit perfectly into one category.";
    }
    
    if (Object.values(answers).some(ans => ans === '')) {
        determinedType = 'Not Determined';
        description = "Please answer all questions to get an estimation.";
    }

    setBodyTypeResult(determinedType);
    setResultDescription(description);
  };

  const resetForm = () => {
    setAnswers(initialAnswers);
    setBodyTypeResult(null);
    setResultDescription(null);
  };

  const questions = [
    { id: 'frame', label: 'How would you describe your bone structure/frame?', options: [{value:'small', label:'Small/Delicate'}, {value:'medium', label:'Medium'}, {value:'large', label:'Large/Solid'}] },
    { id: 'muscleGain', label: 'How easily do you gain muscle?', options: [{value:'hard', label:'Hard'}, {value:'easy', label:'Easily'}, {value:'veryeasy', label:'Very Easily (may come with fat)'}] },
    { id: 'fatGain', label: 'How easily do you gain fat?', options: [{value:'hard', label:'Hard'}, {value:'moderate', label:'Moderately'}, {value:'easy', label:'Easily'}] },
    { id: 'metabolism', label: 'How would you describe your metabolism?', options: [{value:'fast', label:'Fast (hard to gain weight)'}, {value:'moderate', label:'Moderate'}, {value:'slow', label:'Slow (easy to gain weight)'}] },
  ];

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Informational Tool Only</AlertTitle>
        <AlertDescription>
          This calculator provides a simplified estimation of body type based on common characteristics. Somatotypes are a spectrum, and individual results vary. This is not a diagnostic tool.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Answer the questions to get an estimated body type.</CardDescription></CardHeader>
          <CardContent className="space-y-6">
            {questions.map(q => (
              <div key={q.id}>
                <Label className="font-semibold mb-2 block">{q.label}</Label>
                <RadioGroup value={answers[q.id as keyof Answers]} onValueChange={(val) => handleAnswerChange(q.id as keyof Answers, val)}>
                  {q.options.map(opt => (
                    <div key={opt.value} className="flex items-center space-x-2">
                      <RadioGroupItem value={opt.value} id={`${q.id}-${opt.value}`} />
                      <Label htmlFor={`${q.id}-${opt.value}`}>{opt.label}</Label>
                    </div>
                  ))}
                </RadioGroup>
              </div>
            ))}
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={determineBodyType}>Estimate Body Type</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {bodyTypeResult && (
          <Card>
            <CardHeader><CardDescription>Estimated Body Type</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                <div><p className="text-sm text-muted-foreground">Your Estimated Body Type</p><p className="text-3xl font-bold text-primary">{bodyTypeResult}</p></div>
                <CopyButton textToCopy={bodyTypeResult} />
              </div>
              {resultDescription && <AlertDescription>{resultDescription}</AlertDescription>}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BodyTypeCalculator.tsx ======
==================================================

// ====== START OF FILE: BodyWaterPercentageCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.7 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Droplet } from "lucide-react";

type UnitSystem = 'imperial' | 'metric';
type Gender = 'male' | 'female';

export default function BodyWaterPercentageCalculator() {
  const [weight, setWeight] = useState<string>('');
  const [height, setHeight] = useState<string>('');
  const [age, setAge] = useState<string>('');
  const [gender, setGender] = useState<Gender>('male');
  const [units, setUnits] = useState<UnitSystem>('imperial');

  const [totalBodyWater, setTotalBodyWater] = useState<string | null>(null);
  const [waterPercentage, setWaterPercentage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateWater = () => {
    setError(null);
    setTotalBodyWater(null);
    setWaterPercentage(null);

    let wKg = parseFloat(weight);
    let hCm = parseFloat(height);
    const ageYrs = parseInt(age);

    if (units === 'imperial') {
      wKg *= 0.453592; // lbs to kg
      hCm *= 2.54;    // inches to cm
    }

    if (isNaN(wKg) || wKg <= 0 || isNaN(hCm) || hCm <= 0 || isNaN(ageYrs) || ageYrs <= 0) {
      setError('Please enter valid, positive numbers for all fields.');
      return;
    }

    // Watson formula for Total Body Water (TBW) in Liters
    let tbwLiters: number;
    if (gender === 'male') {
      tbwLiters = 2.447 - (0.09156 * ageYrs) + (0.1074 * hCm) + (0.3362 * wKg);
    } else { // female
      tbwLiters = -2.097 + (0.1069 * hCm) + (0.2466 * wKg);
    }

    if (tbwLiters <= 0) {
      setError("Calculation resulted in non-positive water volume. Please check your inputs.");
      return;
    }

    const waterPercent = (tbwLiters / wKg) * 100; // 1L water ≈ 1kg

    setTotalBodyWater(tbwLiters.toFixed(2));
    setWaterPercentage(waterPercent.toFixed(1));
  };

  const resetForm = () => {
    setWeight(''); setHeight(''); setAge('');
    setTotalBodyWater(null); setWaterPercentage(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Total Body Water Calculator</AlertTitle><AlertDescription>Estimate your Total Body Water (TBW) and its percentage of your body weight using the Watson formula. This is an estimate; actual values can vary.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="unitsBWP">Unit System</Label><Select value={units} onValueChange={(v: UnitSystem) => setUnits(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Imperial (lbs, in)</SelectItem><SelectItem value="metric">Metric (kg, cm)</SelectItem></SelectContent></Select></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="weightBWP">Weight ({units === 'imperial' ? 'lbs' : 'kg'})</Label><Input id="weightBWP" type="number" value={weight} onChange={e=>setWeight(e.target.value)}/></div>
              <div><Label htmlFor="heightBWP">Height ({units === 'imperial' ? 'in' : 'cm'})</Label><Input id="heightBWP" type="number" value={height} onChange={e=>setHeight(e.target.value)}/></div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="ageBWP">Age (years)</Label><Input id="ageBWP" type="number" value={age} onChange={e=>setAge(e.target.value)}/></div>
              <div><Label htmlFor="genderBWP">Biological Sex</Label><Select value={gender} onValueChange={(v: Gender)=>setGender(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="male">Male</SelectItem><SelectItem value="female">Female</SelectItem></SelectContent></Select></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateWater}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(totalBodyWater || error) && (
          <Card>
            <CardHeader><CardDescription>Body Water Estimation</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && <Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>}
              {totalBodyWater && <div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Body Water (TBW)</p><p className="font-semibold">{totalBodyWater} Liters</p></div>}
              {waterPercentage && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Water as % of Body Weight</p>
                    <p className="text-2xl font-bold text-primary">{waterPercentage}%</p>
                  </div>
                  <CopyButton textToCopy={waterPercentage} />
                </div>
              )}
               <AlertDescription className="text-xs pt-2">Typical ranges: Adult males ~60%, adult females ~55%.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BodyWaterPercentageCalculator.tsx ======
==================================================

// ====== START OF FILE: BondCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.59 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info } from "lucide-react";

// Simplified Yield to Maturity (YTM) calculation using an approximation or iterative method.
// YTM = (C + (FV - PV) / T) / ((FV + PV) / 2)
// Where: C = Annual Coupon Payment, FV = Face Value, PV = Present Value (Current Price), T = Years to Maturity

export default function BondCalculator() {
  const [faceValue, setFaceValue] = useState<string>('1000');
  const [currentPrice, setCurrentPrice] = useState<string>('');
  const [couponRate, setCouponRate] = useState<string>(''); // Annual %
  const [yearsToMaturity, setYearsToMaturity] = useState<string>('');
  
  const [ytm, setYtm] = useState<string | null>(null);
  const [annualCouponPayment, setAnnualCouponPayment] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateBondYield = () => {
    setError(null);
    setYtm(null);
    setAnnualCouponPayment(null);

    const FV = parseFloat(faceValue);
    const PV = parseFloat(currentPrice);
    const annualCouponRate = parseFloat(couponRate) / 100;
    const T = parseFloat(yearsToMaturity);

    if (isNaN(FV) || FV <= 0 || isNaN(PV) || PV <= 0 || isNaN(annualCouponRate) || annualCouponRate < 0 || isNaN(T) || T <= 0) {
      setError('Please enter valid positive numbers for all fields. Coupon rate can be zero.');
      return;
    }

    const C = FV * annualCouponRate; // Annual coupon payment
    setAnnualCouponPayment(C.toFixed(2));

    // Approximate YTM calculation
    const calculatedYtm = (C + (FV - PV) / T) / ((FV + PV) / 2);
    
    if (isNaN(calculatedYtm) || !isFinite(calculatedYtm)) {
        setError("Could not calculate YTM. Check input values. Denominator for average price might be zero or result is invalid.");
        return;
    }

    setYtm((calculatedYtm * 100).toFixed(2)); // YTM as percentage
  };
  
  const resetForm = () => {
    setCurrentPrice('');
    setCouponRate('');
    setYearsToMaturity('');
    setYtm(null);
    setAnnualCouponPayment(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Simplified Calculation</AlertTitle>
        <AlertDescription>
          This calculator provides an <strong className="font-semibold">approximate Yield to Maturity (YTM)</strong>. Actual bond pricing and yield calculations can be more complex, involving factors like payment frequency and call provisions. For precise financial decisions, consult a financial advisor.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate a bond's Yield to Maturity (YTM).</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="faceValue">Bond Face Value (Par Value) ($)</Label>
              <Input id="faceValue" type="number" value={faceValue} onChange={(e) => setFaceValue(e.target.value)} placeholder="e.g., 1000" />
            </div>
            <div>
              <Label htmlFor="currentPrice">Current Market Price ($)</Label>
              <Input id="currentPrice" type="number" value={currentPrice} onChange={(e) => setCurrentPrice(e.target.value)} placeholder="e.g., 950" />
            </div>
            <div>
              <Label htmlFor="couponRate">Annual Coupon Rate (%)</Label>
              <Input id="couponRate" type="number" value={couponRate} onChange={(e) => setCouponRate(e.target.value)} placeholder="e.g., 5" />
            </div>
            <div>
              <Label htmlFor="yearsToMaturity">Years to Maturity</Label>
              <Input id="yearsToMaturity" type="number" value={yearsToMaturity} onChange={(e) => setYearsToMaturity(e.target.value)} placeholder="e.g., 10" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateBondYield}>Calculate YTM</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(ytm !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Bond Calculation Results</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {annualCouponPayment !== null && (
                <div className="p-3 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Annual Coupon Payment</p>
                  <p className="text-xl font-semibold">${annualCouponPayment}</p>
                </div>
              )}
              {ytm !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Approx. Yield to Maturity (YTM)</p><p className="text-3xl font-bold text-primary">{ytm}%</p></div>
                  <CopyButton textToCopy={ytm} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BondCalculator.tsx ======
==================================================

// ====== START OF FILE: BondPriceCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.8 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, FileText } from "lucide-react";

export default function BondPriceCalculator() {
  const [faceValue, setFaceValue] = useState<string>('1000');
  const [couponRate, setCouponRate] = useState<string>(''); // Annual %
  const [marketRate, setMarketRate] = useState<string>(''); // Annual % (YTM)
  const [yearsToMaturity, setYearsToMaturity] = useState<string>('');
  const [paymentsPerYear, setPaymentsPerYear] = useState<string>('2'); // Semi-annually is common

  const [bondPrice, setBondPrice] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateBondPrice = () => {
    setError(null);
    setBondPrice(null);

    const FV = parseFloat(faceValue);
    const C_annual_rate = parseFloat(couponRate) / 100;
    const YTM_annual_rate = parseFloat(marketRate) / 100;
    const T_years = parseFloat(yearsToMaturity);
    const n_payments = parseInt(paymentsPerYear);

    if (isNaN(FV) || FV <= 0 || isNaN(C_annual_rate) || C_annual_rate < 0 || isNaN(YTM_annual_rate) || YTM_annual_rate < 0 || isNaN(T_years) || T_years <= 0 || isNaN(n_payments) || n_payments <= 0) {
      setError('Please enter valid, positive numbers for all fields. Rates can be zero.');
      return;
    }

    const C_periodic_payment = (FV * C_annual_rate) / n_payments;
    const r_periodic_market_rate = YTM_annual_rate / n_payments;
    const N_total_periods = T_years * n_payments;

    let pv_annuity: number;
    if (r_periodic_market_rate === 0) {
      pv_annuity = C_periodic_payment * N_total_periods;
    } else {
      pv_annuity = C_periodic_payment * ((1 - Math.pow(1 + r_periodic_market_rate, -N_total_periods)) / r_periodic_market_rate);
    }

    const pv_face_value = FV / Math.pow(1 + r_periodic_market_rate, N_total_periods);
    const calculatedBondPrice = pv_annuity + pv_face_value;

    if (isNaN(calculatedBondPrice) || !isFinite(calculatedBondPrice)) {
      setError("Could not calculate bond price. Check inputs.");
      return;
    }
    setBondPrice(calculatedBondPrice.toFixed(2));
  };

  const resetForm = () => {
    setFaceValue('1000');
    setCouponRate('');
    setMarketRate('');
    setYearsToMaturity('');
    setPaymentsPerYear('2');
    setBondPrice(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Bond Price Calculator</AlertTitle>
        <AlertDescription>
          Estimate the market price (present value) of a bond based on its face value, coupon rate, market rate (YTM), and time to maturity.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter bond and market details.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="faceValueBond">Face Value (Par Value) ($)</Label><Input id="faceValueBond" type="number" value={faceValue} onChange={(e) => setFaceValue(e.target.value)} /></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="couponRateBond">Coupon Rate (Annual %)</Label><Input id="couponRateBond" type="number" value={couponRate} onChange={(e) => setCouponRate(e.target.value)} placeholder="e.g., 5"/></div>
              <div><Label htmlFor="marketRateBond">Market Rate / YTM (Annual %)</Label><Input id="marketRateBond" type="number" value={marketRate} onChange={(e) => setMarketRate(e.target.value)} placeholder="e.g., 6"/></div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="yearsBond">Years to Maturity</Label><Input id="yearsBond" type="number" value={yearsToMaturity} onChange={(e) => setYearsToMaturity(e.target.value)} placeholder="e.g., 10"/></div>
              <div><Label htmlFor="paymentsPerYearBond">Payments per Year</Label><Select value={paymentsPerYear} onValueChange={setPaymentsPerYear}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="1">Annually</SelectItem><SelectItem value="2">Semi-Annually</SelectItem><SelectItem value="4">Quarterly</SelectItem></SelectContent></Select></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateBondPrice}>Calculate Bond Price</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>
        {(bondPrice || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Bond Price</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {bondPrice && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Estimated Bond Price</p>
                    <p className="text-2xl font-bold text-primary">${bondPrice}</p>
                  </div>
                  <CopyButton textToCopy={bondPrice} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BondPriceCalculator.tsx ======
==================================================

// ====== START OF FILE: BookReadingTimeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.41 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, BookOpen, Timer } from "lucide-react";

export default function BookReadingTimeCalculator() {
  const [wordCount, setWordCount] = useState<string>('');
  const [readingSpeedWpm, setReadingSpeedWpm] = useState<string>('200'); // Average reading speed

  const [estimatedTime, setEstimatedTime] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateReadingTime = () => {
    setError(null); setEstimatedTime(null);
    const wc = parseInt(wordCount);
    const wpm = parseInt(readingSpeedWpm);

    if (isNaN(wc) || wc <= 0 || isNaN(wpm) || wpm <= 0) {
      setError('Word count and reading speed (WPM) must be positive numbers.');
      return;
    }

    const totalMinutes = wc / wpm;
    const hours = Math.floor(totalMinutes / 60);
    const minutes = Math.round(totalMinutes % 60);

    setEstimatedTime(`${hours > 0 ? `${hours} hour(s) and ` : ''}${minutes} minute(s)`);
  };

  const resetForm = () => {
    setWordCount(''); setReadingSpeedWpm('200');
    setEstimatedTime(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Book Reading Time Estimator</AlertTitle><AlertDescription>Estimate how long it will take to read a book based on its approximate word count and your average reading speed (Words Per Minute).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter book and reading details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="wordCountBRT">Approximate Word Count of Book</Label><Input id="wordCountBRT" type="number" value={wordCount} onChange={e=>setWordCount(e.target.value)} placeholder="e.g., 90000"/></div>
            <div><Label htmlFor="readingSpeedBRT">Your Average Reading Speed (WPM)</Label><Input id="readingSpeedBRT" type="number" value={readingSpeedWpm} onChange={e=>setReadingSpeedWpm(e.target.value)} placeholder="Default: 200 WPM"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateReadingTime}>Estimate Time</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(estimatedTime || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Reading Time</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {estimatedTime && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Est. Reading Time</p><p className="text-2xl font-bold text-primary">{estimatedTime}</p></div><CopyButton textToCopy={estimatedTime}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BookReadingTimeCalculator.tsx ======
==================================================

// ====== START OF FILE: BooleanAlgebraCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.83 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Binary } from "lucide-react";

type BooleanOperation = 'AND' | 'OR' | 'NOT_A' | 'NOT_B' | 'NAND' | 'NOR' | 'XOR' | 'XNOR';
type BooleanInput = '0' | '1';

export default function BooleanAlgebraCalculator() {
  const [inputA, setInputA] = useState<BooleanInput>('0');
  const [inputB, setInputB] = useState<BooleanInput>('0');
  const [operation, setOperation] = useState<BooleanOperation>('AND');
  
  const [result, setResult] = useState<BooleanInput | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateBoolean = () => {
    setError(null);
    setResult(null);
    
    const a = parseInt(inputA);
    const b = parseInt(inputB);

    if (isNaN(a) || isNaN(b) || (a !== 0 && a !== 1) || (b !== 0 && b !== 1)) {
      setError("Inputs A and B must be 0 or 1.");
      return;
    }

    let res: number;
    switch(operation) {
      case 'AND': res = a & b; break;
      case 'OR': res = a | b; break;
      case 'NOT_A': res = a ? 0 : 1; break;
      case 'NOT_B': res = b ? 0 : 1; break;
      case 'NAND': res = (a & b) ? 0 : 1; break;
      case 'NOR': res = (a | b) ? 0 : 1; break;
      case 'XOR': res = a ^ b; break;
      case 'XNOR': res = (a ^ b) ? 0 : 1; break;
      default: setError("Invalid operation."); return;
    }
    setResult(res.toString() as BooleanInput);
  };

  const resetForm = () => {
    setInputA('0'); setInputB('0'); setOperation('AND');
    setResult(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Boolean Algebra Calculator (Basic Gates)</AlertTitle>
        <AlertDescription>
          Perform basic Boolean operations (AND, OR, NOT, NAND, NOR, XOR, XNOR) on two inputs (0 or 1). More complex expression parsing is not implemented.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Select inputs and operation.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="inputABool">Input A (0 or 1)</Label><Select value={inputA} onValueChange={(v: BooleanInput)=>setInputA(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="0">0 (False)</SelectItem><SelectItem value="1">1 (True)</SelectItem></SelectContent></Select></div>
              <div><Label htmlFor="inputBBool">Input B (0 or 1)</Label><Select value={inputB} onValueChange={(v: BooleanInput)=>setInputB(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="0">0 (False)</SelectItem><SelectItem value="1">1 (True)</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="operationBool">Operation</Label><Select value={operation} onValueChange={(v:BooleanOperation)=>setOperation(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                <SelectItem value="AND">A AND B</SelectItem><SelectItem value="OR">A OR B</SelectItem>
                <SelectItem value="NOT_A">NOT A</SelectItem><SelectItem value="NOT_B">NOT B</SelectItem>
                <SelectItem value="NAND">A NAND B</SelectItem><SelectItem value="NOR">A NOR B</SelectItem>
                <SelectItem value="XOR">A XOR B</SelectItem><SelectItem value="XNOR">A XNOR B</SelectItem>
            </SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateBoolean}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Boolean Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result !== null && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Result</p><p className="text-3xl font-bold text-primary">{result}</p></div><CopyButton textToCopy={result}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BooleanAlgebraCalculator.tsx ======
==================================================

// ====== START OF FILE: BraSizeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.49 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info } from "lucide-react";

// Common US/UK sizing method. Varies greatly by brand and region.
// Band Size: Underbust + 4 or 5 inches (if even/odd) OR direct underbust if > certain threshold (modern method)
// Cup Size: Bust - Band Size (1 inch diff = A, 2=B, etc.)

export default function BraSizeCalculator() {
  const [underbust, setUnderbust] = useState<string>('');
  const [bust, setBust] = useState<string>('');
  const [unit, setUnit] = useState<'in' | 'cm'>('in');
  
  const [bandSize, setBandSize] = useState<string | null>(null);
  const [cupSize, setCupSize] = useState<string | null>(null);
  const [fullBraSize, setFullBraSize] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateBraSize = () => {
    setError(null);
    setBandSize(null);
    setCupSize(null);
    setFullBraSize(null);

    let ub = parseFloat(underbust);
    let b = parseFloat(bust);

    if (unit === 'cm') {
      ub /= 2.54; // convert cm to inches
      b /= 2.54;  // convert cm to inches
    }

    if (isNaN(ub) || ub <= 0 || isNaN(b) || b <= 0) {
      setError('Please enter valid positive numbers for underbust and bust measurements.');
      return;
    }
    if (b < ub) {
      setError('Bust measurement should typically be greater than or equal to underbust measurement.');
      return;
    }

    // Band Size Calculation (common traditional US/UK method)
    let calculatedBand: number;
    if (ub % 2 === 0) { // If underbust is even
      calculatedBand = ub + 4;
    } else { // If underbust is odd
      calculatedBand = ub + 5;
    }
    // Round to nearest even number (some brands do this)
    // For simplicity, we'll use the direct result of adding 4/5.
    // Modern method often uses underbust rounded to nearest even number directly for bands 32+
    // We'll use a simplified traditional method for this example.

    setBandSize(calculatedBand.toFixed(0));

    // Cup Size Calculation
    const cupDifference = b - calculatedBand;
    let calculatedCup: string;

    if (cupDifference < 0.5) calculatedCup = "AA"; // Or smaller, depends on system
    else if (cupDifference < 1.5) calculatedCup = "A";
    else if (cupDifference < 2.5) calculatedCup = "B";
    else if (cupDifference < 3.5) calculatedCup = "C";
    else if (cupDifference < 4.5) calculatedCup = "D";
    else if (cupDifference < 5.5) calculatedCup = "DD (E)";
    else if (cupDifference < 6.5) calculatedCup = "DDD (F)";
    else if (cupDifference < 7.5) calculatedCup = "G";
    else if (cupDifference < 8.5) calculatedCup = "H";
    else if (cupDifference < 9.5) calculatedCup = "I";
    else if (cupDifference < 10.5) calculatedCup = "J";
    else calculatedCup = "K+"; // Larger sizes

    setCupSize(calculatedCup);
    setFullBraSize(`${calculatedBand.toFixed(0)}${calculatedCup}`);
  };
  
  const resetForm = () => {
    setUnderbust('');
    setBust('');
    setBandSize(null);
    setCupSize(null);
    setFullBraSize(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Sizing Varies By Brand</AlertTitle>
        <AlertDescription>
          Bra sizing can be inconsistent between brands and styles. This calculator provides an estimate based on common methods. For the best fit, consider trying on different sizes or getting a professional fitting.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate your bra size. Measurements should be snug but not tight.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="unit">Measurement Unit</Label>
              <Select value={unit} onValueChange={(value: 'in' | 'cm') => setUnit(value)}>
                <SelectTrigger id="unit"><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="in">Inches (in)</SelectItem>
                  <SelectItem value="cm">Centimeters (cm)</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="underbust">Underbust/Band Measurement</Label>
              <Input id="underbust" type="number" value={underbust} onChange={(e) => setUnderbust(e.target.value)} placeholder={`e.g., ${unit === 'in' ? '30' : '75'}`} />
              <p className="text-xs text-muted-foreground mt-1">Measure around your ribcage, directly under your bust.</p>
            </div>
            <div>
              <Label htmlFor="bust">Bust Measurement</Label>
              <Input id="bust" type="number" value={bust} onChange={(e) => setBust(e.target.value)} placeholder={`e.g., ${unit === 'in' ? '34' : '85'}`} />
              <p className="text-xs text-muted-foreground mt-1">Measure around the fullest part of your bust.</p>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateBraSize}>Calculate Size</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(fullBraSize !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Bra Size</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {fullBraSize !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Size</p><p className="text-3xl font-bold text-primary">{fullBraSize}</p></div>
                  <CopyButton textToCopy={fullBraSize} />
                </div>
              )}
              {bandSize && cupSize && (
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div className="p-2 bg-muted rounded-md"><p className="text-muted-foreground">Band Size</p><p className="font-semibold">{bandSize}</p></div>
                  <div className="p-2 bg-muted rounded-md"><p className="text-muted-foreground">Cup Size</p><p className="font-semibold">{cupSize}</p></div>
                </div>
              )}
              <Alert variant="default">
                <Info className="h-4 w-4" />
                <AlertTitle>Sister Sizes</AlertTitle>
                <AlertDescription>
                    If your estimated size doesn't feel right, try "sister sizes":
                    <ul className="list-disc pl-5 mt-1">
                        <li>Band up, cup down (e.g., if 34C, try 36B)</li>
                        <li>Band down, cup up (e.g., if 34C, try 32D)</li>
                    </ul>
                </AlertDescription>
              </Alert>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BraSizeCalculator.tsx ======
==================================================

// ====== START OF FILE: BreakEvenCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.96 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Scale } from "lucide-react";

export default function BreakEvenCalculator() {
  const [fixedCosts, setFixedCosts] = useState<string>('');
  const [variableCostPerUnit, setVariableCostPerUnit] = useState<string>('');
  const [sellingPricePerUnit, setSellingPricePerUnit] = useState<string>('');

  const [breakEvenUnits, setBreakEvenUnits] = useState<string | null>(null);
  const [breakEvenRevenue, setBreakEvenRevenue] = useState<string | null>(null);
  const [contributionMargin, setContributionMargin] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateBreakEven = () => {
    setError(null); setBreakEvenUnits(null); setBreakEvenRevenue(null); setContributionMargin(null);
    const fc = parseFloat(fixedCosts);
    const vc = parseFloat(variableCostPerUnit);
    const sp = parseFloat(sellingPricePerUnit);

    if (isNaN(fc) || fc < 0 || isNaN(vc) || vc < 0 || isNaN(sp) || sp <= 0) {
      setError('Please enter valid numbers: Fixed Costs (>=0), Variable Cost (>=0), Selling Price (>0).');
      return;
    }
    if (sp <= vc) {
      setError('Selling price per unit must be greater than variable cost per unit to break even.');
      return;
    }

    const cm = sp - vc; // Contribution Margin per unit
    setContributionMargin(cm.toFixed(2));

    const beUnits = fc / cm;
    setBreakEvenUnits(Math.ceil(beUnits).toString()); // Round up units

    const beRevenue = Math.ceil(beUnits) * sp; // Use rounded units for revenue
    setBreakEvenRevenue(beRevenue.toFixed(2));
  };

  const resetForm = () => {
    setFixedCosts(''); setVariableCostPerUnit(''); setSellingPricePerUnit('');
    setBreakEvenUnits(null); setBreakEvenRevenue(null); setContributionMargin(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Break-Even Point Calculator</AlertTitle><AlertDescription>Determine the number of units or revenue needed to cover all costs (fixed and variable).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your cost and price details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="fixedCostsBE">Total Fixed Costs ($)</Label><Input id="fixedCostsBE" type="number" value={fixedCosts} onChange={e=>setFixedCosts(e.target.value)} placeholder="e.g., 10000"/></div>
            <div><Label htmlFor="variableCostBE">Variable Cost Per Unit ($)</Label><Input id="variableCostBE" type="number" value={variableCostPerUnit} onChange={e=>setVariableCostPerUnit(e.target.value)} placeholder="e.g., 5"/></div>
            <div><Label htmlFor="sellingPriceBE">Selling Price Per Unit ($)</Label><Input id="sellingPriceBE" type="number" value={sellingPricePerUnit} onChange={e=>setSellingPricePerUnit(e.target.value)} placeholder="e.g., 15"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateBreakEven}>Calculate Break-Even</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(breakEvenUnits || error) && (
          <Card>
            <CardHeader><CardDescription>Break-Even Analysis</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {contributionMargin && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Contribution Margin per Unit</p><p className="font-semibold">${contributionMargin}</p></div>)}
              {breakEvenUnits && (<div className="p-2 bg-primary/10 rounded-md">
                <p className="text-sm text-muted-foreground">Break-Even Point in Units</p>
                <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{breakEvenUnits} units</p><CopyButton textToCopy={breakEvenUnits}/></div>
              </div>)}
              {breakEvenRevenue && (<div className="p-2 bg-primary/10 rounded-md mt-2">
                <p className="text-sm text-muted-foreground">Break-Even Point in Revenue</p>
                <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">${breakEvenRevenue}</p><CopyButton textToCopy={breakEvenRevenue}/></div>
              </div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: BreakEvenCalculator.tsx ======
==================================================

// ====== START OF FILE: BrickAndMortarCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.22 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Layers } from "lucide-react";

// Simplified estimation: ~7.5 cubic feet of mortar per 1000 standard bricks.
const MORTAR_CUFT_PER_1000_BRICKS = 7.5;
// Approx weight of cement/sand for a type N mortar mix (1:1:6 cement:lime:sand)
// Let's simplify to 1:3 cement:sand mix by volume for general purpose mortar.
// 1 cu ft of mortar requires roughly 0.25 cu ft cement and 0.75 cu ft sand.
// 1 bag of cement (94lb) is ~1 cu ft. 1 bag of sand (70lb) is ~0.7 cu ft.

export default function BrickAndMortarCalculator() {
  const [numBricks, setNumBricks] = useState<string>('');
  
  const [mortarVolumeCuFt, setMortarVolumeCuFt] = useState<string | null>(null);
  const [cementBags, setCementBags] = useState<string | null>(null);
  const [sandBags, setSandBags] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateMortar = () => {
    setError(null);
    setMortarVolumeCuFt(null);
    setCementBags(null);
    setSandBags(null);

    const bricks = parseInt(numBricks);
    if (isNaN(bricks) || bricks <= 0) {
      setError('Please enter a valid positive number of bricks.');
      return;
    }

    const totalMortar = (bricks / 1000) * MORTAR_CUFT_PER_1000_BRICKS;
    setMortarVolumeCuFt(totalMortar.toFixed(2));

    // Simple 1:3 cement:sand volume ratio
    const cementVolume = totalMortar * 0.25;
    const sandVolume = totalMortar * 0.75;
    
    // Assuming 1 cu ft per cement bag and 0.7 cu ft per sand bag
    const numCementBags = Math.ceil(cementVolume / 1);
    const numSandBags = Math.ceil(sandVolume / 0.7);

    setCementBags(numCementBags.toString());
    setSandBags(numSandBags.toString());
  };

  const resetForm = () => {
    setNumBricks('');
    setMortarVolumeCuFt(null);
    setCementBags(null);
    setSandBags(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Brick & Mortar Estimator (Simplified)</AlertTitle><AlertDescription>Estimate the amount of mortar needed for a given number of standard-sized bricks. This is a rough estimation based on averages.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter the total number of bricks for your project.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="numBricks">Number of Bricks</Label>
              <Input 
                id="numBricks" 
                type="number" 
                value={numBricks} 
                onChange={(e) => setNumBricks(e.target.value)} 
                placeholder="e.g., 1000" 
              />
            </div>
            <AlertDescription className="text-xs">
              Based on an average of {MORTAR_CUFT_PER_1000_BRICKS} cubic feet of mortar per 1000 standard bricks.
            </AlertDescription>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateMortar}>Estimate Mortar</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(mortarVolumeCuFt || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Mortar Materials</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {mortarVolumeCuFt && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Total Mortar Volume Needed</p>
                    <p className="text-2xl font-bold text-primary">{mortarVolumeCuFt} cu ft</p>
                  </div>
                  <CopyButton textToCopy={mortarVolumeCuFt} />
                </div>
              )}
              {cementBags && sandBags && (
                <>
                <p className="text-sm font-medium text-muted-foreground pt-2 border-t">Approx. Bagged Materials (1:3 Mix):</p>
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Cement Bags (~94 lbs / 1 cu ft)</p>
                  <p className="font-semibold">{cementBags} bags</p>
                </div>
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Sand Bags (~70 lbs / 0.7 cu ft)</p>
                  <p className="font-semibold">{sandBags} bags</p>
                </div>
                </>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BrickAndMortarCalculator.tsx ======
==================================================

// ====== START OF FILE: BrickCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.76 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info } from "lucide-react";

// Standard brick sizes (approximate, can vary)
// Common US modular brick: 7 5/8" L x 3 5/8" W x 2 1/4" H
// With 3/8" mortar joint: 8" L x 2 2/3" H face (approx 2.667") -> 1_sq_ft / ( (8/12) * (2.667/12) ) = ~6.75 bricks/sq ft

export default function BrickCalculator() {
  const [wallArea, setWallArea] = useState<string>(''); // sq ft or sq m
  const [brickLength, setBrickLength] = useState<string>('7.625'); // inches
  const [brickHeight, setBrickHeight] = useState<string>('2.25'); // inches
  const [mortarJoint, setMortarJoint] = useState<string>('0.375'); // inches
  const [wastage, setWastage] = useState<string>('10'); // percentage
  const [unit, setUnit] = useState<'imperial' | 'metric'>('imperial');
  
  const [numBricks, setNumBricks] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateBricks = () => {
    setError(null);
    setNumBricks(null);

    let area = parseFloat(wallArea);
    let bL = parseFloat(brickLength);
    let bH = parseFloat(brickHeight);
    let mJ = parseFloat(mortarJoint);
    const wastePercent = parseFloat(wastage) / 100;

    if (isNaN(area) || area <= 0 || isNaN(bL) || bL <= 0 || isNaN(bH) || bH <= 0 || isNaN(mJ) || mJ < 0 || isNaN(wastePercent) || wastePercent < 0) {
      setError('Please enter valid positive numbers for all fields. Mortar joint and wastage can be zero.');
      return;
    }

    // Convert all to inches and sq inches if metric input for area
    if (unit === 'metric') { // Wall area in sq meters, brick dims in cm (let's assume for simplicity)
        // User inputs brick dims in cm if metric, but our calculation uses inches
        // This part needs refinement: if metric, brick dims should be input in cm
        // For now, let's assume brick dims are always inches and convert area
        area = area * 10.7639 * 144; // sq meters to sq inches
    } else { // Wall area in sq ft
        area = area * 144; // sq ft to sq inches
    }
    
    // Effective brick dimensions with mortar
    const effectiveLength = bL + mJ;
    const effectiveHeight = bH + mJ;
    const effectiveBrickFaceArea = effectiveLength * effectiveHeight; // sq inches

    if (effectiveBrickFaceArea <= 0) {
        setError("Effective brick face area (with mortar) is zero or negative. Check dimensions.");
        return;
    }

    const bricksForArea = area / effectiveBrickFaceArea;
    const totalBricksWithWastage = bricksForArea * (1 + wastePercent);
    
    setNumBricks(Math.ceil(totalBricksWithWastage).toString());
  };
  
  const resetForm = () => {
    setWallArea('');
    // setBrickLength('7.625'); // Keep defaults or clear? Clear for now.
    // setBrickHeight('2.25');
    // setMortarJoint('0.375');
    // setWastage('10');
    setNumBricks(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Estimation Tool</AlertTitle>
        <AlertDescription>
          This calculator provides an estimate. Actual brick requirements can vary due to pattern, cuts, and site conditions. Always consult with a professional for precise project planning.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate the number of bricks needed for a wall.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
             <div>
              <Label htmlFor="unit">Units for Wall Area & Brick Dimensions</Label>
              <Select value={unit} onValueChange={(value: 'imperial' | 'metric') => setUnit(value)}>
                <SelectTrigger id="unit"><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="imperial">Imperial (Wall Area in sq ft, Brick in inches)</SelectItem>
                  <SelectItem value="metric">Metric (Wall Area in sq m, Brick in cm - Note: inputs below still expect numbers for calculation based on inches currently)</SelectItem>
                </SelectContent>
              </Select>
              {unit === 'metric' && <p className="text-xs text-orange-500 mt-1">Note: Brick dimensions below should be entered as cm values for your mental model, but calculation still processes them as if they were 'inch' units internally for now. Area in m² is converted.</p>}
            </div>
            <div>
              <Label htmlFor="wallArea">Total Wall Area ({unit === 'imperial' ? 'sq ft' : 'sq m'})</Label>
              <Input id="wallArea" type="number" value={wallArea} onChange={(e) => setWallArea(e.target.value)} placeholder="e.g., 100" />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="brickLength">Brick Length ({unit === 'imperial' ? 'in' : 'cm'})</Label>
                <Input id="brickLength" type="number" value={brickLength} onChange={(e) => setBrickLength(e.target.value)} placeholder={unit === 'imperial' ? '7.625' : '19.4'} />
              </div>
              <div>
                <Label htmlFor="brickHeight">Brick Height ({unit === 'imperial' ? 'in' : 'cm'})</Label>
                <Input id="brickHeight" type="number" value={brickHeight} onChange={(e) => setBrickHeight(e.target.value)} placeholder={unit === 'imperial' ? '2.25' : '5.7'} />
              </div>
            </div>
            <div>
              <Label htmlFor="mortarJoint">Mortar Joint Thickness ({unit === 'imperial' ? 'in' : 'cm'})</Label>
              <Input id="mortarJoint" type="number" value={mortarJoint} onChange={(e) => setMortarJoint(e.target.value)} placeholder={unit === 'imperial' ? '0.375' : '1'} />
            </div>
            <div>
              <Label htmlFor="wastage">Wastage (%)</Label>
              <Input id="wastage" type="number" value={wastage} onChange={(e) => setWastage(e.target.value)} placeholder="e.g., 10" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateBricks}>Calculate Bricks</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(numBricks !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Bricks Required</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {numBricks !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Total Bricks (incl. wastage)</p><p className="text-3xl font-bold text-primary">{numBricks}</p></div>
                  <CopyButton textToCopy={numBricks} />
                </div>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    Brick sizes and mortar joints can vary. Adjust inputs for your specific materials.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BrickCalculator.tsx ======
==================================================

// ====== START OF FILE: BtuCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.33 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Flame } from "lucide-react";

// Simple BTU calculation for room air conditioner sizing (example)
// BTU/hr = (Room Width (ft) * Room Length (ft) * Height (ft) * Insulation Factor * Window Factor * Occupancy Factor) / Efficiency Factor
// This is very simplified. Many factors affect actual BTU needs.

export default function BtuCalculator() {
  const [roomWidth, setRoomWidth] = useState<string>(''); // ft
  const [roomLength, setRoomLength] = useState<string>(''); // ft
  const [ceilingHeight, setCeilingHeight] = useState<string>('8'); // ft, common default
  
  // Simplified factors - real calculations are more nuanced
  const [insulation, setInsulation] = useState<string>('10'); // e.g., 10 for good, 18 for poor
  const [sunExposure, setSunExposure] = useState<string>('1.1'); // e.g., 1.0 for shaded, 1.1 for sunny

  const [btu, setBtu] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateBtu = () => {
    setError(null);
    setBtu(null);

    const width = parseFloat(roomWidth);
    const length = parseFloat(roomLength);
    const height = parseFloat(ceilingHeight);
    const insFactor = parseFloat(insulation); // This isn't standard, just a placeholder
    const sunFactor = parseFloat(sunExposure); // Also placeholder logic

    if (isNaN(width) || width <= 0 || isNaN(length) || length <= 0 || isNaN(height) || height <= 0) {
      setError('Please enter valid positive dimensions for the room (width, length, height in feet).');
      return;
    }
    if (isNaN(insFactor) || isNaN(sunFactor) || insFactor <=0 || sunFactor <=0) {
        setError("Please enter valid factor values.");
        return;
    }

    // Extremely simplified placeholder formula for AC sizing
    // A common rule of thumb is (Area * 20) to (Area * 25) BTU for cooling.
    // Let's use (Area * 20) and adjust by sun exposure.
    const area = width * length;
    let calculatedBtu = area * 20; // Base BTU
    
    calculatedBtu *= sunFactor; // Adjust for sun
    // Further adjustments for kitchen, occupancy, etc. would be added here.

    setBtu(Math.ceil(calculatedBtu).toString());
  };
  
  const resetForm = () => {
    setRoomWidth('');
    setRoomLength('');
    setCeilingHeight('8');
    setInsulation('10');
    setSunExposure('1.1');
    setBtu(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Simplified BTU Estimation</AlertTitle>
        <AlertDescription>
          This calculator provides a very basic estimate for air conditioner sizing (BTU/hr). Actual requirements depend on many factors including climate, window type/size, insulation quality, occupancy, and heat-generating appliances. Consult an HVAC professional for accurate sizing.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate BTU needed for room air conditioning (simplified).</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="roomWidth">Room Width (feet)</Label>
              <Input id="roomWidth" type="number" value={roomWidth} onChange={(e) => setRoomWidth(e.target.value)} placeholder="e.g., 12" />
            </div>
            <div>
              <Label htmlFor="roomLength">Room Length (feet)</Label>
              <Input id="roomLength" type="number" value={roomLength} onChange={(e) => setRoomLength(e.target.value)} placeholder="e.g., 15" />
            </div>
             <div>
              <Label htmlFor="ceilingHeight">Ceiling Height (feet)</Label>
              <Input id="ceilingHeight" type="number" value={ceilingHeight} onChange={(e) => setCeilingHeight(e.target.value)} placeholder="e.g., 8" />
            </div>
             <div>
                <Label htmlFor="sunExposure">Sun Exposure</Label>
                 <Select value={sunExposure} onValueChange={setSunExposure}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="1.0">Mostly Shaded</SelectItem>
                    <SelectItem value="1.1">Some Sun</SelectItem>
                    <SelectItem value="1.15">Very Sunny</SelectItem>
                  </SelectContent>
                </Select>
                 <p className="text-xs text-muted-foreground mt-1">Simplified factor for sun exposure.</p>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateBtu}>Estimate BTU</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(btu !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated BTU/hr</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {btu !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated BTU/hr</p><p className="text-3xl font-bold text-primary">{btu}</p></div>
                  <CopyButton textToCopy={btu} />
                </div>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    This is a rough estimate. Factors like climate zone, window efficiency, and personal preference significantly impact actual needs.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BtuCalculator.tsx ======
==================================================

// ====== START OF FILE: BudgetCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.79 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, PlusCircle, Trash2 } from "lucide-react";

interface BudgetItem {
  id: string;
  name: string;
  amount: number;
}

export default function BudgetCalculator() {
  const [incomeItems, setIncomeItems] = useState<BudgetItem[]>([{ id: crypto.randomUUID(), name: 'Salary', amount: 0 }]);
  const [expenseItems, setExpenseItems] = useState<BudgetItem[]>([{ id: crypto.randomUUID(), name: 'Rent/Mortgage', amount: 0 }]);
  
  const [totalIncome, setTotalIncome] = useState<number>(0);
  const [totalExpenses, setTotalExpenses] = useState<number>(0);
  const [netBalance, setNetBalance] = useState<number>(0);
  const [isCalculated, setIsCalculated] = useState<boolean>(false);

  const handleItemChange = (type: 'income' | 'expense', id: string, field: 'name' | 'amount', value: string) => {
    const setItems = type === 'income' ? setIncomeItems : setExpenseItems;
    setItems(prevItems => 
      prevItems.map(item => 
        item.id === id ? { ...item, [field]: field === 'amount' ? parseFloat(value) || 0 : value } : item
      )
    );
    setIsCalculated(false);
  };

  const addItem = (type: 'income' | 'expense') => {
    const setItems = type === 'income' ? setIncomeItems : setExpenseItems;
    setItems(prevItems => [...prevItems, { id: crypto.randomUUID(), name: '', amount: 0 }]);
    setIsCalculated(false);
  };

  const removeItem = (type: 'income' | 'expense', id: string) => {
    const setItems = type === 'income' ? setIncomeItems : setExpenseItems;
    setItems(prevItems => prevItems.filter(item => item.id !== id));
    setIsCalculated(false);
  };

  const calculateBudget = () => {
    const currentTotalIncome = incomeItems.reduce((sum, item) => sum + item.amount, 0);
    const currentTotalExpenses = expenseItems.reduce((sum, item) => sum + item.amount, 0);
    setTotalIncome(currentTotalIncome);
    setTotalExpenses(currentTotalExpenses);
    setNetBalance(currentTotalIncome - currentTotalExpenses);
    setIsCalculated(true);
  };

  const resetBudget = () => {
    setIncomeItems([{ id: crypto.randomUUID(), name: 'Salary', amount: 0 }]);
    setExpenseItems([{ id: crypto.randomUUID(), name: 'Rent/Mortgage', amount: 0 }]);
    setTotalIncome(0);
    setTotalExpenses(0);
    setNetBalance(0);
    setIsCalculated(false);
  }

  const renderBudgetItems = (type: 'income' | 'expense', items: BudgetItem[]) => (
    <div className="space-y-3">
      {items.map((item, index) => (
        <div key={item.id} className="grid grid-cols-[1fr_auto_auto] gap-2 items-center">
          <Input 
            type="text" 
            placeholder={type === 'income' ? `Income Source ${index + 1}` : `Expense ${index + 1}`}
            value={item.name} 
            onChange={(e) => handleItemChange(type, item.id, 'name', e.target.value)}
            className="h-9"
          />
          <Input 
            type="number" 
            placeholder="Amount"
            value={item.amount === 0 && item.name === '' ? '' : item.amount.toString()} // Show empty for new items if amount is 0
            onChange={(e) => handleItemChange(type, item.id, 'amount', e.target.value)}
            className="h-9 w-28"
          />
          <Button variant="ghost" size="icon" onClick={() => removeItem(type, item.id)} disabled={items.length === 1} className="h-9 w-9">
            <Trash2 className="h-4 w-4 text-destructive" />
          </Button>
        </div>
      ))}
      <Button variant="outline" size="sm" onClick={() => addItem(type)} className="mt-2">
        <PlusCircle className="mr-2 h-4 w-4" /> Add {type === 'income' ? 'Income Source' : 'Expense'}
      </Button>
    </div>
  );

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          <Card>
            <CardHeader><CardTitle className="font-headline">Income Sources</CardTitle></CardHeader>
            <CardContent>{renderBudgetItems('income', incomeItems)}</CardContent>
          </Card>
          <Card>
            <CardHeader><CardTitle className="font-headline">Expenses</CardTitle></CardHeader>
            <CardContent>{renderBudgetItems('expense', expenseItems)}</CardContent>
          </Card>
           <div className="flex flex-col sm:flex-row gap-2 mt-4">
             <Button onClick={calculateBudget} className="flex-1">Calculate Budget</Button>
             <Button variant="outline" onClick={resetBudget} className="flex-1">Reset Budget</Button>
           </div>
        </div>

        <Card className="lg:col-span-1">
          <CardHeader><CardTitle className="font-headline">Budget Summary</CardTitle></CardHeader>
          <CardContent className="space-y-4">
            {!isCalculated && <Alert><AlertDescription>Click "Calculate Budget" to see your summary.</AlertDescription></Alert>}
            {isCalculated && (
              <>
                <div className="p-3 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Total Income</p>
                  <p className="text-xl font-semibold text-green-600">${totalIncome.toFixed(2)}</p>
                </div>
                <div className="p-3 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Total Expenses</p>
                  <p className="text-xl font-semibold text-red-600">${totalExpenses.toFixed(2)}</p>
                </div>
                <div className={`flex justify-between items-center p-3 rounded-md ${netBalance >= 0 ? 'bg-primary/10' : 'bg-destructive/10'}`}>
                  <div>
                    <p className="text-sm text-muted-foreground">Net Balance (Surplus/Deficit)</p>
                    <p className={`text-2xl font-bold ${netBalance >= 0 ? 'text-primary' : 'text-destructive'}`}>${netBalance.toFixed(2)}</p>
                  </div>
                  <CopyButton textToCopy={netBalance.toFixed(2)} />
                </div>
                <Alert variant={netBalance >=0 ? "default" : "destructive"}>
                    <AlertTitle>{netBalance >=0 ? "Looking Good!" : "Attention Needed!"}</AlertTitle>
                    <AlertDescription>
                        {netBalance >= 0 ? `You have a surplus of $${netBalance.toFixed(2)}.` : `You have a deficit of $${Math.abs(netBalance).toFixed(2)}. Consider reducing expenses or increasing income.`}
                    </AlertDescription>
                </Alert>
              </>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: BudgetCalculator.tsx ======
==================================================

// ====== START OF FILE: BusinessBreakEvenCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.97 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Scale } from "lucide-react";

export default function BusinessBreakEvenCalculator() {
  const [fixedCosts, setFixedCosts] = useState<string>('');
  const [variableCostPerUnit, setVariableCostPerUnit] = useState<string>('');
  const [sellingPricePerUnit, setSellingPricePerUnit] = useState<string>('');

  const [breakEvenUnits, setBreakEvenUnits] = useState<string | null>(null);
  const [breakEvenRevenue, setBreakEvenRevenue] = useState<string | null>(null);
  const [contributionMargin, setContributionMargin] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateBreakEven = () => {
    setError(null); setBreakEvenUnits(null); setBreakEvenRevenue(null); setContributionMargin(null);
    const fc = parseFloat(fixedCosts);
    const vc = parseFloat(variableCostPerUnit);
    const sp = parseFloat(sellingPricePerUnit);

    if (isNaN(fc) || fc < 0 || isNaN(vc) || vc < 0 || isNaN(sp) || sp <= 0) {
      setError('Please enter valid numbers: Fixed Costs (>=0), Variable Cost (>=0), Selling Price (>0).');
      return;
    }
    if (sp <= vc) {
      setError('Selling price per unit must be greater than variable cost per unit to break even.');
      return;
    }

    const cm = sp - vc; // Contribution Margin per unit
    setContributionMargin(cm.toFixed(2));

    const beUnits = fc / cm;
    setBreakEvenUnits(Math.ceil(beUnits).toString()); // Round up units

    const beRevenue = Math.ceil(beUnits) * sp; // Use rounded units for revenue
    setBreakEvenRevenue(beRevenue.toFixed(2));
  };

  const resetForm = () => {
    setFixedCosts(''); setVariableCostPerUnit(''); setSellingPricePerUnit('');
    setBreakEvenUnits(null); setBreakEvenRevenue(null); setContributionMargin(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Break-Even Point Calculator</AlertTitle><AlertDescription>Determine the number of units or revenue needed to cover all costs (fixed and variable).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your cost and price details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="fixedCostsBE">Total Fixed Costs ($)</Label><Input id="fixedCostsBE" type="number" value={fixedCosts} onChange={e=>setFixedCosts(e.target.value)} placeholder="e.g., 10000"/></div>
            <div><Label htmlFor="variableCostBE">Variable Cost Per Unit ($)</Label><Input id="variableCostBE" type="number" value={variableCostPerUnit} onChange={e=>setVariableCostPerUnit(e.target.value)} placeholder="e.g., 5"/></div>
            <div><Label htmlFor="sellingPriceBE">Selling Price Per Unit ($)</Label><Input id="sellingPriceBE" type="number" value={sellingPricePerUnit} onChange={e=>setSellingPricePerUnit(e.target.value)} placeholder="e.g., 15"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateBreakEven}>Calculate Break-Even</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(breakEvenUnits || error) && (
          <Card>
            <CardHeader><CardDescription>Break-Even Analysis</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {contributionMargin && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Contribution Margin per Unit</p><p className="font-semibold">${contributionMargin}</p></div>)}
              {breakEvenUnits && (<div className="p-2 bg-primary/10 rounded-md">
                <p className="text-sm text-muted-foreground">Break-Even Point in Units</p>
                <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{breakEvenUnits} units</p><CopyButton textToCopy={breakEvenUnits}/></div>
              </div>)}
              {breakEvenRevenue && (<div className="p-2 bg-primary/10 rounded-md mt-2">
                <p className="text-sm text-muted-foreground">Break-Even Point in Revenue</p>
                <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">${breakEvenRevenue}</p><CopyButton textToCopy={breakEvenRevenue}/></div>
              </div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BusinessBreakEvenCalculator.tsx ======
==================================================

// ====== START OF FILE: BusinessLoanCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.63 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Briefcase } from "lucide-react";

export default function BusinessLoanCalculator() {
  const [loanAmount, setLoanAmount] = useState<string>('');
  const [interestRate, setInterestRate] = useState<string>('');
  const [loanTermMonths, setLoanTermMonths] = useState<string>(''); 
  
  const [monthlyPayment, setMonthlyPayment] = useState<string | null>(null);
  const [totalRepayment, setTotalRepayment] = useState<string | null>(null);
  const [totalInterest, setTotalInterest] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateLoan = () => {
    setError(null);
    setMonthlyPayment(null);
    setTotalRepayment(null);
    setTotalInterest(null);

    const P = parseFloat(loanAmount);
    const annualRate = parseFloat(interestRate) / 100;
    const N = parseInt(loanTermMonths);

    if (isNaN(P) || P <= 0 || isNaN(annualRate) || annualRate < 0 || isNaN(N) || N <= 0) {
      setError('Please enter valid positive numbers for loan amount, interest rate, and term in months.');
      return;
    }

    const monthlyRate = annualRate / 12;
    let M; // Monthly Payment

    if (monthlyRate === 0) { // 0% interest
        M = P / N;
    } else {
        M = P * (monthlyRate * Math.pow(1 + monthlyRate, N)) / (Math.pow(1 + monthlyRate, N) - 1);
    }
    
    if (isNaN(M) || !isFinite(M)) {
        setError('Could not calculate monthly payment. Check your inputs.');
        return;
    }

    const calculatedTotalRepayment = M * N;
    const calculatedTotalInterest = calculatedTotalRepayment - P;

    setMonthlyPayment(M.toFixed(2));
    setTotalRepayment(calculatedTotalRepayment.toFixed(2));
    setTotalInterest(calculatedTotalInterest.toFixed(2));
  };
  
  const resetForm = () => {
    setLoanAmount('');
    setInterestRate('');
    setLoanTermMonths('');
    setMonthlyPayment(null);
    setTotalRepayment(null);
    setTotalInterest(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
        <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Business Loan Estimation</AlertTitle>
        <AlertDescription>
          This calculator provides an estimate of payments for a simple interest business loan. It does not account for fees, compounding frequencies other than monthly, or specific loan covenants.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate payments for a business loan.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="loanAmount">Loan Amount ($)</Label>
              <Input id="loanAmount" type="number" value={loanAmount} onChange={(e) => setLoanAmount(e.target.value)} placeholder="e.g., 50000" />
            </div>
            <div>
              <Label htmlFor="interestRate">Annual Interest Rate (%)</Label>
              <Input id="interestRate" type="number" value={interestRate} onChange={(e) => setInterestRate(e.target.value)} placeholder="e.g., 7.5" />
            </div>
            <div>
              <Label htmlFor="loanTermMonths">Loan Term (Months)</Label>
              <Input id="loanTermMonths" type="number" value={loanTermMonths} onChange={(e) => setLoanTermMonths(e.target.value)} placeholder="e.g., 60" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateLoan}>Calculate</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(monthlyPayment !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Loan Estimates</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {monthlyPayment !== null && (
                <>
                  <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                    <div><p className="text-sm text-muted-foreground">Estimated Monthly Payment</p><p className="text-3xl font-bold text-primary">${monthlyPayment}</p></div>
                    <CopyButton textToCopy={monthlyPayment} />
                  </div>
                  <div className="p-3 bg-muted rounded-md">
                    <p className="text-sm text-muted-foreground">Total Repayment</p>
                    <p className="text-xl font-semibold">${totalRepayment}</p>
                  </div>
                  <div className="p-3 bg-muted rounded-md">
                    <p className="text-sm text-muted-foreground">Total Interest Paid</p>
                    <p className="text-xl font-semibold">${totalInterest}</p>
                  </div>
                </>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    Actual loan terms may vary. Consult with lenders for precise details.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: BusinessLoanCalculator.tsx ======
==================================================

// ====== START OF FILE: CaffeineHalfLifeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.65 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Coffee } from "lucide-react";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { ScrollArea } from "@/components/ui/scroll-area";

const CAFFEINE_HALF_LIFE_HOURS_AVG = 5; // Average half-life

interface CaffeineLevel {
  hours: number;
  remainingMg: number;
}

export default function CaffeineHalfLifeCalculator() {
  const [initialCaffeineMg, setInitialCaffeineMg] = useState<string>('');
  const [hoursSinceConsumption, setHoursSinceConsumption] = useState<string>('');

  const [remainingCaffeine, setRemainingCaffeine] = useState<string | null>(null);
  const [eliminationSchedule, setEliminationSchedule] = useState<CaffeineLevel[]>([]);
  const [error, setError] = useState<string | null>(null);

  const calculateRemainingCaffeine = () => {
    setError(null); setRemainingCaffeine(null); setEliminationSchedule([]);
    const initialMg = parseFloat(initialCaffeineMg);
    const hoursPassed = parseFloat(hoursSinceConsumption);

    if (isNaN(initialMg) || initialMg <=0 || isNaN(hoursPassed) || hoursPassed < 0) {
      setError('Initial Caffeine (mg > 0) and Hours Since Consumption (>=0) must be valid numbers.');
      return;
    }

    const numHalfLives = hoursPassed / CAFFEINE_HALF_LIFE_HOURS_AVG;
    const remaining = initialMg * Math.pow(0.5, numHalfLives);
    setRemainingCaffeine(remaining.toFixed(1));

    // Generate a simple elimination schedule
    const schedule: CaffeineLevel[] = [];
    let currentMg = initialMg;
    for (let h = 0; h <= Math.max(hoursPassed, CAFFEINE_HALF_LIFE_HOURS_AVG * 4); h += CAFFEINE_HALF_LIFE_HOURS_AVG/2) { // Show up to 4 half-lives or specified time
        if(h > 24 && schedule.length > 6) break; // Limit schedule length
        const nHL = h / CAFFEINE_HALF_LIFE_HOURS_AVG;
        currentMg = initialMg * Math.pow(0.5, nHL);
        schedule.push({ hours: parseFloat(h.toFixed(1)), remainingMg: parseFloat(currentMg.toFixed(1)) });
        if (currentMg < 1) break; // Stop if less than 1mg
    }
    setEliminationSchedule(schedule);
  };

  const resetForm = () => {
    setInitialCaffeineMg(''); setHoursSinceConsumption('');
    setRemainingCaffeine(null); setEliminationSchedule([]); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Caffeine Half-Life Estimator</AlertTitle><AlertDescription>Estimate the amount of caffeine remaining in your system. Assumes an average caffeine half-life of {CAFFEINE_HALF_LIFE_HOURS_AVG} hours. Individual metabolism varies.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter caffeine intake details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="initialCaffeine">Initial Caffeine Consumed (mg)</Label><Input id="initialCaffeine" type="number" value={initialCaffeineMg} onChange={e=>setInitialCaffeineMg(e.target.value)} placeholder="e.g., 100 (for a cup of coffee)"/></div>
            <div><Label htmlFor="hoursSinceCaffeine">Hours Since Consumption</Label><Input id="hoursSinceCaffeine" type="number" value={hoursSinceConsumption} onChange={e=>setHoursSinceConsumption(e.target.value)} placeholder="e.g., 3"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateRemainingCaffeine}>Estimate Remaining</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(remainingCaffeine || error || eliminationSchedule.length > 0) && (
          <Card>
            <CardHeader><CardDescription>Caffeine Estimation</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {remainingCaffeine && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Est. Caffeine Remaining Now</p><p className="text-xl font-bold text-primary">{remainingCaffeine} mg</p></div><CopyButton textToCopy={remainingCaffeine}/></div>)}
              {eliminationSchedule.length > 0 && (
                <div className="mt-4">
                    <h4 className="font-medium mb-2 text-sm">Approximate Elimination Schedule:</h4>
                    <ScrollArea className="h-[180px] border rounded-md">
                        <Table className="text-xs">
                            <TableHeader><TableRow><TableHead>Hours After</TableHead><TableHead className="text-right">Caffeine (mg)</TableHead></TableRow></TableHeader>
                            <TableBody>
                                {eliminationSchedule.map(item => (
                                    <TableRow key={item.hours}><TableCell>{item.hours}h</TableCell><TableCell className="text-right">{item.remainingMg}</TableCell></TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    </ScrollArea>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
    

// ====== END OF FILE: CaffeineHalfLifeCalculator.tsx ======
==================================================

// ====== START OF FILE: CagrCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.81 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, TrendingUp } from "lucide-react";

export default function CagrCalculator() {
  const [initialValue, setInitialValue] = useState<string>('');
  const [finalValue, setFinalValue] = useState<string>('');
  const [numPeriods, setNumPeriods] = useState<string>(''); // Typically years

  const [cagr, setCagr] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateCagr = () => {
    setError(null); setCagr(null);
    const IV = parseFloat(initialValue);
    const FV = parseFloat(finalValue);
    const N = parseFloat(numPeriods);

    if (isNaN(IV) || IV <= 0 || isNaN(FV) || FV < 0 || isNaN(N) || N <= 0) {
      setError('Initial Value (>0), Final Value (>=0), and Number of Periods (>0) must be valid numbers.');
      return;
    }
    if (FV < IV && FV >= 0) {
      // CAGR can be negative if final value is less than initial.
    }

    const growthFactor = FV / IV;
    const cagrDecimal = Math.pow(growthFactor, 1 / N) - 1;
    const cagrPercent = cagrDecimal * 100;

    if (isNaN(cagrPercent) || !isFinite(cagrPercent)) {
        setError("Could not calculate CAGR. Ensure Initial Value is not zero and inputs are reasonable.");
        return;
    }
    setCagr(cagrPercent.toFixed(2));
  };

  const resetForm = () => {
    setInitialValue(''); setFinalValue(''); setNumPeriods('');
    setCagr(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>CAGR Calculator</AlertTitle><AlertDescription>Calculate the Compound Annual Growth Rate (CAGR) of an investment over a specified period.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter investment details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="initialValueCAGR">Initial Value ($)</Label><Input id="initialValueCAGR" type="number" value={initialValue} onChange={e=>setInitialValue(e.target.value)} placeholder="e.g., 1000"/></div>
            <div><Label htmlFor="finalValueCAGR">Final Value ($)</Label><Input id="finalValueCAGR" type="number" value={finalValue} onChange={e=>setFinalValue(e.target.value)} placeholder="e.g., 1500"/></div>
            <div><Label htmlFor="numPeriodsCAGR">Number of Periods (e.g., Years)</Label><Input id="numPeriodsCAGR" type="number" value={numPeriods} onChange={e=>setNumPeriods(e.target.value)} placeholder="e.g., 5"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateCagr}>Calculate CAGR</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(cagr || error) && (
          <Card>
            <CardHeader><CardDescription>CAGR Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {cagr && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Compound Annual Growth Rate</p><p className="text-2xl font-bold text-primary">{cagr}%</p></div><CopyButton textToCopy={cagr}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: CagrCalculator.tsx ======
==================================================

// ====== START OF FILE: CalculatorPageLayout.tsx ======
// File converted from TSX to TXT
// Original size: 3.74 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import type React from 'react';
import { useState } from 'react';
import SectionTitle from '@/components/shared/SectionTitle';
import BackButton from '@/components/shared/BackButton';
import ShareButton from '@/components/shared/ShareButton'; // New component for sharing
import type { CalculatorData } from '@/types';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Heart, Star } from 'lucide-react';
import { cn } from '@/lib/utils';


interface CalculatorPageLayoutProps {
  calculator: CalculatorData;
  children: React.ReactNode; // For the calculator inputs/outputs
  aboutContent: React.ReactNode; // For the "About this calculator" content
  detailedDescription?: React.ReactNode; // Optional detailed description for modal
}

export default function CalculatorPageLayout({ calculator, children, aboutContent, detailedDescription }: CalculatorPageLayoutProps) {
  const [isLiked, setIsLiked] = useState(false);
  const [isFavorited, setIsFavorited] = useState(false);
  
  return (
    <div className="space-y-12">
      <div className="flex flex-col sm:flex-row justify-between items-start gap-4">
        <div className="flex-grow">
          <SectionTitle title={calculator.name} icon={calculator.icon} />
        </div>
        <div className="flex items-center gap-2 shrink-0">
           <Button
                variant="outline"
                size="icon"
                className="h-9 w-9 text-muted-foreground hover:text-red-500"
                onClick={() => setIsLiked(!isLiked)}
                aria-label="Like"
            >
                <Heart className={cn("h-5 w-5", isLiked && "fill-red-500 text-red-500")} />
            </Button>
            <Button
                variant="outline"
                size="icon"
                className="h-9 w-9 text-muted-foreground hover:text-yellow-400"
                onClick={() => setIsFavorited(!isFavorited)}
                aria-label="Favorite"
            >
                <Star className={cn("h-5 w-5", isFavorited && "fill-yellow-400 text-yellow-400")} />
            </Button>
            <ShareButton title={calculator.name} />
            <BackButton href="/calculators" />
        </div>
      </div>

      <Card className="shadow-lg">
        <CardHeader>
          <CardTitle className="font-headline text-2xl">Try the {calculator.name}</CardTitle>
        </CardHeader>
        <CardContent>
          {children}
        </CardContent>
      </Card>

      <Card className="shadow-lg">
        <CardHeader>
          <CardTitle className="font-headline text-2xl">About This Calculator Tool</CardTitle>
        </CardHeader>
        <CardContent className="prose dark:prose-invert max-w-none text-justify space-y-4">
          {aboutContent}
        </CardContent>
      </Card>
    </div>
  );
}

// Helper component for structured content sections
export const AboutSectionContent: React.FC<{
  title: string;
  children: React.ReactNode;
}> = ({ title, children }) => (
  <div>
    <h2 className="font-headline text-xl font-semibold mt-6 mb-3">{title}</h2>
    <div className="space-y-3">{children}</div>
  </div>
);

// Helper for bullet points with square prefix, using CSS class
export const SquareBulletedList: React.FC<{ items: string[] }> = ({ items }) => (
  <ul className="list-square pl-5 space-y-1">
    {items.map((item, index) => (
      <li key={`${item}-${index}`}>{item}</li>
    ))}
  </ul>
);

// Helper for content formatting
export const FormattedParagraph: React.FC<{children: React.ReactNode}> = ({children}) => (
  <p className="leading-relaxed">{children}</p>
);

export const BoldQuestion: React.FC<{children: React.ReactNode}> = ({children}) => (
  <p className="font-bold leading-relaxed">{children}</p>
);


// ====== END OF FILE: CalculatorPageLayout.tsx ======
==================================================

// ====== START OF FILE: CalorieCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8.59 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Apple } from "lucide-react";

// Using Mifflin-St Jeor for BMR, then TDEE = BMR * Activity Factor
// BMR (Male) = 10W + 6.25H - 5A + 5
// BMR (Female) = 10W + 6.25H - 5A - 161
// W = weight in kg, H = height in cm, A = age in years

const activityLevels = [
  { name: "Sedentary (little or no exercise)", factor: 1.2 },
  { name: "Lightly active (light exercise/sports 1-3 days/week)", factor: 1.375 },
  { name: "Moderately active (moderate exercise/sports 3-5 days/week)", factor: 1.55 },
  { name: "Very active (hard exercise/sports 6-7 days a week)", factor: 1.725 },
  { name: "Extra active (very hard exercise/physical job & exercise 2x/day)", factor: 1.9 },
];

export default function CalorieCalculator() {
  const [gender, setGender] = useState<'male' | 'female'>('male');
  const [age, setAge] = useState<string>('');
  const [heightCm, setHeightCm] = useState<string>('');
  const [weightKg, setWeightKg] = useState<string>('');
  const [activityFactor, setActivityFactor] = useState<string>(activityLevels[0].factor.toString());

  const [maintenanceCalories, setMaintenanceCalories] = useState<string | null>(null);
  const [mildWeightLoss, setMildWeightLoss] = useState<string | null>(null);
  const [weightLoss, setWeightLoss] = useState<string | null>(null);
  const [mildWeightGain, setMildWeightGain] = useState<string | null>(null);
  const [weightGain, setWeightGain] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateCalories = () => {
    setError(null);
    setMaintenanceCalories(null);
    setMildWeightLoss(null);
    setWeightLoss(null);
    setMildWeightGain(null);
    setWeightGain(null);


    const ageVal = parseInt(age);
    const heightVal = parseFloat(heightCm);
    const weightVal = parseFloat(weightKg);
    const actFactor = parseFloat(activityFactor);

    if (isNaN(ageVal) || ageVal <= 0 || isNaN(heightVal) || heightVal <= 0 || isNaN(weightVal) || weightVal <= 0 || isNaN(actFactor)) {
      setError('Please enter valid positive numbers for age, height (cm), weight (kg), and select an activity level.');
      return;
    }

    let bmr: number;
    if (gender === 'male') {
      bmr = (10 * weightVal) + (6.25 * heightVal) - (5 * ageVal) + 5;
    } else { // female
      bmr = (10 * weightVal) + (6.25 * heightVal) - (5 * ageVal) - 161;
    }

    if (bmr <= 0) {
        setError("Calculated BMR is too low. Please check inputs.");
        return;
    }

    const tdee = bmr * actFactor; // Total Daily Energy Expenditure (Maintenance Calories)
    setMaintenanceCalories(tdee.toFixed(0));
    setMildWeightLoss((tdee - 250).toFixed(0)); // Approx 0.5 lb/week deficit
    setWeightLoss((tdee - 500).toFixed(0));     // Approx 1 lb/week deficit
    setMildWeightGain((tdee + 250).toFixed(0)); // Approx 0.5 lb/week surplus
    setWeightGain((tdee + 500).toFixed(0));     // Approx 1 lb/week surplus
  };
  
  const resetForm = () => {
    setGender('male');
    setAge('');
    setHeightCm('');
    setWeightKg('');
    setActivityFactor(activityLevels[0].factor.toString());
    setMaintenanceCalories(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
       <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Health & Diet Disclaimer</AlertTitle>
        <AlertDescription>
          This calculator provides an estimate of daily caloric needs for weight maintenance, loss, or gain. These are general guidelines. Consult a healthcare professional or registered dietitian for personalized advice, especially before making significant dietary changes.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="md:col-span-2">
          <CardHeader>
            <CardDescription>Estimate your daily calorie needs.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="gender">Biological Gender</Label>
                <Select value={gender} onValueChange={(value: 'male' | 'female') => setGender(value)}>
                  <SelectTrigger id="gender"><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="male">Male</SelectItem>
                    <SelectItem value="female">Female</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="age">Age (Years)</Label>
                <Input id="age" type="number" value={age} onChange={(e) => setAge(e.target.value)} placeholder="e.g., 30" />
              </div>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="heightCm">Height (cm)</Label>
                <Input id="heightCm" type="number" value={heightCm} onChange={(e) => setHeightCm(e.target.value)} placeholder="e.g., 175" />
              </div>
              <div>
                <Label htmlFor="weightKg">Weight (kg)</Label>
                <Input id="weightKg" type="number" value={weightKg} onChange={(e) => setWeightKg(e.target.value)} placeholder="e.g., 70" />
              </div>
            </div>
            <div>
              <Label htmlFor="activityLevel">Activity Level</Label>
              <Select value={activityFactor} onValueChange={setActivityFactor}>
                <SelectTrigger id="activityLevel"><SelectValue placeholder="Select activity level" /></SelectTrigger>
                <SelectContent>
                  {activityLevels.map(level => (
                    <SelectItem key={level.name} value={level.factor.toString()}>{level.name}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateCalories}>Calculate Calories</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        <Card className="md:col-span-1">
            <CardHeader><CardDescription>Estimated Daily Caloric Needs</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {maintenanceCalories !== null && (
                <>
                  <div className="p-2 bg-primary/10 rounded-md">
                    <p className="text-xs text-muted-foreground">Maintenance</p>
                    <div className="flex justify-between items-center">
                        <p className="text-lg font-bold text-primary">{maintenanceCalories} Calories/day</p>
                        <CopyButton textToCopy={maintenanceCalories} size="icon" variant="ghost"/>
                    </div>
                  </div>
                  <div className="p-2 bg-muted rounded-md">
                    <p className="text-xs text-muted-foreground">Mild Weight Loss (~0.25 kg/week)</p>
                    <p className="font-semibold">{mildWeightLoss} Calories/day</p>
                  </div>
                  <div className="p-2 bg-muted rounded-md">
                    <p className="text-xs text-muted-foreground">Weight Loss (~0.5 kg/week)</p>
                    <p className="font-semibold">{weightLoss} Calories/day</p>
                  </div>
                   <div className="p-2 bg-muted rounded-md">
                    <p className="text-xs text-muted-foreground">Mild Weight Gain (~0.25 kg/week)</p>
                    <p className="font-semibold">{mildWeightGain} Calories/day</p>
                  </div>
                  <div className="p-2 bg-muted rounded-md">
                    <p className="text-xs text-muted-foreground">Weight Gain (~0.5 kg/week)</p>
                    <p className="font-semibold">{weightGain} Calories/day</p>
                  </div>
                </>
              )}
            </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: CalorieCalculator.tsx ======
==================================================

// ====== START OF FILE: CalorieCyclingPlanner.tsx ======
// File converted from TSX to TXT
// Original size: 7.59 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Slider } from '@/components/ui/slider';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Apple } from "lucide-react";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";

interface MacroSet {
  protein: number;
  carbs: number;
  fat: number;
}

export default function CalorieCyclingPlanner() {
  const [weeklyCalories, setWeeklyCalories] = useState<string>('14000');
  const [trainingDays, setTrainingDays] = useState<number>(4);
  
  const [proteinGramsPerKg, setProteinGramsPerKg] = useState<string>('1.8');
  const [bodyWeightKg, setBodyWeightKg] = useState<string>('');

  const [trainingDayMacros, setTrainingDayMacros] = useState<MacroSet | null>(null);
  const [restDayMacros, setRestDayMacros] = useState<MacroSet | null>(null);
  const [trainingDayCalories, setTrainingDayCalories] = useState<number | null>(null);
  const [restDayCalories, setRestDayCalories] = useState<number | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePlan = () => {
    setError(null);
    setTrainingDayMacros(null);
    setRestDayMacros(null);
    setTrainingDayCalories(null);
    setRestDayCalories(null);

    const weeklyCals = parseFloat(weeklyCalories);
    const trainDays = trainingDays;
    const restDays = 7 - trainDays;
    const proteinFactor = parseFloat(proteinGramsPerKg);
    const weight = parseFloat(bodyWeightKg);

    if (isNaN(weeklyCals) || weeklyCals <= 0 || isNaN(proteinFactor) || proteinFactor <= 0 || isNaN(weight) || weight <= 0) {
      setError("Please enter valid positive numbers for weekly calories, weight, and protein factor.");
      return;
    }
    
    // 1. Calculate daily protein intake (same for both days for simplicity)
    const dailyProteinGrams = weight * proteinFactor;
    const dailyProteinCalories = dailyProteinGrams * 4;

    // 2. Set different fat percentages for training vs rest days (example logic)
    const fatPercentTraining = 0.20; // 20% on training days
    const fatPercentRest = 0.35; // 35% on rest days

    // 3. Solve for daily calories on training (C_t) and rest (C_r) days
    // Equation 1: weeklyCals = trainDays * C_t + restDays * C_r
    // Equation 2: Calories from fat and carbs: C - (protein*4) = fatCals + carbCals
    // This gets complicated. Let's simplify: User provides calorie difference.
    // Simpler approach: Assume training day calories are X% higher than rest day. Let's say 20% higher.
    const calorieRatio = 1.20; // C_t = C_r * 1.20
    // weeklyCals = trainDays * (C_r * 1.20) + restDays * C_r
    // weeklyCals = C_r * (trainDays * 1.20 + restDays)
    const C_r = weeklyCals / (trainDays * calorieRatio + restDays);
    const C_t = C_r * calorieRatio;
    
    setRestDayCalories(C_r);
    setTrainingDayCalories(C_t);

    // 4. Calculate macros for each day type
    const fatCaloriesTrain = C_t * fatPercentTraining;
    const carbCaloriesTrain = C_t - dailyProteinCalories - fatCaloriesTrain;
    if (carbCaloriesTrain < 0) { setError("Protein/Fat goals exceed training day calories. Adjust values."); return; }
    setTrainingDayMacros({
      protein: dailyProteinGrams,
      carbs: carbCaloriesTrain / 4,
      fat: fatCaloriesTrain / 9
    });

    const fatCaloriesRest = C_r * fatPercentRest;
    const carbCaloriesRest = C_r - dailyProteinCalories - fatCaloriesRest;
    if (carbCaloriesRest < 0) { setError("Protein/Fat goals exceed rest day calories. Adjust values."); return; }
    setRestDayMacros({
      protein: dailyProteinGrams,
      carbs: carbCaloriesRest / 4,
      fat: fatCaloriesRest / 9
    });
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Calorie & Macro Cycling Planner</AlertTitle><AlertDescription>Create a daily nutrition plan with different targets for training and rest days, based on a weekly calorie goal. Protein is fixed, while carbs and fats are cycled.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Define your weekly goals.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="weeklyCals">Total Weekly Calorie Goal</Label><Input id="weeklyCals" type="number" value={weeklyCalories} onChange={e=>setWeeklyCalories(e.target.value)} placeholder="e.g., 14000"/></div>
            <div><Label htmlFor="bodyWeightKg">Your Body Weight (kg)</Label><Input id="bodyWeightKg" type="number" value={bodyWeightKg} onChange={e=>setBodyWeightKg(e.target.value)} placeholder="e.g., 70"/></div>
            <div><Label htmlFor="proteinFactor">Daily Protein Goal (grams per kg)</Label><Input id="proteinFactor" type="number" value={proteinGramsPerKg} onChange={e=>setProteinGramsPerKg(e.target.value)} placeholder="e.g., 1.8"/></div>
            <div><Label>Training Days per Week: {trainingDays}</Label><Slider defaultValue={[trainingDays]} value={[trainingDays]} min={0} max={7} step={1} onValueChange={(val)=>setTrainingDays(val[0])}/></div>
          </CardContent>
          <CardFooter><Button onClick={calculatePlan} className="w-full">Generate Plan</Button></CardFooter>
        </Card>
        
        <Card>
            <CardHeader><CardTitle className="font-headline">Daily Nutrition Plan</CardTitle></CardHeader>
            <CardContent className="space-y-4">
                {error && <Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertDescription>{error}</AlertDescription></Alert>}
                {trainingDayMacros && trainingDayCalories && (
                    <div>
                        <Label className="font-semibold">Training Days ({trainingDays}/week)</Label>
                        <p className="text-xs text-muted-foreground">Approx. {trainingDayCalories.toFixed(0)} kcal/day</p>
                        <div className="p-2 mt-1 bg-muted rounded-md text-center grid grid-cols-3 gap-1">
                            <div><p className="text-xs">Protein</p><p className="font-bold">{trainingDayMacros.protein.toFixed(0)}g</p></div>
                            <div><p className="text-xs">Carbs</p><p className="font-bold">{trainingDayMacros.carbs.toFixed(0)}g</p></div>
                            <div><p className="text-xs">Fat</p><p className="font-bold">{trainingDayMacros.fat.toFixed(0)}g</p></div>
                        </div>
                    </div>
                )}
                 {restDayMacros && restDayCalories && (
                    <div>
                        <Label className="font-semibold">Rest Days ({7 - trainingDays}/week)</Label>
                         <p className="text-xs text-muted-foreground">Approx. {restDayCalories.toFixed(0)} kcal/day</p>
                         <div className="p-2 mt-1 bg-muted rounded-md text-center grid grid-cols-3 gap-1">
                            <div><p className="text-xs">Protein</p><p className="font-bold">{restDayMacros.protein.toFixed(0)}g</p></div>
                            <div><p className="text-xs">Carbs</p><p className="font-bold">{restDayMacros.carbs.toFixed(0)}g</p></div>
                            <div><p className="text-xs">Fat</p><p className="font-bold">{restDayMacros.fat.toFixed(0)}g</p></div>
                        </div>
                    </div>
                )}
            </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: CalorieCyclingPlanner.tsx ======
==================================================

// ====== START OF FILE: CaloriesBurnedCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.42 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Flame } from "lucide-react";

// Formula: Calories Burned = MET value * Body Weight (kg) * Time (hours)
// MET values are approximations.

// Sample MET values (very simplified list)
const activities = [
  { name: "Sleeping", met: 0.9 },
  { name: "Sitting, light office work", met: 1.5 },
  { name: "Walking (3 mph, level)", met: 3.5 },
  { name: "Cycling (leisurely, <10 mph)", met: 4.0 },
  { name: "Jogging (general)", met: 7.0 },
  { name: "Running (6 mph, 10 min/mile)", met: 9.8 },
  { name: "Swimming (moderate)", met: 7.0 },
  { name: "Weightlifting (general)", met: 3.5 },
];

export default function CaloriesBurnedCalculator() {
  const [weightKg, setWeightKg] = useState<string>('');
  const [durationMinutes, setDurationMinutes] = useState<string>('');
  const [activityMet, setActivityMet] = useState<string>(activities[2].met.toString()); // Default to walking

  const [caloriesBurned, setCaloriesBurned] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateCalories = () => {
    setError(null);
    setCaloriesBurned(null);

    const weight = parseFloat(weightKg);
    const duration = parseFloat(durationMinutes);
    const met = parseFloat(activityMet);

    if (isNaN(weight) || weight <= 0 || isNaN(duration) || duration <= 0 || isNaN(met) || met <= 0) {
      setError('Please enter valid positive numbers for weight (kg), duration (minutes), and select an activity.');
      return;
    }

    const durationHours = duration / 60;
    const calculatedCalories = met * weight * durationHours;
    
    setCaloriesBurned(calculatedCalories.toFixed(0));
  };
  
  const resetForm = () => {
    setWeightKg('');
    setDurationMinutes('');
    setActivityMet(activities[2].met.toString());
    setCaloriesBurned(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Estimation Only</AlertTitle>
        <AlertDescription>
          Calories burned estimates are approximate. Actual expenditure varies by individual metabolism, intensity, and specific conditions. MET values are averages.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate calories burned during an activity.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="weightKg">Body Weight (kg)</Label>
              <Input id="weightKg" type="number" value={weightKg} onChange={(e) => setWeightKg(e.target.value)} placeholder="e.g., 70" />
            </div>
            <div>
              <Label htmlFor="activity">Activity</Label>
              <Select value={activityMet} onValueChange={setActivityMet}>
                <SelectTrigger id="activity"><SelectValue placeholder="Select activity" /></SelectTrigger>
                <SelectContent>
                  {activities.map(act => (
                    <SelectItem key={act.name} value={act.met.toString()}>
                      {act.name} (MET: {act.met})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="durationMinutes">Duration of Activity (minutes)</Label>
              <Input id="durationMinutes" type="number" value={durationMinutes} onChange={(e) => setDurationMinutes(e.target.value)} placeholder="e.g., 30" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateCalories}>Calculate Calories</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(caloriesBurned !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Calories Burned</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {caloriesBurned !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Calories Burned (approx.)</p><p className="text-3xl font-bold text-primary">{caloriesBurned} kcal</p></div>
                  <CopyButton textToCopy={caloriesBurned} />
                </div>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    MET: Metabolic Equivalent of Task. 1 MET is equivalent to the energy expenditure of sitting quietly.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CaloriesBurnedCalculator.tsx ======
==================================================

// ====== START OF FILE: CanadianMortgageCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.68 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Home } from "lucide-react";

// Canadian mortgages often have semi-annual compounding for fixed rates.
// This is a simplified monthly payment calculator and does not fully model Canadian specifics
// M = P * [ i(1+i)^N ] / [ (1+i)^N – 1]
// Where P = Principal, i = monthly interest rate, N = number of payments (months)
// For Canadian fixed rates, effective monthly rate from semi-annual: i_monthly = (1 + i_annual/2)^(2/12) - 1

export default function CanadianMortgageCalculator() {
  const [loanAmount, setLoanAmount] = useState<string>('');
  const [interestRate, setInterestRate] = useState<string>(''); // Annual %
  const [amortizationPeriod, setAmortizationPeriod] = useState<string>('25'); // Years
  
  const [monthlyPayment, setMonthlyPayment] = useState<string | null>(null);
  const [totalRepayment, setTotalRepayment] = useState<string | null>(null);
  const [totalInterest, setTotalInterest] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateMortgage = () => {
    setError(null);
    setMonthlyPayment(null);
    setTotalRepayment(null);
    setTotalInterest(null);

    const P = parseFloat(loanAmount);
    const annualRatePercent = parseFloat(interestRate);
    const termYears = parseInt(amortizationPeriod);

    if (isNaN(P) || P <= 0 || isNaN(annualRatePercent) || annualRatePercent < 0 || isNaN(termYears) || termYears <= 0) {
      setError('Please enter valid positive numbers for loan amount, interest rate, and amortization period.');
      return;
    }

    // Convert annual rate to decimal
    const annualRateDecimal = annualRatePercent / 100;
    
    // Calculate effective monthly interest rate assuming semi-annual compounding (common in Canada for fixed rates)
    // i_monthly = (1 + annual_rate/2)^(2/12) - 1
    let monthlyRate;
    if (annualRateDecimal === 0) {
        monthlyRate = 0;
    } else {
        monthlyRate = Math.pow(1 + annualRateDecimal / 2, 2 / 12) - 1;
    }
    
    const N = termYears * 12; // Total number of payments

    let M; // Monthly Payment
    if (monthlyRate === 0) {
        M = P / N;
    } else {
        M = P * (monthlyRate * Math.pow(1 + monthlyRate, N)) / (Math.pow(1 + monthlyRate, N) - 1);
    }
    
    if (isNaN(M) || !isFinite(M)) {
        setError('Could not calculate monthly payment. Check your inputs.');
        return;
    }

    const calculatedTotalRepayment = M * N;
    const calculatedTotalInterest = calculatedTotalRepayment - P;

    setMonthlyPayment(M.toFixed(2));
    setTotalRepayment(calculatedTotalRepayment.toFixed(2));
    setTotalInterest(calculatedTotalInterest.toFixed(2));
  };
  
  const resetForm = () => {
    setLoanAmount('');
    setInterestRate('');
    setAmortizationPeriod('25');
    setMonthlyPayment(null);
    setTotalRepayment(null);
    setTotalInterest(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Canadian Mortgage Estimation</AlertTitle>
        <AlertDescription>
          This calculator estimates monthly payments for a Canadian mortgage, assuming semi-annual compounding for the interest rate. It does not account for CMHC insurance, property taxes, or other fees. For precise financial planning, consult a mortgage professional.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate your Canadian mortgage payments.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="loanAmount">Mortgage Amount ($)</Label>
              <Input id="loanAmount" type="number" value={loanAmount} onChange={(e) => setLoanAmount(e.target.value)} placeholder="e.g., 300000" />
            </div>
            <div>
              <Label htmlFor="interestRate">Annual Interest Rate (%)</Label>
              <Input id="interestRate" type="number" value={interestRate} onChange={(e) => setInterestRate(e.target.value)} placeholder="e.g., 5.25" />
            </div>
            <div>
              <Label htmlFor="amortizationPeriod">Amortization Period (Years)</Label>
              <Input id="amortizationPeriod" type="number" value={amortizationPeriod} onChange={(e) => setAmortizationPeriod(e.target.value)} placeholder="e.g., 25" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateMortgage}>Calculate</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(monthlyPayment !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Mortgage Estimates</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {monthlyPayment !== null && (
                <>
                  <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                    <div><p className="text-sm text-muted-foreground">Estimated Monthly Payment</p><p className="text-3xl font-bold text-primary">${monthlyPayment}</p></div>
                    <CopyButton textToCopy={monthlyPayment} />
                  </div>
                  <div className="p-3 bg-muted rounded-md">
                    <p className="text-sm text-muted-foreground">Total Repayment</p>
                    <p className="text-xl font-semibold">${totalRepayment}</p>
                  </div>
                  <div className="p-3 bg-muted rounded-md">
                    <p className="text-sm text-muted-foreground">Total Interest Paid</p>
                    <p className="text-xl font-semibold">${totalInterest}</p>
                  </div>
                </>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    Interest rates are typically compounded semi-annually in Canada. This estimate reflects that.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CanadianMortgageCalculator.tsx ======
==================================================

// ====== START OF FILE: CapacitanceCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.82 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, BatteryFull } from "lucide-react";

type CalcMode = 'C_from_QV' | 'Q_from_CV' | 'V_from_QC';
// Units: C (Farads), Q (Coulombs), V (Volts)

export default function CapacitanceCalculator() {
  const [mode, setMode] = useState<CalcMode>('C_from_QV');
  const [charge, setCharge] = useState<string>(''); // Coulombs
  const [voltage, setVoltage] = useState<string>(''); // Volts
  const [capacitance, setCapacitance] = useState<string>(''); // Farads

  const [result, setResult] = useState<string | null>(null);
  const [resultUnit, setResultUnit] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const calculate = () => {
    setError(null); setResult(null); setResultUnit('');
    const Q = parseFloat(charge);
    const V = parseFloat(voltage);
    const C = parseFloat(capacitance);
    let calcValue: number;

    try {
      if (mode === 'C_from_QV') { // C = Q/V
        if (isNaN(Q) || isNaN(V) || V === 0) throw new Error("Charge and Voltage (non-zero) must be valid numbers.");
        calcValue = Q / V;
        setResultUnit('Farads (F)');
      } else if (mode === 'Q_from_CV') { // Q = C*V
        if (isNaN(C) || C < 0 || isNaN(V)) throw new Error("Capacitance (>=0) and Voltage must be valid numbers.");
        calcValue = C * V;
        setResultUnit('Coulombs (C)');
      } else { // V_from_QC, V = Q/C
        if (isNaN(Q) || isNaN(C) || C === 0) throw new Error("Charge and Capacitance (non-zero) must be valid numbers.");
        calcValue = Q / C;
        setResultUnit('Volts (V)');
      }
      if (isNaN(calcValue) || !isFinite(calcValue)) throw new Error("Calculation resulted in an invalid number.");
      setResult(calcValue.toPrecision(5));
    } catch (e: any) { setError(e.message); }
  };

  const resetForm = () => {
    setCharge(''); setVoltage(''); setCapacitance('');
    setResult(null); setError(null); setResultUnit('');
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Capacitance Calculator (C=Q/V)</AlertTitle><AlertDescription>Calculate Capacitance (Farads), Charge (Coulombs), or Voltage (Volts) using C = Q/V.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Solve for the unknown variable.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="capMode">Calculate:</Label><Select value={mode} onValueChange={(v:CalcMode)=>{setMode(v);resetForm();}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="C_from_QV">Capacitance (C)</SelectItem><SelectItem value="Q_from_CV">Charge (Q)</SelectItem><SelectItem value="V_from_QC">Voltage (V)</SelectItem></SelectContent></Select></div>
            {mode !== 'Q_from_CV' && <div><Label htmlFor="chargeCap">Charge (Q) - Coulombs</Label><Input id="chargeCap" type="number" value={charge} onChange={e=>setCharge(e.target.value)}/></div>}
            {mode !== 'V_from_QC' && <div><Label htmlFor="voltageCap">Voltage (V) - Volts</Label><Input id="voltageCap" type="number" value={voltage} onChange={e=>setVoltage(e.target.value)}/></div>}
            {mode !== 'C_from_QV' && <div><Label htmlFor="capacitanceCap">Capacitance (C) - Farads</Label><Input id="capacitanceCap" type="number" value={capacitance} onChange={e=>setCapacitance(e.target.value)}/></div>}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Calculated {mode.split('_')[0]}</p><p className="text-2xl font-bold text-primary">{result} {resultUnit}</p></div><CopyButton textToCopy={`${result} ${resultUnit}`}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
    

// ====== END OF FILE: CapacitanceCalculator.tsx ======
==================================================

// ====== START OF FILE: CapitalGainsTaxCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.47 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Landmark } from "lucide-react";

type HoldingPeriod = 'short_term' | 'long_term'; // Short: <= 1 year, Long: > 1 year

// Placeholder tax rates - these vary wildly by jurisdiction, income level, year.
const placeholderRates = {
  short_term: 0.25, // e.g., 25% (treated as ordinary income, could be higher/lower)
  long_term: 0.15,  // e.g., 15% (common federal long-term rate for many brackets)
};

export default function CapitalGainsTaxCalculator() {
  const [purchasePrice, setPurchasePrice] = useState<string>('');
  const [salePrice, setSalePrice] = useState<string>('');
  const [holdingPeriod, setHoldingPeriod] = useState<HoldingPeriod>('long_term');

  const [capitalGain, setCapitalGain] = useState<string | null>(null);
  const [estimatedTax, setEstimatedTax] = useState<string | null>(null);
  const [taxRateUsed, setTaxRateUsed] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTax = () => {
    setError(null); setCapitalGain(null); setEstimatedTax(null); setTaxRateUsed(null);
    const pp = parseFloat(purchasePrice);
    const sp = parseFloat(salePrice);

    if (isNaN(pp) || pp < 0 || isNaN(sp) || sp < 0) {
      setError('Purchase price and sale price must be valid non-negative numbers.');
      return;
    }

    const gain = sp - pp;
    setCapitalGain(gain.toFixed(2));

    if (gain <= 0) {
      setEstimatedTax("0.00 (No gain or a loss)");
      setTaxRateUsed("0");
      return;
    }

    const rate = placeholderRates[holdingPeriod];
    const tax = gain * rate;
    setEstimatedTax(tax.toFixed(2));
    setTaxRateUsed((rate * 100).toFixed(0));
  };

  const resetForm = () => {
    setPurchasePrice(''); setSalePrice(''); setHoldingPeriod('long_term');
    setCapitalGain(null); setEstimatedTax(null); setTaxRateUsed(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4"/>
        <AlertTitle>Highly Simplified - For Illustration Only</AlertTitle>
        <AlertDescription>
          Capital gains tax laws are extremely complex (short-term vs. long-term rates, income brackets, state taxes, specific asset types, allowances, etc.). This calculator uses <strong className="font-semibold">fixed placeholder tax rates (e.g., Short-Term @ 25%, Long-Term @ 15%) for demonstration ONLY.</strong> It is NOT for financial or tax planning. <strong className="font-semibold">Consult a qualified tax professional.</strong>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate capital gains tax (simplified).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="purchasePriceCG">Purchase Price ($)</Label><Input id="purchasePriceCG" type="number" value={purchasePrice} onChange={e=>setPurchasePrice(e.target.value)}/></div>
            <div><Label htmlFor="salePriceCG">Sale Price ($)</Label><Input id="salePriceCG" type="number" value={salePrice} onChange={e=>setSalePrice(e.target.value)}/></div>
            <div><Label htmlFor="holdingPeriodCG">Holding Period</Label><Select value={holdingPeriod} onValueChange={(v:HoldingPeriod)=>setHoldingPeriod(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="short_term">Short-Term (≤ 1 year)</SelectItem><SelectItem value="long_term">Long-Term (&gt; 1 year)</SelectItem></SelectContent></Select></div>
            <p className="text-xs text-muted-foreground">Assumes placeholder rates: Short-Term {placeholderRates.short_term*100}%, Long-Term {placeholderRates.long_term*100}%.</p>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTax}>Estimate Tax</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(estimatedTax || error) && (
          <Card>
            <CardHeader><CardDescription>Tax Estimation (Simplified)</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {capitalGain && (<div className="p-1.5 bg-muted rounded-md text-sm">Capital Gain / Loss: <strong className="font-semibold">${capitalGain}</strong></div>)}
              {taxRateUsed && (<div className="p-1.5 bg-muted rounded-md text-sm">Placeholder Tax Rate Applied: <strong className="font-semibold">{taxRateUsed}%</strong></div>)}
              {estimatedTax && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Est. Capital Gains Tax</p><p className="text-2xl font-bold text-primary">${estimatedTax}</p></div><CopyButton textToCopy={estimatedTax}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CapitalGainsTaxCalculator.tsx ======
==================================================

// ====== START OF FILE: CapRateCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.33 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Building, Percent } from "lucide-react";

export default function CapRateCalculator() {
  const [propertyValue, setPropertyValue] = useState<string>('');
  const [netOperatingIncome, setNetOperatingIncome] = useState<string>('');

  const [capRate, setCapRate] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateCapRate = () => {
    setError(null);
    setCapRate(null);

    const pv = parseFloat(propertyValue);
    const noi = parseFloat(netOperatingIncome);

    if (isNaN(pv) || pv <= 0 || isNaN(noi)) { // NOI can be negative, but PV must be > 0
      setError('Please enter a valid positive Property Value and a valid Net Operating Income.');
      return;
    }

    const calculatedCapRate = (noi / pv) * 100;
    
    if(isNaN(calculatedCapRate) || !isFinite(calculatedCapRate)){
        setError("Could not calculate Cap Rate. Ensure Property Value is not zero.");
        return;
    }

    setCapRate(calculatedCapRate.toFixed(2));
  };

  const resetForm = () => {
    setPropertyValue('');
    setNetOperatingIncome('');
    setCapRate(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Capitalization Rate (Cap Rate) Calculator</AlertTitle>
        <AlertDescription>
          Calculate the Cap Rate of a real estate investment to quickly assess its profitability and return potential. Cap Rate = NOI / Property Value.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter property value and income.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="propertyValueCR">Property Value / Purchase Price ($)</Label>
              <Input id="propertyValueCR" type="number" value={propertyValue} onChange={e => setPropertyValue(e.target.value)} placeholder="e.g., 250000" />
            </div>
            <div>
              <Label htmlFor="noiCR">Net Operating Income (NOI) (Annual) ($)</Label>
              <Input id="noiCR" type="number" value={netOperatingIncome} onChange={e => setNetOperatingIncome(e.target.value)} placeholder="e.g., 20000" />
              <p className="text-xs text-muted-foreground mt-1">NOI = Gross Income - Operating Expenses (excluding mortgage payments).</p>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateCapRate}>Calculate Cap Rate</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(capRate || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Calculated Cap Rate</CardDescription>
            </CardHeader>
            <CardContent>
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {capRate && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Capitalization Rate</p>
                    <p className="text-2xl font-bold text-primary">{capRate}%</p>
                  </div>
                  <CopyButton textToCopy={capRate} />
                </div>
              )}
              <AlertDescription className="text-xs pt-2 mt-2">
                A higher Cap Rate generally indicates a higher potential return on investment, but can also imply higher risk.
              </AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CapRateCalculator.tsx ======
==================================================

// ====== START OF FILE: CarbohydrateCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Wheat } from "lucide-react";

// General carbohydrate recommendations:
// RDA: 130g/day for adults
// AMDR: 45-65% of total daily calories. 1g carb = 4 calories.

const activityLevelsCarbs = [
  { name: "Sedentary / Light Activity", lowCarbPercentage: 0.45, highCarbPercentage: 0.50 },
  { name: "Moderate Activity (3-5 days/week)", lowCarbPercentage: 0.50, highCarbPercentage: 0.55 },
  { name: "Active / Intense Activity (6-7 days/week or athlete)", lowCarbPercentage: 0.55, highCarbPercentage: 0.65 },
];


export default function CarbohydrateCalculator() {
  const [totalDailyCalories, setTotalDailyCalories] = useState<string>('');
  const [activityLevel, setActivityLevel] = useState<string>('moderate'); // Key for activityLevelsCarbs

  const [carbRangeGrams, setCarbRangeGrams] = useState<string | null>(null);
  const [carbRangeCalories, setCarbRangeCalories] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateCarbs = () => {
    setError(null);
    setCarbRangeGrams(null);
    setCarbRangeCalories(null);

    const calories = parseInt(totalDailyCalories);
    
    if (isNaN(calories) || calories <= 0) {
      setError('Please enter a valid positive number for total daily calories.');
      return;
    }

    const selectedActivity = activityLevelsCarbs.find(
        level => level.name.toLowerCase().includes(activityLevel)
    ) || activityLevelsCarbs[1]; // Default to moderate if not found

    const lowCarbCal = calories * selectedActivity.lowCarbPercentage;
    const highCarbCal = calories * selectedActivity.highCarbPercentage;

    const lowCarbGrams = lowCarbCal / 4;
    const highCarbGrams = highCarbCal / 4;

    setCarbRangeGrams(`${lowCarbGrams.toFixed(0)} - ${highCarbGrams.toFixed(0)} grams`);
    setCarbRangeCalories(`${lowCarbCal.toFixed(0)} - ${highCarbCal.toFixed(0)} Calories from Carbs`);
  };
  
  const resetForm = () => {
    setTotalDailyCalories('');
    setActivityLevel('moderate');
    setCarbRangeGrams(null);
    setCarbRangeCalories(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Nutritional Disclaimer</AlertTitle>
        <AlertDescription>
          This calculator provides general carbohydrate intake estimates based on AMDR guidelines. Individual needs vary based on health, goals, and medical conditions. Consult a healthcare professional or registered dietitian for personalized dietary advice.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate your daily carbohydrate needs.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="totalDailyCalories">Total Daily Calorie Intake (kcal)</Label>
              <Input id="totalDailyCalories" type="number" value={totalDailyCalories} onChange={(e) => setTotalDailyCalories(e.target.value)} placeholder="e.g., 2000" />
            </div>
            <div>
              <Label htmlFor="activityLevelCarbs">Activity Level</Label>
              <Select value={activityLevel} onValueChange={setActivityLevel}>
                <SelectTrigger id="activityLevelCarbs"><SelectValue placeholder="Select activity level" /></SelectTrigger>
                <SelectContent>
                  {activityLevelsCarbs.map(level => (
                    <SelectItem key={level.name} value={level.name.toLowerCase().split(' ')[0]}>
                      {level.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateCarbs}>Calculate Carbs</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(carbRangeGrams !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Daily Carbohydrate Needs</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {carbRangeGrams !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Carbohydrate Range (grams)</p>
                    <p className="text-2xl font-bold text-primary">{carbRangeGrams}</p>
                    <p className="text-xs text-muted-foreground mt-1">({carbRangeCalories})</p>
                  </div>
                  <CopyButton textToCopy={`${carbRangeGrams} (${carbRangeCalories})`} />
                </div>
              )}
               <Alert variant="default" className="mt-4">
                <Info className="h-4 w-4"/>
                <AlertTitle>General Recommendations</AlertTitle>
                <AlertDescription>
                    The Acceptable Macronutrient Distribution Range (AMDR) for carbohydrates is 45-65% of total daily calories. The RDA is 130g/day. Focus on complex carbohydrates like whole grains, fruits, and vegetables.
                </AlertDescription>
               </Alert>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CarbohydrateCalculator.tsx ======
==================================================

// ====== START OF FILE: CarbonFootprintCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.24 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Footprints } from "lucide-react";

// Extremely simplified Carbon Footprint calculation.
// Factors from EPA: https://www.epa.gov/energy/greenhouse-gas-equivalencies-calculator
// Avg US electricity CO2e: ~0.85 lbs CO2e/kWh (this varies greatly by region)
// Avg gasoline CO2e: ~19.6 lbs CO2e/gallon

export default function CarbonFootprintCalculator() {
  const [electricityKwh, setElectricityKwh] = useState<string>(''); // Monthly kWh
  const [naturalGasTherms, setNaturalGasTherms] = useState<string>(''); // Monthly therms (optional)
  const [vehicleMiles, setVehicleMiles] = useState<string>(''); // Monthly miles
  const [mpg, setMpg] = useState<string>('25'); // Vehicle MPG

  const [totalCo2eLbs, setTotalCo2eLbs] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const lbsCo2ePerKwh = 0.85; // Placeholder value
  const lbsCo2ePerTherm = 11.7; // Approx for natural gas
  const lbsCo2ePerGallonGasoline = 19.6;

  const calculateFootprint = () => {
    setError(null);
    setTotalCo2eLbs(null);

    const elec = parseFloat(electricityKwh) || 0;
    const gas = parseFloat(naturalGasTherms) || 0;
    const miles = parseFloat(vehicleMiles) || 0;
    const fuelEfficiency = parseFloat(mpg);

    if ( (electricityKwh && (isNaN(elec) || elec < 0)) || 
         (naturalGasTherms && (isNaN(gas) || gas < 0)) || 
         (vehicleMiles && (isNaN(miles) || miles < 0)) ) {
      setError('Please enter valid non-negative numbers for usage inputs.');
      return;
    }
     if (vehicleMiles && (isNaN(fuelEfficiency) || fuelEfficiency <= 0)) {
        setError('Please enter a valid positive number for vehicle MPG if providing miles.');
        return;
    }
    if (elec === 0 && gas === 0 && miles === 0) {
        setError('Please enter at least one consumption value.');
        return;
    }


    let co2e = 0;
    co2e += elec * lbsCo2ePerKwh;
    co2e += gas * lbsCo2ePerTherm;
    if (miles > 0 && fuelEfficiency > 0) {
      const gallonsUsed = miles / fuelEfficiency;
      co2e += gallonsUsed * lbsCo2ePerGallonGasoline;
    }
    
    setTotalCo2eLbs(co2e.toFixed(1));
  };
  
  const resetForm = () => {
    setElectricityKwh('');
    setNaturalGasTherms('');
    setVehicleMiles('');
    setMpg('25');
    setTotalCo2eLbs(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Simplified Estimation</AlertTitle>
        <AlertDescription>
          This calculator provides a basic estimate of your monthly carbon footprint from common sources (US-based factors). Actual footprints are complex and influenced by many lifestyle choices (diet, flights, consumption habits). Emission factors vary significantly by location and energy source.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate your monthly carbon footprint (simplified).</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="electricityKwh">Monthly Electricity Usage (kWh)</Label>
              <Input id="electricityKwh" type="number" value={electricityKwh} onChange={(e) => setElectricityKwh(e.target.value)} placeholder="e.g., 750" />
            </div>
            <div>
              <Label htmlFor="naturalGasTherms">Monthly Natural Gas Usage (therms) (Optional)</Label>
              <Input id="naturalGasTherms" type="number" value={naturalGasTherms} onChange={(e) => setNaturalGasTherms(e.target.value)} placeholder="e.g., 50" />
            </div>
            <div>
              <Label htmlFor="vehicleMiles">Monthly Vehicle Miles Driven</Label>
              <Input id="vehicleMiles" type="number" value={vehicleMiles} onChange={(e) => setVehicleMiles(e.target.value)} placeholder="e.g., 1000" />
            </div>
             <div>
              <Label htmlFor="mpg">Vehicle Fuel Efficiency (MPG)</Label>
              <Input id="mpg" type="number" value={mpg} onChange={(e) => setMpg(e.target.value)} placeholder="e.g., 25" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateFootprint}>Estimate Footprint</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(totalCo2eLbs !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Monthly Carbon Footprint</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalCo2eLbs !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">CO₂ Equivalent (lbs)</p><p className="text-3xl font-bold text-primary">{totalCo2eLbs} lbs</p></div>
                  <CopyButton textToCopy={totalCo2eLbs} />
                </div>
              )}
              <Alert variant="default" className="mt-4">
                <Info className="h-4 w-4"/>
                <AlertTitle>Context</AlertTitle>
                <AlertDescription>
                    The average monthly CO₂e footprint per capita in the US from residential energy and transportation can be around 1,000-2,000 lbs, but this varies widely. This estimate does not include food, goods, or air travel.
                </AlertDescription>
               </Alert>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CarbonFootprintCalculator.tsx ======
==================================================

// ====== START OF FILE: CarLoanCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.46 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Car } from "lucide-react";

export default function CarLoanCalculator() {
  const [loanAmount, setLoanAmount] = useState<string>('');
  const [interestRate, setInterestRate] = useState<string>(''); // Annual %
  const [loanTermMonths, setLoanTermMonths] = useState<string>('');
  const [downPayment, setDownPayment] = useState<string>('0');
  const [tradeInValue, setTradeInValue] = useState<string>('0');
  
  const [monthlyPayment, setMonthlyPayment] = useState<string | null>(null);
  const [totalRepayment, setTotalRepayment] = useState<string | null>(null);
  const [totalInterest, setTotalInterest] = useState<string | null>(null);
  const [actualLoanAmount, setActualLoanAmount] = useState<string|null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateLoan = () => {
    setError(null);
    setMonthlyPayment(null);
    setTotalRepayment(null);
    setTotalInterest(null);
    setActualLoanAmount(null);

    const vehiclePrice = parseFloat(loanAmount); // Using loanAmount as vehicle price for this setup
    const annualRate = parseFloat(interestRate) / 100;
    const N = parseInt(loanTermMonths);
    const dp = parseFloat(downPayment);
    const trade = parseFloat(tradeInValue);

    if (isNaN(vehiclePrice) || vehiclePrice <= 0 || isNaN(annualRate) || annualRate < 0 || isNaN(N) || N <= 0) {
      setError('Please enter valid positive numbers for vehicle price, interest rate, and loan term.');
      return;
    }
    if (isNaN(dp) || dp < 0 || isNaN(trade) || trade < 0) {
        setError('Down payment and trade-in value must be zero or positive.');
        return;
    }

    const P = vehiclePrice - dp - trade; // Actual Principal Loan Amount
    if (P <= 0) {
        setError('Loan amount after down payment and trade-in must be positive.');
        setMonthlyPayment("0.00");
        setTotalRepayment("0.00");
        setTotalInterest("0.00");
        setActualLoanAmount(P.toFixed(2));
        return;
    }
    setActualLoanAmount(P.toFixed(2));


    const monthlyRate = annualRate / 12;
    let M; // Monthly Payment

    if (monthlyRate === 0) { // 0% interest
        M = P / N;
    } else {
        M = P * (monthlyRate * Math.pow(1 + monthlyRate, N)) / (Math.pow(1 + monthlyRate, N) - 1);
    }
    
    if (isNaN(M) || !isFinite(M)) {
        setError('Could not calculate monthly payment. Check your inputs.');
        return;
    }

    const calculatedTotalRepayment = M * N;
    const calculatedTotalInterest = calculatedTotalRepayment - P;

    setMonthlyPayment(M.toFixed(2));
    setTotalRepayment(calculatedTotalRepayment.toFixed(2));
    setTotalInterest(calculatedTotalInterest.toFixed(2));
  };
  
  const resetForm = () => {
    setLoanAmount('');
    setInterestRate('');
    setLoanTermMonths('');
    setDownPayment('0');
    setTradeInValue('0');
    setMonthlyPayment(null);
    setTotalRepayment(null);
    setTotalInterest(null);
    setActualLoanAmount(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
       <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Car Loan Estimation</AlertTitle>
        <AlertDescription>
          This calculator provides an estimate of car loan payments. It does not include taxes, title, registration fees, or other dealer charges.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate your car loan payments.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="loanAmount">Vehicle Price ($)</Label>
              <Input id="loanAmount" type="number" value={loanAmount} onChange={(e) => setLoanAmount(e.target.value)} placeholder="e.g., 25000" />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="downPayment">Down Payment ($)</Label>
                <Input id="downPayment" type="number" value={downPayment} onChange={(e) => setDownPayment(e.target.value)} placeholder="e.g., 5000" />
              </div>
              <div>
                <Label htmlFor="tradeInValue">Trade-in Value ($)</Label>
                <Input id="tradeInValue" type="number" value={tradeInValue} onChange={(e) => setTradeInValue(e.target.value)} placeholder="e.g., 2000" />
              </div>
            </div>
            <div>
              <Label htmlFor="interestRate">Annual Interest Rate (%)</Label>
              <Input id="interestRate" type="number" value={interestRate} onChange={(e) => setInterestRate(e.target.value)} placeholder="e.g., 4.5" />
            </div>
            <div>
              <Label htmlFor="loanTermMonths">Loan Term (Months)</Label>
              <Input id="loanTermMonths" type="number" value={loanTermMonths} onChange={(e) => setLoanTermMonths(e.target.value)} placeholder="e.g., 60" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateLoan}>Calculate</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(monthlyPayment !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Loan Estimates</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {actualLoanAmount !== null && (
                 <div className="p-3 bg-muted rounded-md">
                    <p className="text-sm text-muted-foreground">Actual Loan Amount</p>
                    <p className="text-xl font-semibold">${actualLoanAmount}</p>
                  </div>
              )}
              {monthlyPayment !== null && (
                <>
                  <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                    <div><p className="text-sm text-muted-foreground">Estimated Monthly Payment</p><p className="text-3xl font-bold text-primary">${monthlyPayment}</p></div>
                    <CopyButton textToCopy={monthlyPayment} />
                  </div>
                  <div className="p-3 bg-muted rounded-md">
                    <p className="text-sm text-muted-foreground">Total Repayment</p>
                    <p className="text-xl font-semibold">${totalRepayment}</p>
                  </div>
                  <div className="p-3 bg-muted rounded-md">
                    <p className="text-sm text-muted-foreground">Total Interest Paid</p>
                    <p className="text-xl font-semibold">${totalInterest}</p>
                  </div>
                </>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    Rates and terms can vary. Check with lenders for specific offers.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CarLoanCalculator.tsx ======
==================================================

// ====== START OF FILE: CdCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.59 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, PiggyBank } from "lucide-react";

// Future Value of CD: FV = P * (1 + r/n)^(nt)
// P = Principal, r = annual interest rate, n = number of times interest compounded per year, t = term in years

export default function CdCalculator() {
  const [principal, setPrincipal] = useState<string>('');
  const [apy, setApy] = useState<string>(''); // Annual Percentage Yield (%)
  const [termMonths, setTermMonths] = useState<string>('');
  const [compoundingFrequency, setCompoundingFrequency] = useState<string>('12'); // Monthly default

  const [futureValue, setFutureValue] = useState<string | null>(null);
  const [totalInterest, setTotalInterest] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateCd = () => {
    setError(null);
    setFutureValue(null);
    setTotalInterest(null);

    const P = parseFloat(principal);
    const annualYield = parseFloat(apy) / 100; // APY as decimal
    const t_months = parseInt(termMonths);
    const n_compound = parseInt(compoundingFrequency);

    if (isNaN(P) || P <= 0 || isNaN(annualYield) || annualYield < 0 || isNaN(t_months) || t_months <= 0 || isNaN(n_compound) || n_compound <=0) {
      setError('Please enter valid positive numbers for principal, APY, term, and compounding frequency.');
      return;
    }

    const t_years = t_months / 12;
    
    // Convert APY to APR (nominal rate) for compounding calculation
    // APR = n * ((1 + APY)^(1/n) - 1)
    let nominalRate;
    if (n_compound === 0) { // Should not happen with select validation, but good check
        setError("Compounding frequency cannot be zero.");
        return;
    }
    if (annualYield === 0) {
        nominalRate = 0;
    } else {
        nominalRate = n_compound * (Math.pow(1 + annualYield, 1 / n_compound) - 1);
    }


    const fv = P * Math.pow(1 + (nominalRate / n_compound), n_compound * t_years);
    
    if (isNaN(fv) || !isFinite(fv)) {
        setError("Could not calculate future value. Please check inputs.");
        return;
    }

    const interestEarned = fv - P;

    setFutureValue(fv.toFixed(2));
    setTotalInterest(interestEarned.toFixed(2));
  };
  
  const resetForm = () => {
    setPrincipal('');
    setApy('');
    setTermMonths('');
    setCompoundingFrequency('12');
    setFutureValue(null);
    setTotalInterest(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
       <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>CD Growth Estimation</AlertTitle>
        <AlertDescription>
          This calculator estimates the future value and interest earned on a Certificate of Deposit (CD). It assumes interest is compounded and reinvested. APY (Annual Percentage Yield) is used, which accounts for compounding.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate the growth of your Certificate of Deposit (CD).</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="principal">Initial Deposit Amount ($)</Label>
              <Input id="principal" type="number" value={principal} onChange={(e) => setPrincipal(e.target.value)} placeholder="e.g., 10000" />
            </div>
            <div>
              <Label htmlFor="apy">Annual Percentage Yield (APY %)</Label>
              <Input id="apy" type="number" value={apy} onChange={(e) => setApy(e.target.value)} placeholder="e.g., 4.5" />
            </div>
            <div>
              <Label htmlFor="termMonths">CD Term (Months)</Label>
              <Input id="termMonths" type="number" value={termMonths} onChange={(e) => setTermMonths(e.target.value)} placeholder="e.g., 12" />
            </div>
            <div>
              <Label htmlFor="compoundingFrequency">Compounding Frequency</Label>
              <Select value={compoundingFrequency} onValueChange={setCompoundingFrequency}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="365">Daily</SelectItem>
                  <SelectItem value="12">Monthly</SelectItem>
                  <SelectItem value="4">Quarterly</SelectItem>
                  <SelectItem value="2">Semi-Annually</SelectItem>
                  <SelectItem value="1">Annually</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateCd}>Calculate CD Growth</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(futureValue !== null || error) && (
          <Card>
            <CardHeader><CardDescription>CD Growth Summary</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {futureValue !== null && (
                <>
                  <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                    <div><p className="text-sm text-muted-foreground">Future Value at Maturity</p><p className="text-3xl font-bold text-primary">${futureValue}</p></div>
                    <CopyButton textToCopy={futureValue} />
                  </div>
                  <div className="p-3 bg-muted rounded-md">
                    <p className="text-sm text-muted-foreground">Total Interest Earned</p>
                    <p className="text-xl font-semibold">${totalInterest}</p>
                  </div>
                </>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    Early withdrawal penalties may apply to CDs. APY assumes funds remain deposited for the full term.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CdCalculator.tsx ======
==================================================

// ====== START OF FILE: CelsiusFahrenheitConverterBasic.tsx ======
// File converted from TSX to TXT
// Original size: 2.48 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState, ChangeEvent } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Thermometer } from "lucide-react";

export default function CelsiusFahrenheitConverterBasic() {
  const [celsius, setCelsius] = useState<string>('');
  const [fahrenheit, setFahrenheit] = useState<string>('');

  const handleCelsiusChange = (e: ChangeEvent<HTMLInputElement>) => {
    const C = e.target.value;
    setCelsius(C);
    if (C === '' || C === '-') {
      setFahrenheit('');
      return;
    }
    const numC = parseFloat(C);
    if (!isNaN(numC)) {
      const F = (numC * 9/5) + 32;
      setFahrenheit(F.toFixed(2));
    }
  };

  const handleFahrenheitChange = (e: ChangeEvent<HTMLInputElement>) => {
    const F = e.target.value;
    setFahrenheit(F);
    if (F === '' || F === '-') {
      setCelsius('');
      return;
    }
    const numF = parseFloat(F);
    if (!isNaN(numF)) {
      const C = (numF - 32) * 5/9;
      setCelsius(C.toFixed(2));
    }
  };

  const resetConverter = () => {
    setCelsius('');
    setFahrenheit('');
  };

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardDescription>Enter a value in either field to convert between Celsius and Fahrenheit.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex items-center space-x-2">
          <Thermometer className="h-5 w-5 text-muted-foreground" />
          <Label htmlFor="celsius" className="w-20">Celsius (°C)</Label>
          <Input 
            id="celsius" 
            type="number" 
            value={celsius}
            onChange={handleCelsiusChange}
            placeholder="e.g., 20"
          />
        </div>
        <div className="flex items-center space-x-2">
          <Thermometer className="h-5 w-5 text-muted-foreground" />
          <Label htmlFor="fahrenheit" className="w-20">Fahrenheit (°F)</Label>
          <Input 
            id="fahrenheit" 
            type="number" 
            value={fahrenheit}
            onChange={handleFahrenheitChange}
            placeholder="e.g., 68"
          />
        </div>
      </CardContent>
      <CardFooter>
        <Button variant="outline" onClick={resetConverter} className="w-full">
          Reset
        </Button>
      </CardFooter>
    </Card>
  );
}


// ====== END OF FILE: CelsiusFahrenheitConverterBasic.tsx ======
==================================================

// ====== START OF FILE: ChemicalReactionBalancer.tsx ======
// File converted from TSX to TXT
// Original size: 5.2 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, FlaskConical } from "lucide-react";

export default function ChemicalReactionBalancer() {
  const [reactants, setReactants] = useState<string>('');
  const [products, setProducts] = useState<string>('');
  const [balancedEquation, setBalancedEquation] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const balanceReaction = () => {
    setError(null);
    setBalancedEquation(null);

    // Placeholder for complex balancing logic
    // Actual chemical equation balancing is a non-trivial algorithmic problem.
    // It often involves setting up and solving a system of linear equations based on atom conservation.
    // For common reactions, a lookup table or simpler heuristic might work, but a general balancer is complex.

    if (!reactants.trim() || !products.trim()) {
      setError("Please enter both reactants and products. Example: Reactants 'H2 + O2', Products 'H2O'.");
      return;
    }
    
    // Example of a very simple hardcoded case for demonstration
    if (reactants.trim() === "H2 + O2" && products.trim() === "H2O") {
        setBalancedEquation("2H₂ + O₂ → 2H₂O");
        return;
    }
     if (reactants.trim().toUpperCase() === "CH4 + O2" && products.trim().toUpperCase() === "CO2 + H2O") {
        setBalancedEquation("CH₄ + 2O₂ → CO₂ + 2H₂O");
        return;
    }


    setError("Automated balancing for this complex reaction is not yet implemented. This tool currently supports very basic examples or requires manual input interpretation.");
    // For a real implementation, you'd parse the input strings, identify elements,
    // set up conservation equations for each element, and solve the system.
    // Libraries for symbolic math or linear algebra might be needed.
  };

  const resetForm = () => {
    setReactants('');
    setProducts('');
    setBalancedEquation(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Complex Scientific Tool</AlertTitle>
        <AlertDescription>
          Balancing chemical reactions algorithmically is a complex task. This calculator is a simplified demonstration. For accurate and complex balancing, specialized chemistry software is recommended.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter reactants and products to (attempt to) balance the chemical equation.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="reactants">Reactants (e.g., H2 + O2)</Label>
              <Textarea 
                id="reactants" 
                value={reactants} 
                onChange={(e) => setReactants(e.target.value)} 
                placeholder="Enter reactants, separated by '+'" 
                rows={3}
              />
            </div>
            <div>
              <Label htmlFor="products">Products (e.g., H2O)</Label>
              <Textarea 
                id="products" 
                value={products} 
                onChange={(e) => setProducts(e.target.value)} 
                placeholder="Enter products, separated by '+'"
                rows={3}
              />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={balanceReaction}>Balance Equation</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(balancedEquation || error) && (
          <Card>
            <CardHeader><CardDescription>Balancing Result</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {balancedEquation && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Balanced Equation</p>
                    <p className="text-xl font-bold text-primary">{balancedEquation}</p>
                  </div>
                  <CopyButton textToCopy={balancedEquation} />
                </div>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    Use standard chemical notation. Coefficients will be determined. This tool is a simplified demonstrator.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ChemicalReactionBalancer.tsx ======
==================================================

// ====== START OF FILE: ChemicalReactionBalancerConceptual.tsx ======
// File converted from TSX to TXT
// Original size: 4.57 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, FlaskConical } from "lucide-react";

export default function ChemicalReactionBalancerConceptual() {
  const [reactants, setReactants] = useState<string>('');
  const [products, setProducts] = useState<string>('');
  const [balancedEquation, setBalancedEquation] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const balanceReaction = () => {
    setError(null);
    setBalancedEquation(null);

    // Placeholder for complex balancing logic
    // Actual chemical equation balancing is a non-trivial algorithmic problem.
    if (!reactants.trim() || !products.trim()) {
      setError("Please enter both reactants and products. Example: Reactants 'H2 + O2', Products 'H2O'.");
      return;
    }
    
    // Example of a very simple hardcoded case for demonstration
    if (reactants.replace(/\s/g, '').toUpperCase() === "H2+O2" && products.replace(/\s/g, '').toUpperCase() === "H2O") {
        setBalancedEquation("2H₂ + O₂ → 2H₂O");
        return;
    }
     if (reactants.replace(/\s/g, '').toUpperCase() === "CH4+O2" && products.replace(/\s/g, '').toUpperCase() === "CO2+H2O") {
        setBalancedEquation("CH₄ + 2O₂ → CO₂ + 2H₂O");
        return;
    }

    setError("Automated balancing for this complex reaction is not yet implemented. This tool currently supports very basic examples or requires manual input interpretation.");
  };

  const resetForm = () => {
    setReactants('');
    setProducts('');
    setBalancedEquation(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Conceptual Tool - Placeholder Logic</AlertTitle>
        <AlertDescription>
          Balancing chemical reactions algorithmically is a complex task. This calculator is a simplified demonstration. For accurate and complex balancing, specialized chemistry software is recommended.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter reactants and products to balance the chemical equation.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="reactants_conceptual">Reactants (e.g., H2 + O2)</Label>
              <Input 
                id="reactants_conceptual" 
                value={reactants} 
                onChange={(e) => setReactants(e.target.value)} 
                placeholder="Enter reactants, separated by '+'"
              />
            </div>
            <div>
              <Label htmlFor="products_conceptual">Products (e.g., H2O)</Label>
              <Input
                id="products_conceptual" 
                value={products} 
                onChange={(e) => setProducts(e.target.value)} 
                placeholder="Enter products, separated by '+'"
              />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={balanceReaction}>Balance (Conceptual)</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(balancedEquation || error) && (
          <Card>
            <CardHeader><CardDescription>Balancing Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {balancedEquation && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Balanced Equation</p>
                    <p className="text-xl font-bold text-primary">{balancedEquation}</p>
                  </div>
                  <CopyButton textToCopy={balancedEquation} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ChemicalReactionBalancerConceptual.tsx ======
==================================================

// ====== START OF FILE: ChildHeightPredictorCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.73 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Users } from "lucide-react";

// Simplified Mid-Parental Height formula
export default function ChildHeightPredictorCalculator() {
  const [motherHeight, setMotherHeight] = useState<string>('');
  const [fatherHeight, setFatherHeight] = useState<string>('');
  const [childGender, setChildGender] = useState<'boy' | 'girl'>('boy');
  const [unit, setUnit] = useState<'cm' | 'in'>('cm');
  
  const [predictedHeightRange, setPredictedHeightRange] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePredictedHeight = () => {
    setError(null);
    setPredictedHeightRange(null);

    let mH = parseFloat(motherHeight);
    let fH = parseFloat(fatherHeight);

    if (isNaN(mH) || mH <= 0 || isNaN(fH) || fH <= 0) {
      setError('Please enter valid positive heights for both parents.');
      return;
    }

    let avgParentHeight = (mH + fH) / 2;
    let prediction: number;
    let adjustment = unit === 'cm' ? 6.5 : 2.5; // cm or inches adjustment

    if (childGender === 'boy') {
      prediction = avgParentHeight + adjustment;
    } else { // girl
      prediction = avgParentHeight - adjustment;
    }
    
    // Provide a range, e.g., +/- 2 inches or +/- 5 cm for common variance
    const rangeOffset = unit === 'cm' ? 5 : 2;
    const lowerBound = prediction - rangeOffset;
    const upperBound = prediction + rangeOffset;

    setPredictedHeightRange(`${lowerBound.toFixed(1)} - ${upperBound.toFixed(1)} ${unit}`);
  };
  
  const resetForm = () => {
    setMotherHeight('');
    setFatherHeight('');
    setChildGender('boy');
    setUnit('cm');
    setPredictedHeightRange(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Genetic Disclaimer - Estimation Only</AlertTitle>
        <AlertDescription>
          This calculator uses the Mid-Parental Height method, which is a very rough estimate. Actual adult height is influenced by many genetic and environmental factors. <strong className="font-semibold">This is not a substitute for professional medical or genetic advice.</strong>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate a child's potential adult height.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
                <Label htmlFor="unitHeightPredCHP">Unit for Heights</Label>
                <Select value={unit} onValueChange={(value: 'cm' | 'in') => setUnit(value)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="cm">Centimeters (cm)</SelectItem>
                    <SelectItem value="in">Inches (in)</SelectItem>
                  </SelectContent>
                </Select>
            </div>
            <div><Label htmlFor="motherHeightCHP">Mother's Height ({unit})</Label><Input id="motherHeightCHP" type="number" value={motherHeight} onChange={(e) => setMotherHeight(e.target.value)} placeholder={`e.g., ${unit==='cm' ? 165 : 65}`} /></div>
            <div><Label htmlFor="fatherHeightCHP">Father's Height ({unit})</Label><Input id="fatherHeightCHP" type="number" value={fatherHeight} onChange={(e) => setFatherHeight(e.target.value)} placeholder={`e.g., ${unit==='cm' ? 180 : 71}`} /></div>
            <div>
                <Label htmlFor="childGenderCHP">Child's Biological Gender</Label>
                <Select value={childGender} onValueChange={(value: 'boy' | 'girl') => setChildGender(value)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="boy">Boy</SelectItem>
                    <SelectItem value="girl">Girl</SelectItem>
                  </SelectContent>
                </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculatePredictedHeight}>Predict Height</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(predictedHeightRange || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Adult Height Range</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {predictedHeightRange && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Est. Adult Height Range (±{unit === 'cm' ? 5 : 2}{unit})</p><p className="text-xl font-bold text-primary">{predictedHeightRange}</p></div>
                  <CopyButton textToCopy={predictedHeightRange} />
                </div>
              )}
            </CardContent>
            <CardFooter><p className="text-xs text-muted-foreground">Genetic and environmental factors cause variation.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ChildHeightPredictorCalculator.tsx ======
==================================================

// ====== START OF FILE: CircleCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.25 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal } from "lucide-react";

export default function CircleCalculator() {
  const [radius, setRadius] = useState<string>('');
  
  const [area, setArea] = useState<string | null>(null);
  const [circumference, setCircumference] = useState<string | null>(null);
  const [diameter, setDiameter] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateCircleProperties = () => {
    setError(null);
    setArea(null);
    setCircumference(null);
    setDiameter(null);

    const r = parseFloat(radius);

    if (isNaN(r) || r <= 0) {
      setError('Please enter a valid positive number for the radius.');
      return;
    }

    const calculatedDiameter = 2 * r;
    const calculatedArea = Math.PI * r * r;
    const calculatedCircumference = 2 * Math.PI * r;

    setDiameter(calculatedDiameter.toFixed(4));
    setArea(calculatedArea.toFixed(4));
    setCircumference(calculatedCircumference.toFixed(4));
  };
  
  const resetForm = () => {
    setRadius('');
    setArea(null);
    setCircumference(null);
    setDiameter(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate area, circumference, and diameter of a circle given its radius.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="radius">Radius</Label>
              <Input id="radius" type="number" value={radius} onChange={(e) => setRadius(e.target.value)} placeholder="e.g., 5" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateCircleProperties}>Calculate</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(area || circumference || diameter || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Circle Properties</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {diameter && (
                <div className="flex justify-between items-center p-2 bg-muted rounded-md">
                  <div><p className="text-sm text-muted-foreground">Diameter</p><p className="font-semibold">{diameter} units</p></div>
                  <CopyButton textToCopy={diameter} size="icon" variant="ghost" />
                </div>
              )}
              {area && (
                <div className="flex justify-between items-center p-2 bg-muted rounded-md">
                  <div><p className="text-sm text-muted-foreground">Area</p><p className="font-semibold">{area} units²</p></div>
                  <CopyButton textToCopy={area} size="icon" variant="ghost" />
                </div>
              )}
              {circumference && (
                <div className="flex justify-between items-center p-2 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Circumference</p><p className="text-xl font-bold text-primary">{circumference} units</p></div>
                  <CopyButton textToCopy={circumference} size="icon" variant="ghost" className="text-primary"/>
                </div>
              )}
            </CardContent>
            <CardFooter>
              <p className="text-xs text-muted-foreground">Ensure the radius unit is consistent for all calculations.</p>
            </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CircleCalculator.tsx ======
==================================================

// ====== START OF FILE: CircuitBreakerSizeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.87 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Power } from "lucide-react";

type InputType = 'power_watts' | 'current_amps';

export default function CircuitBreakerSizeCalculator() {
  const [inputType, setInputType] = useState<InputType>('power_watts');
  const [loadValue, setLoadValue] = useState<string>(''); // Watts or Amps
  const [voltage, setVoltage] = useState<string>('120'); // Common US voltage

  const [calculatedAmps, setCalculatedAmps] = useState<string | null>(null);
  const [recommendedBreaker, setRecommendedBreaker] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const standardBreakerSizes = [15, 20, 25, 30, 40, 50, 60, 70, 100]; // Common Amps

  const calculateBreaker = () => {
    setError(null); setCalculatedAmps(null); setRecommendedBreaker(null);
    const load = parseFloat(loadValue);
    const V = parseFloat(voltage);

    if (isNaN(load) || load <= 0 || isNaN(V) || V <= 0) {
      setError('Load value and Voltage must be positive numbers.'); return;
    }

    let amps: number;
    if (inputType === 'power_watts') { // P = IV => I = P/V
      amps = load / V;
    } else { // current_amps
      amps = load;
    }
    setCalculatedAmps(amps.toFixed(2));

    // Breaker should typically be rated for 125% of continuous load (or 80% rule for breaker capacity)
    // Or, next standard size up from calculated load amps.
    // For simplicity: recommend next standard size above `amps * 1.25` (for continuous) or just `amps`.
    // Let's use `amps * 1.25` for a more conservative continuous load estimate.
    const requiredBreakerMinAmps = amps * 1.25; 
    let breakerRec = "N/A";
    for (const size of standardBreakerSizes) {
      if (size >= requiredBreakerMinAmps) {
        breakerRec = `${size} Amps`;
        break;
      }
    }
    if (breakerRec === "N/A" && requiredBreakerMinAmps > 0) breakerRec = `> ${standardBreakerSizes[standardBreakerSizes.length-1]} Amps (consult electrician)`;
    else if (requiredBreakerMinAmps <=0) breakerRec = "Minimal load, check inputs";
    
    setRecommendedBreaker(breakerRec);
  };

  const resetForm = () => {
    setLoadValue(''); setVoltage('120');
    setCalculatedAmps(null); setRecommendedBreaker(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive"><Info className="h-4 w-4"/><AlertTitle>Simplified Electrical Estimator - Consult a Professional</AlertTitle><AlertDescription>This calculator provides a <strong className="font-semibold">basic estimate for circuit breaker sizing based on load and voltage for single-phase circuits. It does NOT replace professional electrical design or adherence to local electrical codes (e.g., NEC in US).</strong> Factors like wire gauge, continuous vs. non-continuous load, temperature, and specific appliance requirements are critical. <strong className="font-semibold">Always consult a qualified electrician for any electrical work.</strong></AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate circuit breaker size (Amps).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="inputTypeCBS">Load Input Type</Label><Select value={inputType} onValueChange={(v:InputType)=>setInputType(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="power_watts">Power (Watts)</SelectItem><SelectItem value="current_amps">Current (Amps)</SelectItem></SelectContent></Select></div>
            <div><Label htmlFor="loadValueCBS">Load Value ({inputType==='power_watts'?'Watts':'Amps'})</Label><Input id="loadValueCBS" type="number" value={loadValue} onChange={e=>setLoadValue(e.target.value)} placeholder={inputType==='power_watts'?'e.g., 1500':'e.g., 12'}/></div>
            <div><Label htmlFor="voltageCBS">System Voltage (Volts)</Label><Input id="voltageCBS" type="number" value={voltage} onChange={e=>setVoltage(e.target.value)} placeholder="e.g., 120 or 240"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateBreaker}>Estimate Breaker Size</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(recommendedBreaker || error) && (
          <Card>
            <CardHeader><CardDescription>Breaker Sizing Estimate</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {calculatedAmps && (<div className="p-1 bg-muted rounded-md text-sm">Calculated Load Current: <strong className="font-semibold">{calculatedAmps} Amps</strong></div>)}
              {recommendedBreaker && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Recommended Breaker Size</p><p className="text-xl font-bold text-primary">{recommendedBreaker}</p></div><CopyButton textToCopy={recommendedBreaker}/></div>)}
              <AlertDescription className="text-xs pt-2">Recommendation typically based on 125% of continuous load or next standard size. Always verify with electrical codes and wire capacity.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: CircuitBreakerSizeCalculator.tsx ======
==================================================

// ====== START OF FILE: CollegeCostCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.2 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, GraduationCap } from "lucide-react";

export default function CollegeCostCalculator() {
  const [tuitionAndFees, setTuitionAndFees] = useState<string>(''); // Per year
  const [roomAndBoard, setRoomAndBoard] = useState<string>(''); // Per year
  const [booksAndSupplies, setBooksAndSupplies] = useState<string>(''); // Per year
  const [personalExpenses, setPersonalExpenses] = useState<string>(''); // Per year
  const [scholarshipsAndGrants, setScholarshipsAndGrants] = useState<string>('0'); // Per year
  const [numYears, setNumYears] = useState<string>('4'); // Number of years

  const [totalAnnualCost, setTotalAnnualCost] = useState<string | null>(null);
  const [netAnnualCost, setNetAnnualCost] = useState<string | null>(null);
  const [totalCostForProgram, setTotalCostForProgram] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateCollegeCost = () => {
    setError(null);
    setTotalAnnualCost(null);
    setNetAnnualCost(null);
    setTotalCostForProgram(null);

    const tuition = parseFloat(tuitionAndFees) || 0;
    const housing = parseFloat(roomAndBoard) || 0;
    const books = parseFloat(booksAndSupplies) || 0;
    const personal = parseFloat(personalExpenses) || 0;
    const aid = parseFloat(scholarshipsAndGrants) || 0;
    const years = parseInt(numYears);

    if (isNaN(years) || years <= 0) {
      setError('Please enter a valid number of years for the program.');
      return;
    }
    if (tuition < 0 || housing < 0 || books < 0 || personal < 0 || aid < 0) {
        setError('All cost and aid values must be zero or positive.');
        return;
    }

    const calculatedTotalAnnualCost = tuition + housing + books + personal;
    const calculatedNetAnnualCost = calculatedTotalAnnualCost - aid;
    const calculatedTotalCostForProgram = calculatedNetAnnualCost * years;

    setTotalAnnualCost(calculatedTotalAnnualCost.toFixed(2));
    setNetAnnualCost(calculatedNetAnnualCost.toFixed(2));
    setTotalCostForProgram(calculatedTotalCostForProgram.toFixed(2));
  };
  
  const resetForm = () => {
    setTuitionAndFees('');
    setRoomAndBoard('');
    setBooksAndSupplies('');
    setPersonalExpenses('');
    setScholarshipsAndGrants('0');
    setNumYears('4');
    setTotalAnnualCost(null);
    setNetAnnualCost(null);
    setTotalCostForProgram(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Estimation Tool</AlertTitle>
        <AlertDescription>
          This calculator provides an estimate of college costs. Actual expenses can vary based on specific institutions, programs, lifestyle, and inflation. Does not account for loan interest.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader>
            <CardDescription>Estimate the annual and total cost of attending college.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="tuitionAndFees">Annual Tuition & Fees ($)</Label>
                <Input id="tuitionAndFees" type="number" value={tuitionAndFees} onChange={(e) => setTuitionAndFees(e.target.value)} placeholder="e.g., 15000" />
              </div>
              <div>
                <Label htmlFor="roomAndBoard">Annual Room & Board ($)</Label>
                <Input id="roomAndBoard" type="number" value={roomAndBoard} onChange={(e) => setRoomAndBoard(e.target.value)} placeholder="e.g., 10000" />
              </div>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="booksAndSupplies">Annual Books & Supplies ($)</Label>
                <Input id="booksAndSupplies" type="number" value={booksAndSupplies} onChange={(e) => setBooksAndSupplies(e.target.value)} placeholder="e.g., 1200" />
              </div>
              <div>
                <Label htmlFor="personalExpenses">Annual Personal Expenses ($)</Label>
                <Input id="personalExpenses" type="number" value={personalExpenses} onChange={(e) => setPersonalExpenses(e.target.value)} placeholder="e.g., 2000" />
              </div>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="scholarshipsAndGrants">Annual Scholarships & Grants ($)</Label>
                <Input id="scholarshipsAndGrants" type="number" value={scholarshipsAndGrants} onChange={(e) => setScholarshipsAndGrants(e.target.value)} placeholder="e.g., 5000" />
              </div>
              <div>
                <Label htmlFor="numYears">Number of Years in Program</Label>
                <Input id="numYears" type="number" value={numYears} onChange={(e) => setNumYears(e.target.value)} placeholder="e.g., 4" />
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateCollegeCost}>Calculate Costs</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        <Card className="lg:col-span-1">
            <CardHeader><CardDescription>Estimated College Costs</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalAnnualCost && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-xs text-muted-foreground">Total Annual Cost (Before Aid)</p>
                  <p className="font-semibold">${totalAnnualCost}</p>
                </div>
              )}
              {netAnnualCost && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-xs text-muted-foreground">Net Annual Cost (After Aid)</p>
                  <p className="font-semibold">${netAnnualCost}</p>
                </div>
              )}
              {totalCostForProgram && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md mt-2">
                  <div>
                    <p className="text-sm text-muted-foreground">Total Estimated Cost for Program</p>
                    <p className="text-2xl font-bold text-primary">${totalCostForProgram}</p>
                  </div>
                  <CopyButton textToCopy={totalCostForProgram} size="icon" variant="ghost" className="text-primary"/>
                </div>
              )}
            </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: CollegeCostCalculator.tsx ======
==================================================

// ====== START OF FILE: ColorContrastRatioCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.74 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Info, Contrast as ContrastIcon, Check, X } from "lucide-react";
import { cn } from '@/lib/utils';

interface WcagResult {
  level: string;
  normalText: boolean;
  largeText: boolean;
}

// Function to parse hex color to an [r, g, b] array
const getRgbFromHex = (hex: string): number[] | null => {
  if (!/^#([A-Fa-f0-9]{3}|[A-Fa-f0-9]{6})$/.test(hex)) return null;
  let normalizedHex = hex.substring(1);
  if (normalizedHex.length === 3) {
    normalizedHex = normalizedHex.split('').map(char => char + char).join('');
  }
  const hexValue = parseInt(normalizedHex, 16);
  const r = (hexValue >> 16) & 255;
  const g = (hexValue >> 8) & 255;
  const b = hexValue & 255;
  return [r, g, b];
};

// Function to calculate relative luminance
const getLuminance = (r: number, g: number, b: number): number => {
  const a = [r, g, b].map(v => {
    v /= 255;
    return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
  });
  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;
};

export default function ColorContrastRatioCalculator() {
  const [color1Hex, setColor1Hex] = useState<string>('#FFFFFF');
  const [color2Hex, setColor2Hex] = useState<string>('#000000');

  const [contrastRatio, setContrastRatio] = useState<string | null>(null);
  const [wcagResults, setWcagResults] = useState<WcagResult[] | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateContrast = () => {
    setError(null);
    setContrastRatio(null);
    setWcagResults(null);
    
    const rgb1 = getRgbFromHex(color1Hex);
    const rgb2 = getRgbFromHex(color2Hex);

    if (!rgb1 || !rgb2) {
      setError("Please enter valid hex color codes (e.g., #RRGGBB or #RGB).");
      return;
    }

    const lum1 = getLuminance(rgb1[0], rgb1[1], rgb1[2]);
    const lum2 = getLuminance(rgb2[0], rgb2[1], rgb2[2]);
    
    const lighter = Math.max(lum1, lum2);
    const darker = Math.min(lum1, lum2);
    const ratio = (lighter + 0.05) / (darker + 0.05);

    setContrastRatio(ratio.toFixed(2));

    setWcagResults([
      { level: 'AA', normalText: ratio >= 4.5, largeText: ratio >= 3 },
      { level: 'AAA', normalText: ratio >= 7, largeText: ratio >= 4.5 },
    ]);
  };
  
  const resetForm = () => {
    setColor1Hex('#FFFFFF');
    setColor2Hex('#000000');
    setContrastRatio(null);
    setWcagResults(null);
    setError(null);
  };
  
  React.useEffect(() => {
     calculateContrast();
  }, [color1Hex, color2Hex]);

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4"/>
        <AlertTitle>WCAG Color Contrast Checker</AlertTitle>
        <AlertDescription>
         Check the contrast ratio between two colors to ensure your text is readable and meets Web Content Accessibility Guidelines (WCAG) standards.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter two hex color codes to check contrast.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center gap-4">
              <div className="flex-1">
                <Label htmlFor="color1CCR">Color 1 (e.g., Background)</Label>
                <div className="flex items-center gap-2">
                   <Input type="color" value={color1Hex} onChange={e=>setColor1Hex(e.target.value)} className="p-1 h-10 w-10"/>
                  <Input id="color1CCR" value={color1Hex.toUpperCase()} onChange={e=>setColor1Hex(e.target.value)} placeholder="#RRGGBB"/>
                </div>
              </div>
            </div>
            <div className="flex items-center gap-4">
               <div className="flex-1">
                <Label htmlFor="color2CCR">Color 2 (e.g., Text)</Label>
                <div className="flex items-center gap-2">
                   <Input type="color" value={color2Hex} onChange={e=>setColor2Hex(e.target.value)} className="p-1 h-10 w-10"/>
                  <Input id="color2CCR" value={color2Hex.toUpperCase()} onChange={e=>setColor2Hex(e.target.value)} placeholder="#RRGGBB"/>
                </div>
              </div>
            </div>
          </CardContent>
           <CardFooter>
            <Button variant="outline" onClick={resetForm} className="w-full">Reset</Button>
          </CardFooter>
        </Card>
        <div className="space-y-6">
          <Card className="flex items-center justify-center p-6 h-40" style={{backgroundColor: color1Hex, color: color2Hex}}>
              <div className="text-center">
                  <h3 className="text-2xl font-bold">Example Text</h3>
                  <p>Large text (18pt / 24px)</p>
              </div>
          </Card>
           {(contrastRatio || error) && (
            <Card>
              <CardHeader><CardDescription>Contrast Ratio &amp; WCAG Compliance</CardDescription></CardHeader>
              <CardContent>
                {error && (<Alert variant="destructive">{error}</Alert>)}
                {contrastRatio && (
                  <div className="text-center mb-4">
                      <p className="text-sm text-muted-foreground">Contrast Ratio</p>
                      <p className="text-5xl font-bold">{contrastRatio}:1</p>
                  </div>
                )}
                {wcagResults && (
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    {wcagResults.map(res => (
                      <div key={res.level} className="border p-3 rounded-lg">
                        <h4 className="font-semibold text-lg">WCAG {res.level}</h4>
                        <div className="flex items-center justify-between mt-2">
                          <span className="text-sm">Normal Text (≥{res.level==='AA'?'4.5':'7'}:1)</span>
                          {res.normalText ? <Check className="h-5 w-5 text-green-500"/> : <X className="h-5 w-5 text-destructive"/>}
                        </div>
                        <div className="flex items-center justify-between mt-1">
                          <span className="text-sm">Large Text (≥{res.level==='AA'?'3':'4.5'}:1)</span>
                          {res.largeText ? <Check className="h-5 w-5 text-green-500"/> : <X className="h-5 w-5 text-destructive"/>}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
}


// ====== END OF FILE: ColorContrastRatioCalculator.tsx ======
==================================================

// ====== START OF FILE: CommissionCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.26 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Percent } from "lucide-react";

export default function CommissionCalculator() {
  const [saleAmount, setSaleAmount] = useState<string>('');
  const [commissionRate, setCommissionRate] = useState<string>(''); // Percentage
  
  const [commissionEarned, setCommissionEarned] = useState<string | null>(null);
  const [totalWithCommission, setTotalWithCommission] = useState<string | null>(null); // If commission is added to sale amount
  const [error, setError] = useState<string | null>(null);

  const calculateCommission = () => {
    setError(null);
    setCommissionEarned(null);
    setTotalWithCommission(null);

    const sale = parseFloat(saleAmount);
    const rate = parseFloat(commissionRate) / 100; // Convert percentage to decimal

    if (isNaN(sale) || sale < 0 || isNaN(rate) || rate < 0) {
      setError('Please enter valid positive numbers for sale amount and commission rate.');
      return;
    }

    const calculatedCommission = sale * rate;
    setCommissionEarned(calculatedCommission.toFixed(2));
    setTotalWithCommission((sale + calculatedCommission).toFixed(2)); // Example if commission is paid by buyer on top. Or sale - commission.
  };
  
  const resetForm = () => {
    setSaleAmount('');
    setCommissionRate('');
    setCommissionEarned(null);
    setTotalWithCommission(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate commission earned based on sale amount and rate.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="saleAmount">Sale Amount ($)</Label>
              <Input id="saleAmount" type="number" value={saleAmount} onChange={(e) => setSaleAmount(e.target.value)} placeholder="e.g., 1000" />
            </div>
            <div>
              <Label htmlFor="commissionRate">Commission Rate (%)</Label>
              <Input id="commissionRate" type="number" value={commissionRate} onChange={(e) => setCommissionRate(e.target.value)} placeholder="e.g., 5" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateCommission}>Calculate Commission</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(commissionEarned !== null || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Calculation Result</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {commissionEarned !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Commission Earned</p>
                    <p className="text-3xl font-bold text-primary">${commissionEarned}</p>
                  </div>
                  <CopyButton textToCopy={commissionEarned} />
                </div>
              )}
              {/* Optionally show total:
              {totalWithCommission !== null && (
                <div className="p-3 bg-muted rounded-md mt-2">
                  <p className="text-sm text-muted-foreground">Total Amount (Sale + Commission)</p>
                  <p className="text-xl font-semibold">${totalWithCommission}</p>
                </div>
              )}
              */}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CommissionCalculator.tsx ======
==================================================

// ====== START OF FILE: CommonFactorCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.38 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, DivideSquare } from "lucide-react";

export default function CommonFactorCalculator() {
  const [number1, setNumber1] = useState<string>('');
  const [number2, setNumber2] = useState<string>('');
  
  const [gcf, setGcf] = useState<string | null>(null);
  const [lcm, setLcm] = useState<string | null>(null); // Least Common Multiple
  const [commonFactors, setCommonFactors] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Euclidean algorithm for GCF
  const calculateGcf = (a: number, b: number): number => {
    if (b === 0) return a;
    return calculateGcf(b, a % b);
  };

  const calculateLcm = (a: number, b: number, g: number): number => {
    if (g === 0) return 0; // Avoid division by zero if GCF is somehow 0 (e.g. for inputs 0,0)
    return Math.abs(a * b) / g;
  };

  const findCommonFactors = (a: number, b: number, g: number): number[] => {
    const factors = [];
    for (let i = 1; i <= Math.sqrt(g); i++) {
        if (g % i === 0) {
            factors.push(i);
            if (i * i !== g) {
                factors.push(g / i);
            }
        }
    }
    return factors.sort((x, y) => x - y);
  }

  const handleCalculate = () => {
    setError(null);
    setGcf(null);
    setLcm(null);
    setCommonFactors(null);

    const num1 = parseInt(number1);
    const num2 = parseInt(number2);

    if (isNaN(num1) || isNaN(num2)) {
      setError('Please enter valid integers for both numbers.');
      return;
    }
    if (num1 === 0 && num2 === 0) {
        setError('GCF and LCM are not well-defined for two zeros. Common factors are infinite.');
        return;
    }
    // Handle non-positive integers if desired, for GCF typically positive inputs are used.
    // For simplicity, let's work with absolute values for GCF/LCM logic for now
    const absNum1 = Math.abs(num1);
    const absNum2 = Math.abs(num2);


    const calculatedGcf = calculateGcf(absNum1, absNum2);
    setGcf(calculatedGcf.toString());
    
    const calculatedLcm = calculateLcm(absNum1, absNum2, calculatedGcf);
    setLcm(calculatedLcm.toString());

    const factors = findCommonFactors(absNum1, absNum2, calculatedGcf);
    setCommonFactors(factors.join(', '));
  };
  
  const resetForm = () => {
    setNumber1('');
    setNumber2('');
    setGcf(null);
    setLcm(null);
    setCommonFactors(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Find the Greatest Common Factor (GCF), Least Common Multiple (LCM), and all common factors of two integers.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="number1Factor">First Integer</Label>
              <Input id="number1Factor" type="number" value={number1} onChange={(e) => setNumber1(e.target.value)} placeholder="e.g., 48" />
            </div>
            <div>
              <Label htmlFor="number2Factor">Second Integer</Label>
              <Input id="number2Factor" type="number" value={number2} onChange={(e) => setNumber2(e.target.value)} placeholder="e.g., 60" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={handleCalculate}>Calculate Factors</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(gcf || lcm || commonFactors || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Results</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {gcf && (
                <div className="flex justify-between items-center p-2 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Greatest Common Factor (GCF)</p><p className="text-xl font-bold text-primary">{gcf}</p></div>
                  <CopyButton textToCopy={gcf} size="icon" variant="ghost" className="text-primary"/>
                </div>
              )}
              {lcm && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Least Common Multiple (LCM)</p><p className="font-semibold">{lcm}</p>
                </div>
              )}
               {commonFactors && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">All Common Factors</p><p className="font-semibold break-all">{commonFactors}</p>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CommonFactorCalculator.tsx ======
==================================================

// ====== START OF FILE: ComplexNumberCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.38 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Sigma } from "lucide-react";

type ComplexOperation = 'add' | 'subtract' | 'multiply' | 'divide';

export default function ComplexNumberCalculator() {
  const [realA, setRealA] = useState<string>('');
  const [imagA, setImagA] = useState<string>('');
  const [realB, setRealB] = useState<string>('');
  const [imagB, setImagB] = useState<string>('');
  const [operation, setOperation] = useState<ComplexOperation>('add');
  
  const [resultReal, setResultReal] = useState<string | null>(null);
  const [resultImag, setResultImag] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateComplex = () => {
    setError(null); setResultReal(null); setResultImag(null);
    const rA = parseFloat(realA); const iA = parseFloat(imagA);
    const rB = parseFloat(realB); const iB = parseFloat(imagB);

    if (isNaN(rA) || isNaN(iA) || isNaN(rB) || isNaN(iB)) {
      setError("All real and imaginary parts must be valid numbers.");
      return;
    }

    let resR: number, resI: number;
    switch(operation) {
      case 'add': resR = rA + rB; resI = iA + iB; break;
      case 'subtract': resR = rA - rB; resI = iA - iB; break;
      case 'multiply': // (a+bi)(c+di) = (ac-bd) + (ad+bc)i
        resR = rA*rB - iA*iB;
        resI = rA*iB + iA*rB;
        break;
      case 'divide': // (a+bi)/(c+di) = [(a+bi)(c-di)] / (c^2+d^2) = [(ac+bd) + (bc-ad)i] / (c^2+d^2)
        const denominator = rB*rB + iB*iB;
        if (denominator === 0) { setError("Division by zero (0+0i) is not allowed."); return; }
        resR = (rA*rB + iA*iB) / denominator;
        resI = (iA*rB - rA*iB) / denominator;
        break;
      default: setError("Invalid operation."); return;
    }
    setResultReal(resR.toFixed(4));
    setResultImag(resI.toFixed(4));
  };

  const resetForm = () => {
    setRealA(''); setImagA(''); setRealB(''); setImagB('');
    setResultReal(null); setResultImag(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Complex Number Calculator</AlertTitle><AlertDescription>Perform basic arithmetic (addition, subtraction, multiplication, division) on complex numbers (a + bi).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter two complex numbers and select operation.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <Label className="font-medium">Number A (a + bi)</Label>
            <div className="grid grid-cols-2 gap-2">
              <Input type="number" value={realA} onChange={e=>setRealA(e.target.value)} placeholder="Real (a)"/>
              <Input type="number" value={imagA} onChange={e=>setImagA(e.target.value)} placeholder="Imaginary (b)"/>
            </div>
            <Label className="font-medium">Number B (c + di)</Label>
            <div className="grid grid-cols-2 gap-2">
              <Input type="number" value={realB} onChange={e=>setRealB(e.target.value)} placeholder="Real (c)"/>
              <Input type="number" value={imagB} onChange={e=>setImagB(e.target.value)} placeholder="Imaginary (d)"/>
            </div>
            <div><Label htmlFor="complexOp">Operation</Label><Select value={operation} onValueChange={(v:ComplexOperation)=>setOperation(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                <SelectItem value="add">Add (A + B)</SelectItem><SelectItem value="subtract">Subtract (A - B)</SelectItem>
                <SelectItem value="multiply">Multiply (A × B)</SelectItem><SelectItem value="divide">Divide (A ÷ B)</SelectItem>
            </SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateComplex}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(resultReal !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Result (Complex Number)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {resultReal !== null && resultImag !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Result</p><p className="text-2xl font-bold text-primary">{resultReal} {parseFloat(resultImag) >= 0 ? '+' : '-'} {Math.abs(parseFloat(resultImag))}i</p></div>
                  <CopyButton textToCopy={`${resultReal} ${parseFloat(resultImag) >= 0 ? '+' : '-'} ${Math.abs(parseFloat(resultImag))}i`} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ComplexNumberCalculator.tsx ======
==================================================

// ====== START OF FILE: CompoundInterestCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 10.34 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, TrendingUp } from "lucide-react";

export default function CompoundInterestCalculator() {
  const [principal, setPrincipal] = useState<string>('');
  const [rate, setRate] = useState<string>(''); // Annual interest rate %
  const [term, setTerm] = useState<string>(''); // Years
  const [compoundingFrequency, setCompoundingFrequency] = useState<string>('12'); // Times per year (12=monthly)
  const [contribution, setContribution] = useState<string>('0'); // Periodic contribution
  const [contributionFrequency, setContributionFrequency] = useState<string>('12'); // Contribution frequency per year

  const [futureValue, setFutureValue] = useState<string | null>(null);
  const [totalInterest, setTotalInterest] = useState<string | null>(null);
  const [totalPrincipal, setTotalPrincipal] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateCompoundInterest = () => {
    setError(null);
    setFutureValue(null);
    setTotalInterest(null);
    setTotalPrincipal(null);

    const P = parseFloat(principal);
    const r_annual = parseFloat(rate) / 100;
    const t_years = parseFloat(term);
    const n_compound = parseInt(compoundingFrequency);
    const PMT = parseFloat(contribution);
    const n_contrib = parseInt(contributionFrequency);

    if (isNaN(P) || P < 0 || isNaN(r_annual) || r_annual < 0 || isNaN(t_years) || t_years <= 0 || isNaN(n_compound) || n_compound <= 0 || isNaN(PMT) || PMT < 0 || isNaN(n_contrib) || n_contrib <=0) {
      setError('Please enter valid positive numbers for all fields. Principal and contribution can be zero for contribution or principal only calculations.');
      return;
    }

    // Future value of principal: FV_P = P * (1 + r/n_compound)^(n_compound*t)
    const fvPrincipal = P * Math.pow(1 + r_annual / n_compound, n_compound * t_years);
    
    // Future value of a series of contributions (ordinary annuity)
    // FV_PMT = PMT * [((1 + r_effective_contrib)^(num_total_contrib) - 1) / r_effective_contrib]
    // This formula assumes contributions are made at the END of each period.
    // r_effective_contrib is the rate per contribution period, aligned with compounding.
    // This gets complex if contribution freq != compounding freq.
    // Simplified approach: assume contribution frequency aligns with compounding, or use an effective rate.
    // For this version, let's simplify by assuming contributions are compounded at the main compounding frequency
    // and the rate per contribution period is r_annual / n_contrib.
    // A more accurate calculation would use the specific timing of contributions relative to compounding.
    
    let fvContributions = 0;
    const numTotalContributions = t_years * n_contrib;
    if (PMT > 0) {
        if (r_annual === 0) {
            fvContributions = PMT * numTotalContributions;
        } else {
            // Effective rate per period, assuming n_compound is dominant.
            // This is a common simplification but for true accuracy, specific cash flow timing matters.
            // Let's use the formula for future value of an ordinary annuity where interest period matches payment period.
            const ratePerContributionPeriod = r_annual / n_contrib; 
            // Need to align this with compounding more accurately... this is still too simple if n_contrib != n_compound.
            // For now, let's use a slightly more robust formula where we compound each contribution individually.
            // This loop is less efficient but more illustrative for varying frequencies.
            // For simplicity, this example sticks to a standard FV of annuity formula, assuming contribution frequency matches compounding for effect.
            
            // A more standard approach for FV of annuity when interest is compounded n times per year
            // and payments are made p times per year:
            // This still assumes compounding frequency is the one used for the formula.
            const i_effective_per_contrib_period = Math.pow(1 + r_annual / n_compound, n_compound / n_contrib) - 1;

            if (i_effective_per_contrib_period === 0) { // Handle case where effective rate is 0 (e.g., if r_annual = 0)
                 fvContributions = PMT * numTotalContributions;
            } else {
                fvContributions = PMT * ((Math.pow(1 + i_effective_per_contrib_period, numTotalContributions) - 1) / i_effective_per_contrib_period);
            }
        }
    }


    const totalFV = fvPrincipal + fvContributions;
    const calculatedTotalPrincipal = P + (PMT * numTotalContributions);
    const calculatedTotalInterest = totalFV - calculatedTotalPrincipal;

    setFutureValue(totalFV.toFixed(2));
    setTotalInterest(calculatedTotalInterest.toFixed(2));
    setTotalPrincipal(calculatedTotalPrincipal.toFixed(2));
  };
  
  const resetForm = () => {
    setPrincipal('');
    setRate('');
    setTerm('');
    setCompoundingFrequency('12');
    setContribution('0');
    setContributionFrequency('12');
    setFutureValue(null);
    setTotalInterest(null);
    setTotalPrincipal(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate the future value of an investment with compound interest and optional contributions.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="principalCI">Initial Principal ($)</Label>
              <Input id="principalCI" type="number" value={principal} onChange={(e) => setPrincipal(e.target.value)} placeholder="e.g., 1000" />
            </div>
            <div>
              <Label htmlFor="rateCI">Annual Interest Rate (%)</Label>
              <Input id="rateCI" type="number" value={rate} onChange={(e) => setRate(e.target.value)} placeholder="e.g., 5" />
            </div>
            <div>
              <Label htmlFor="termCI">Investment Term (Years)</Label>
              <Input id="termCI" type="number" value={term} onChange={(e) => setTerm(e.target.value)} placeholder="e.g., 10" />
            </div>
            <div>
              <Label htmlFor="compoundingFrequencyCI">Compounding Frequency</Label>
              <Select value={compoundingFrequency} onValueChange={setCompoundingFrequency}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="1">Annually</SelectItem>
                  <SelectItem value="2">Semi-Annually</SelectItem>
                  <SelectItem value="4">Quarterly</SelectItem>
                  <SelectItem value="12">Monthly</SelectItem>
                  <SelectItem value="365">Daily</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="pt-4 border-t">
                <Label className="font-semibold">Optional Periodic Contributions</Label>
            </div>
            <div>
              <Label htmlFor="contributionCI">Contribution Amount ($ per period)</Label>
              <Input id="contributionCI" type="number" value={contribution} onChange={(e) => setContribution(e.target.value)} placeholder="e.g., 100 (optional)" />
            </div>
            <div>
              <Label htmlFor="contributionFrequencyCI">Contribution Frequency</Label>
               <Select value={contributionFrequency} onValueChange={setContributionFrequency}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="1">Annually</SelectItem>
                  <SelectItem value="2">Semi-Annually</SelectItem>
                  <SelectItem value="4">Quarterly</SelectItem>
                  <SelectItem value="12">Monthly</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateCompoundInterest}>Calculate</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(futureValue !== null || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Investment Growth Summary</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {futureValue !== null && (
                <>
                  <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                    <div><p className="text-sm text-muted-foreground">Future Value</p><p className="text-3xl font-bold text-primary">${futureValue}</p></div>
                    <CopyButton textToCopy={futureValue} />
                  </div>
                  <div className="p-2 bg-muted rounded-md">
                    <p className="text-sm text-muted-foreground">Total Principal Invested</p>
                    <p className="font-semibold">${totalPrincipal}</p>
                  </div>
                   <div className="p-2 bg-muted rounded-md">
                    <p className="text-sm text-muted-foreground">Total Interest Earned</p>
                    <p className="font-semibold">${totalInterest}</p>
                  </div>
                </>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    Assumes contributions are made at the end of each period. For precise financial planning, consult a professional.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CompoundInterestCalculator.tsx ======
==================================================

// ====== START OF FILE: ConceptionCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.17 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { format, addDays, subDays, isValid } from 'date-fns';
import { cn } from '@/lib/utils';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CalendarHeart, CalendarCheck2 } from "lucide-react";

export default function ConceptionCalculator() {
  const [lastMenstrualPeriod, setLastMenstrualPeriod] = useState<Date | undefined>(undefined);
  const [cycleLength, setCycleLength] = useState<string>('28'); // Average cycle length in days
  
  const [estimatedOvulationDate, setEstimatedOvulationDate] = useState<string | null>(null);
  const [fertileWindowStart, setFertileWindowStart] = useState<string | null>(null);
  const [fertileWindowEnd, setFertileWindowEnd] = useState<string | null>(null);
  const [estimatedDueDate, setEstimatedDueDate] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateConceptionDates = () => {
    setError(null);
    setEstimatedOvulationDate(null);
    setFertileWindowStart(null);
    setFertileWindowEnd(null);
    setEstimatedDueDate(null);

    if (!lastMenstrualPeriod || !isValid(lastMenstrualPeriod)) {
      setError('Please select a valid date for the first day of your last menstrual period.');
      return;
    }
    const cLength = parseInt(cycleLength);
    if (isNaN(cLength) || cLength < 20 || cLength > 45) { // Common physiological range
      setError('Please enter a typical cycle length (usually between 20 and 45 days).');
      return;
    }

    // Ovulation typically occurs about 14 days BEFORE the next period.
    // So, for a cycle of `cLength`, ovulation is approx. `cLength - 14` days after LMP.
    const ovulationDayOffset = cLength - 14;
    const ovulationDate = addDays(lastMenstrualPeriod, ovulationDayOffset);
    setEstimatedOvulationDate(format(ovulationDate, "PPP"));

    // Fertile window is generally 5 days before ovulation + ovulation day.
    setFertileWindowStart(format(subDays(ovulationDate, 5), "PPP"));
    setFertileWindowEnd(format(ovulationDate, "PPP")); // Technically, ovulation day itself is most fertile. Some sources extend to 1 day post-ovulation for sperm viability.

    // Estimated due date (Naegele's rule: LMP - 3 months + 7 days + 1 year, or LMP + 280 days)
    const dueDate = addDays(lastMenstrualPeriod, 280); // More direct calculation
    setEstimatedDueDate(format(dueDate, "PPP"));
  };
  
  const resetForm = () => {
    setLastMenstrualPeriod(undefined);
    setCycleLength('28');
    setEstimatedOvulationDate(null);
    setFertileWindowStart(null);
    setFertileWindowEnd(null);
    setEstimatedDueDate(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Medical Disclaimer & Estimation Only</AlertTitle>
        <AlertDescription>
          This calculator provides estimates based on typical cycle patterns and is <strong className="font-semibold">not a substitute for medical advice or precise fertility tracking methods</strong> (like ovulation tests or temperature charting). Cycle lengths and ovulation can vary. If trying to conceive or avoid pregnancy, consult a healthcare professional.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate your fertile window, ovulation date, and potential due date.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="lmpDate">First Day of Last Menstrual Period (LMP)</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    id="lmpDate"
                    variant={"outline"}
                    className={cn("w-full justify-start text-left font-normal", !lastMenstrualPeriod && "text-muted-foreground")}
                  >
                    <CalendarCheck2 className="mr-2 h-4 w-4" />
                    {lastMenstrualPeriod ? format(lastMenstrualPeriod, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                  <Calendar mode="single" selected={lastMenstrualPeriod} onSelect={setLastMenstrualPeriod} initialFocus />
                </PopoverContent>
              </Popover>
            </div>
            <div>
              <Label htmlFor="cycleLength">Average Cycle Length (days)</Label>
              <Input id="cycleLength" type="number" value={cycleLength} onChange={(e) => setCycleLength(e.target.value)} placeholder="e.g., 28" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateConceptionDates}>Calculate Dates</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(estimatedOvulationDate || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Dates</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {estimatedOvulationDate && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Estimated Ovulation Date</p>
                  <p className="font-semibold">{estimatedOvulationDate}</p>
                </div>
              )}
              {fertileWindowStart && fertileWindowEnd && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Estimated Fertile Window</p>
                  <p className="font-semibold">{fertileWindowStart} - {fertileWindowEnd}</p>
                </div>
              )}
              {estimatedDueDate && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md mt-2">
                  <div>
                    <p className="text-sm text-muted-foreground">Estimated Due Date</p>
                    <p className="text-xl font-bold text-primary">{estimatedDueDate}</p>
                  </div>
                  <CopyButton textToCopy={estimatedDueDate} size="icon" variant="ghost" className="text-primary"/>
                </div>
              )}
            </CardContent>
            <CardFooter>
                <p className="text-xs text-muted-foreground">
                    These dates are estimates. Individual cycles can vary.
                </p>
            </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ConceptionCalculator.tsx ======
==================================================

// ====== START OF FILE: ConceptualPointsCalculatorIllustrative.tsx ======
// File converted from TSX to TXT
// Original size: 3.88 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Star } from "lucide-react";

// Illustrative points system.
// Points = (Factor A / 10) + (Factor B * 2) - (Factor C / 5)

export default function ConceptualPointsCalculatorIllustrative() {
  const [factorA, setFactorA] = useState<string>('');
  const [factorB, setFactorB] = useState<string>('');
  const [factorC, setFactorC] = useState<string>('0');

  const [points, setPoints] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePoints = () => {
    setError(null); setPoints(null);
    const valA = parseFloat(factorA);
    const valB = parseFloat(factorB);
    const valC = parseFloat(factorC);

    if (isNaN(valA) || isNaN(valB) || isNaN(valC)) {
      setError('Please enter valid numbers for all factors.');
      return;
    }
    
    // An arbitrary formula for illustration
    let calculatedPoints = (valA / 10) + (valB * 2) - (valC / 5);
    calculatedPoints = Math.max(0, calculatedPoints); // Points cannot be negative

    setPoints(calculatedPoints.toFixed(1));
  };

  const resetForm = () => {
    setFactorA(''); setFactorB(''); setFactorC('0');
    setPoints(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Illustrative Points Calculator</AlertTitle>
        <AlertDescription>
          This is a conceptual calculator demonstrating a weighted points system. The formula used is for illustrative purposes only and does not represent any real-world standard.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter values for the conceptual factors.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="factorA">Factor A (Positive contribution, divided by 10)</Label><Input id="factorA" type="number" value={factorA} onChange={e=>setFactorA(e.target.value)} placeholder="e.g., 100"/></div>
            <div><Label htmlFor="factorB">Factor B (Positive contribution, multiplied by 2)</Label><Input id="factorB" type="number" value={factorB} onChange={e=>setFactorB(e.target.value)} placeholder="e.g., 5"/></div>
            <div><Label htmlFor="factorC">Factor C (Negative contribution, divided by 5)</Label><Input id="factorC" type="number" value={factorC} onChange={e=>setFactorC(e.target.value)} placeholder="e.g., 20"/></div>
             <AlertDescription className="text-xs">Formula: (A/10) + (B*2) - (C/5)</AlertDescription>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePoints}>Calculate Score</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(points || error) && (
          <Card>
            <CardHeader><CardDescription>Conceptual Score</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {points && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Conceptual Points Score</p><p className="text-2xl font-bold text-primary">{points} points</p></div><CopyButton textToCopy={points}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ConceptualPointsCalculatorIllustrative.tsx ======
==================================================

// ====== START OF FILE: ConcreteCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 11.92 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Construction } from "lucide-react";

type ShapeType = 'slab' | 'footing' | 'column_round' | 'column_square';
type UnitSystem = 'imperial' | 'metric'; // imperial: feet/inches, cubic yards. metric: meters/cm, cubic meters.

export default function ConcreteCalculator() {
  const [shape, setShape] = useState<ShapeType>('slab');
  const [units, setUnits] = useState<UnitSystem>('imperial');

  // Imperial units
  const [lengthFeet, setLengthFeet] = useState<string>('');
  const [widthFeet, setWidthFeet] = useState<string>('');
  const [thicknessInches, setThicknessInches] = useState<string>('');
  const [diameterInches, setDiameterInches] = useState<string>(''); // For round columns/footings
  const [depthFeet, setDepthFeet] = useState<string>(''); // For footings/columns

  // Metric units
  const [lengthMeters, setLengthMeters] = useState<string>('');
  const [widthMeters, setWidthMeters] = useState<string>('');
  const [thicknessCm, setThicknessCm] = useState<string>('');
  const [diameterCm, setDiameterCm] = useState<string>('');
  const [depthMeters, setDepthMeters] = useState<string>('');

  const [wastage, setWastage] = useState<string>('10'); // Percentage
  
  const [volume, setVolume] = useState<string | null>(null);
  const [volumeUnit, setVolumeUnit] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const calculateConcrete = () => {
    setError(null);
    setVolume(null);
    setVolumeUnit('');

    const wasteFactor = 1 + (parseFloat(wastage) / 100 || 0);
    let calculatedVolumeCubicUnits = 0; // This will be cubic feet or cubic meters before final conversion

    try {
      if (units === 'imperial') {
        const L = parseFloat(lengthFeet) || 0;
        const W = parseFloat(widthFeet) || 0;
        const T_in = parseFloat(thicknessInches) || 0;
        const D_in = parseFloat(diameterInches) || 0;
        const Depth_ft = parseFloat(depthFeet) || 0;

        const T_ft = T_in / 12; // Thickness to feet
        const D_ft = D_in / 12; // Diameter to feet

        switch (shape) {
          case 'slab':
            if (L <= 0 || W <= 0 || T_ft <= 0) throw new Error("Slab: Length, Width, and Thickness must be positive.");
            calculatedVolumeCubicUnits = L * W * T_ft;
            break;
          case 'footing': // Rectangular footing
            if (L <= 0 || W <= 0 || Depth_ft <= 0) throw new Error("Footing: Length, Width, and Depth must be positive.");
            calculatedVolumeCubicUnits = L * W * Depth_ft;
            break;
          case 'column_round':
            if (D_ft <= 0 || Depth_ft <= 0) throw new Error("Round Column: Diameter and Depth must be positive.");
            const radius_ft = D_ft / 2;
            calculatedVolumeCubicUnits = Math.PI * radius_ft * radius_ft * Depth_ft;
            break;
          case 'column_square': // Or rectangular column
            if (L <= 0 || W <= 0 || Depth_ft <= 0) throw new Error("Square/Rect Column: Side Length (or Length/Width) and Depth must be positive.");
            calculatedVolumeCubicUnits = L * W * Depth_ft; // L, W here are side lengths of column base
            break;
          default: throw new Error("Invalid shape selected.");
        }
        setVolume((calculatedVolumeCubicUnits * wasteFactor / 27).toFixed(2)); // Convert cubic feet to cubic yards
        setVolumeUnit('cubic yards');

      } else { // Metric
        const L_m = parseFloat(lengthMeters) || 0;
        const W_m = parseFloat(widthMeters) || 0;
        const T_cm = parseFloat(thicknessCm) || 0;
        const D_cm = parseFloat(diameterCm) || 0;
        const Depth_m = parseFloat(depthMeters) || 0;

        const T_m = T_cm / 100; // Thickness to meters
        const D_m = D_cm / 100; // Diameter to meters

        switch (shape) {
          case 'slab':
            if (L_m <= 0 || W_m <= 0 || T_m <= 0) throw new Error("Slab: Length, Width, and Thickness must be positive.");
            calculatedVolumeCubicUnits = L_m * W_m * T_m;
            break;
          case 'footing':
            if (L_m <= 0 || W_m <= 0 || Depth_m <= 0) throw new Error("Footing: Length, Width, and Depth must be positive.");
            calculatedVolumeCubicUnits = L_m * W_m * Depth_m;
            break;
          case 'column_round':
            if (D_m <= 0 || Depth_m <= 0) throw new Error("Round Column: Diameter and Depth must be positive.");
            const radius_m = D_m / 2;
            calculatedVolumeCubicUnits = Math.PI * radius_m * radius_m * Depth_m;
            break;
          case 'column_square':
             if (L_m <= 0 || W_m <= 0 || Depth_m <= 0) throw new Error("Square/Rect Column: Side Length (or Length/Width) and Depth must be positive.");
            calculatedVolumeCubicUnits = L_m * W_m * Depth_m;
            break;
          default: throw new Error("Invalid shape selected.");
        }
        setVolume((calculatedVolumeCubicUnits * wasteFactor).toFixed(2));
        setVolumeUnit('cubic meters');
      }
    } catch (e: any) {
      setError(e.message);
    }
  };
  
  const resetForm = () => {
    setLengthFeet(''); setWidthFeet(''); setThicknessInches(''); setDiameterInches(''); setDepthFeet('');
    setLengthMeters(''); setWidthMeters(''); setThicknessCm(''); setDiameterCm(''); setDepthMeters('');
    setWastage('10');
    setVolume(null); setVolumeUnit(''); setError(null);
  };

  const renderImperialInputs = () => (
    <>
      {(shape === 'slab' || shape === 'footing' || shape === 'column_square') && (
        <>
          <div><Label htmlFor="lengthFeet">Length (feet)</Label><Input id="lengthFeet" type="number" value={lengthFeet} onChange={(e) => setLengthFeet(e.target.value)} placeholder={shape==='column_square' ? "Side 1 (ft)" : "e.g., 10"}/></div>
          <div><Label htmlFor="widthFeet">Width (feet)</Label><Input id="widthFeet" type="number" value={widthFeet} onChange={(e) => setWidthFeet(e.target.value)} placeholder={shape==='column_square' ? "Side 2 (ft)" : "e.g., 12"}/></div>
        </>
      )}
      {shape === 'slab' && <div><Label htmlFor="thicknessInches">Thickness (inches)</Label><Input id="thicknessInches" type="number" value={thicknessInches} onChange={(e) => setThicknessInches(e.target.value)} placeholder="e.g., 4"/></div>}
      {shape === 'column_round' && <div><Label htmlFor="diameterInches">Diameter (inches)</Label><Input id="diameterInches" type="number" value={diameterInches} onChange={(e) => setDiameterInches(e.target.value)} placeholder="e.g., 12"/></div>}
      {(shape === 'footing' || shape.startsWith('column')) && <div><Label htmlFor="depthFeet">Depth/Height (feet)</Label><Input id="depthFeet" type="number" value={depthFeet} onChange={(e) => setDepthFeet(e.target.value)} placeholder="e.g., 3"/></div>}
    </>
  );

  const renderMetricInputs = () => (
    <>
      {(shape === 'slab' || shape === 'footing' || shape === 'column_square') && (
        <>
          <div><Label htmlFor="lengthMeters">Length (meters)</Label><Input id="lengthMeters" type="number" value={lengthMeters} onChange={(e) => setLengthMeters(e.target.value)} placeholder={shape==='column_square' ? "Side 1 (m)" : "e.g., 3"}/></div>
          <div><Label htmlFor="widthMeters">Width (meters)</Label><Input id="widthMeters" type="number" value={widthMeters} onChange={(e) => setWidthMeters(e.target.value)} placeholder={shape==='column_square' ? "Side 2 (m)" : "e.g., 4"}/></div>
        </>
      )}
      {shape === 'slab' && <div><Label htmlFor="thicknessCm">Thickness (cm)</Label><Input id="thicknessCm" type="number" value={thicknessCm} onChange={(e) => setThicknessCm(e.target.value)} placeholder="e.g., 10"/></div>}
      {shape === 'column_round' && <div><Label htmlFor="diameterCm">Diameter (cm)</Label><Input id="diameterCm" type="number" value={diameterCm} onChange={(e) => setDiameterCm(e.target.value)} placeholder="e.g., 30"/></div>}
      {(shape === 'footing' || shape.startsWith('column')) && <div><Label htmlFor="depthMeters">Depth/Height (meters)</Label><Input id="depthMeters" type="number" value={depthMeters} onChange={(e) => setDepthMeters(e.target.value)} placeholder="e.g., 1"/></div>}
    </>
  );

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Estimation Tool</AlertTitle>
        <AlertDescription>This calculator estimates concrete volume. Always order slightly more than calculated to account for spillage, uneven subgrade, and form variations. Consult professionals for exact project needs.</AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate concrete volume needed for various shapes.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="shapeType">Shape</Label>
                <Select value={shape} onValueChange={(v: ShapeType) => setShape(v)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="slab">Slab / Rectangle</SelectItem>
                    <SelectItem value="footing">Rectangular Footing</SelectItem>
                    <SelectItem value="column_round">Round Column / Pier</SelectItem>
                    <SelectItem value="column_square">Square/Rect. Column</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="unitSystemConcrete">Units</Label>
                <Select value={units} onValueChange={(v: UnitSystem) => setUnits(v)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="imperial">Imperial (Feet, Inches)</SelectItem>
                    <SelectItem value="metric">Metric (Meters, CM)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div className="space-y-2">
              {units === 'imperial' ? renderImperialInputs() : renderMetricInputs()}
            </div>
            <div>
              <Label htmlFor="wastageConcrete">Wastage (%)</Label>
              <Input id="wastageConcrete" type="number" value={wastage} onChange={(e) => setWastage(e.target.value)} placeholder="e.g., 10 (typically 5-15%)" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateConcrete}>Calculate Volume</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(volume !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Concrete Volume</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {volume !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Required Volume (incl. wastage)</p><p className="text-3xl font-bold text-primary">{volume} {volumeUnit}</p></div>
                  <CopyButton textToCopy={`${volume} ${volumeUnit}`} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ConcreteCalculator.tsx ======
==================================================

// ====== START OF FILE: ConcreteMixRatioCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.18 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Blend } from "lucide-react";

// Common concrete mix ratios (Cement : Sand : Aggregate by volume)
// These are examples, actual ratios depend on desired strength and local materials.
// Density factors are approximate (kg/m³): Cement ~1440, Sand ~1600, Aggregate ~1500-1700
const mixRatios: Record<string, {cement: number, sand: number, aggregate: number, description: string}> = {
  "M15_124": { cement: 1, sand: 2, aggregate: 4, description: "M15 (1:2:4) - General purpose, light foundations" },
  "M20_1153": { cement: 1, sand: 1.5, aggregate: 3, description: "M20 (1:1.5:3) - Standard RCC work, slabs" },
  "M25_112": { cement: 1, sand: 1, aggregate: 2, description: "M25 (1:1:2) - Reinforced concrete, columns" },
  // Add more common ratios if needed
};
const DENSITY_CEMENT_KG_M3 = 1440;
const DENSITY_SAND_KG_M3 = 1600;
const DENSITY_AGGREGATE_KG_M3 = 1600; // Average

export default function ConcreteMixRatioCalculator() {
  const [totalVolumeM3, setTotalVolumeM3] = useState<string>(''); // Desired wet concrete volume in m³
  const [mixRatioKey, setMixRatioKey] = useState<string>('M20_1153');
  // Water-cement ratio (w/c) is also critical but varies. Simplification: assume typical 0.4-0.6.
  // Let's use a fixed w/c ratio for simplicity, e.g., 0.5

  const [cementKg, setCementKg] = useState<string | null>(null);
  const [sandKg, setSandKg] = useState<string | null>(null);
  const [aggregateKg, setAggregateKg] = useState<string | null>(null);
  const [waterLiters, setWaterLiters] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateMix = () => {
    setError(null); setCementKg(null); setSandKg(null); setAggregateKg(null); setWaterLiters(null);
    const volume = parseFloat(totalVolumeM3);
    const ratio = mixRatios[mixRatioKey];

    if (isNaN(volume) || volume <= 0 || !ratio) {
      setError('Total volume (>0 m³) and a valid mix ratio are required.'); return;
    }

    // Dry volume is typically ~1.54 times wet volume due to voids
    const dryVolumeFactor = 1.54;
    const totalDryVolume = volume * dryVolumeFactor;
    
    const totalRatioParts = ratio.cement + ratio.sand + ratio.aggregate;
    
    const volCement = (ratio.cement / totalRatioParts) * totalDryVolume;
    const volSand = (ratio.sand / totalRatioParts) * totalDryVolume;
    const volAggregate = (ratio.aggregate / totalRatioParts) * totalDryVolume;

    setCementKg((volCement * DENSITY_CEMENT_KG_M3).toFixed(1));
    setSandKg((volSand * DENSITY_SAND_KG_M3).toFixed(1));
    setAggregateKg((volAggregate * DENSITY_AGGREGATE_KG_M3).toFixed(1));

    // Water calculation (simplified based on cement weight, e.g., w/c = 0.5)
    const waterToCementRatio = 0.5;
    setWaterLiters(((volCement * DENSITY_CEMENT_KG_M3) * waterToCementRatio).toFixed(1)); // 1kg water ~ 1 liter
  };

  const resetForm = () => {
    setTotalVolumeM3(''); setMixRatioKey('M20_1153');
    setCementKg(null); setSandKg(null); setAggregateKg(null); setWaterLiters(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Concrete Mix Ratio Calculator</AlertTitle><AlertDescription>Estimate approximate material quantities (cement, sand, aggregate, water) for a given concrete volume and mix ratio. Uses typical densities and dry volume factor (1.54). Water calculated by w/c ratio of 0.5. Results are estimates.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter desired volume and mix ratio.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="totalVolumeM3">Total Wet Concrete Volume Needed (m³)</Label><Input id="totalVolumeM3" type="number" value={totalVolumeM3} onChange={e=>setTotalVolumeM3(e.target.value)} placeholder="e.g., 1"/></div>
            <div><Label htmlFor="mixRatioCMR">Concrete Mix Ratio (Cement:Sand:Aggregate)</Label><Select value={mixRatioKey} onValueChange={setMixRatioKey}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                {Object.entries(mixRatios).map(([key, val])=><SelectItem key={key} value={key}>{val.description}</SelectItem>)}
            </SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateMix}>Calculate Materials</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(cementKg || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Material Quantities</CardDescription></CardHeader>
            <CardContent className="space-y-2 text-sm">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {cementKg && (<div className="p-1 bg-muted rounded-md">Cement: <strong className="font-semibold">{cementKg} kg</strong></div>)}
              {sandKg && (<div className="p-1 bg-muted rounded-md">Sand: <strong className="font-semibold">{sandKg} kg</strong></div>)}
              {aggregateKg && (<div className="p-1 bg-muted rounded-md">Aggregate: <strong className="font-semibold">{aggregateKg} kg</strong></div>)}
              {waterLiters && (<div className="p-1 bg-primary/10 rounded-md">Water (approx. w/c=0.5): <strong className="font-semibold text-primary">{waterLiters} Liters</strong></div>)}
            </CardContent>
             <CardFooter><p className="text-xs text-muted-foreground">Quantities are approximate. Consider local material properties and wastage.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: ConcreteMixRatioCalculator.tsx ======
==================================================

// ====== START OF FILE: ConcreteSlabCostEstimator.tsx ======
// File converted from TSX to TXT
// Original size: 5.96 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, DollarSign, Construction } from "lucide-react";

type UnitSystemSlabCost = 'imperial' | 'metric'; // imperial: feet/inches, cost in $/yd³. metric: meters/cm, cost in $/m³

export default function ConcreteSlabCostEstimator() {
  const [units, setUnits] = useState<UnitSystemSlabCost>('imperial');
  const [length, setLength] = useState<string>('');
  const [width, setWidth] = useState<string>('');
  const [thickness, setThickness] = useState<string>(''); // Inches for imperial, CM for metric
  const [costPerUnitVolume, setCostPerUnitVolume] = useState<string>(''); // $/yd³ or $/m³
  const [wastage, setWastage] = useState<string>('10');

  const [concreteVolume, setConcreteVolume] = useState<string | null>(null);
  const [totalMaterialCost, setTotalMaterialCost] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateCost = () => {
    setError(null); setConcreteVolume(null); setTotalMaterialCost(null);
    const L = parseFloat(length);
    const W = parseFloat(width);
    const T = parseFloat(thickness);
    const costPV = parseFloat(costPerUnitVolume);
    const wasteFactor = 1 + (parseFloat(wastage) / 100);

    if (isNaN(L)||L<=0||isNaN(W)||W<=0||isNaN(T)||T<=0||isNaN(costPV)||costPV<0||isNaN(wasteFactor-1)||(wasteFactor-1)<0) {
      setError("All dimensions must be positive. Cost and wastage must be non-negative."); return;
    }

    let volumeCubicBase: number; // yd³ or m³
    let volUnitLabel = '';

    if (units === 'imperial') { // L, W in feet; T in inches
      const thicknessFt = T / 12;
      const volumeCuFt = L * W * thicknessFt * wasteFactor;
      volumeCubicBase = volumeCuFt / 27; // Convert to cubic yards
      volUnitLabel = 'cubic yards';
    } else { // Metric: L, W in meters; T in cm
      const thicknessM = T / 100;
      volumeCubicBase = L * W * thicknessM * wasteFactor; // Cubic meters
      volUnitLabel = 'cubic meters';
    }
    
    setConcreteVolume(`${volumeCubicBase.toFixed(2)} ${volUnitLabel}`);
    const materialCost = volumeCubicBase * costPV;
    setTotalMaterialCost(materialCost.toFixed(2));
  };

  const resetForm = () => {
    setLength(''); setWidth(''); setThickness(''); setCostPerUnitVolume(''); setWastage('10');
    setConcreteVolume(null); setTotalMaterialCost(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Concrete Slab Cost Estimator</AlertTitle><AlertDescription>Estimate the volume of concrete and total material cost for a slab. Includes wastage factor.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter slab dimensions and cost.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="unitSlabCost">Unit System</Label><Select value={units} onValueChange={(v:UnitSystemSlabCost)=>setUnits(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Imperial (Dimensions in Feet/Inches, Cost per yd³)</SelectItem><SelectItem value="metric">Metric (Dimensions in Meters/CM, Cost per m³)</SelectItem></SelectContent></Select></div>
            <div className="grid grid-cols-3 gap-2">
              <Input type="number" value={length} onChange={e=>setLength(e.target.value)} placeholder={`Length (${units==='imperial'?'ft':'m'})`}/>
              <Input type="number" value={width} onChange={e=>setWidth(e.target.value)} placeholder={`Width (${units==='imperial'?'ft':'m'})`}/>
              <Input type="number" value={thickness} onChange={e=>setThickness(e.target.value)} placeholder={`Thickness (${units==='imperial'?'in':'cm'})`}/>
            </div>
            <div><Label htmlFor="costPerVolSlab">Cost per {units==='imperial'?'Cubic Yard':'Cubic Meter'} ($)</Label><Input id="costPerVolSlab" type="number" value={costPerUnitVolume} onChange={e=>setCostPerUnitVolume(e.target.value)} placeholder="e.g., 120"/></div>
            <div><Label htmlFor="wastageSlabCost">Wastage (%)</Label><Input id="wastageSlabCost" type="number" value={wastage} onChange={e=>setWastage(e.target.value)} placeholder="Default: 10"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateCost}>Estimate Cost</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(totalMaterialCost || error) && (
          <Card>
            <CardHeader><CardDescription>Cost Estimation</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {concreteVolume && (<div className="p-2 bg-muted rounded-md text-sm">Concrete Volume Needed: <strong className="font-semibold">{concreteVolume}</strong></div>)}
              {totalMaterialCost && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Total Material Cost</p><p className="text-2xl font-bold text-primary">${totalMaterialCost}</p></div><CopyButton textToCopy={totalMaterialCost}/></div>)}
              <AlertDescription className="text-xs pt-2">Does not include labor, rebar, forms, or other site prep costs.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
    

// ====== END OF FILE: ConcreteSlabCostEstimator.tsx ======
==================================================

// ====== START OF FILE: ConcreteVolumeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 10.73 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Layers } from "lucide-react";

// This calculator is very similar to ConcreteCalculator.tsx. It will also handle common shapes.
// It could be differentiated by offering different shapes or a more direct volume input.
// For now, let's make it functionally similar but perhaps with a slightly different presentation or default.

type ShapeTypeVol = 'slab_rectangle' | 'cylinder' | 'cube_cuboid';
type UnitSystemVol = 'imperial_yards' | 'metric_meters';

export default function ConcreteVolumeCalculator() {
  const [shapeVol, setShapeVol] = useState<ShapeTypeVol>('slab_rectangle');
  const [unitsVol, setUnitsVol] = useState<UnitSystemVol>('imperial_yards');

  // Imperial units (feet/inches)
  const [lengthFt, setLengthFt] = useState<string>('');
  const [widthFt, setWidthFt] = useState<string>('');
  const [thicknessIn, setThicknessIn] = useState<string>(''); // For slabs
  const [diameterFt, setDiameterFt] = useState<string>(''); // For cylinders
  const [heightFt, setHeightFt] = useState<string>(''); // For cylinders & cuboids

  // Metric units (meters/cm)
  const [lengthM, setLengthM] = useState<string>('');
  const [widthM, setWidthM] = useState<string>('');
  const [thicknessCM, setThicknessCM] = useState<string>('');
  const [diameterM, setDiameterM] = useState<string>('');
  const [heightM, setHeightM] = useState<string>('');
  
  const [concreteWastage, setConcreteWastage] = useState<string>('10'); // Percentage
  
  const [resultVolume, setResultVolume] = useState<string | null>(null);
  const [resultVolumeUnit, setResultVolumeUnit] = useState<string>('');
  const [calcError, setCalcError] = useState<string | null>(null);

  const calculateVolume = () => {
    setCalcError(null);
    setResultVolume(null);
    setResultVolumeUnit('');

    const wasteFactor = 1 + (parseFloat(concreteWastage) / 100 || 0);
    let calculatedVolRaw = 0; // Will be cubic feet or cubic meters

    try {
      if (unitsVol === 'imperial_yards') {
        const L = parseFloat(lengthFt) || 0;
        const W = parseFloat(widthFt) || 0;
        const T_in = parseFloat(thicknessIn) || 0;
        const D = parseFloat(diameterFt) || 0;
        const H = parseFloat(heightFt) || 0;
        const T_ft = T_in / 12;

        if (shapeVol === 'slab_rectangle') {
          if (L <= 0 || W <= 0 || T_ft <= 0) throw new Error("Slab: Length, Width, and Thickness must be positive.");
          calculatedVolRaw = L * W * T_ft;
        } else if (shapeVol === 'cylinder') {
          if (D <= 0 || H <= 0) throw new Error("Cylinder: Diameter and Height must be positive.");
          const R = D / 2;
          calculatedVolRaw = Math.PI * R * R * H;
        } else if (shapeVol === 'cube_cuboid') {
          if (L <= 0 || W <= 0 || H <= 0) throw new Error("Cuboid: Length, Width, and Height must be positive.");
          calculatedVolRaw = L * W * H;
        }
        setResultVolume((calculatedVolRaw * wasteFactor / 27).toFixed(2)); // Cubic feet to cubic yards
        setResultVolumeUnit('cubic yards');
      } else { // Metric
        const L_m = parseFloat(lengthM) || 0;
        const W_m = parseFloat(widthM) || 0;
        const T_cm = parseFloat(thicknessCM) || 0;
        const D_m = parseFloat(diameterM) || 0;
        const H_m = parseFloat(heightM) || 0;
        const T_m = T_cm / 100;

        if (shapeVol === 'slab_rectangle') {
          if (L_m <= 0 || W_m <= 0 || T_m <= 0) throw new Error("Slab: Length, Width, and Thickness must be positive.");
          calculatedVolRaw = L_m * W_m * T_m;
        } else if (shapeVol === 'cylinder') {
           if (D_m <= 0 || H_m <= 0) throw new Error("Cylinder: Diameter and Height must be positive.");
          const R_m = D_m / 2;
          calculatedVolRaw = Math.PI * R_m * R_m * H_m;
        } else if (shapeVol === 'cube_cuboid') {
           if (L_m <= 0 || W_m <= 0 || H_m <= 0) throw new Error("Cuboid: Length, Width, and Height must be positive.");
          calculatedVolRaw = L_m * W_m * H_m;
        }
        setResultVolume((calculatedVolRaw * wasteFactor).toFixed(2));
        setResultVolumeUnit('cubic meters');
      }
    } catch (e: any) {
      setCalcError(e.message);
    }
  };
  
  const resetCalculatorForm = () => {
    setLengthFt(''); setWidthFt(''); setThicknessIn(''); setDiameterFt(''); setHeightFt('');
    setLengthM(''); setWidthM(''); setThicknessCM(''); setDiameterM(''); setHeightM('');
    setConcreteWastage('10');
    setResultVolume(null); setResultVolumeUnit(''); setCalcError(null);
  };

  const renderImperialForm = () => (
    <>
      {(shapeVol === 'slab_rectangle' || shapeVol === 'cube_cuboid') && (
        <>
          <div><Label htmlFor="lengthFtVol">Length (feet)</Label><Input id="lengthFtVol" type="number" value={lengthFt} onChange={(e) => setLengthFt(e.target.value)} /></div>
          <div><Label htmlFor="widthFtVol">Width (feet)</Label><Input id="widthFtVol" type="number" value={widthFt} onChange={(e) => setWidthFt(e.target.value)} /></div>
        </>
      )}
      {shapeVol === 'slab_rectangle' && <div><Label htmlFor="thicknessInVol">Thickness (inches)</Label><Input id="thicknessInVol" type="number" value={thicknessIn} onChange={(e) => setThicknessIn(e.target.value)} /></div>}
      {shapeVol === 'cylinder' && <div><Label htmlFor="diameterFtVol">Diameter (feet)</Label><Input id="diameterFtVol" type="number" value={diameterFt} onChange={(e) => setDiameterFt(e.target.value)} /></div>}
      {(shapeVol === 'cylinder' || shapeVol === 'cube_cuboid') && <div><Label htmlFor="heightFtVol">Height/Depth (feet)</Label><Input id="heightFtVol" type="number" value={heightFt} onChange={(e) => setHeightFt(e.target.value)} /></div>}
    </>
  );

  const renderMetricForm = () => (
    <>
      {(shapeVol === 'slab_rectangle' || shapeVol === 'cube_cuboid') && (
        <>
          <div><Label htmlFor="lengthMVol">Length (meters)</Label><Input id="lengthMVol" type="number" value={lengthM} onChange={(e) => setLengthM(e.target.value)} /></div>
          <div><Label htmlFor="widthMVol">Width (meters)</Label><Input id="widthMVol" type="number" value={widthM} onChange={(e) => setWidthM(e.target.value)} /></div>
        </>
      )}
      {shapeVol === 'slab_rectangle' && <div><Label htmlFor="thicknessCMVol">Thickness (cm)</Label><Input id="thicknessCMVol" type="number" value={thicknessCM} onChange={(e) => setThicknessCM(e.target.value)} /></div>}
      {shapeVol === 'cylinder' && <div><Label htmlFor="diameterMVol">Diameter (meters)</Label><Input id="diameterMVol" type="number" value={diameterM} onChange={(e) => setDiameterM(e.target.value)} /></div>}
      {(shapeVol === 'cylinder' || shapeVol === 'cube_cuboid') && <div><Label htmlFor="heightMVol">Height/Depth (meters)</Label><Input id="heightMVol" type="number" value={heightM} onChange={(e) => setHeightM(e.target.value)} /></div>}
    </>
  );

  return (
    <div className="space-y-6">
       <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Concrete Volume Estimation</AlertTitle>
        <AlertDescription>This tool helps estimate concrete volume for common shapes. Account for waste and consult professionals for large projects.</AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate concrete volume for your project.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="shapeTypeVol">Shape</Label>
                <Select value={shapeVol} onValueChange={(v: ShapeTypeVol) => setShapeVol(v)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="slab_rectangle">Slab / Rectangle</SelectItem>
                    <SelectItem value="cylinder">Cylinder (e.g., Pier, Column)</SelectItem>
                    <SelectItem value="cube_cuboid">Cube / Cuboid</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="unitSystemVol">Units</Label>
                <Select value={unitsVol} onValueChange={(v: UnitSystemVol) => setUnitsVol(v)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="imperial_yards">Imperial (Result in Cubic Yards)</SelectItem>
                    <SelectItem value="metric_meters">Metric (Result in Cubic Meters)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div className="space-y-2">
              {unitsVol === 'imperial_yards' ? renderImperialForm() : renderMetricForm()}
            </div>
            <div>
              <Label htmlFor="concreteWastage">Wastage Factor (%)</Label>
              <Input id="concreteWastage" type="number" value={concreteWastage} onChange={(e) => setConcreteWastage(e.target.value)} placeholder="e.g., 10" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateVolume}>Calculate Volume</Button>
            <Button variant="outline" onClick={resetCalculatorForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(resultVolume !== null || calcError) && (
          <Card>
            <CardHeader><CardDescription>Estimated Volume</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {calcError && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{calcError}</AlertDescription></Alert>)}
              {resultVolume !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Total Volume Needed</p><p className="text-3xl font-bold text-primary">{resultVolume} {resultVolumeUnit}</p></div>
                  <CopyButton textToCopy={`${resultVolume} ${resultVolumeUnit}`} />
                </div>
              )}
            </CardContent>
             <CardFooter><p className="text-xs text-muted-foreground">Includes {concreteWastage}% wastage factor.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ConcreteVolumeCalculator.tsx ======
==================================================

// ====== START OF FILE: ConfidenceIntervalCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.8 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Target } from "lucide-react";

// Z-scores for common confidence levels
const zScores: { [key: string]: number } = {
  '80': 1.282,
  '90': 1.645,
  '95': 1.960,
  '98': 2.326,
  '99': 2.576,
  '99.5': 2.807,
  '99.9': 3.291,
};

export default function ConfidenceIntervalCalculator() {
  const [sampleMean, setSampleMean] = useState<string>('');
  const [stdDev, setStdDev] = useState<string>(''); // Population standard deviation or sample std dev for large samples
  const [sampleSize, setSampleSize] = useState<string>('');
  const [confidenceLevel, setConfidenceLevel] = useState<string>('95');
  
  const [lowerBound, setLowerBound] = useState<string | null>(null);
  const [upperBound, setUpperBound] = useState<string | null>(null);
  const [marginOfError, setMarginOfError] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateConfidenceInterval = () => {
    setError(null);
    setLowerBound(null);
    setUpperBound(null);
    setMarginOfError(null);

    const mean = parseFloat(sampleMean);
    const sd = parseFloat(stdDev);
    const n = parseInt(sampleSize);
    const confLevel = confidenceLevel; // as string key for zScores

    if (isNaN(mean) || isNaN(sd) || sd <= 0 || isNaN(n) || n <= 0) {
      setError('Please enter valid numbers: sample mean, positive standard deviation, and positive sample size (>0).');
      return;
    }
    if (!zScores[confLevel]) {
        setError('Please select a valid confidence level.');
        return;
    }
    if (n === 1 && confLevel !== '0') { // Technichally for n=1, interval is problematic or very wide. Many stats packages require n > 1.
        // setError("Sample size must be greater than 1 for a meaningful confidence interval in this simplified calculator.");
        // return;
        // Or handle as per some convention. For z-interval, formula works but interpretation is key.
    }


    const z = zScores[confLevel];
    const calculatedMarginOfError = z * (sd / Math.sqrt(n));
    const calculatedLowerBound = mean - calculatedMarginOfError;
    const calculatedUpperBound = mean + calculatedMarginOfError;

    setMarginOfError(calculatedMarginOfError.toFixed(4));
    setLowerBound(calculatedLowerBound.toFixed(4));
    setUpperBound(calculatedUpperBound.toFixed(4));
  };
  
  const resetForm = () => {
    setSampleMean('');
    setStdDev('');
    setSampleSize('');
    setConfidenceLevel('95');
    setLowerBound(null);
    setUpperBound(null);
    setMarginOfError(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Statistical Estimation</AlertTitle>
        <AlertDescription>
          This calculator computes the confidence interval for a population mean, assuming a normal distribution or a large sample size (Central Limit Theorem). It uses Z-scores. For small samples with unknown population standard deviation, a t-distribution would be more appropriate.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate the confidence interval for a population mean.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="sampleMean">Sample Mean (x̄)</Label>
              <Input id="sampleMean" type="number" value={sampleMean} onChange={(e) => setSampleMean(e.target.value)} placeholder="e.g., 100" />
            </div>
            <div>
              <Label htmlFor="stdDev">Standard Deviation (σ or s)</Label>
              <Input id="stdDev" type="number" value={stdDev} onChange={(e) => setStdDev(e.target.value)} placeholder="e.g., 15" />
            </div>
            <div>
              <Label htmlFor="sampleSize">Sample Size (n)</Label>
              <Input id="sampleSize" type="number" value={sampleSize} onChange={(e) => setSampleSize(e.target.value)} placeholder="e.g., 30" />
            </div>
            <div>
              <Label htmlFor="confidenceLevel">Confidence Level (%)</Label>
              <Select value={confidenceLevel} onValueChange={setConfidenceLevel}>
                <SelectTrigger id="confidenceLevel"><SelectValue /></SelectTrigger>
                <SelectContent>
                  {Object.keys(zScores).map(level => (
                    <SelectItem key={level} value={level}>{level}%</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateConfidenceInterval}>Calculate Interval</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(lowerBound || error) && (
          <Card>
            <CardHeader><CardDescription>Confidence Interval Results</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {marginOfError && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Margin of Error</p>
                  <p className="font-semibold">±{marginOfError}</p>
                </div>
              )}
              {lowerBound && upperBound && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">{confidenceLevel}% Confidence Interval</p>
                    <p className="text-xl font-bold text-primary">[{lowerBound}, {upperBound}]</p>
                  </div>
                  <CopyButton textToCopy={`[${lowerBound}, ${upperBound}]`} size="icon" variant="ghost" className="text-primary"/>
                </div>
              )}
               <AlertDescription className="text-xs pt-2">
                This means we are {confidenceLevel}% confident that the true population mean lies between {lowerBound} and {upperBound}.
               </AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ConfidenceIntervalCalculator.tsx ======
==================================================

// ====== START OF FILE: ConversionCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.89 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, ArrowRightLeft } from "lucide-react";

type ConversionType = 'length' | 'weight' | 'temperature';
type LengthUnit = 'meters' | 'feet' | 'kilometers' | 'miles';
type WeightUnit = 'kilograms' | 'pounds';
type TemperatureUnit = 'celsius' | 'fahrenheit' | 'kelvin';

export default function ConversionCalculator() {
  const [conversionType, setConversionType] = useState<ConversionType>('length');
  const [inputValue, setInputValue] = useState<string>('');
  const [fromUnit, setFromUnit] = useState<string>('meters');
  const [toUnit, setToUnit] = useState<string>('feet');
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const unitsMap = {
    length: {
      meters: { name: 'Meters', factor: 1 },
      feet: { name: 'Feet', factor: 3.28084 },
      kilometers: { name: 'Kilometers', factor: 0.001 },
      miles: { name: 'Miles', factor: 0.000621371 },
    },
    weight: {
      kilograms: { name: 'Kilograms', factor: 1 },
      pounds: { name: 'Pounds', factor: 2.20462 },
    },
    temperature: {
      celsius: { name: 'Celsius' },
      fahrenheit: { name: 'Fahrenheit' },
      kelvin: { name: 'Kelvin' },
    }
  };

  const handleConversionTypeChange = (type: ConversionType) => {
    setConversionType(type);
    setInputValue('');
    setResult(null);
    setError(null);
    if (type === 'length') { setFromUnit('meters'); setToUnit('feet'); }
    else if (type === 'weight') { setFromUnit('kilograms'); setToUnit('pounds'); }
    else if (type === 'temperature') { setFromUnit('celsius'); setToUnit('fahrenheit'); }
  };
  
  const getUnitOptions = () => {
    switch (conversionType) {
      case 'length': return Object.keys(unitsMap.length) as LengthUnit[];
      case 'weight': return Object.keys(unitsMap.weight) as WeightUnit[];
      case 'temperature': return Object.keys(unitsMap.temperature) as TemperatureUnit[];
      default: return [];
    }
  };


  const performConversion = () => {
    setError(null);
    setResult(null);
    const val = parseFloat(inputValue);
    if (isNaN(val)) {
      setError('Please enter a valid number to convert.');
      return;
    }

    let convertedValue: number;

    if (conversionType === 'temperature') {
      if (fromUnit === toUnit) {
        convertedValue = val;
      } else if (fromUnit === 'celsius') {
        if (toUnit === 'fahrenheit') convertedValue = (val * 9/5) + 32;
        else if (toUnit === 'kelvin') convertedValue = val + 273.15;
        else { setError('Invalid to unit'); return; }
      } else if (fromUnit === 'fahrenheit') {
        if (toUnit === 'celsius') convertedValue = (val - 32) * 5/9;
        else if (toUnit === 'kelvin') convertedValue = ((val - 32) * 5/9) + 273.15;
        else { setError('Invalid to unit'); return; }
      } else if (fromUnit === 'kelvin') {
        if (toUnit === 'celsius') convertedValue = val - 273.15;
        else if (toUnit === 'fahrenheit') convertedValue = ((val - 273.15) * 9/5) + 32;
        else { setError('Invalid to unit'); return; }
      } else {
         setError('Invalid from unit for temperature'); return;
      }
    } else { // Length or Weight
      const baseUnits = unitsMap[conversionType] as any;
      if (!baseUnits[fromUnit] || !baseUnits[toUnit]) {
        setError("Invalid units selected for conversion type.");
        return;
      }
      const valueInBase = val / baseUnits[fromUnit].factor; // Convert input to base unit (factor 1)
      convertedValue = valueInBase * baseUnits[toUnit].factor;
    }
    
    setResult(convertedValue.toFixed(4));
  };

  const resetForm = () => {
    setInputValue('');
    setResult(null);
    setError(null);
    // Optionally reset units based on conversionType if desired
  };

  const currentUnitOptions = getUnitOptions();

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Unit Conversion</AlertTitle>
        <AlertDescription>
          Convert between common units for length, weight, and temperature. More units and types coming soon!
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Select conversion type and enter value.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="conversionType">Conversion Type</Label>
              <Select value={conversionType} onValueChange={(v: ConversionType) => handleConversionTypeChange(v)}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="length">Length</SelectItem>
                  <SelectItem value="weight">Weight</SelectItem>
                  <SelectItem value="temperature">Temperature</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-2 items-end">
              <div className="sm:col-span-1">
                <Label htmlFor="inputValue">Value</Label>
                <Input id="inputValue" type="number" value={inputValue} onChange={(e) => setInputValue(e.target.value)} placeholder="e.g., 10" />
              </div>
              <div className="sm:col-span-1">
                <Label htmlFor="fromUnit">From</Label>
                <Select value={fromUnit} onValueChange={setFromUnit}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    {currentUnitOptions.map(u => <SelectItem key={u} value={u}>{(unitsMap[conversionType] as any)[u]?.name || u}</SelectItem>)}
                  </SelectContent>
                </Select>
              </div>
              <div className="sm:col-span-1">
                <Label htmlFor="toUnit">To</Label>
                <Select value={toUnit} onValueChange={setToUnit}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    {currentUnitOptions.map(u => <SelectItem key={u} value={u}>{(unitsMap[conversionType] as any)[u]?.name || u}</SelectItem>)}
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={performConversion}>Convert</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Conversion Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Result</p><p className="text-3xl font-bold text-primary">{result} <span className="text-lg">{ (unitsMap[conversionType] as any)[toUnit]?.name || toUnit}</span></p></div>
                  <CopyButton textToCopy={`${result} ${(unitsMap[conversionType] as any)[toUnit]?.name || toUnit}`} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}



// ====== END OF FILE: ConversionCalculator.tsx ======
==================================================

// ====== START OF FILE: CookingVolumeConverter.tsx ======
// File converted from TSX to TXT
// Original size: 4.88 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CookingPot } from "lucide-react";

type CookingUnit = 'cups' | 'tbsp' | 'tsp' | 'ml' | 'fl_oz';

const toMlFactors: Record<CookingUnit, number> = {
  cups: 236.588,
  tbsp: 14.7868,
  tsp: 4.92892,
  ml: 1,
  fl_oz: 29.5735,
};

const fromMlFactors: Record<CookingUnit, number> = {
  cups: 1 / 236.588,
  tbsp: 1 / 14.7868,
  tsp: 1 / 4.92892,
  ml: 1,
  fl_oz: 1 / 29.5735,
};

const unitLabels: Record<CookingUnit, string> = {
  cups: "Cups (US)",
  tbsp: "Tablespoons (US)",
  tsp: "Teaspoons (US)",
  ml: "Milliliters (ml)",
  fl_oz: "Fluid Ounces (US)",
};

export default function CookingVolumeConverter() {
  const [inputValue, setInputValue] = useState<string>('1');
  const [fromUnit, setFromUnit] = useState<CookingUnit>('cups');
  const [toUnit, setToUnit] = useState<CookingUnit>('ml');
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const convertVolume = () => {
    setError(null);
    setResult(null);
    const val = parseFloat(inputValue);
    if (isNaN(val) || val < 0) {
      setError('Input value must be a non-negative number.');
      return;
    }
    if (fromUnit === toUnit) {
      setResult(val.toFixed(2));
      return;
    }

    const valueInMl = val * toMlFactors[fromUnit];
    const convertedValue = valueInMl * fromMlFactors[toUnit];
    setResult(convertedValue.toFixed(2));
  };

  const resetForm = () => {
    setInputValue('1');
    setFromUnit('cups');
    setToUnit('ml');
    setResult(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Cooking Volume Converter</AlertTitle><AlertDescription>Convert between common cooking and baking volume measurements.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter value and select units to convert.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="inputValueCooking">Value</Label>
              <Input id="inputValueCooking" type="number" value={inputValue} onChange={e => setInputValue(e.target.value)} placeholder="e.g., 1" />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="fromUnitCooking">From</Label>
                <Select value={fromUnit} onValueChange={(v: CookingUnit) => setFromUnit(v)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>{Object.entries(unitLabels).map(([key, label]) => <SelectItem key={`from-${key}`} value={key}>{label}</SelectItem>)}</SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="toUnitCooking">To</Label>
                <Select value={toUnit} onValueChange={(v: CookingUnit) => setToUnit(v)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>{Object.entries(unitLabels).map(([key, label]) => <SelectItem key={`to-${key}`} value={key}>{label}</SelectItem>)}</SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={convertVolume}>Convert</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Conversion Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">{inputValue} {unitLabels[fromUnit]} is approx.</p>
                    <p className="text-2xl font-bold text-primary">{result} {unitLabels[toUnit]}</p>
                  </div>
                  <CopyButton textToCopy={`${result} ${unitLabels[toUnit]}`} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CookingVolumeConverter.tsx ======
==================================================

// ====== START OF FILE: CpcCpmCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.27 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, MousePointerClick } from "lucide-react";

export default function CpcCpmCalculator() {
  const [cost, setCost] = useState<string>('');
  const [clicks, setClicks] = useState<string>('');
  const [impressions, setImpressions] = useState<string>('');

  const [cpc, setCpc] = useState<string | null>(null);
  const [cpm, setCpm] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateMetrics = () => {
    setError(null);
    setCpc(null);
    setCpm(null);

    const totalCost = parseFloat(cost);
    const numClicks = parseInt(clicks);
    const numImpressions = parseInt(impressions);

    let cpcValid = false;
    let cpmValid = false;

    if (!isNaN(totalCost) && totalCost >= 0) {
        if (clicks && !isNaN(numClicks) && numClicks > 0) {
            const calculatedCpc = totalCost / numClicks;
            setCpc(calculatedCpc.toFixed(2));
            cpcValid = true;
        } else if (clicks && (isNaN(numClicks) || numClicks <=0)) {
            setError("Number of clicks must be a positive integer if provided for CPC.");
            return;
        }

        if (impressions && !isNaN(numImpressions) && numImpressions > 0) {
            const calculatedCpm = (totalCost / numImpressions) * 1000;
            setCpm(calculatedCpm.toFixed(2));
            cpmValid = true;
        } else if (impressions && (isNaN(numImpressions) || numImpressions <=0)) {
             setError("Number of impressions must be a positive integer if provided for CPM.");
            return;
        }
    } else {
        setError("Total cost must be a non-negative number.");
        return;
    }
    
    if (!clicks && !impressions) {
        setError("Please provide either Clicks or Impressions (or both).");
        return;
    }
    if (!cpcValid && clicks) setError("Could not calculate CPC. Ensure Clicks > 0.");
    if (!cpmValid && impressions) setError("Could not calculate CPM. Ensure Impressions > 0.");


  };

  const resetForm = () => {
    setCost('');
    setClicks('');
    setImpressions('');
    setCpc(null);
    setCpm(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Marketing Metrics</AlertTitle>
        <AlertDescription>
          Calculate Cost Per Click (CPC) and Cost Per Mille/Thousand Impressions (CPM) for your advertising campaigns.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your campaign data.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="cost">Total Cost ($)</Label>
              <Input id="cost" type="number" value={cost} onChange={(e) => setCost(e.target.value)} placeholder="e.g., 100" />
            </div>
            <div>
              <Label htmlFor="clicks">Number of Clicks (for CPC)</Label>
              <Input id="clicks" type="number" value={clicks} onChange={(e) => setClicks(e.target.value)} placeholder="e.g., 200 (optional)" />
            </div>
            <div>
              <Label htmlFor="impressions">Number of Impressions (for CPM)</Label>
              <Input id="impressions" type="number" value={impressions} onChange={(e) => setImpressions(e.target.value)} placeholder="e.g., 10000 (optional)" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateMetrics}>Calculate Metrics</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(cpc || cpm || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Metrics</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {cpc && (
                <div className="flex justify-between items-center p-2 bg-muted rounded-md">
                  <div><p className="text-sm text-muted-foreground">Cost Per Click (CPC)</p><p className="text-xl font-semibold">${cpc}</p></div>
                  <CopyButton textToCopy={cpc} size="icon" variant="ghost" />
                </div>
              )}
              {cpm && (
                <div className="flex justify-between items-center p-2 bg-muted rounded-md">
                  <div><p className="text-sm text-muted-foreground">Cost Per Mille (CPM)</p><p className="text-xl font-semibold">${cpm}</p></div>
                  <CopyButton textToCopy={cpm} size="icon" variant="ghost" />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CpcCpmCalculator.tsx ======
==================================================

// ====== START OF FILE: CreditCardCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.58 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CreditCard } from "lucide-react";

export default function CreditCardCalculator() {
  const [balance, setBalance] = useState<string>('');
  const [apr, setApr] = useState<string>(''); // Annual Percentage Rate %
  const [monthlyPayment, setMonthlyPayment] = useState<string>('');

  const [monthsToPayoff, setMonthsToPayoff] = useState<string | null>(null);
  const [totalInterestPaid, setTotalInterestPaid] = useState<string | null>(null);
  const [totalRepayment, setTotalRepayment] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePayoff = () => {
    setError(null);
    setMonthsToPayoff(null);
    setTotalInterestPaid(null);
    setTotalRepayment(null);

    const B = parseFloat(balance);
    const annualRate = parseFloat(apr) / 100;
    const P = parseFloat(monthlyPayment);

    if (isNaN(B) || B <= 0 || isNaN(annualRate) || annualRate < 0 || isNaN(P) || P <= 0) {
      setError('Please enter valid positive numbers for balance, APR, and monthly payment.');
      return;
    }

    const monthlyRate = annualRate / 12;

    if (monthlyRate > 0 && P <= B * monthlyRate) {
      setError('Monthly payment must be greater than the monthly interest accrued to pay off the balance. Increase payment or check APR.');
      return;
    }
    
    let numMonths;
    if (monthlyRate === 0) { // 0% APR
        numMonths = B / P;
    } else {
        // N = -log(1 - (B * i) / P) / log(1 + i)
        numMonths = -(Math.log(1 - (B * monthlyRate) / P)) / Math.log(1 + monthlyRate);
    }


    if (isNaN(numMonths) || !isFinite(numMonths) || numMonths <=0) {
        setError("Could not calculate payoff time. Ensure payment covers interest or check other inputs.");
        return;
    }

    const calculatedTotalRepayment = P * numMonths;
    const calculatedTotalInterest = calculatedTotalRepayment - B;

    setMonthsToPayoff(Math.ceil(numMonths).toString());
    setTotalInterestPaid(calculatedTotalInterest.toFixed(2));
    setTotalRepayment(calculatedTotalRepayment.toFixed(2));
  };

  const resetForm = () => {
    setBalance('');
    setApr('');
    setMonthlyPayment('');
    setMonthsToPayoff(null);
    setTotalInterestPaid(null);
    setTotalRepayment(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Credit Card Payoff Estimation</AlertTitle>
        <AlertDescription>
          Estimate how long it will take to pay off your credit card balance and the total interest paid. Does not account for new purchases or fees.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your credit card details.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="balance">Current Balance ($)</Label>
              <Input id="balance" type="number" value={balance} onChange={(e) => setBalance(e.target.value)} placeholder="e.g., 5000" />
            </div>
            <div>
              <Label htmlFor="apr">Annual Percentage Rate (APR %)</Label>
              <Input id="apr" type="number" value={apr} onChange={(e) => setApr(e.target.value)} placeholder="e.g., 18.9" />
            </div>
            <div>
              <Label htmlFor="monthlyPayment">Desired Monthly Payment ($)</Label>
              <Input id="monthlyPayment" type="number" value={monthlyPayment} onChange={(e) => setMonthlyPayment(e.target.value)} placeholder="e.g., 200" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculatePayoff}>Calculate Payoff</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(monthsToPayoff || error) && (
          <Card>
            <CardHeader><CardDescription>Payoff Summary</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {monthsToPayoff && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Months to Pay Off</p>
                  <p className="text-xl font-bold text-primary">{monthsToPayoff} months</p>
                </div>
              )}
              {totalInterestPaid && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Total Interest Paid</p>
                  <p className="font-semibold">${totalInterestPaid}</p>
                </div>
              )}
              {totalRepayment && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Total Amount Repaid</p>
                  <p className="font-semibold">${totalRepayment}</p>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CreditCardCalculator.tsx ======
==================================================

// ====== START OF FILE: CreditCardPayoffCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.96 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Combine, PlusCircle, Trash2 } from "lucide-react";

interface DebtItem {
  id: string;
  name: string;
  balance: number;
  apr: number;
  minPayment: number;
}

// This calculator will focus on showing time to payoff for a single card with extra payments.
// A more advanced version could compare snowball vs. avalanche.
export default function CreditCardPayoffCalculator() {
  const [balance, setBalance] = useState<string>('');
  const [apr, setApr] = useState<string>('');
  const [currentMonthlyPayment, setCurrentMonthlyPayment] = useState<string>('');
  const [extraPayment, setExtraPayment] = useState<string>('0');

  const [originalMonths, setOriginalMonths] = useState<string | null>(null);
  const [newMonths, setNewMonths] = useState<string | null>(null);
  const [interestSaved, setInterestSaved] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  
  const calculateSingleCardPayoff = (currentBalance: number, currentApr: number, payment: number): { months: number, totalInterest: number, totalRepayment: number } | null => {
    if (currentBalance <= 0 || currentApr < 0 || payment <= 0) return null;
    const monthlyRate = currentApr / 100 / 12;

    if (monthlyRate > 0 && payment <= currentBalance * monthlyRate) {
      // Payment doesn't cover interest, won't pay off
      return { months: Infinity, totalInterest: Infinity, totalRepayment: Infinity};
    }
    
    let numMonths;
    if (monthlyRate === 0) {
        numMonths = currentBalance / payment;
    } else {
        numMonths = -(Math.log(1 - (currentBalance * monthlyRate) / payment)) / Math.log(1 + monthlyRate);
    }

    if (isNaN(numMonths) || !isFinite(numMonths) || numMonths <= 0) {
        return null; // Error or invalid state
    }
    
    const totalRepayment = payment * numMonths;
    const totalInterest = totalRepayment - currentBalance;
    return { months: Math.ceil(numMonths), totalInterest, totalRepayment };
  };


  const calculatePayoffStrategy = () => {
    setError(null);
    setOriginalMonths(null);
    setNewMonths(null);
    setInterestSaved(null);

    const B = parseFloat(balance);
    const APR = parseFloat(apr);
    const P_current = parseFloat(currentMonthlyPayment);
    const P_extra = parseFloat(extraPayment) || 0;

    if (isNaN(B) || B <= 0 || isNaN(APR) || APR < 0 || isNaN(P_current) || P_current <= 0) {
      setError('Please enter valid positive balance, APR, and current monthly payment.');
      return;
    }
    if (isNaN(P_extra) || P_extra < 0) {
      setError('Extra payment must be zero or positive.');
      return;
    }

    const originalPayoff = calculateSingleCardPayoff(B, APR, P_current);
    const newPayoff = calculateSingleCardPayoff(B, APR, P_current + P_extra);

    if (!originalPayoff) {
        setError("Could not calculate original payoff. Check inputs.");
        return;
    }
     if (originalPayoff.months === Infinity) {
        setError("Original monthly payment doesn't cover interest. Card will not be paid off.");
        setOriginalMonths("Never (payment too low)");
        return;
    }
    setOriginalMonths(`${originalPayoff.months} months`);

    if (P_extra > 0 && newPayoff) {
        if (newPayoff.months === Infinity) {
            setNewMonths("Still never (total payment too low)");
        } else {
            setNewMonths(`${newPayoff.months} months`);
            const savedInterest = originalPayoff.totalInterest - newPayoff.totalInterest;
            setInterestSaved(savedInterest.toFixed(2));
        }
    } else if (P_extra > 0 && !newPayoff) {
        setError("Could not calculate new payoff with extra payment.");
    }
  };

  const resetForm = () => {
    setBalance('');
    setApr('');
    setCurrentMonthlyPayment('');
    setExtraPayment('0');
    setOriginalMonths(null);
    setNewMonths(null);
    setInterestSaved(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Credit Card Payoff Acceleration</AlertTitle>
        <AlertDescription>
          See how making extra payments can shorten your payoff time and reduce total interest paid on a credit card.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your credit card and payment details.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="ccBalance">Current Card Balance ($)</Label>
              <Input id="ccBalance" type="number" value={balance} onChange={(e) => setBalance(e.target.value)} placeholder="e.g., 5000" />
            </div>
            <div>
              <Label htmlFor="ccApr">Card APR (%)</Label>
              <Input id="ccApr" type="number" value={apr} onChange={(e) => setApr(e.target.value)} placeholder="e.g., 19.99" />
            </div>
            <div>
              <Label htmlFor="ccCurrentPayment">Current Monthly Payment ($)</Label>
              <Input id="ccCurrentPayment" type="number" value={currentMonthlyPayment} onChange={(e) => setCurrentMonthlyPayment(e.target.value)} placeholder="e.g., 150" />
            </div>
            <div>
              <Label htmlFor="ccExtraPayment">Extra Monthly Payment ($) (Optional)</Label>
              <Input id="ccExtraPayment" type="number" value={extraPayment} onChange={(e) => setExtraPayment(e.target.value)} placeholder="e.g., 50" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculatePayoffStrategy}>Analyze Payoff</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(originalMonths || newMonths || interestSaved || error) && (
          <Card>
            <CardHeader><CardDescription>Payoff Analysis</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {originalMonths && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Time to Pay Off (Current Payment)</p>
                  <p className="font-semibold">{originalMonths}</p>
                </div>
              )}
              {newMonths && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Time to Pay Off (With Extra Payment)</p>
                  <p className="text-xl font-bold text-primary">{newMonths}</p>
                </div>
              )}
              {interestSaved && parseFloat(interestSaved) > 0 && (
                <div className="p-2 bg-green-500/10 rounded-md">
                  <p className="text-sm text-green-700 dark:text-green-400">Estimated Interest Saved</p>
                  <p className="font-semibold text-green-600 dark:text-green-500">${interestSaved}</p>
                </div>
              )}
              {interestSaved && parseFloat(interestSaved) <= 0 && extraPayment !== '0' && newMonths && originalMonths !== newMonths && (
                 <div className="p-2 bg-muted rounded-md">
                    <p className="text-sm text-muted-foreground">No significant interest saved with this extra payment, but payoff is faster.</p>
                 </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CreditCardPayoffCalculator.tsx ======
==================================================

// ====== START OF FILE: CrossProductCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.46 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, GitCommitVertical } from "lucide-react";

export default function CrossProductCalculator() {
  const [ax, setAx] = useState<string>(''); const [ay, setAy] = useState<string>(''); const [az, setAz] = useState<string>('');
  const [bx, setBx] = useState<string>(''); const [by, setBy] = useState<string>(''); const [bz, setBz] = useState<string>('');

  const [rx, setRx] = useState<string | null>(null); // Result vector components
  const [ry, setRy] = useState<string | null>(null);
  const [rz, setRz] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateCrossProduct = () => {
    setError(null); setRx(null); setRy(null); setRz(null);
    const vAx = parseFloat(ax); const vAy = parseFloat(ay); const vAz = parseFloat(az);
    const vBx = parseFloat(bx); const vBy = parseFloat(by); const vBz = parseFloat(bz);

    if (isNaN(vAx)||isNaN(vAy)||isNaN(vAz)||isNaN(vBx)||isNaN(vBy)||isNaN(vBz)) {
      setError("All vector components (x, y, z for both vectors) must be valid numbers.");
      return;
    }

    // A x B = (AyBz - AzBy)i - (AxBz - AzBx)j + (AxBy - AyBx)k
    // A x B = (AyBz - AzBy)i + (AzBx - AxBz)j + (AxBy - AyBx)k
    const resX = vAy * vBz - vAz * vBy;
    const resY = vAz * vBx - vAx * vBz;
    const resZ = vAx * vBy - vAy * vBx;
    
    setRx(resX.toFixed(4)); setRy(resY.toFixed(4)); setRz(resZ.toFixed(4));
  };

  const resetForm = () => {
    setAx(''); setAy(''); setAz(''); setBx(''); setBy(''); setBz('');
    setRx(null); setRy(null); setRz(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Cross Product Calculator (3D Vectors)</AlertTitle><AlertDescription>Calculate the cross product (vector product) of two 3D vectors A and B. Result is a vector perpendicular to both A and B.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter components of Vector A and Vector B.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <Label className="font-medium">Vector A = (Ax, Ay, Az)</Label>
            <div className="grid grid-cols-3 gap-2">
              <Input type="number" value={ax} onChange={e=>setAx(e.target.value)} placeholder="Ax"/>
              <Input type="number" value={ay} onChange={e=>setAy(e.target.value)} placeholder="Ay"/>
              <Input type="number" value={az} onChange={e=>setAz(e.target.value)} placeholder="Az"/>
            </div>
            <Label className="font-medium">Vector B = (Bx, By, Bz)</Label>
            <div className="grid grid-cols-3 gap-2">
              <Input type="number" value={bx} onChange={e=>setBx(e.target.value)} placeholder="Bx"/>
              <Input type="number" value={by} onChange={e=>setBy(e.target.value)} placeholder="By"/>
              <Input type="number" value={bz} onChange={e=>setBz(e.target.value)} placeholder="Bz"/>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateCrossProduct}>Calculate A × B</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(rx !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Result Vector (A × B)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {rx !== null && ry !== null && rz !== null && (
                <div className="p-3 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Result Vector ( Rx, Ry, Rz )</p>
                  <p className="text-xl font-bold text-primary">({rx}, {ry}, {rz})</p>
                  <CopyButton textToCopy={`(${rx}, ${ry}, ${rz})`} className="mt-2"/>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CrossProductCalculator.tsx ======
==================================================

// ====== START OF FILE: CryptocurrencyProfitLossCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.64 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Bitcoin, CandlestickChart } from "lucide-react";

export default function CryptocurrencyProfitLossCalculator() {
  const [buyPrice, setBuyPrice] = useState<string>(''); // Per coin
  const [sellPrice, setSellPrice] = useState<string>(''); // Per coin
  const [quantity, setQuantity] = useState<string>(''); // Number of coins
  const [buyFee, setBuyFee] = useState<string>('0'); // Total fee for buying
  const [sellFee, setSellFee] = useState<string>('0'); // Total fee for selling

  const [totalCost, setTotalCost] = useState<string | null>(null);
  const [totalProceeds, setTotalProceeds] = useState<string | null>(null);
  const [netProfitLoss, setNetProfitLoss] = useState<string | null>(null);
  const [returnPercent, setReturnPercent] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateProfitLoss = () => {
    setError(null); setTotalCost(null); setTotalProceeds(null); setNetProfitLoss(null); setReturnPercent(null);
    const bp = parseFloat(buyPrice);
    const sp = parseFloat(sellPrice);
    const qty = parseFloat(quantity);
    const bf = parseFloat(buyFee);
    const sf = parseFloat(sellFee);

    if (isNaN(bp) || bp < 0 || isNaN(sp) || sp < 0 || isNaN(qty) || qty <= 0 || isNaN(bf) || bf < 0 || isNaN(sf) || sf < 0) {
      setError("Valid inputs required: Prices (>=0), Quantity (>0), Fees (>=0)."); return;
    }

    const costOfPurchase = bp * qty + bf;
    const proceedsFromSale = sp * qty - sf;
    const profitLoss = proceedsFromSale - costOfPurchase;
    const roi = costOfPurchase > 0 ? (profitLoss / costOfPurchase) * 100 : (proceedsFromSale > 0 ? Infinity : 0);

    setTotalCost(costOfPurchase.toFixed(2));
    setTotalProceeds(proceedsFromSale.toFixed(2));
    setNetProfitLoss(profitLoss.toFixed(2));
    setReturnPercent(isFinite(roi) ? roi.toFixed(2) : "N/A (Infinite or Undefined)");
  };

  const resetForm = () => {
    setBuyPrice(''); setSellPrice(''); setQuantity(''); setBuyFee('0'); setSellFee('0');
    setTotalCost(null); setTotalProceeds(null); setNetProfitLoss(null); setReturnPercent(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Cryptocurrency Profit/Loss Calculator</AlertTitle><AlertDescription>Calculate your profit or loss from a cryptocurrency trade, including fees. Does not account for taxes.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter trade details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="buyPriceCrypto">Buy Price per Coin ($)</Label><Input id="buyPriceCrypto" type="number" value={buyPrice} onChange={e=>setBuyPrice(e.target.value)}/></div>
            <div><Label htmlFor="sellPriceCrypto">Sell Price per Coin ($)</Label><Input id="sellPriceCrypto" type="number" value={sellPrice} onChange={e=>setSellPrice(e.target.value)}/></div>
            <div><Label htmlFor="quantityCrypto">Quantity of Coins</Label><Input id="quantityCrypto" type="number" value={quantity} onChange={e=>setQuantity(e.target.value)}/></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="buyFeeCrypto">Total Buy Fee ($)</Label><Input id="buyFeeCrypto" type="number" value={buyFee} onChange={e=>setBuyFee(e.target.value)}/></div>
              <div><Label htmlFor="sellFeeCrypto">Total Sell Fee ($)</Label><Input id="sellFeeCrypto" type="number" value={sellFee} onChange={e=>setSellFee(e.target.value)}/></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateProfitLoss}>Calculate P/L</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(netProfitLoss || error) && (
          <Card>
            <CardHeader><CardDescription>Trade Analysis</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalCost && (<div className="p-1.5 bg-muted rounded-md text-sm">Total Cost Basis: <strong className="font-semibold">${totalCost}</strong></div>)}
              {totalProceeds && (<div className="p-1.5 bg-muted rounded-md text-sm">Total Proceeds from Sale: <strong className="font-semibold">${totalProceeds}</strong></div>)}
              {netProfitLoss && (<div className={`p-2 rounded-md text-sm ${parseFloat(netProfitLoss) >= 0 ? 'bg-green-500/10 text-green-700' : 'bg-red-500/10 text-red-700'}`}>Net Profit/Loss: <strong className="font-bold">${netProfitLoss}</strong></div>)}
              {returnPercent && (<div className={`flex justify-between items-center p-3 rounded-md ${parseFloat(returnPercent) >= 0 ? 'bg-primary/10' : 'bg-red-500/10'}`}><div><p className="text-sm text-muted-foreground">Return on Investment (ROI)</p><p className={`text-xl font-bold ${parseFloat(returnPercent) >=0 ? 'text-primary' : 'text-red-600'}`}>{returnPercent}%</p></div><CopyButton textToCopy={returnPercent+"%"}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CryptocurrencyProfitLossCalculator.tsx ======
==================================================

// ====== START OF FILE: CurrencyExchangeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.15 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Coins, ArrowRightLeft } from "lucide-react";

type CurrencyCode = 'USD' | 'EUR' | 'GBP' | 'JPY' | 'CAD' | 'AUD';
// Placeholder fixed exchange rates relative to USD
const placeholderRates: Record<CurrencyCode, number> = {
  USD: 1,
  EUR: 0.92, // 1 USD = 0.92 EUR
  GBP: 0.79, // 1 USD = 0.79 GBP
  JPY: 150.00, // 1 USD = 150 JPY
  CAD: 1.35, // 1 USD = 1.35 CAD
  AUD: 1.50, // 1 USD = 1.50 AUD
};

export default function CurrencyExchangeCalculator() {
  const [amount, setAmount] = useState<string>('');
  const [fromCurrency, setFromCurrency] = useState<CurrencyCode>('USD');
  const [toCurrency, setToCurrency] = useState<CurrencyCode>('EUR');

  const [convertedAmount, setConvertedAmount] = useState<string | null>(null);
  const [exchangeRateUsed, setExchangeRateUsed] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const convertCurrency = () => {
    setError(null); setConvertedAmount(null); setExchangeRateUsed(null);
    const amt = parseFloat(amount);
    if (isNaN(amt) || amt < 0) { setError('Amount must be a non-negative number.'); return; }

    const rateFromUSDTo_FromCurrency = placeholderRates[fromCurrency];
    const rateFromUSDTo_ToCurrency = placeholderRates[toCurrency];

    // Convert amount to USD first, then from USD to target currency
    const amountInUSD = amt / rateFromUSDTo_FromCurrency;
    const finalAmount = amountInUSD * rateFromUSDTo_ToCurrency;

    setConvertedAmount(finalAmount.toFixed(2));
    const effectiveRate = finalAmount / amt; // Effective rate from 'fromCurrency' to 'toCurrency'
    setExchangeRateUsed(`1 ${fromCurrency} ≈ ${effectiveRate.toFixed(4)} ${toCurrency} (Placeholder Rate)`);
  };

  const resetForm = () => {
    setAmount(''); setFromCurrency('USD'); setToCurrency('EUR');
    setConvertedAmount(null); setExchangeRateUsed(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4"/>
        <AlertTitle>Placeholder Exchange Rates</AlertTitle>
        <AlertDescription>
          This calculator uses <strong className="font-semibold">fixed, illustrative exchange rates for demonstration only</strong>. Actual market rates fluctuate constantly. For real transactions, consult a bank or currency exchange service.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Convert between currencies.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="amountCurrency">Amount to Convert</Label><Input id="amountCurrency" type="number" value={amount} onChange={e=>setAmount(e.target.value)} placeholder="e.g., 100"/></div>
            <div className="grid grid-cols-[1fr_auto_1fr] gap-2 items-center">
              <div><Label htmlFor="fromCurr">From</Label><Select value={fromCurrency} onValueChange={(v:CurrencyCode)=>setFromCurrency(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.keys(placeholderRates).map(c=><SelectItem key={`from-${c}`} value={c}>{c}</SelectItem>)}</SelectContent></Select></div>
              <ArrowRightLeft className="h-5 w-5 text-muted-foreground self-end mb-2"/>
              <div><Label htmlFor="toCurr">To</Label><Select value={toCurrency} onValueChange={(v:CurrencyCode)=>setToCurrency(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.keys(placeholderRates).map(c=><SelectItem key={`to-${c}`} value={c}>{c}</SelectItem>)}</SelectContent></Select></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={convertCurrency}>Convert</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(convertedAmount || error) && (
          <Card>
            <CardHeader><CardDescription>Conversion Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {exchangeRateUsed && (<div className="p-1.5 bg-muted rounded-md text-xs mb-2">{exchangeRateUsed}</div>)}
              {convertedAmount && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">{amount} {fromCurrency} ≈</p><p className="text-2xl font-bold text-primary">{convertedAmount} {toCurrency}</p></div><CopyButton textToCopy={convertedAmount}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CurrencyExchangeCalculator.tsx ======
==================================================

// ====== START OF FILE: CyclingSpeedCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.53 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Bike } from "lucide-react";

export default function CyclingSpeedCalculator() {
  const [distance, setDistance] = useState<string>('');
  const [timeHours, setTimeHours] = useState<string>('');
  const [timeMinutes, setTimeMinutes] = useState<string>('');
  const [distanceUnit, setDistanceUnit] = useState<'km' | 'miles'>('km');
  const [speedUnit, setSpeedUnit] = useState<'kmh' | 'mph'>('kmh');

  const [speed, setSpeed] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateSpeed = () => {
    setError(null);
    setSpeed(null);

    const dist = parseFloat(distance);
    const hours = parseFloat(timeHours) || 0;
    const minutes = parseFloat(timeMinutes) || 0;

    if (isNaN(dist) || dist <= 0) {
      setError('Please enter a valid positive distance.');
      return;
    }
    if ((isNaN(hours) && isNaN(minutes)) || (hours < 0 || minutes < 0) || (hours === 0 && minutes === 0)) {
      setError('Please enter a valid positive time (hours and/or minutes).');
      return;
    }
    
    const totalTimeHours = hours + (minutes / 60);
    if (totalTimeHours <= 0) {
         setError('Total time must be positive.');
         return;
    }

    let speedInBaseUnit: number; // Base unit km/h
    if (distanceUnit === 'km') {
      speedInBaseUnit = dist / totalTimeHours;
    } else { // miles
      speedInBaseUnit = (dist * 1.60934) / totalTimeHours; // Convert miles to km first
    }

    let displaySpeed: number;
    if (speedUnit === 'kmh') {
      displaySpeed = speedInBaseUnit;
    } else { // mph
      displaySpeed = speedInBaseUnit / 1.60934; // Convert km/h to mph
    }
    
    setSpeed(displaySpeed.toFixed(2));
  };

  const resetForm = () => {
    setDistance('');
    setTimeHours('');
    setTimeMinutes('');
    setSpeed(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate your average cycling speed.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
                <div>
                    <Label htmlFor="distance">Distance</Label>
                    <Input id="distance" type="number" value={distance} onChange={(e) => setDistance(e.target.value)} placeholder="e.g., 25" />
                </div>
                <div>
                    <Label htmlFor="distanceUnit">Unit</Label>
                    <Select value={distanceUnit} onValueChange={(v: 'km' | 'miles')=>setDistanceUnit(v)}>
                        <SelectTrigger><SelectValue/></SelectTrigger>
                        <SelectContent>
                            <SelectItem value="km">Kilometers (km)</SelectItem>
                            <SelectItem value="miles">Miles</SelectItem>
                        </SelectContent>
                    </Select>
                </div>
            </div>
            <Label>Time Taken</Label>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Input type="number" value={timeHours} onChange={(e) => setTimeHours(e.target.value)} placeholder="Hours" aria-label="Hours"/>
              </div>
              <div>
                <Input type="number" value={timeMinutes} onChange={(e) => setTimeMinutes(e.target.value)} placeholder="Minutes" aria-label="Minutes"/>
              </div>
            </div>
             <div>
                <Label htmlFor="speedUnit">Desired Speed Unit</Label>
                <Select value={speedUnit} onValueChange={(v: 'kmh' | 'mph')=>setSpeedUnit(v)}>
                    <SelectTrigger><SelectValue/></SelectTrigger>
                    <SelectContent>
                        <SelectItem value="kmh">km/h</SelectItem>
                        <SelectItem value="mph">mph</SelectItem>
                    </SelectContent>
                </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateSpeed}>Calculate Speed</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(speed || error) && (
          <Card>
            <CardHeader><CardDescription>Average Speed</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {speed && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Average Speed</p><p className="text-3xl font-bold text-primary">{speed} <span className="text-lg">{speedUnit}</span></p></div>
                  <CopyButton textToCopy={`${speed} ${speedUnit}`} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: CyclingSpeedCalculator.tsx ======
==================================================

// ====== START OF FILE: DailyWaterIntakeCalculatorGeneralGuideline.tsx ======
// File converted from TSX to TXT
// Original size: 5.26 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, GlassWater } from "lucide-react";

type WeightUnitWater = 'kg' | 'lb';
type ActivityLevelWater = 'sedentary' | 'light' | 'moderate' | 'active' | 'very_active';

const activityFactors: Record<ActivityLevelWater, number> = {
  sedentary: 0,    // Base intake
  light: 350,      // Add ~350ml / ~12oz
  moderate: 700,   // Add ~700ml / ~24oz
  active: 1050,    // Add ~1050ml / ~35oz
  very_active: 1400// Add ~1400ml / ~47oz
};

export default function DailyWaterIntakeCalculatorGeneralGuideline() {
  const [weight, setWeight] = useState<string>('');
  const [weightUnit, setWeightUnit] = useState<WeightUnitWater>('kg');
  const [activityLevel, setActivityLevel] = useState<ActivityLevelWater>('light');

  const [recommendedIntakeMl, setRecommendedIntakeMl] = useState<string | null>(null);
  const [recommendedIntakeOz, setRecommendedIntakeOz] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateWaterIntake = () => {
    setError(null); setRecommendedIntakeMl(null); setRecommendedIntakeOz(null);
    const w = parseFloat(weight);
    if (isNaN(w) || w <= 0) {
      setError('Please enter a valid positive body weight.');
      return;
    }

    let weightInKg = w;
    if (weightUnit === 'lb') {
      weightInKg = w * 0.453592; // Convert lbs to kg
    }

    // General guideline: 30-35 ml per kg. Let's use 33ml/kg as a base.
    let baseIntakeMl = weightInKg * 33;
    baseIntakeMl += activityFactors[activityLevel];
    
    // Convert to ounces (1 fl oz = 29.5735 ml)
    const intakeOz = baseIntakeMl / 29.5735;

    setRecommendedIntakeMl(baseIntakeMl.toFixed(0));
    setRecommendedIntakeOz(intakeOz.toFixed(0));
  };

  const resetForm = () => {
    setWeight(''); setActivityLevel('light');
    setRecommendedIntakeMl(null); setRecommendedIntakeOz(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Daily Water Intake Estimator</AlertTitle><AlertDescription>Estimate your recommended daily fluid intake based on weight and activity level. These are general guidelines; individual needs vary. Listen to your body and consult professionals for specific advice.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your details for estimation.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="weightWater">Body Weight</Label><Input id="weightWater" type="number" value={weight} onChange={e=>setWeight(e.target.value)} placeholder="e.g., 70 or 154"/></div>
              <div><Label htmlFor="weightUnitWater">Unit</Label><Select value={weightUnit} onValueChange={(v:WeightUnitWater)=>setWeightUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="kg">Kilograms (kg)</SelectItem><SelectItem value="lb">Pounds (lb)</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="activityLevelWater">Activity Level</Label><Select value={activityLevel} onValueChange={(v:ActivityLevelWater)=>setActivityLevel(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                {Object.keys(activityFactors).map(lvl => <SelectItem key={lvl} value={lvl} className="capitalize">{lvl.replace('_', ' ')}</SelectItem>)}
            </SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateWaterIntake}>Calculate Intake</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(recommendedIntakeMl || error) && (
          <Card>
            <CardHeader><CardDescription>Recommended Daily Water Intake</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {recommendedIntakeMl && recommendedIntakeOz && (
                <div className="p-3 bg-primary/10 rounded-md text-center">
                  <p className="text-sm text-muted-foreground">Estimated Daily Need</p>
                  <p className="text-2xl font-bold text-primary">{recommendedIntakeMl} mL / {recommendedIntakeOz} fl oz</p>
                  <CopyButton textToCopy={`${recommendedIntakeMl} mL / ${recommendedIntakeOz} fl oz`} className="mt-2"/>
                </div>
              )}
              <AlertDescription className="text-xs pt-2 mt-2">Includes water from all beverages and food. Drink when thirsty.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: DailyWaterIntakeCalculatorGeneralGuideline.tsx ======
==================================================

// ====== START OF FILE: DataStorageUnitConverter.tsx ======
// File converted from TSX to TXT
// Original size: 4.85 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, HardDrive } from "lucide-react";

type StorageUnit = 'B' | 'KB' | 'MB' | 'GB' | 'TB' | 'PB';

// Conversion factors to Bytes (base unit)
const toBytesFactors: Record<StorageUnit, number> = {
  B: 1,
  KB: 1024,
  MB: 1024 * 1024,
  GB: 1024 * 1024 * 1024,
  TB: 1024 * 1024 * 1024 * 1024,
  PB: 1024 * 1024 * 1024 * 1024 * 1024,
};

// Conversion factors from Bytes
const fromBytesFactors: Record<StorageUnit, number> = {
  B: 1,
  KB: 1 / 1024,
  MB: 1 / (1024 * 1024),
  GB: 1 / (1024 * 1024 * 1024),
  TB: 1 / (1024 * 1024 * 1024 * 1024),
  PB: 1 / (1024 * 1024 * 1024 * 1024 * 1024),
};


export default function DataStorageUnitConverter() {
  const [inputValue, setInputValue] = useState<string>('1');
  const [fromUnit, setFromUnit] = useState<StorageUnit>('GB');
  const [toUnit, setToUnit] = useState<StorageUnit>('MB');
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const convertStorage = () => {
    setError(null); setResult(null);
    const val = parseFloat(inputValue);
    if (isNaN(val) || val < 0) { setError('Input value must be a non-negative number.'); return; }

    if (fromUnit === toUnit) { setResult(val.toFixed(val % 1 === 0 ? 0 : 4)); return; } 

    const valueInBytes = val * toBytesFactors[fromUnit];
    const convertedValue = valueInBytes * fromBytesFactors[toUnit];
    
    let precision = 4;
    if ( (fromUnit === 'TB' && (toUnit === 'GB' || toUnit === 'MB')) ||
         (fromUnit === 'PB' && (toUnit === 'TB' || toUnit === 'GB')) ||
         (fromUnit === 'GB' && toUnit === 'MB') ) {
      precision = convertedValue % 1 === 0 ? 0 : 2;
    } else if ( (toUnit === 'TB' || toUnit === 'PB') && convertedValue < 1 && convertedValue > 0) {
        precision = 6; 
    }


    setResult(convertedValue.toFixed(precision));
  };

  const resetForm = () => {
    setInputValue('1'); setFromUnit('GB'); setToUnit('MB');
    setResult(null); setError(null);
  };
  
  const unitOptions = Object.keys(toBytesFactors) as StorageUnit[];

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Data Storage Unit Converter</AlertTitle><AlertDescription>Convert between common digital data storage units (Bytes, KB, MB, GB, TB, PB). Uses binary prefixes (1 KB = 1024 Bytes).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter value and select units.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="inputValueStorage">Value</Label><Input id="inputValueStorage" type="number" value={inputValue} onChange={e=>setInputValue(e.target.value)} placeholder="e.g., 1024"/></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="fromUnitStorage">From Unit</Label><Select value={fromUnit} onValueChange={(v:StorageUnit)=>setFromUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{unitOptions.map(u=><SelectItem key={`from-${u}`} value={u}>{u}</SelectItem>)}</SelectContent></Select></div>
              <div><Label htmlFor="toUnitStorage">To Unit</Label><Select value={toUnit} onValueChange={(v:StorageUnit)=>setToUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{unitOptions.map(u=><SelectItem key={`to-${u}`} value={u}>{u}</SelectItem>)}</SelectContent></Select></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={convertStorage}>Convert</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Converted Value</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">{inputValue} {fromUnit} is</p><p className="text-2xl font-bold text-primary">{result} {toUnit}</p></div><CopyButton textToCopy={`${result} ${toUnit}`}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: DataStorageUnitConverter.tsx ======
==================================================

// ====== START OF FILE: DateCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.42 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { format, addDays, subDays, addWeeks, subWeeks, addMonths, subMonths, addYears, subYears, isValid } from 'date-fns';
import { cn } from '@/lib/utils';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CalendarPlus, CalendarCheck2 } from "lucide-react";

type DateOperation = 'add' | 'subtract';
type DateUnit = 'days' | 'weeks' | 'months' | 'years';

export default function DateCalculator() {
  const [startDate, setStartDate] = useState<Date | undefined>(new Date());
  const [operation, setOperation] = useState<DateOperation>('add');
  const [amount, setAmount] = useState<string>('1');
  const [unit, setUnit] = useState<DateUnit>('days');

  const [resultDate, setResultDate] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateNewDate = () => {
    setError(null);
    setResultDate(null);

    if (!startDate || !isValid(startDate)) {
      setError('Please select a valid start date.');
      return;
    }
    const numAmount = parseInt(amount);
    if (isNaN(numAmount) || numAmount < 0) {
      setError('Please enter a valid non-negative amount to add or subtract.');
      return;
    }

    let calculatedDate: Date;
    switch (unit) {
      case 'days':
        calculatedDate = operation === 'add' ? addDays(startDate, numAmount) : subDays(startDate, numAmount);
        break;
      case 'weeks':
        calculatedDate = operation === 'add' ? addWeeks(startDate, numAmount) : subWeeks(startDate, numAmount);
        break;
      case 'months':
        calculatedDate = operation === 'add' ? addMonths(startDate, numAmount) : subMonths(startDate, numAmount);
        break;
      case 'years':
        calculatedDate = operation === 'add' ? addYears(startDate, numAmount) : subYears(startDate, numAmount);
        break;
      default:
        setError('Invalid unit selected.');
        return;
    }
    setResultDate(format(calculatedDate, "PPP")); // PPP is like "Jan 1, 2023"
  };

  const resetForm = () => {
    setStartDate(new Date());
    setOperation('add');
    setAmount('1');
    setUnit('days');
    setResultDate(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Date Calculations</AlertTitle>
        <AlertDescription>
          Add or subtract days, weeks, months, or years from a specified date.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter date and duration.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="startDate">Start Date</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button id="startDate" variant={"outline"} className={cn("w-full justify-start text-left font-normal", !startDate && "text-muted-foreground")}>
                    <CalendarCheck2 className="mr-2 h-4 w-4" />
                    {startDate ? format(startDate, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={startDate} onSelect={setStartDate} initialFocus /></PopoverContent>
              </Popover>
            </div>
            <div className="grid grid-cols-3 gap-2 items-end">
              <div className="col-span-1">
                <Label htmlFor="operation">Operation</Label>
                <Select value={operation} onValueChange={(v: DateOperation) => setOperation(v)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="add">Add</SelectItem>
                    <SelectItem value="subtract">Subtract</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="col-span-1">
                <Label htmlFor="amount">Amount</Label>
                <Input id="amount" type="number" value={amount} onChange={(e) => setAmount(e.target.value)} placeholder="e.g., 7" />
              </div>
              <div className="col-span-1">
                <Label htmlFor="unit">Unit</Label>
                <Select value={unit} onValueChange={(v: DateUnit) => setUnit(v)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="days">Days</SelectItem>
                    <SelectItem value="weeks">Weeks</SelectItem>
                    <SelectItem value="months">Months</SelectItem>
                    <SelectItem value="years">Years</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateNewDate}>Calculate Date</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(resultDate || error) && (
          <Card>
            <CardHeader><CardDescription>Resulting Date</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {resultDate && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">New Date</p><p className="text-3xl font-bold text-primary">{resultDate}</p></div>
                  <CopyButton textToCopy={resultDate} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: DateCalculator.tsx ======
==================================================

// ====== START OF FILE: DayCounter.tsx ======
// File converted from TSX to TXT
// Original size: 5.65 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { format, differenceInDays, differenceInWeeks, differenceInMonths, differenceInYears, isValid } from 'date-fns';
import { cn } from '@/lib/utils';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CalendarRange, CalendarCheck2 } from "lucide-react";

interface Duration {
  days: number;
  weeks: number;
  months: number;
  years: number;
}

export default function DayCounter() {
  const [startDate, setStartDate] = useState<Date | undefined>(undefined);
  const [endDate, setEndDate] = useState<Date | undefined>(new Date());
  
  const [duration, setDuration] = useState<Duration | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateDuration = () => {
    setError(null);
    setDuration(null);

    if (!startDate || !isValid(startDate) || !endDate || !isValid(endDate)) {
      setError('Please select valid start and end dates.');
      return;
    }
    if (startDate > endDate) {
        setError('Start date must be before or the same as the end date.');
        return;
    }

    const days = differenceInDays(endDate, startDate);
    const weeks = differenceInWeeks(endDate, startDate);
    const months = differenceInMonths(endDate, startDate);
    const years = differenceInYears(endDate, startDate);

    setDuration({ days, weeks, months, years });
  };

  const resetForm = () => {
    setStartDate(undefined);
    setEndDate(new Date());
    setDuration(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Duration Between Dates</AlertTitle>
        <AlertDescription>
          Calculate the number of days, weeks, months, and years between two dates.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Select the start and end dates.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="dcStartDate">Start Date</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button id="dcStartDate" variant={"outline"} className={cn("w-full justify-start text-left font-normal", !startDate && "text-muted-foreground")}>
                    <CalendarCheck2 className="mr-2 h-4 w-4" />
                    {startDate ? format(startDate, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={startDate} onSelect={setStartDate} initialFocus /></PopoverContent>
              </Popover>
            </div>
            <div>
              <Label htmlFor="dcEndDate">End Date</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button id="dcEndDate" variant={"outline"} className={cn("w-full justify-start text-left font-normal", !endDate && "text-muted-foreground")}>
                    <CalendarCheck2 className="mr-2 h-4 w-4" />
                    {endDate ? format(endDate, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={endDate} onSelect={setEndDate} initialFocus /></PopoverContent>
              </Popover>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateDuration}>Calculate Duration</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(duration || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Duration</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {duration && (
                <>
                  <div className="p-2 bg-primary/10 rounded-md">
                    <p className="text-sm text-muted-foreground">Total Days</p>
                    <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{duration.days.toLocaleString()} days</p><CopyButton textToCopy={duration.days.toString()} size="sm" variant="ghost"/></div>
                  </div>
                  <div className="grid grid-cols-1 sm:grid-cols-3 gap-2 text-sm">
                    <div className="p-2 bg-muted rounded-md"><p className="text-muted-foreground">Weeks</p><p className="font-semibold">{duration.weeks.toLocaleString()}</p></div>
                    <div className="p-2 bg-muted rounded-md"><p className="text-muted-foreground">Months</p><p className="font-semibold">{duration.months.toLocaleString()}</p></div>
                    <div className="p-2 bg-muted rounded-md"><p className="text-muted-foreground">Years</p><p className="font-semibold">{duration.years.toLocaleString()}</p></div>
                  </div>
                </>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: DayCounter.tsx ======
==================================================

// ====== START OF FILE: DayOfTheWeekCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.63 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { format, isValid } from 'date-fns';
import { cn } from '@/lib/utils';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CalendarSearch, CalendarCheck2 } from "lucide-react";

export default function DayOfTheWeekCalculator() {
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());
  const [dayOfWeek, setDayOfWeek] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const findDayOfWeek = () => {
    setError(null);
    setDayOfWeek(null);

    if (!selectedDate || !isValid(selectedDate)) {
      setError('Please select a valid date.');
      return;
    }
    // EEEE gives full day name e.g., "Monday"
    setDayOfWeek(format(selectedDate, "EEEE"));
  };

  const resetForm = () => {
    setSelectedDate(new Date());
    setDayOfWeek(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Find Day of the Week</AlertTitle>
        <AlertDescription>
          Select any date to find out which day of the week it falls/fell on.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Choose a date.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="selectedDate">Date</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button id="selectedDate" variant={"outline"} className={cn("w-full justify-start text-left font-normal", !selectedDate && "text-muted-foreground")}>
                    <CalendarCheck2 className="mr-2 h-4 w-4" />
                    {selectedDate ? format(selectedDate, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={selectedDate} onSelect={setSelectedDate} initialFocus captionLayout="dropdown-buttons" fromYear={1900} toYear={2100}/></PopoverContent>
              </Popover>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={findDayOfWeek}>Find Day</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(dayOfWeek || error) && (
          <Card>
            <CardHeader><CardDescription>Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {dayOfWeek && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Day of the Week</p><p className="text-3xl font-bold text-primary">{dayOfWeek}</p></div>
                  <CopyButton textToCopy={dayOfWeek} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: DayOfTheWeekCalculator.tsx ======
==================================================

// ====== START OF FILE: DebtConsolidationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8.87 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Library, PlusCircle, Trash2 } from "lucide-react";

interface DebtItem {
  id: string;
  name: string;
  balance: number;
  apr: number; // Percentage
  monthlyPayment: number;
}

export default function DebtConsolidationCalculator() {
  const [debts, setDebts] = useState<DebtItem[]>([{ id: crypto.randomUUID(), name: 'Credit Card 1', balance: 0, apr: 0, monthlyPayment: 0 }]);
  const [consolidationLoanApr, setConsolidationLoanApr] = useState<string>(''); // Percentage
  const [consolidationLoanTerm, setConsolidationLoanTerm] = useState<string>(''); // Months

  const [currentTotalMonthlyPayment, setCurrentTotalMonthlyPayment] = useState<string | null>(null);
  const [consolidatedMonthlyPayment, setConsolidatedMonthlyPayment] = useState<string | null>(null);
  const [potentialSavings, setPotentialSavings] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleDebtChange = (id: string, field: keyof Omit<DebtItem, 'id'>, value: string) => {
    setDebts(prev => prev.map(d => d.id === id ? { ...d, [field]: parseFloat(value) || 0 } : d));
    // Reset results when inputs change
    setCurrentTotalMonthlyPayment(null);
    setConsolidatedMonthlyPayment(null);
    setPotentialSavings(null);
    setError(null);
  };

  const addDebt = () => setDebts(prev => [...prev, { id: crypto.randomUUID(), name: `Debt ${prev.length + 1}`, balance: 0, apr: 0, monthlyPayment: 0 }]);
  const removeDebt = (id: string) => {
      if (debts.length > 1) {
          setDebts(prev => prev.filter(d => d.id !== id));
      }
  };

  const calculateConsolidation = () => {
    setError(null);
    setCurrentTotalMonthlyPayment(null);
    setConsolidatedMonthlyPayment(null);
    setPotentialSavings(null);

    const totalDebtBalance = debts.reduce((sum, d) => sum + d.balance, 0);
    const consApr = parseFloat(consolidationLoanApr) / 100;
    const consTerm = parseInt(consolidationLoanTerm);

    if (totalDebtBalance <= 0) {
      setError('Total debt balance must be positive. Add at least one debt with a balance.');
      return;
    }
    if (isNaN(consApr) || consApr < 0 || isNaN(consTerm) || consTerm <= 0) {
      setError('Please enter valid consolidation loan APR and term (months).');
      return;
    }

    const currentTotalPmts = debts.reduce((sum, debt) => sum + debt.monthlyPayment, 0);
    setCurrentTotalMonthlyPayment(currentTotalPmts.toFixed(2));
    
    // Calculate consolidated monthly payment
    const monthlyRateCons = consApr / 12;
    let consolidatedPmt;
    if (monthlyRateCons === 0) {
        consolidatedPmt = totalDebtBalance / consTerm;
    } else {
        consolidatedPmt = totalDebtBalance * (monthlyRateCons * Math.pow(1 + monthlyRateCons, consTerm)) / (Math.pow(1 + monthlyRateCons, consTerm) - 1);
    }
    
    if (isNaN(consolidatedPmt) || !isFinite(consolidatedPmt)) {
        setError("Could not calculate consolidated payment. Check loan terms.");
        return;
    }
    setConsolidatedMonthlyPayment(consolidatedPmt.toFixed(2));
    
    const savings = currentTotalPmts - consolidatedPmt;
    setPotentialSavings(savings.toFixed(2));
  };

  const resetForm = () => {
    setDebts([{ id: crypto.randomUUID(), name: 'Credit Card 1', balance: 0, apr: 0, monthlyPayment: 0 }]);
    setConsolidationLoanApr('');
    setConsolidationLoanTerm('');
    setCurrentTotalMonthlyPayment(null);
    setConsolidatedMonthlyPayment(null);
    setPotentialSavings(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Debt Consolidation Estimator</AlertTitle><AlertDescription>
          Compare your current total monthly debt payments with a potential consolidated loan. This is a simplified estimate. Actual savings depend on many factors including original loan terms and fees.
        </AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          <Card>
            <CardHeader><CardTitle className="font-headline">Your Current Debts</CardTitle></CardHeader>
            <CardContent className="space-y-3">
              {debts.map((debt, index) => (
                <div key={debt.id} className="p-3 border rounded-md space-y-2">
                  <div className="flex justify-between items-center">
                    <Input type="text" placeholder={`Debt ${index+1} Name`} value={debt.name} onChange={e => handleDebtChange(debt.id, 'name', e.target.value)} className="h-8 text-sm font-semibold"/>
                    {debts.length > 1 && <Button variant="ghost" size="icon" onClick={() => removeDebt(debt.id)} className="h-8 w-8"><Trash2 className="h-4 w-4 text-destructive" /></Button>}
                  </div>
                  <div className="grid grid-cols-3 gap-2">
                    <div><Label htmlFor={`bal-${debt.id}`} className="text-xs">Balance ($)</Label><Input id={`bal-${debt.id}`} type="number" value={debt.balance || ''} onChange={e => handleDebtChange(debt.id, 'balance', e.target.value)} placeholder="0" /></div>
                    <div><Label htmlFor={`apr-${debt.id}`} className="text-xs">APR (%)</Label><Input id={`apr-${debt.id}`} type="number" value={debt.apr || ''} onChange={e => handleDebtChange(debt.id, 'apr', e.target.value)} placeholder="0"/></div>
                    <div><Label htmlFor={`pmt-${debt.id}`} className="text-xs">Payment ($)</Label><Input id={`pmt-${debt.id}`} type="number" value={debt.monthlyPayment || ''} onChange={e => handleDebtChange(debt.id, 'monthlyPayment', e.target.value)} placeholder="0"/></div>
                  </div>
                </div>
              ))}
              <Button variant="outline" size="sm" onClick={addDebt}><PlusCircle className="mr-2 h-4 w-4" /> Add Debt</Button>
            </CardContent>
          </Card>
          <Card>
            <CardHeader><CardTitle className="font-headline">Consolidation Loan Terms</CardTitle></CardHeader>
            <CardContent className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="consApr">New Loan APR (%)</Label><Input id="consApr" type="number" value={consolidationLoanApr} onChange={e => setConsolidationLoanApr(e.target.value)} placeholder="e.g., 8.9" /></div>
              <div><Label htmlFor="consTerm">New Loan Term (Months)</Label><Input id="consTerm" type="number" value={consolidationLoanTerm} onChange={e => setConsolidationLoanTerm(e.target.value)} placeholder="e.g., 60" /></div>
            </CardContent>
          </Card>
        </div>

        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Consolidation Summary</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {currentTotalMonthlyPayment && (
              <div className="p-2 bg-muted rounded-md">
                <p className="text-sm text-muted-foreground">Current Total Monthly Payments</p>
                <p className="font-semibold">${currentTotalMonthlyPayment}</p>
              </div>
            )}
            {consolidatedMonthlyPayment && (
              <div className="p-2 bg-primary/10 rounded-md">
                <p className="text-sm text-muted-foreground">New Consolidated Monthly Payment</p>
                <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">${consolidatedMonthlyPayment}</p><CopyButton textToCopy={consolidatedMonthlyPayment} size="sm" variant="ghost"/></div>
              </div>
            )}
            {potentialSavings && (
              <div className={`p-2 rounded-md ${parseFloat(potentialSavings) >= 0 ? 'bg-green-500/10 text-green-700' : 'bg-red-500/10 text-red-700'}`}>
                <p className="text-sm">Potential Monthly {parseFloat(potentialSavings) >=0 ? 'Savings' : 'Increase'}</p>
                <p className="font-semibold">${Math.abs(parseFloat(potentialSavings)).toFixed(2)}</p>
              </div>
            )}
            <AlertDescription className="text-xs pt-2">
                Note: This calculation focuses on monthly payment changes. Total interest paid over the life of loans can vary significantly. Consider loan terms and any fees.
            </AlertDescription>
          </CardContent>
          <CardFooter>
            <Button onClick={calculateConsolidation} className="w-full">Analyze Consolidation</Button>
          </CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: DebtConsolidationCalculator.tsx ======
==================================================

// ====== START OF FILE: DebtPayoffCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.38 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, TrendingDown } from "lucide-react";

export default function DebtPayoffCalculator() {
  const [debtBalance, setDebtBalance] = useState<string>('');
  const [annualInterestRate, setAnnualInterestRate] = useState<string>('');
  const [monthlyPayment, setMonthlyPaymentAmount] = useState<string>('');

  const [timeToPayoff, setTimeToPayoff] = useState<string | null>(null); // In months
  const [totalInterest, setTotalInterestPaid] = useState<string | null>(null);
  const [totalPaid, setTotalPaid] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateDebtPayoff = () => {
    setError(null);
    setTimeToPayoff(null);
    setTotalInterestPaid(null);
    setTotalPaid(null);

    const B = parseFloat(debtBalance);
    const annualRate = parseFloat(annualInterestRate) / 100;
    const P = parseFloat(monthlyPayment);

    if (isNaN(B) || B <= 0 || isNaN(annualRate) || annualRate < 0 || isNaN(P) || P <= 0) {
      setError('Please enter valid positive numbers for balance, APR, and monthly payment.');
      return;
    }

    const monthlyRate = annualRate / 12;

    if (monthlyRate > 0 && P <= B * monthlyRate) {
      setError('Monthly payment must be greater than the monthly interest to pay off the debt. Increase payment or check APR.');
      return;
    }
    
    let numMonths;
     if (monthlyRate === 0) { // 0% interest
        numMonths = B / P;
    } else {
        // N = -log(1 - (B * i) / P) / log(1 + i)
        numMonths = -(Math.log(1 - (B * monthlyRate) / P)) / Math.log(1 + monthlyRate);
    }

    if (isNaN(numMonths) || !isFinite(numMonths) || numMonths <= 0) {
        setError("Could not calculate payoff time. Ensure payment covers interest.");
        return;
    }
    
    const numMonthsCeil = Math.ceil(numMonths);
    const calculatedTotalPaid = P * numMonths; // Use precise numMonths for total paid calculation before ceiling for display
    const calculatedTotalInterest = calculatedTotalPaid - B;

    setTimeToPayoff(`${numMonthsCeil} months`);
    setTotalInterestPaid(calculatedTotalInterest.toFixed(2));
    // Total paid should ideally reflect the final payment if it's less than P
    // For simplicity, if numMonths is not integer, last payment will be smaller
    // Total repayment = (P * (numMonthsCeil - 1)) + (B - P_sum_for_N-1_months_principal)
    // Simpler: total paid is just P * numMonths (precise) or reflect the true amount paid.
    // If numMonthsCeil is used for total paid (P * numMonthsCeil), it overestimates slightly if last payment is partial.
    // Let's use the more accurate totalPaid before ceiling months.
    setTotalPaid(calculatedTotalPaid.toFixed(2));
  };

  const resetForm = () => {
    setDebtBalance('');
    setAnnualInterestRate('');
    setMonthlyPaymentAmount('');
    setTimeToPayoff(null);
    setTotalInterestPaid(null);
    setTotalPaid(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Debt Payoff Estimator</AlertTitle>
        <AlertDescription>
          Calculate how long it will take to pay off a debt and the total interest you'll pay. This assumes fixed payments and interest rate.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your debt information.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="debtBalance">Total Debt Balance ($)</Label>
              <Input id="debtBalance" type="number" value={debtBalance} onChange={(e) => setDebtBalance(e.target.value)} placeholder="e.g., 10000" />
            </div>
            <div>
              <Label htmlFor="annualInterestRate">Annual Interest Rate (APR %)</Label>
              <Input id="annualInterestRate" type="number" value={annualInterestRate} onChange={(e) => setAnnualInterestRate(e.target.value)} placeholder="e.g., 7.5" />
            </div>
            <div>
              <Label htmlFor="monthlyPaymentAmount">Monthly Payment ($)</Label>
              <Input id="monthlyPaymentAmount" type="number" value={monthlyPayment} onChange={(e) => setMonthlyPaymentAmount(e.target.value)} placeholder="e.g., 250" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateDebtPayoff}>Calculate Payoff</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(timeToPayoff || error) && (
          <Card>
            <CardHeader><CardDescription>Payoff Summary</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {timeToPayoff && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Time to Pay Off Debt</p>
                  <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{timeToPayoff}</p><CopyButton textToCopy={timeToPayoff} size="sm" variant="ghost"/></div>
                </div>
              )}
              {totalInterest && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Total Interest Paid</p>
                  <p className="font-semibold">${totalInterest}</p>
                </div>
              )}
              {totalPaid && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Total Amount Paid</p>
                  <p className="font-semibold">${totalPaid}</p>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: DebtPayoffCalculator.tsx ======
==================================================

// ====== START OF FILE: DebtToIncomeRatioCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8.47 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Ratio, PlusCircle, Trash2 } from "lucide-react";

interface IncomeItem {
  id: string;
  name: string;
  amount: number;
}

interface DebtItem {
  id: string;
  name: string;
  monthlyPayment: number;
}

export default function DebtToIncomeRatioCalculator() {
  const [incomeItems, setIncomeItems] = useState<IncomeItem[]>([{ id: crypto.randomUUID(), name: 'Gross Monthly Income', amount: 0 }]);
  const [debtItems, setDebtItems] = useState<DebtItem[]>([{ id: crypto.randomUUID(), name: 'Mortgage/Rent', monthlyPayment: 0 }]);
  
  const [dtiRatio, setDtiRatio] = useState<string | null>(null);
  const [totalMonthlyIncome, setTotalMonthlyIncome] = useState<number | null>(null);
  const [totalMonthlyDebtPayments, setTotalMonthlyDebtPayments] = useState<number | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleItemChange = (type: 'income' | 'debt', id: string, field: 'name' | 'amount' | 'monthlyPayment', value: string) => {
    const numericValue = parseFloat(value) || 0;
    if (type === 'income') {
      setIncomeItems(prev => prev.map(item => item.id === id ? { ...item, [field]: field === 'name' ? value : numericValue } : item));
    } else {
      setDebtItems(prev => prev.map(item => item.id === id ? { ...item, [field]: field === 'name' ? value : numericValue } : item));
    }
  };

  const addItem = (type: 'income' | 'debt') => {
    if (type === 'income') {
      setIncomeItems(prev => [...prev, { id: crypto.randomUUID(), name: '', amount: 0 }]);
    } else {
      setDebtItems(prev => [...prev, { id: crypto.randomUUID(), name: '', monthlyPayment: 0 }]);
    }
  };

  const removeItem = (type: 'income' | 'debt', id: string) => {
    if (type === 'income') {
      setIncomeItems(prev => prev.filter(item => item.id !== id));
    } else {
      setDebtItems(prev => prev.filter(item => item.id !== id));
    }
  };

  const calculateDti = () => {
    setError(null);
    setDtiRatio(null);
    setTotalMonthlyIncome(null);
    setTotalMonthlyDebtPayments(null);

    const currentTotalIncome = incomeItems.reduce((sum, item) => sum + item.amount, 0);
    const currentTotalDebts = debtItems.reduce((sum, item) => sum + item.monthlyPayment, 0);

    setTotalMonthlyIncome(currentTotalIncome);
    setTotalMonthlyDebtPayments(currentTotalDebts);

    if (currentTotalIncome <= 0) {
      setError('Total monthly income must be greater than zero to calculate DTI.');
      return;
    }
    if (currentTotalDebts < 0) {
        setError('Total monthly debt payments cannot be negative.');
        return;
    }

    const dti = (currentTotalDebts / currentTotalIncome) * 100;
    setDtiRatio(dti.toFixed(2));
  };

  const resetForm = () => {
    setIncomeItems([{ id: crypto.randomUUID(), name: 'Gross Monthly Income', amount: 0 }]);
    setDebtItems([{ id: crypto.randomUUID(), name: 'Mortgage/Rent', monthlyPayment: 0 }]);
    setDtiRatio(null);
    setTotalMonthlyIncome(null);
    setTotalMonthlyDebtPayments(null);
    setError(null);
  };
  
  const renderItems = (type: 'income' | 'debt') => {
    const items = type === 'income' ? incomeItems : debtItems;
    const fieldName = type === 'income' ? 'amount' : 'monthlyPayment';
    const placeholderName = type === 'income' ? 'Income Source' : 'Debt Payment';
    const placeholderAmount = type === 'income' ? 'Amount ($)' : 'Monthly Payment ($)';

    return (
      <div className="space-y-2">
        {items.map((item, index) => (
          <div key={item.id} className="grid grid-cols-[1fr_auto_auto] gap-2 items-center">
            <Input 
              type="text" 
              placeholder={`${placeholderName} ${index + 1}`}
              value={(item as any).name} 
              onChange={(e) => handleItemChange(type, item.id, 'name', e.target.value)}
              className="h-9"
            />
            <Input 
              type="number" 
              placeholder={placeholderAmount}
              value={(item as any)[fieldName] === 0 && (item as any).name === '' ? '' : (item as any)[fieldName].toString()}
              onChange={(e) => handleItemChange(type, item.id, fieldName as any, e.target.value)}
              className="h-9 w-32"
            />
            <Button variant="ghost" size="icon" onClick={() => removeItem(type, item.id)} disabled={items.length === 1} className="h-9 w-9">
              <Trash2 className="h-4 w-4 text-destructive" />
            </Button>
          </div>
        ))}
        <Button variant="outline" size="sm" onClick={() => addItem(type)} className="mt-2">
          <PlusCircle className="mr-2 h-4 w-4" /> Add {type === 'income' ? 'Income Source' : 'Debt Item'}
        </Button>
      </div>
    );
  };


  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Understanding DTI</AlertTitle>
        <AlertDescription>
          Your Debt-to-Income (DTI) ratio compares your total monthly debt payments to your gross monthly income. Lenders use it to assess borrowing risk. A lower DTI is generally better.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          <Card>
            <CardHeader><CardTitle className="font-headline">Monthly Income Sources</CardTitle></CardHeader>
            <CardContent>{renderItems('income')}</CardContent>
          </Card>
          <Card>
            <CardHeader><CardTitle className="font-headline">Monthly Debt Payments</CardTitle></CardHeader>
            <CardContent>{renderItems('debt')}</CardContent>
          </Card>
           <div className="flex flex-col sm:flex-row gap-2 mt-4">
             <Button onClick={calculateDti} className="flex-1">Calculate DTI Ratio</Button>
             <Button variant="outline" onClick={resetForm} className="flex-1">Reset</Button>
           </div>
        </div>

        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>DTI Ratio Summary</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {totalMonthlyIncome !== null && (
                <div className="p-2 bg-muted rounded-md">
                    <p className="text-xs text-muted-foreground">Total Gross Monthly Income</p>
                    <p className="font-semibold">${totalMonthlyIncome.toFixed(2)}</p>
                </div>
            )}
            {totalMonthlyDebtPayments !== null && (
                 <div className="p-2 bg-muted rounded-md">
                    <p className="text-xs text-muted-foreground">Total Monthly Debt Payments</p>
                    <p className="font-semibold">${totalMonthlyDebtPayments.toFixed(2)}</p>
                </div>
            )}
            {dtiRatio !== null && (
              <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                <div><p className="text-sm text-muted-foreground">Debt-to-Income (DTI) Ratio</p><p className="text-2xl font-bold text-primary">{dtiRatio}%</p></div>
                <CopyButton textToCopy={dtiRatio} />
              </div>
            )}
            <Alert variant="default" className="mt-4">
                <Info className="h-4 w-4"/>
                <AlertTitle>General DTI Guidelines:</AlertTitle>
                <AlertDescription>
                    <ul className="list-disc pl-5 text-xs">
                        <li><strong>35% or less:</strong> Looking good.</li>
                        <li><strong>36% to 43%:</strong> Manageable, but room for improvement.</li>
                        <li><strong>44% to 49%:</strong> High DTI, potential difficulty obtaining new credit.</li>
                        <li><strong>50% or more:</strong> Very high DTI, considered risky by lenders.</li>
                    </ul>
                    <p className="mt-2">These are general guidelines and lender requirements may vary.</p>
                </AlertDescription>
            </Alert>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}



// ====== END OF FILE: DebtToIncomeRatioCalculator.tsx ======
==================================================

// ====== START OF FILE: DeckingCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.21 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, LayoutPanelLeft } from "lucide-react";

type UnitSystemDeck = 'imperial' | 'metric'; // imperial: feet/inches, metric: meters/cm
type BoardOrientation = 'parallel' | 'perpendicular'; // Relative to width of deck

export default function DeckingCalculator() {
  const [units, setUnits] = useState<UnitSystemDeck>('imperial');
  const [deckLength, setDeckLength] = useState<string>('');
  const [deckWidth, setDeckWidth] = useState<string>('');
  const [boardWidth, setBoardWidth] = useState<string>(units === 'imperial' ? '5.5' : '14'); // inches or cm
  const [boardThickness, setBoardThickness] = useState<string>(units === 'imperial' ? '1' : '2.5'); // inches or cm (for info, not calc)
  const [gapBetweenBoards, setGapBetweenBoards] = useState<string>(units === 'imperial' ? '0.125' : '0.3'); // inches or cm
  const [boardOrientation, setBoardOrientation] = useState<BoardOrientation>('parallel'); // Parallel to deck LENGTH

  const [numBoards, setNumBoards] = useState<string | null>(null);
  const [totalLinearFootage, setTotalLinearFootage] = useState<string | null>(null); // Or meterage
  const [error, setError] = useState<string | null>(null);

  const calculateDecking = () => {
    setError(null); setNumBoards(null); setTotalLinearFootage(null);
    let L = parseFloat(deckLength);
    let W = parseFloat(deckWidth);
    let bW = parseFloat(boardWidth);
    let gap = parseFloat(gapBetweenBoards);

    if (isNaN(L)||L<=0||isNaN(W)||W<=0||isNaN(bW)||bW<=0||isNaN(gap)||gap<0) {
      setError("All dimensions must be positive numbers. Gap can be zero."); return;
    }

    // Convert all to consistent base unit for calculation (e.g., inches or cm)
    if (units === 'imperial') { // L, W in feet. bW, gap in inches.
      L *= 12; W *= 12; // Convert deck L/W to inches
    } else { // L, W in meters. bW, gap in cm.
      L *= 100; W *= 100; // Convert deck L/W to cm
    }
    
    const effectiveBoardWidth = bW + gap;
    let boardsCount: number;
    let totalLinearUnits: number;
    let unitLabelLinear = units === 'imperial' ? 'feet' : 'meters';
    
    if (boardOrientation === 'parallel') { // Boards run parallel to deck LENGTH
      boardsCount = Math.ceil(W / effectiveBoardWidth);
      totalLinearUnits = boardsCount * (L / (units === 'imperial' ? 12 : 100)); // Convert L back to ft/m
    } else { // Boards run perpendicular to deck LENGTH (parallel to deck WIDTH)
      boardsCount = Math.ceil(L / effectiveBoardWidth);
      totalLinearUnits = boardsCount * (W / (units === 'imperial' ? 12 : 100)); // Convert W back to ft/m
    }

    setNumBoards(boardsCount.toString());
    setTotalLinearFootage(`${totalLinearUnits.toFixed(2)} ${unitLabelLinear}`);
  };

  const resetForm = () => {
    setDeckLength(''); setDeckWidth('');
    setBoardWidth(units === 'imperial' ? '5.5' : '14');
    setGapBetweenBoards(units === 'imperial' ? '0.125' : '0.3');
    setNumBoards(null); setTotalLinearFootage(null); setError(null);
  };

  React.useEffect(() => { // Update defaults when unit system changes
    setBoardWidth(units === 'imperial' ? '5.5' : '14');
    setGapBetweenBoards(units === 'imperial' ? '0.125' : '0.3');
  }, [units]);

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Decking Calculator</AlertTitle><AlertDescription>Estimate the number of decking boards and total linear footage/meterage needed. Assumes rectangular deck.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter deck and board dimensions.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="deckUnits">Unit System</Label><Select value={units} onValueChange={(v:UnitSystemDeck)=>setUnits(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Imperial (Deck in Feet, Boards in Inches)</SelectItem><SelectItem value="metric">Metric (Deck in Meters, Boards in CM)</SelectItem></SelectContent></Select></div>
            <div className="grid grid-cols-2 gap-2">
              <div><Label htmlFor="deckL">Deck Length ({units==='imperial'?'ft':'m'})</Label><Input id="deckL" type="number" value={deckLength} onChange={e=>setDeckLength(e.target.value)}/></div>
              <div><Label htmlFor="deckW">Deck Width ({units==='imperial'?'ft':'m'})</Label><Input id="deckW" type="number" value={deckWidth} onChange={e=>setDeckWidth(e.target.value)}/></div>
            </div>
            <div className="grid grid-cols-2 gap-2">
              <div><Label htmlFor="boardW">Board Width ({units==='imperial'?'in':'cm'})</Label><Input id="boardW" type="number" value={boardWidth} onChange={e=>setBoardWidth(e.target.value)}/></div>
              <div><Label htmlFor="boardGap">Gap Between Boards ({units==='imperial'?'in':'cm'})</Label><Input id="boardGap" type="number" value={gapBetweenBoards} onChange={e=>setGapBetweenBoards(e.target.value)}/></div>
            </div>
            <div><Label htmlFor="boardOrientation">Board Orientation (relative to Deck Length)</Label><Select value={boardOrientation} onValueChange={(v:BoardOrientation)=>setBoardOrientation(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="parallel">Parallel</SelectItem><SelectItem value="perpendicular">Perpendicular</SelectItem></SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateDecking}>Calculate Decking</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(numBoards || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Decking Materials</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {numBoards && (<div className="p-2 bg-muted rounded-md text-sm">Number of Boards: <strong className="font-semibold">{numBoards}</strong> (assuming each board runs the full perpendicular dimension)</div>)}
              {totalLinearFootage && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Total Linear {units==='imperial'?'Footage':'Meterage'}</p><p className="text-2xl font-bold text-primary">{totalLinearFootage}</p></div><CopyButton textToCopy={totalLinearFootage}/></div>)}
              <AlertDescription className="text-xs pt-2">Add 10-15% for wastage/cuts. This doesn't include framing or hardware.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
    

// ====== END OF FILE: DeckingCalculator.tsx ======
==================================================

// ====== START OF FILE: DensityCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8.87 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Beaker } from "lucide-react";

type CalculationTarget = 'density' | 'mass' | 'volume';
type MassUnit = 'g' | 'kg' | 'lb' | 'oz';
type VolumeUnit = 'ml' | 'l' | 'cm3' | 'm3' | 'in3' | 'ft3';
type DensityUnit = 'g/ml' | 'kg/l' | 'kg/m3' | 'lb/ft3'; // Example primary density units

export default function DensityCalculator() {
  const [target, setTarget] = useState<CalculationTarget>('density');
  const [mass, setMass] = useState<string>('');
  const [volume, setVolume] = useState<string>('');
  const [density, setDensity] = useState<string>('');

  const [massUnit, setMassUnit] = useState<MassUnit>('g');
  const [volumeUnit, setVolumeUnit] = useState<VolumeUnit>('ml');
  // Output density unit will be derived or user can select it. For simplicity, derived.

  const [result, setResult] = useState<string | null>(null);
  const [resultUnitLabel, setResultUnitLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  // Conversion factors to base units (g and ml (which is cm^3))
  const massToBase: Record<MassUnit, number> = { g: 1, kg: 1000, lb: 453.592, oz: 28.3495 };
  const volumeToBase: Record<VolumeUnit, number> = { ml: 1, l: 1000, cm3: 1, m3: 1000000, in3: 16.3871, ft3: 28316.8 };

  const calculate = () => {
    setError(null);
    setResult(null);
    setResultUnitLabel('');

    const m = parseFloat(mass);
    const v = parseFloat(volume);
    const d = parseFloat(density); // Assuming density input is in g/ml for this simplified approach if user inputs it

    let calculatedValue: number | null = null;
    let finalUnit = '';

    try {
      const massInG = target !== 'mass' ? m * massToBase[massUnit] : 0;
      const volumeInMl = target !== 'volume' ? v * volumeToBase[volumeUnit] : 0;
      
      // If calculating density, assume input density is g/ml
      // For a more robust calculator, density unit input would be needed.
      const densityInGPerMl = target !== 'density' ? d : 0; 


      switch (target) {
        case 'density':
          if (isNaN(m) || m <= 0 || isNaN(v) || v <= 0) throw new Error("Mass and Volume must be positive values.");
          calculatedValue = massInG / volumeInMl;
          finalUnit = `${massUnit}/${volumeUnit}`; // This is simplified; better to pick a standard output unit
          if (massUnit === 'g' && volumeUnit === 'ml') finalUnit = 'g/ml';
          else if (massUnit === 'kg' && volumeUnit === 'l') finalUnit = 'kg/L';
          else if (massUnit === 'kg' && volumeUnit === 'm3') finalUnit = 'kg/m³';
          else finalUnit = `g/ml (converted from ${massUnit}/${volumeUnit})`; // Placeholder for complex conversion
          break;
        case 'mass':
          if (isNaN(d) || d <= 0 || isNaN(v) || v <= 0) throw new Error("Density and Volume must be positive values.");
          // Assume input density is g/ml, and selected volumeUnit is used for volume
          const inputDensityGPerMl = d; // This is an assumption.
          const inputVolumeInMl = v * volumeToBase[volumeUnit];
          calculatedValue = inputDensityGPerMl * inputVolumeInMl; // Result in grams
          // Convert back to selected massUnit
          calculatedValue = calculatedValue / massToBase[massUnit];
          finalUnit = massUnit;
          break;
        case 'volume':
          if (isNaN(d) || d <= 0 || isNaN(m) || m <= 0) throw new Error("Density and Mass must be positive values.");
           // Assume input density is g/ml, and selected massUnit is used for mass
          const inputDensityGPerMlVol = d;
          const inputMassInG = m * massToBase[massUnit];
          calculatedValue = inputMassInG / inputDensityGPerMlVol; // Result in mL
          // Convert back to selected volumeUnit
          calculatedValue = calculatedValue / volumeToBase[volumeUnit];
          finalUnit = volumeUnit;
          break;
        default:
          throw new Error("Invalid calculation target.");
      }
      if (calculatedValue !== null && !isNaN(calculatedValue) && isFinite(calculatedValue)) {
        setResult(calculatedValue.toFixed(4));
        setResultUnitLabel(finalUnit);
      } else {
        throw new Error("Calculation resulted in an invalid number.");
      }
    } catch (e: any) {
      setError(e.message || "An error occurred.");
    }
  };
  
  const resetForm = () => {
    setMass(''); setVolume(''); setDensity('');
    setResult(null); setError(null); setResultUnitLabel('');
  };

  const renderInputs = () => (
    <>
      {target !== 'mass' && (
        <div className="grid grid-cols-[2fr_1fr] gap-2">
          <div><Label htmlFor="mass">Mass</Label><Input id="mass" type="number" value={mass} onChange={(e) => setMass(e.target.value)} placeholder="e.g., 100"/></div>
          <div><Label htmlFor="massUnit">Unit</Label><Select value={massUnit} onValueChange={(v: MassUnit) => setMassUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.keys(massToBase).map(u => <SelectItem key={u} value={u}>{u}</SelectItem>)}</SelectContent></Select></div>
        </div>
      )}
      {target !== 'volume' && (
        <div className="grid grid-cols-[2fr_1fr] gap-2">
          <div><Label htmlFor="volume">Volume</Label><Input id="volume" type="number" value={volume} onChange={(e) => setVolume(e.target.value)} placeholder="e.g., 50"/></div>
          <div><Label htmlFor="volumeUnit">Unit</Label><Select value={volumeUnit} onValueChange={(v: VolumeUnit) => setVolumeUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.keys(volumeToBase).map(u => <SelectItem key={u} value={u}>{u}</SelectItem>)}</SelectContent></Select></div>
        </div>
      )}
      {target !== 'density' && (
         <div>
          <Label htmlFor="density">Density (g/ml or equivalent for calculation)</Label>
          <Input id="density" type="number" value={density} onChange={(e) => setDensity(e.target.value)} placeholder="e.g., 1.9 (assumed g/ml)"/>
          <p className="text-xs text-muted-foreground mt-1">Note: If calculating Mass or Volume, enter Density in g/ml (or g/cm³). The result will be converted to your chosen unit.</p>
        </div>
      )}
    </>
  );

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Density Calculation</AlertTitle>
        <AlertDescription>Calculate density, mass, or volume. Ensure units are consistent for accurate results. Density (if input) is assumed as g/ml for Mass/Volume calculations.</AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate Density (ρ = m/V), Mass, or Volume.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="calcTarget">Calculate:</Label>
              <Select value={target} onValueChange={(v: CalculationTarget) => { setTarget(v); setResult(null); setError(null); }}>
                <SelectTrigger id="calcTarget"><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="density">Density</SelectItem>
                  <SelectItem value="mass">Mass</SelectItem>
                  <SelectItem value="volume">Volume</SelectItem>
                </SelectContent>
              </Select>
            </div>
            {renderInputs()}
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculate}>Calculate</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Calculated {target}</p><p className="text-3xl font-bold text-primary">{result} <span className="text-lg">{resultUnitLabel}</span></p></div>
                  <CopyButton textToCopy={`${result} ${resultUnitLabel}`} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: DensityCalculator.tsx ======
==================================================

// ====== START OF FILE: DepreciationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.91 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, TrendingDown } from "lucide-react";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { ScrollArea } from "@/components/ui/scroll-area";

type DepreciationMethod = 'straight-line' | 'sum-of-years-digits' | 'double-declining-balance';

interface ScheduleEntry {
  year: number;
  depreciationExpense: number;
  accumulatedDepreciation: number;
  bookValue: number;
}

export default function DepreciationCalculator() {
  const [assetCost, setAssetCost] = useState<string>('');
  const [salvageValue, setSalvageValue] = useState<string>('0');
  const [usefulLife, setUsefulLife] = useState<string>(''); // In years
  const [method, setMethod] = useState<DepreciationMethod>('straight-line');

  const [schedule, setSchedule] = useState<ScheduleEntry[]>([]);
  const [error, setError] = useState<string | null>(null);

  const calculateDepreciation = () => {
    setError(null);
    setSchedule([]);
    const cost = parseFloat(assetCost);
    const salvage = parseFloat(salvageValue);
    const life = parseInt(usefulLife);

    if (isNaN(cost) || cost <= 0 || isNaN(salvage) || salvage < 0 || isNaN(life) || life <= 0) {
      setError('Please enter valid positive numbers: Asset Cost (>0), Salvage Value (>=0), Useful Life (>0 years).');
      return;
    }
    if (salvage > cost) {
        setError("Salvage value cannot be greater than asset cost.");
        return;
    }

    const newSchedule: ScheduleEntry[] = [];
    let currentBookValue = cost;
    let accumulatedDep = 0;

    if (method === 'straight-line') {
      const depreciableBase = cost - salvage;
      const annualDepreciation = depreciableBase / life;
      for (let i = 1; i <= life; i++) {
        const depExpense = (accumulatedDep + annualDepreciation > depreciableBase) ? Math.max(0, depreciableBase - accumulatedDep) : annualDepreciation; // Ensure not over-depreciated
        accumulatedDep += depExpense;
        currentBookValue -= depExpense;
        newSchedule.push({ year: i, depreciationExpense: depExpense, accumulatedDepreciation: accumulatedDep, bookValue: Math.max(salvage, currentBookValue) });
      }
    } else if (method === 'sum-of-years-digits') {
        const depreciableBase = cost - salvage;
        const soyd = (life * (life + 1)) / 2;
        for (let i = 1; i <= life; i++) {
            const remainingLife = life - i + 1;
            const depExpense = (remainingLife / soyd) * depreciableBase;
            accumulatedDep += depExpense;
            currentBookValue -= depExpense;
            newSchedule.push({ year: i, depreciationExpense: depExpense, accumulatedDepreciation: accumulatedDep, bookValue: Math.max(salvage, currentBookValue) });
        }
    } else if (method === 'double-declining-balance') {
        const rate = (1 / life) * 2; // Double the straight-line rate
        for (let i = 1; i <= life; i++) {
            let depExpense = currentBookValue * rate;
            // Ensure book value doesn't go below salvage value
            if (currentBookValue - depExpense < salvage) {
                depExpense = Math.max(0, currentBookValue - salvage);
            }
            accumulatedDep += depExpense;
            currentBookValue -= depExpense;
             if (currentBookValue < salvage && i < life) { // Adjust last useful year's depreciation if needed
                // This logic might need refinement for specific DDB rules regarding salvage.
                // Often, in the final year or when dep would take it below salvage, it switches to SL or adjusts.
            }
            newSchedule.push({ year: i, depreciationExpense: depExpense, accumulatedDepreciation: accumulatedDep, bookValue: currentBookValue });
            if (currentBookValue <= salvage && depExpense > 0) break; // Stop if book value reaches salvage
        }
    }
    setSchedule(newSchedule);
  };

  const resetForm = () => {
    setAssetCost(''); setSalvageValue('0'); setUsefulLife('');
    setSchedule([]); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Asset Depreciation</AlertTitle><AlertDescription>Calculate asset depreciation using common methods like Straight-Line, Sum-of-Years' Digits, or Double-Declining Balance.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Enter asset details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="assetCost">Asset Cost ($)</Label><Input id="assetCost" type="number" value={assetCost} onChange={(e) => setAssetCost(e.target.value)} placeholder="e.g., 10000" /></div>
            <div><Label htmlFor="salvageValue">Salvage Value ($)</Label><Input id="salvageValue" type="number" value={salvageValue} onChange={(e) => setSalvageValue(e.target.value)} placeholder="e.g., 1000" /></div>
            <div><Label htmlFor="usefulLife">Useful Life (Years)</Label><Input id="usefulLife" type="number" value={usefulLife} onChange={(e) => setUsefulLife(e.target.value)} placeholder="e.g., 5" /></div>
            <div><Label htmlFor="method">Depreciation Method</Label><Select value={method} onValueChange={(v: DepreciationMethod) => setMethod(v)}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent><SelectItem value="straight-line">Straight-Line</SelectItem><SelectItem value="sum-of-years-digits">Sum-of-Years' Digits</SelectItem><SelectItem value="double-declining-balance">Double-Declining Balance</SelectItem></SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateDepreciation}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        <Card className="lg:col-span-2">
          <CardHeader><CardDescription>Depreciation Schedule</CardDescription></CardHeader>
          <CardContent>
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {schedule.length > 0 && (
              <ScrollArea className="h-[400px] border rounded-md">
                <Table>
                  <TableHeader className="sticky top-0 bg-muted"><TableRow><TableHead>Year</TableHead><TableHead>Depreciation Expense</TableHead><TableHead>Accumulated Depreciation</TableHead><TableHead className="text-right">Book Value</TableHead></TableRow></TableHeader>
                  <TableBody>
                    <TableRow className="font-semibold bg-muted/50"><TableCell>Start</TableCell><TableCell>-</TableCell><TableCell>-</TableCell><TableCell className="text-right">${parseFloat(assetCost).toFixed(2)}</TableCell></TableRow>
                    {schedule.map(entry => (
                      <TableRow key={entry.year}><TableCell>{entry.year}</TableCell><TableCell>${entry.depreciationExpense.toFixed(2)}</TableCell><TableCell>${entry.accumulatedDepreciation.toFixed(2)}</TableCell><TableCell className="text-right">${entry.bookValue.toFixed(2)}</TableCell></TableRow>
                    ))}
                  </TableBody>
                </Table>
              </ScrollArea>
            )}
            {!error && schedule.length === 0 && <p className="text-muted-foreground">Enter asset details and click "Calculate" to see the schedule.</p>}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: DepreciationCalculator.tsx ======
==================================================

// ====== START OF FILE: DepthOfFieldDofCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.42 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Camera } from "lucide-react";

const circleOfConfusionPresets: Record<string, number> = {
  "full_frame": 0.029, // 35mm Full Frame
  "aps_c": 0.019, // Canon APS-C
  "aps_c_other": 0.020, // Sony/Nikon APS-C
  "micro_four_thirds": 0.015,
  "1_inch": 0.011,
  "custom": 0,
};

export default function DepthOfFieldDofCalculator() {
  const [focalLength, setFocalLength] = useState<string>('50'); // in mm
  const [aperture, setAperture] = useState<string>('1.8'); // f-stop
  const [subjectDistance, setSubjectDistance] = useState<string>('10'); // in feet or meters
  const [cocPreset, setCocPreset] = useState<string>('full_frame');
  const [customCoc, setCustomCoc] = useState<string>(''); // in mm
  const [units, setUnits] = useState<'imperial' | 'metric'>('imperial');

  const [dofNear, setDofNear] = useState<string | null>(null);
  const [dofFar, setDofFar] = useState<string | null>(null);
  const [totalDof, setTotalDof] = useState<string | null>(null);
  const [hyperfocal, setHyperfocal] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateDof = () => {
    setError(null); setDofNear(null); setDofFar(null); setTotalDof(null); setHyperfocal(null);
    
    const F = parseFloat(focalLength); // Focal Length in mm
    const N = parseFloat(aperture); // Aperture f-number
    let u = parseFloat(subjectDistance); // Subject distance
    let c = cocPreset === 'custom' ? parseFloat(customCoc) : circleOfConfusionPresets[cocPreset];

    if (isNaN(F) || F <= 0 || isNaN(N) || N <= 0 || isNaN(u) || u <= 0 || isNaN(c) || c <= 0) {
      setError("All inputs (focal length, aperture, distance, circle of confusion) must be positive numbers.");
      return;
    }

    // Convert inputs to millimeters for consistent calculation
    if (units === 'imperial') u *= 304.8; // feet to mm
    else u *= 1000; // meters to mm

    // Hyperfocal Distance (H) in mm
    const H = (F * F) / (N * c) + F;
    setHyperfocal(units === 'imperial' ? `${(H / 304.8).toFixed(2)} ft` : `${(H / 1000).toFixed(2)} m`);

    // Near limit of DoF
    const Dn = (H * u) / (H + u);

    // Far limit of DoF
    let Df;
    if (u >= H) {
        Df = Infinity;
    } else {
        Df = (H * u) / (H - u);
    }
    
    const totalDofValue = Df - Dn;

    // Convert back to user-selected units for display
    if (units === 'imperial') {
        setDofNear(`${(Dn / 304.8).toFixed(2)} ft`);
        setDofFar(isFinite(Df) ? `${(Df / 304.8).toFixed(2)} ft` : 'Infinity');
        setTotalDof(isFinite(totalDofValue) ? `${(totalDofValue / 304.8).toFixed(2)} ft` : 'Infinite');
    } else { // metric
        setDofNear(`${(Dn / 1000).toFixed(2)} m`);
        setDofFar(isFinite(Df) ? `${(Df / 1000).toFixed(2)} m` : 'Infinity');
        setTotalDof(isFinite(totalDofValue) ? `${(totalDofValue / 1000).toFixed(2)} m` : 'Infinite');
    }
  };

  const resetForm = () => {
    setFocalLength('50'); setAperture('1.8'); setSubjectDistance('10');
    setCocPreset('full_frame'); setCustomCoc(''); setUnits('imperial');
    setError(null); setDofNear(null); setDofFar(null); setTotalDof(null); setHyperfocal(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Depth of Field (DoF) Calculator</AlertTitle>
        <AlertDescription>
          Estimate the Depth of Field, the distance range where objects appear acceptably sharp in an image. Results depend on camera settings and subject distance.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter camera and subject details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="focalLengthDof">Focal Length (mm)</Label><Input id="focalLengthDof" type="number" value={focalLength} onChange={e=>setFocalLength(e.target.value)} placeholder="e.g., 50"/></div>
              <div><Label htmlFor="apertureDof">Aperture (f-stop)</Label><Input id="apertureDof" type="number" value={aperture} onChange={e=>setAperture(e.target.value)} placeholder="e.g., 1.8"/></div>
            </div>
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="subjectDistanceDof">Subject Distance</Label><Input id="subjectDistanceDof" type="number" value={subjectDistance} onChange={e=>setSubjectDistance(e.target.value)} placeholder="e.g., 10"/></div>
              <div><Label htmlFor="dofUnits">Unit</Label><Select value={units} onValueChange={(v:'imperial'|'metric')=>setUnits(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Feet</SelectItem><SelectItem value="metric">Meters</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="cocPresetDof">Sensor Format / Circle of Confusion (CoC)</Label><Select value={cocPreset} onValueChange={setCocPreset}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
              {Object.entries(circleOfConfusionPresets).map(([key, val]) => key !== 'custom' && <SelectItem key={key} value={key}>{key.replace(/_/g, ' ').replace('other', '(Sony/Nikon)').replace('aps c', 'APS-C')} ({val} mm)</SelectItem>)}
              <SelectItem value="custom">Custom CoC</SelectItem>
            </SelectContent></Select></div>
            {cocPreset === 'custom' && <div><Label htmlFor="customCocDof">Custom CoC (mm)</Label><Input id="customCocDof" type="number" value={customCoc} onChange={e=>setCustomCoc(e.target.value)} placeholder="e.g., 0.020"/></div>}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateDof}>Calculate DoF</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(dofNear || error) && (
          <Card>
            <CardHeader><CardDescription>Depth of Field Results</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalDof && (<div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">Total Depth of Field</p><p className="text-xl font-bold text-primary">{totalDof}</p></div>)}
              {dofNear && (<div className="p-1 bg-muted rounded-md text-sm">Near Focus Limit: <strong className="font-semibold">{dofNear}</strong></div>)}
              {dofFar && (<div className="p-1 bg-muted rounded-md text-sm">Far Focus Limit: <strong className="font-semibold">{dofFar}</strong></div>)}
              {hyperfocal && (<div className="p-1 bg-muted rounded-md text-sm">Hyperfocal Distance: <strong className="font-semibold">{hyperfocal}</strong></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: DepthOfFieldDofCalculator.tsx ======
==================================================

// ====== START OF FILE: DerivativeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 2.78 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { Card, CardContent, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { FunctionSquare, Info, ExternalLink } from "lucide-react";
import Link from 'next/link';

export default function DerivativeCalculator() {
  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle className="font-bold text-lg">For Informational Purposes Only</AlertTitle>
        <AlertDescription className="text-base">
          <p>Calculating the derivative of an arbitrary function (symbolic differentiation) is a highly complex task that requires a sophisticated computer algebra system.</p>
          <p className="mt-2"><strong className="font-semibold">This tool is a conceptual placeholder and DOES NOT perform differentiation.</strong></p>
          <p className="mt-2">For accurate symbolic differentiation, we recommend using a dedicated, powerful tool like <Link href="https://www.wolframalpha.com/calculators/derivative-calculator/" target="_blank" rel="noopener noreferrer" className="font-semibold underline">WolframAlpha's Derivative Calculator <ExternalLink className="inline h-3 w-3 ml-1"/></Link>.</p>
        </AlertDescription>
      </Alert>
      
      <Card>
        <CardHeader>
          <CardTitle className="font-headline flex items-center"><FunctionSquare className="mr-2 h-6 w-6 text-primary"/>Understanding Differentiation</CardTitle>
          <CardDescription>Differentiation is a fundamental concept in calculus that measures the instantaneous rate of change of a function.</CardDescription>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground mb-4">
            To find the derivative of a function, you would typically provide:
          </p>
          <ul className="list-disc list-inside space-y-2 text-sm">
            <li><strong>The Function (f(x)):</strong> The mathematical expression you want to differentiate (e.g., <code className="font-mono bg-muted p-1 rounded">x^3 + 2*x^2 - 5</code>, <code className="font-mono bg-muted p-1 rounded">sin(x)</code>, <code className="font-mono bg-muted p-1 rounded">exp(x)</code>).</li>
            <li><strong>The Variable (x):</strong> The variable with respect to which you are differentiating.</li>
            <li><strong>Point of Evaluation (Optional):</strong> A specific point at which to calculate the slope of the tangent line (e.g., find f'(2)).</li>
          </ul>
           <p className="text-muted-foreground mt-4">
            The output would be the derivative function, f'(x) (also written as dy/dx), which represents the slope of the original function at any given point.
          </p>
        </CardContent>
      </Card>
    </div>
  );
}


// ====== END OF FILE: DerivativeCalculator.tsx ======
==================================================

// ====== START OF FILE: DiceRoller.tsx ======
// File converted from TSX to TXT
// Original size: 4.63 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Dice1, Dice2, Dice3, Dice4, Dice5, Dice6, Dices } from 'lucide-react'; // Using Dices as a generic icon
import { cn } from '@/lib/utils';

const diceIcons = [Dice1, Dice2, Dice3, Dice4, Dice5, Dice6];

interface RollResult {
  value: number;
  Icon: React.ElementType;
}

export default function DiceRoller() {
  const [numDice, setNumDice] = useState<number>(1);
  const [numSides, setNumSides] = useState<number>(6);
  const [rolls, setRolls] = useState<RollResult[]>([]);
  const [totalSum, setTotalSum] = useState<number | null>(null);
  const [isRolling, setIsRolling] = useState<boolean>(false);

  const rollDice = () => {
    setIsRolling(true);
    setRolls([]);
    setTotalSum(null);

    // Simulate rolling animation
    let animationCycles = 0;
    const intervalId = setInterval(() => {
      const tempRolls = Array.from({ length: numDice }, () => {
        const val = Math.floor(Math.random() * numSides) + 1;
        return { value: val, Icon: numSides === 6 && val >=1 && val <=6 ? diceIcons[val-1] : Dices };
      });
      setRolls(tempRolls);
      animationCycles++;
      if (animationCycles >= 10) { // Adjust for longer/shorter animation
        clearInterval(intervalId);
        performFinalRoll();
      }
    }, 80); // Animation speed
  };

  const performFinalRoll = () => {
    const finalRolls: RollResult[] = [];
    let sum = 0;
    for (let i = 0; i < numDice; i++) {
      const value = Math.floor(Math.random() * numSides) + 1;
      finalRolls.push({ value, Icon: numSides === 6 && value >=1 && value <=6 ? diceIcons[value-1] : Dices });
      sum += value;
    }
    setRolls(finalRolls);
    setTotalSum(sum);
    setIsRolling(false);
  };
  
  useEffect(() => {
    // Ensure rolls are cleared if dice config changes.
    setRolls([]);
    setTotalSum(null);
  }, [numDice, numSides]);


  const resetRoller = () => {
    setNumDice(1);
    setNumSides(6);
    setRolls([]);
    setTotalSum(null);
    setIsRolling(false);
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardDescription>Roll one or more dice with customizable sides.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="numDiceRoller">Number of Dice</Label>
              <Input id="numDiceRoller" type="number" value={numDice} onChange={(e) => setNumDice(Math.max(1, parseInt(e.target.value) || 1))} min="1" max="20" />
            </div>
            <div>
              <Label htmlFor="numSidesRoller">Sides per Die</Label>
              <Select value={numSides.toString()} onValueChange={(val) => setNumSides(parseInt(val))}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  {[4, 6, 8, 10, 12, 20, 100].map(s => <SelectItem key={s} value={s.toString()}>{`D${s}`}</SelectItem>)}
                </SelectContent>
              </Select>
            </div>
          </div>
          <div className="flex flex-wrap justify-center gap-4 my-6 min-h-[80px] items-center">
            {rolls.length > 0 ? rolls.map((roll, index) => (
              <div key={index} className={cn("p-3 border rounded-lg shadow-md flex flex-col items-center w-20 h-20 justify-center", isRolling && "animate-pulse")}>
                <roll.Icon className="w-8 h-8 text-primary" />
                <span className="mt-1 text-lg font-semibold">{roll.value}</span>
              </div>
            )) : <p className="text-muted-foreground">Click "Roll Dice" to start.</p>}
          </div>
          {totalSum !== null && (
            <div className="text-center">
              <p className="text-sm text-muted-foreground">Total Sum</p>
              <p className="text-3xl font-bold text-primary">{totalSum}</p>
            </div>
          )}
        </CardContent>
        <CardFooter className="flex flex-col sm:flex-row justify-center gap-4">
          <Button onClick={rollDice} disabled={isRolling} size="lg" className="w-full sm:w-auto">
            {isRolling ? 'Rolling...' : 'Roll Dice'}
          </Button>
          <Button variant="outline" onClick={resetRoller} disabled={isRolling} className="w-full sm:w-auto">Reset</Button>
        </CardFooter>
      </Card>
    </div>
  );
}


// ====== END OF FILE: DiceRoller.tsx ======
==================================================

// ====== START OF FILE: DiceRollProbabilityCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.16 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Dice5, PercentIcon } from "lucide-react";

type ProbabilityCondition = 'exactly' | 'at-least' | 'at-most';

export default function DiceRollProbabilityCalculator() {
  const [numDice, setNumDice] = useState<string>('2');
  const [numSides, setNumSides] = useState<string>('6');
  const [targetSum, setTargetSum] = useState<string>('');
  const [condition, setCondition] = useState<ProbabilityCondition>('exactly');

  const [probability, setProbability] = useState<string | null>(null);
  const [combinations, setCombinations] = useState<number | null>(null);
  const [totalOutcomes, setTotalOutcomes] = useState<number | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Recursive function to find combinations for a target sum
  function countCombinations(diceCount: number, sides: number, currentSum: number, target: number): number {
    if (diceCount === 0) {
      return currentSum === target ? 1 : 0;
    }
    let count = 0;
    for (let i = 1; i <= sides; i++) {
      if (currentSum + i <= target || (diceCount === 1 && currentSum + i === target)) { // Optimization
         count += countCombinations(diceCount - 1, sides, currentSum + i, target);
      }
    }
    return count;
  }
  
  // More efficient DP approach for 'exactly'
  function countCombinationsDP(d: number, f: number, t: number): number {
    if (t < d || t > d * f) return 0; // Target sum is impossible
    const dp = Array(d + 1).fill(null).map(() => Array(t + 1).fill(0));
    
    // Base case: 1 die
    for (let j = 1; j <= f && j <= t; j++) {
      dp[1][j] = 1;
    }

    for (let i = 2; i <= d; i++) { // Number of dice
      for (let j = i; j <= t; j++) { // Target sum
        for (let k = 1; k <= f && j - k >= i - 1; k++) { // Value of current die
          dp[i][j] = (dp[i][j] + dp[i-1][j-k]);
        }
      }
    }
    return dp[d][t];
  }


  const calculateProbability = () => {
    setError(null);
    setProbability(null);
    setCombinations(null);
    setTotalOutcomes(null);

    const nDice = parseInt(numDice);
    const nSides = parseInt(numSides);
    const sumVal = parseInt(targetSum);

    if (isNaN(nDice) || nDice <= 0 || isNaN(nSides) || nSides <= 0 || isNaN(sumVal) || sumVal < nDice || sumVal > nDice * nSides) {
      setError('Enter valid positive integers. Target sum must be between (Num Dice) and (Num Dice * Num Sides).');
      return;
    }
    if (nDice > 10 || nSides > 20) { // Limit complexity for frontend
        setError("Calculations for very large numbers of dice/sides can be slow. Max 10 dice, 20 sides for this tool.");
        return;
    }

    const totalPossibleOutcomes = Math.pow(nSides, nDice);
    setTotalOutcomes(totalPossibleOutcomes);

    let favorableCombinations = 0;
    if (condition === 'exactly') {
      favorableCombinations = countCombinationsDP(nDice, nSides, sumVal);
    } else if (condition === 'at-least') {
      for (let s = sumVal; s <= nDice * nSides; s++) {
        favorableCombinations += countCombinationsDP(nDice, nSides, s);
      }
    } else if (condition === 'at-most') {
      for (let s = nDice; s <= sumVal; s++) {
        favorableCombinations += countCombinationsDP(nDice, nSides, s);
      }
    }
    
    setCombinations(favorableCombinations);
    const prob = (favorableCombinations / totalPossibleOutcomes) * 100;
    setProbability(prob.toFixed(4));
  };

  const resetForm = () => {
    setNumDice('2'); setNumSides('6'); setTargetSum('');
    setProbability(null); setCombinations(null); setTotalOutcomes(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Dice Roll Probability</AlertTitle><AlertDescription>Calculate the probability of rolling a certain sum with multiple dice. This tool uses dynamic programming for efficiency, but calculations can still be intensive for many dice/sides.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter dice parameters and target sum.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="numDice">Number of Dice</Label><Input id="numDice" type="number" value={numDice} onChange={(e) => setNumDice(e.target.value)} placeholder="e.g., 2" /></div>
              <div><Label htmlFor="numSides">Sides per Die</Label><Input id="numSides" type="number" value={numSides} onChange={(e) => setNumSides(e.target.value)} placeholder="e.g., 6" /></div>
            </div>
            <div><Label htmlFor="targetSum">Target Sum</Label><Input id="targetSum" type="number" value={targetSum} onChange={(e) => setTargetSum(e.target.value)} placeholder="e.g., 7" /></div>
            <div><Label htmlFor="condition">Condition</Label><Select value={condition} onValueChange={(v: ProbabilityCondition) => setCondition(v)}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent><SelectItem value="exactly">Sum is Exactly</SelectItem><SelectItem value="at-least">Sum is At Least</SelectItem><SelectItem value="at-most">Sum is At Most</SelectItem></SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateProbability}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(probability || error) && (
          <Card>
            <CardHeader><CardDescription>Probability Results</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {probability && (
                <>
                  <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                    <div><p className="text-sm text-muted-foreground">Probability</p><p className="text-3xl font-bold text-primary">{probability}%</p></div>
                    <CopyButton textToCopy={probability} />
                  </div>
                  {combinations !== null && <div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Favorable Combinations</p><p className="font-semibold">{combinations.toLocaleString()}</p></div>}
                  {totalOutcomes !== null && <div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Possible Outcomes</p><p className="font-semibold">{totalOutcomes.toLocaleString()}</p></div>}
                </>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: DiceRollProbabilityCalculator.tsx ======
==================================================

// ====== START OF FILE: DifferentiationIntegrationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.54 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, FunctionSquare } from "lucide-react";

type CalculusOperation = 'differentiate' | 'integrate_indefinite' | 'integrate_definite';

export default function DifferentiationIntegrationCalculator() {
  const [operation, setOperation] = useState<CalculusOperation>('differentiate');
  const [functionInput, setFunctionInput] = useState<string>(''); // e.g., "x^2 + 2*x"
  const [variable, setVariable] = useState<string>('x');
  const [pointOrLowerBound, setPointOrLowerBound] = useState<string>(''); // Point for diff, lower for def. integral
  const [upperBound, setUpperBound] = useState<string>(''); // For definite integral

  const [resultOutput, setResultOutput] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const performCalculus = () => {
    setError(null);
    setResultOutput(null);

    if (!functionInput.trim()) {
      setError('Please enter a function string.');
      return;
    }
    if (!variable.trim() || !/^[a-zA-Z]$/.test(variable)) {
        setError('Please enter a single letter variable (e.g., x, y, t).');
        return;
    }

    // Placeholder for complex symbolic math logic
    const placeholderMessage = `Symbolic ${operation} for "${functionInput}" with respect to "${variable}" requires an advanced math engine not implemented in this demo.`;
    setError(placeholderMessage);
    setResultOutput("Calculation logic placeholder.");
  };

  const resetForm = () => {
    setFunctionInput(''); setVariable('x'); setPointOrLowerBound(''); setUpperBound('');
    setResultOutput(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Advanced Calculus - Placeholder Logic</AlertTitle>
        <AlertDescription>
          Symbolic differentiation and integration are computationally complex tasks requiring a dedicated math engine (e.g., SymPy, Wolfram Alpha). This calculator provides a UI demonstration but <strong className="font-semibold">does not implement the full symbolic calculation logic</strong>.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter function and parameters for calculus operation.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="calcOperation">Operation</Label><Select value={operation} onValueChange={(v:CalculusOperation)=>setOperation(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                <SelectItem value="differentiate">Differentiate (dy/dx)</SelectItem>
                <SelectItem value="integrate_indefinite">Integrate (Indefinite ∫f(x)dx)</SelectItem>
                <SelectItem value="integrate_definite">Integrate (Definite ∫f(x)dx from a to b)</SelectItem>
            </SelectContent></Select></div>
            <div><Label htmlFor="funcInput">Function f({variable}) =</Label><Input id="funcInput" value={functionInput} onChange={e=>setFunctionInput(e.target.value)} placeholder="e.g., x^3 + 2*x - 5"/></div>
            <div><Label htmlFor="varInput">Variable of Integration/Differentiation</Label><Input id="varInput" value={variable} onChange={e=>setVariable(e.target.value)} maxLength={1} placeholder="e.g., x"/></div>
            {operation === 'differentiate' && <div><Label htmlFor="pointInput">Point of Differentiation (Optional)</Label><Input id="pointInput" type="number" value={pointOrLowerBound} onChange={e=>setPointOrLowerBound(e.target.value)} placeholder="e.g., 2 (to find f'(2))"/></div>}
            {operation === 'integrate_definite' && <>
              <div><Label htmlFor="lowerBoundInput">Lower Bound (a)</Label><Input id="lowerBoundInput" type="number" value={pointOrLowerBound} onChange={e=>setPointOrLowerBound(e.target.value)} placeholder="e.g., 0"/></div>
              <div><Label htmlFor="upperBoundInput">Upper Bound (b)</Label><Input id="upperBoundInput" type="number" value={upperBound} onChange={e=>setUpperBound(e.target.value)} placeholder="e.g., 1"/></div>
            </>}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={performCalculus}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(resultOutput || error) && (
          <Card>
            <CardHeader><CardDescription>Calculus Result (Placeholder)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {resultOutput && (<div className="p-3 bg-muted rounded-md"><Label className="text-sm font-semibold text-primary">Result:</Label><Textarea value={resultOutput} readOnly rows={3} className="mt-1 font-mono text-xs bg-background/50"/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: DifferentiationIntegrationCalculator.tsx ======
==================================================

// ====== START OF FILE: DiscountCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.79 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, BadgePercent } from "lucide-react";

export default function DiscountCalculator() {
  const [originalPrice, setOriginalPrice] = useState<string>('');
  const [discountPercentage, setDiscountPercentage] = useState<string>('');
  
  const [finalPrice, setFinalPrice] = useState<string | null>(null);
  const [amountSaved, setAmountSaved] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateDiscount = () => {
    setError(null);
    setFinalPrice(null);
    setAmountSaved(null);

    const price = parseFloat(originalPrice);
    const discount = parseFloat(discountPercentage);

    if (isNaN(price) || price < 0 || isNaN(discount) || discount < 0 || discount > 100) {
      setError('Please enter a valid original price (>=0) and discount percentage (0-100).');
      return;
    }

    const saved = (price * discount) / 100;
    const final = price - saved;

    setAmountSaved(saved.toFixed(2));
    setFinalPrice(final.toFixed(2));
  };

  const resetForm = () => {
    setOriginalPrice('');
    setDiscountPercentage('');
    setFinalPrice(null);
    setAmountSaved(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate the final price after a discount and see how much you save.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="originalPrice">Original Price ($)</Label>
              <Input id="originalPrice" type="number" value={originalPrice} onChange={(e) => setOriginalPrice(e.target.value)} placeholder="e.g., 100" />
            </div>
            <div>
              <Label htmlFor="discountPercentage">Discount Percentage (%)</Label>
              <Input id="discountPercentage" type="number" value={discountPercentage} onChange={(e) => setDiscountPercentage(e.target.value)} placeholder="e.g., 20" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateDiscount}>Calculate Discount</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(finalPrice || error) && (
          <Card>
            <CardHeader><CardDescription>Discount Results</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {amountSaved && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Amount Saved</p>
                  <p className="font-semibold text-green-600">${amountSaved}</p>
                </div>
              )}
              {finalPrice && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Final Price</p><p className="text-3xl font-bold text-primary">${finalPrice}</p></div>
                  <CopyButton textToCopy={finalPrice} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: DiscountCalculator.tsx ======
==================================================

// ====== START OF FILE: DistanceCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.92 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Waypoints } from "lucide-react";

type CalculationMode = 'distance' | 'speed' | 'time';
type Unit = 'km' | 'miles' | 'm' | 'ft'; // For distance
type TimeUnit = 'hours' | 'minutes' | 'seconds'; // For time
type SpeedUnit = 'kmh' | 'mph' | 'ms' | 'fts'; // For speed

export default function DistanceCalculator() {
  const [mode, setMode] = useState<CalculationMode>('distance');
  
  const [distance, setDistance] = useState<string>('');
  const [speed, setSpeed] = useState<string>('');
  const [time, setTime] = useState<string>(''); // Will represent total time in seconds for calculation

  const [distanceUnit, setDistanceUnit] = useState<Unit>('km');
  const [speedUnit, setSpeedUnit] = useState<SpeedUnit>('kmh');
  const [timeHours, setTimeHours] = useState<string>('');
  const [timeMinutes, setTimeMinutes] = useState<string>('');
  const [timeSeconds, setTimeSeconds] = useState<string>('');

  const [result, setResult] = useState<string | null>(null);
  const [resultUnitLabel, setResultUnitLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  // Conversion to base units (meters, seconds)
  const distToBase: Record<Unit, number> = { km: 1000, miles: 1609.34, m: 1, ft: 0.3048 };
  const speedToBase: Record<SpeedUnit, number> = { kmh: 1000/3600, mph: 1609.34/3600, ms: 1, fts: 0.3048 };

  const calculate = () => {
    setError(null);
    setResult(null);
    setResultUnitLabel('');

    const distVal = parseFloat(distance);
    const speedVal = parseFloat(speed);
    const timeH = parseFloat(timeHours) || 0;
    const timeM = parseFloat(timeMinutes) || 0;
    const timeS = parseFloat(timeSeconds) || 0;
    const totalTimeSec = (timeH * 3600) + (timeM * 60) + timeS;

    try {
      let res: number | undefined;
      let resUnit = '';

      if (mode === 'distance') {
        if (isNaN(speedVal) || speedVal <= 0 || totalTimeSec <= 0) throw new Error("Speed and Time must be positive.");
        const speedInMs = speedVal * speedToBase[speedUnit];
        res = speedInMs * totalTimeSec; // distance in meters
        res = res / distToBase[distanceUnit]; // convert to selected distance unit
        resUnit = distanceUnit;
      } else if (mode === 'speed') {
        if (isNaN(distVal) || distVal <= 0 || totalTimeSec <= 0) throw new Error("Distance and Time must be positive.");
        const distInMeters = distVal * distToBase[distanceUnit];
        res = distInMeters / totalTimeSec; // speed in m/s
        res = res / speedToBase[speedUnit]; // convert to selected speed unit
        resUnit = speedUnit;
      } else { // time
        if (isNaN(distVal) || distVal <= 0 || isNaN(speedVal) || speedVal <= 0) throw new Error("Distance and Speed must be positive.");
        const distInMeters = distVal * distToBase[distanceUnit];
        const speedInMs = speedVal * speedToBase[speedUnit];
        if (speedInMs === 0) throw new Error("Speed cannot be zero for time calculation.");
        res = distInMeters / speedInMs; // time in seconds
        // Format time result nicely
        const h = Math.floor(res / 3600);
        const m = Math.floor((res % 3600) / 60);
        const s = Math.round(res % 60);
        setResult(`${h}h ${m}m ${s}s`);
        setResultUnitLabel('');
        return;
      }

      if (res === undefined || isNaN(res) || !isFinite(res)) throw new Error("Calculation failed. Check inputs.");
      setResult(res.toFixed(2));
      setResultUnitLabel(resUnit);

    } catch (e: any) { setError(e.message); }
  };
  
  const resetForm = () => {
    setDistance(''); setSpeed(''); setTime('');
    setTimeHours(''); setTimeMinutes(''); setTimeSeconds('');
    setResult(null); setError(null); setResultUnitLabel('');
  };

  const renderInputs = () => (
    <>
      {mode !== 'distance' && (
        <div className="grid grid-cols-[2fr_1fr] gap-2">
          <div><Label htmlFor="distanceVal">Distance</Label><Input id="distanceVal" type="number" value={distance} onChange={(e) => setDistance(e.target.value)} /></div>
          <div><Label htmlFor="distUnit">Unit</Label><Select value={distanceUnit} onValueChange={(v: Unit) => setDistanceUnit(v)}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent>{Object.keys(distToBase).map(u => <SelectItem key={u} value={u}>{u}</SelectItem>)}</SelectContent></Select></div>
        </div>
      )}
      {mode !== 'speed' && (
        <div className="grid grid-cols-[2fr_1fr] gap-2">
          <div><Label htmlFor="speedVal">Speed</Label><Input id="speedVal" type="number" value={speed} onChange={(e) => setSpeed(e.target.value)} /></div>
          <div><Label htmlFor="spdUnit">Unit</Label><Select value={speedUnit} onValueChange={(v: SpeedUnit) => setSpeedUnit(v)}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent>{Object.keys(speedToBase).map(u => <SelectItem key={u} value={u}>{u}</SelectItem>)}</SelectContent></Select></div>
        </div>
      )}
      {mode !== 'time' && (
        <div>
          <Label>Time (Hours / Minutes / Seconds)</Label>
          <div className="grid grid-cols-3 gap-2">
            <Input type="number" value={timeHours} onChange={e => setTimeHours(e.target.value)} placeholder="H" />
            <Input type="number" value={timeMinutes} onChange={e => setTimeMinutes(e.target.value)} placeholder="M" />
            <Input type="number" value={timeSeconds} onChange={e => setTimeSeconds(e.target.value)} placeholder="S" />
          </div>
        </div>
      )}
    </>
  );

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Distance, Speed, Time</AlertTitle><AlertDescription>Calculate distance, speed, or time given the other two values. Ensure units are consistent.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate Distance (D = S × T), Speed (S = D / T), or Time (T = D / S).</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="calcMode">Calculate:</Label><Select value={mode} onValueChange={(v: CalculationMode) => {setMode(v); setResult(null); setError(null);}}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent><SelectItem value="distance">Distance</SelectItem><SelectItem value="speed">Speed</SelectItem><SelectItem value="time">Time</SelectItem></SelectContent></Select></div>
            {renderInputs()}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Calculated {mode}</p><p className="text-3xl font-bold text-primary">{result} <span className="text-lg">{resultUnitLabel}</span></p></div>
                  <CopyButton textToCopy={`${result} ${resultUnitLabel}`} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: DistanceCalculator.tsx ======
==================================================

// ====== START OF FILE: DividendReinvestmentCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Repeat, PieChart } from "lucide-react";

type DividendFrequency = '1' | '2' | '4' | '12'; // Annually, Semi-Annually, Quarterly, Monthly

export default function DividendReinvestmentCalculator() {
  const [initialShares, setInitialShares] = useState<string>('');
  const [sharePrice, setSharePrice] = useState<string>('');
  const [annualDividendPerShare, setAnnualDividendPerShare] = useState<string>('');
  const [dividendFrequency, setDividendFrequency] = useState<DividendFrequency>('4'); // Quarterly
  const [annualGrowthRateShares, setAnnualGrowthRateShares] = useState<string>('0'); // % for share price appreciation
  const [annualGrowthRateDividend, setAnnualGrowthRateDividend] = useState<string>('0'); // % for dividend growth
  const [yearsToGrow, setYearsToGrow] = useState<string>('');

  const [finalShares, setFinalShares] = useState<string | null>(null);
  const [finalValue, setFinalValue] = useState<string | null>(null);
  const [totalDividendsReinvested, setTotalDividendsReinvested] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateDrip = () => {
    setError(null); setFinalShares(null); setFinalValue(null); setTotalDividendsReinvested(null);
    let currentShares = parseFloat(initialShares);
    let currentSharePrice = parseFloat(sharePrice);
    let currentAnnualDivPerShare = parseFloat(annualDividendPerShare);
    const divFreq = parseInt(dividendFrequency);
    const shareGrowth = parseFloat(annualGrowthRateShares) / 100;
    const divGrowth = parseFloat(annualGrowthRateDividend) / 100;
    const years = parseInt(yearsToGrow);

    if (isNaN(currentShares)||currentShares<=0||isNaN(currentSharePrice)||currentSharePrice<=0||isNaN(currentAnnualDivPerShare)||currentAnnualDivPerShare<0||isNaN(years)||years<=0||isNaN(divFreq)||isNaN(shareGrowth)||isNaN(divGrowth)) {
      setError("Valid inputs required. Shares, price, term must be positive. Rates/dividends non-negative."); return;
    }

    let totalDivsReinvested = 0;
    const periodsPerYear = divFreq;
    const totalPeriods = years * periodsPerYear;

    for (let i = 0; i < totalPeriods; i++) {
        // Apply annual growth rates at the start of each year (approximated to period start)
        if (i > 0 && i % periodsPerYear === 0) {
            currentSharePrice *= (1 + shareGrowth);
            currentAnnualDivPerShare *= (1 + divGrowth);
        }
        
        const dividendPerShareThisPeriod = currentAnnualDivPerShare / periodsPerYear;
        const totalDividendThisPeriod = currentShares * dividendPerShareThisPeriod;
        totalDivsReinvested += totalDividendThisPeriod;
        
        if (currentSharePrice > 0) { // Avoid division by zero if price somehow drops to 0
            const sharesBought = totalDividendThisPeriod / currentSharePrice;
            currentShares += sharesBought; // Fractional shares allowed
        }
    }
    
    // Final share price appreciation for the last part of the last year if not fully captured in loop
    // For simplicity, the loop structure applies growth at start of periods (effectively a year in this case for annual rates)
    // One final appreciation for the end value
    const finalCalculatedSharePrice = parseFloat(sharePrice) * Math.pow(1 + shareGrowth, years);


    setFinalShares(currentShares.toFixed(4));
    setFinalValue((currentShares * finalCalculatedSharePrice).toFixed(2));
    setTotalDividendsReinvested(totalDivsReinvested.toFixed(2));
  };

  const resetForm = () => {
    setInitialShares(''); setSharePrice(''); setAnnualDividendPerShare(''); setDividendFrequency('4');
    setAnnualGrowthRateShares('0'); setAnnualGrowthRateDividend('0'); setYearsToGrow('');
    setFinalShares(null); setFinalValue(null); setTotalDividendsReinvested(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>DRIP Calculator (Dividend Reinvestment)</AlertTitle><AlertDescription>Estimate the growth of an investment with dividends reinvested. Assumes fractional shares can be purchased.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardDescription>Enter investment and dividend details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
              <div><Label htmlFor="initSharesDRIP">Initial Shares</Label><Input id="initSharesDRIP" type="number" value={initialShares} onChange={e=>setInitialShares(e.target.value)}/></div>
              <div><Label htmlFor="sharePriceDRIP">Current Share Price ($)</Label><Input id="sharePriceDRIP" type="number" value={sharePrice} onChange={e=>setSharePrice(e.target.value)}/></div>
              <div><Label htmlFor="annDivDRIP">Annual Dividend/Share ($)</Label><Input id="annDivDRIP" type="number" value={annualDividendPerShare} onChange={e=>setAnnualDividendPerShare(e.target.value)}/></div>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
              <div><Label htmlFor="divFreqDRIP">Dividend Frequency</Label><Select value={dividendFrequency} onValueChange={(v:DividendFrequency)=>setDividendFrequency(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="12">Monthly</SelectItem><SelectItem value="4">Quarterly</SelectItem><SelectItem value="2">Semi-Annually</SelectItem><SelectItem value="1">Annually</SelectItem></SelectContent></Select></div>
              <div><Label htmlFor="shareGrowthDRIP">Annual Share Price Growth (%)</Label><Input id="shareGrowthDRIP" type="number" value={annualGrowthRateShares} onChange={e=>setAnnualGrowthRateShares(e.target.value)} placeholder="e.g., 5"/></div>
              <div><Label htmlFor="divGrowthDRIP">Annual Dividend Growth (%)</Label><Input id="divGrowthDRIP" type="number" value={annualGrowthRateDividend} onChange={e=>setAnnualGrowthRateDividend(e.target.value)} placeholder="e.g., 2"/></div>
            </div>
            <div><Label htmlFor="yearsDRIP">Years to Grow</Label><Input id="yearsDRIP" type="number" value={yearsToGrow} onChange={e=>setYearsToGrow(e.target.value)} placeholder="e.g., 10"/></div>
          </CardContent>
          <CardFooter><Button onClick={calculateDrip} className="w-full md:w-auto">Calculate DRIP Growth</Button></CardFooter>
        </Card>
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Investment Projection</CardDescription></CardHeader>
          <CardContent className="space-y-2">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {finalShares && (<div className="p-1.5 bg-muted rounded-md text-sm">Final Number of Shares: <strong className="font-semibold">{finalShares}</strong></div>)}
            {totalDividendsReinvested && (<div className="p-1.5 bg-muted rounded-md text-sm">Total Dividends Reinvested: <strong className="font-semibold">${totalDividendsReinvested}</strong></div>)}
            {finalValue && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Est. Final Value</p><p className="text-2xl font-bold text-primary">${finalValue}</p></div><CopyButton textToCopy={finalValue}/></div>)}
          </CardContent>
          <CardFooter><Button variant="outline" onClick={resetForm} className="w-full">Reset</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: DividendReinvestmentCalculator.tsx ======
==================================================

// ====== START OF FILE: DopplerEffectCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.08 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Waves } from "lucide-react";

const SPEED_OF_SOUND_MS = 343; // Speed of sound in air at ~20°C

export default function DopplerEffectCalculator() {
  const [sourceFrequency, setSourceFrequency] = useState<string>(''); // f, in Hz
  const [sourceVelocity, setSourceVelocity] = useState<string>('0'); // v_s, in m/s
  const [observerVelocity, setObserverVelocity] = useState<string>('0'); // v_o, in m/s
  const [soundSpeed, setSoundSpeed] = useState<string>(SPEED_OF_SOUND_MS.toString()); // v, in m/s

  const [observedFrequency, setObservedFrequency] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateDoppler = () => {
    setError(null);
    setObservedFrequency(null);

    const f = parseFloat(sourceFrequency);
    const vs = parseFloat(sourceVelocity);
    const vo = parseFloat(observerVelocity);
    const v = parseFloat(soundSpeed);

    if (isNaN(f) || f <= 0 || isNaN(vs) || isNaN(vo) || isNaN(v) || v <= 0) {
      setError('Source Frequency and Speed of Sound must be positive. Velocities must be valid numbers.');
      return;
    }
    
    // Formula: f' = f * (v + vo) / (v + vs)
    // Convention: Velocity is positive if moving TOWARDS the other object, negative if moving AWAY.
    
    if (v + vs === 0) {
        setError("Total velocity of wave relative to source (v + vs) cannot be zero. Source cannot travel at speed of sound towards observer.");
        return;
    }
    
    const f_prime = f * (v + vo) / (v - vs); // Note the sign convention adjustment in denominator
    setObservedFrequency(f_prime.toFixed(2));
  };

  const resetForm = () => {
    setSourceFrequency(''); setSourceVelocity('0'); setObserverVelocity('0');
    setSoundSpeed(SPEED_OF_SOUND_MS.toString());
    setObservedFrequency(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Doppler Effect Calculator (Sound)</AlertTitle>
        <AlertDescription>
          Calculate the observed frequency of a sound wave due to the Doppler effect. <strong>Sign Convention:</strong> Velocity is positive if an object is moving towards the other, and negative if moving away. All units in m/s and Hz.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter wave and motion parameters.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="sourceFreq">Source Frequency (f) - Hz</Label><Input id="sourceFreq" type="number" value={sourceFrequency} onChange={e => setSourceFrequency(e.target.value)} placeholder="e.g., 440"/></div>
            <div><Label htmlFor="soundSpeed">Speed of Sound (v) - m/s</Label><Input id="soundSpeed" type="number" value={soundSpeed} onChange={e => setSoundSpeed(e.target.value)} /></div>
            <div><Label htmlFor="observerVel">Observer/Receiver Velocity (vo) - m/s</Label><Input id="observerVel" type="number" value={observerVelocity} onChange={e => setObserverVelocity(e.target.value)} placeholder="e.g., 20 (towards), -20 (away)"/></div>
            <div><Label htmlFor="sourceVel">Source Velocity (vs) - m/s</Label><Input id="sourceVel" type="number" value={sourceVelocity} onChange={e => setSourceVelocity(e.target.value)} placeholder="e.g., -30 (away), 30 (towards)"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateDoppler}>Calculate Observed Frequency</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(observedFrequency || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Calculation Result</CardDescription>
            </CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {observedFrequency && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Observed Frequency (f')</p>
                    <p className="text-2xl font-bold text-primary">{observedFrequency} Hz</p>
                  </div>
                  <CopyButton textToCopy={observedFrequency} />
                </div>
              )}
              <AlertDescription className="text-xs pt-2 mt-2">Formula: f' = f * (v + vo) / (v - vs)</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: DopplerEffectCalculator.tsx ======
==================================================

// ====== START OF FILE: DotProductCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.81 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Asterisk } from "lucide-react";

export default function DotProductCalculator() {
  const [axDot, setAxDot] = useState<string>(''); const [ayDot, setAyDot] = useState<string>(''); const [azDot, setAzDot] = useState<string>(''); // Vector A
  const [bxDot, setBxDot] = useState<string>(''); const [byDot, setByDot] = useState<string>(''); const [bzDot, setBzDot] = useState<string>(''); // Vector B
  const [is2D, setIs2D] = useState<boolean>(false); // Toggle for 2D vectors

  const [dotProductResult, setDotProductResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateDotProduct = () => {
    setError(null); setDotProductResult(null);
    const vAx = parseFloat(axDot); const vAy = parseFloat(ayDot); const vAz = parseFloat(azDot) || 0; // Default Z to 0 for 2D
    const vBx = parseFloat(bxDot); const vBy = parseFloat(byDot); const vBz = parseFloat(bzDot) || 0;

    if ( (isNaN(vAx)||isNaN(vAy)||( !is2D && isNaN(vAz) )) || (isNaN(vBx)||isNaN(vBy)||( !is2D && isNaN(vBz) )) ) {
      setError(`All required vector components must be valid numbers. ${is2D ? '(Ax, Ay, Bx, By)' : '(Ax, Ay, Az, Bx, By, Bz)'}`);
      return;
    }

    // A · B = Ax*Bx + Ay*By + Az*Bz
    let result = vAx * vBx + vAy * vBy;
    if (!is2D) result += vAz * vBz;
    
    setDotProductResult(result.toFixed(4));
  };

  const resetForm = () => {
    setAxDot(''); setAyDot(''); setAzDot(''); setBxDot(''); setByDot(''); setBzDot('');
    setDotProductResult(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Dot Product Calculator (2D/3D Vectors)</AlertTitle><AlertDescription>Calculate the dot product (scalar product) of two vectors A and B.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter vector components.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center space-x-2 mb-2">
              <input type="checkbox" id="is2DDot" checked={is2D} onChange={(e) => setIs2D(e.target.checked)} className="form-checkbox"/>
              <Label htmlFor="is2DDot">Calculate for 2D Vectors (ignore Z components)</Label>
            </div>
            <Label className="font-medium">Vector A = ({is2D ? "Ax, Ay" : "Ax, Ay, Az"})</Label>
            <div className={`grid ${is2D ? 'grid-cols-2' : 'grid-cols-3'} gap-2`}>
              <Input type="number" value={axDot} onChange={e=>setAxDot(e.target.value)} placeholder="Ax"/>
              <Input type="number" value={ayDot} onChange={e=>setAyDot(e.target.value)} placeholder="Ay"/>
              {!is2D && <Input type="number" value={azDot} onChange={e=>setAzDot(e.target.value)} placeholder="Az"/>}
            </div>
            <Label className="font-medium">Vector B = ({is2D ? "Bx, By" : "Bx, By, Bz"})</Label>
            <div className={`grid ${is2D ? 'grid-cols-2' : 'grid-cols-3'} gap-2`}>
              <Input type="number" value={bxDot} onChange={e=>setBxDot(e.target.value)} placeholder="Bx"/>
              <Input type="number" value={byDot} onChange={e=>setByDot(e.target.value)} placeholder="By"/>
              {!is2D && <Input type="number" value={bzDot} onChange={e=>setBzDot(e.target.value)} placeholder="Bz"/>}
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateDotProduct}>Calculate A · B</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(dotProductResult !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Dot Product Result (Scalar)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {dotProductResult !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">A · B =</p><p className="text-2xl font-bold text-primary">{dotProductResult}</p></div>
                  <CopyButton textToCopy={dotProductResult}/>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: DotProductCalculator.tsx ======
==================================================

// ====== START OF FILE: DressSizeConverterIntl.tsx ======
// File converted from TSX to TXT
// Original size: 4.96 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Info, Shirt } from "lucide-react";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";

type SizeStandard = 'us' | 'uk' | 'eu' | 'jp' | 'au';
interface SizeEquivalents {
  us: string;
  uk: string;
  eu: string;
  jp: string;
  au: string;
}

const dressSizes: SizeEquivalents[] = [
  { us: '0', uk: '4', eu: '32', jp: '5', au: '4' },
  { us: '2', uk: '6', eu: '34', jp: '7', au: '6' },
  { us: '4', uk: '8', eu: '36', jp: '9', au: '8' },
  { us: '6', uk: '10', eu: '38', jp: '11', au: '10' },
  { us: '8', uk: '12', eu: '40', jp: '13', au: '12' },
  { us: '10', uk: '14', eu: '42', jp: '15', au: '14' },
  { us: '12', uk: '16', eu: '44', jp: '17', au: '16' },
  { us: '14', uk: '18', eu: '46', jp: '19', au: '18' },
  { us: '16', uk: '20', eu: '48', jp: '21', au: '20' },
  { us: '18', uk: '22', eu: '50', jp: '23', au: '22' },
];

const sizeStandards: Record<SizeStandard, string> = {
  us: 'US',
  uk: 'UK',
  eu: 'Europe (EU)',
  jp: 'Japan (JP)',
  au: 'Australia (AU)',
};

export default function DressSizeConverterIntl() {
  const [inputSize, setInputSize] = useState<string>('4');
  const [inputStandard, setInputStandard] = useState<SizeStandard>('us');
  const [convertedSizes, setConvertedSizes] = useState<SizeEquivalents | null>(null);

  const convertSizes = () => {
    const equivalent = dressSizes.find(sizeSet => sizeSet[inputStandard] === inputSize);
    setConvertedSizes(equivalent || null);
  };

  const resetConverter = () => {
    setInputSize('4');
    setInputStandard('us');
    setConvertedSizes(null);
  };
  
  const getInputSizeOptions = () => {
      return dressSizes.map(s => s[inputStandard]).filter(Boolean);
  }

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>International Dress Size Converter</AlertTitle>
        <AlertDescription>
          Convert women's dress sizes between different regions. Sizing varies greatly by brand; this is an estimation based on common standards.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Select your known size and standard.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
                <div>
                    <Label htmlFor="inputStandard">Your Size Standard</Label>
                    <Select value={inputStandard} onValueChange={(v: SizeStandard) => setInputStandard(v)}>
                        <SelectTrigger><SelectValue /></SelectTrigger>
                        <SelectContent>{Object.entries(sizeStandards).map(([key, label])=><SelectItem key={key} value={key}>{label}</SelectItem>)}</SelectContent>
                    </Select>
                </div>
                <div>
                    <Label htmlFor="inputSize">Your Size</Label>
                    <Select value={inputSize} onValueChange={setInputSize}>
                        <SelectTrigger><SelectValue /></SelectTrigger>
                        <SelectContent>{getInputSizeOptions().map(size => <SelectItem key={size} value={size}>{size}</SelectItem>)}</SelectContent>
                    </Select>
                </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={convertSizes}>Convert Sizes</Button>
            <Button variant="outline" onClick={resetConverter}>Reset</Button>
          </CardFooter>
        </Card>

        {convertedSizes && (
          <Card>
            <CardHeader><CardTitle className="font-headline">Equivalent Sizes</CardTitle></CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Region</TableHead>
                    <TableHead className="text-right">Size</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {Object.entries(convertedSizes).map(([standard, size]) => (
                    <TableRow key={standard} className={standard === inputStandard ? "bg-primary/10" : ""}>
                      <TableCell className="font-medium">{sizeStandards[standard as SizeStandard]}</TableCell>
                      <TableCell className="text-right font-semibold">{size}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: DressSizeConverterIntl.tsx ======
==================================================

// ====== START OF FILE: DrinkUnitCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.47 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, GlassWater as DrinkIcon } from "lucide-react"; // Using GlassWater as DrinkIcon

// UK Alcohol Units = (Strength (ABV) * Volume (ml)) / 1000

export default function DrinkUnitCalculator() {
  const [strengthAbv, setStrengthAbv] = useState<string>(''); // Alcohol By Volume (%)
  const [volumeMl, setVolumeMl] = useState<string>('');     // Volume in milliliters

  const [units, setUnits] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateUnits = () => {
    setError(null); setUnits(null);
    const abv = parseFloat(strengthAbv);
    const vol = parseFloat(volumeMl);

    if (isNaN(abv) || abv < 0 || abv > 100 || isNaN(vol) || vol <= 0) {
      setError('ABV (0-100%) and Volume (>0 ml) must be valid numbers.');
      return;
    }

    const calculatedUnits = (abv * vol) / 1000;
    setUnits(calculatedUnits.toFixed(1));
  };

  const resetForm = () => {
    setStrengthAbv(''); setVolumeMl('');
    setUnits(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>UK Alcohol Unit Calculator</AlertTitle><AlertDescription>Calculate the number of UK standard alcohol units in a beverage based on its strength (ABV %) and volume (ml).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter drink details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="strengthAbvDU">Strength (ABV %)</Label><Input id="strengthAbvDU" type="number" value={strengthAbv} onChange={e=>setStrengthAbv(e.target.value)} placeholder="e.g., 5.2 for 5.2% ABV"/></div>
            <div><Label htmlFor="volumeMlDU">Volume (ml)</Label><Input id="volumeMlDU" type="number" value={volumeMl} onChange={e=>setVolumeMl(e.target.value)} placeholder="e.g., 568 for a pint, 175 for a glass of wine"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateUnits}>Calculate Units</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(units || error) && (
          <Card>
            <CardHeader><CardDescription>UK Alcohol Units</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {units && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Alcohol Units</p><p className="text-2xl font-bold text-primary">{units} units</p></div><CopyButton textToCopy={units}/></div>)}
              <AlertDescription className="text-xs pt-2 mt-2">UK guidelines recommend adults not regularly exceed 14 units a week, spread over 3+ days. For more info, search NHS alcohol units.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}



// ====== END OF FILE: DrinkUnitCalculator.tsx ======
==================================================

// ====== START OF FILE: DrywallCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.81 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Layers } from "lucide-react";

type UnitSystemDrywall = 'imperial' | 'metric';
// Common drywall sheet sizes (imperial: feet, metric: meters or mm)
const sheetSizesImperial: Record<string, {width: number, height: number, area: number}> = { // area in sq ft
    "4x8": { width: 4, height: 8, area: 32 },
    "4x10": { width: 4, height: 10, area: 40 },
    "4x12": { width: 4, height: 12, area: 48 },
};
const sheetSizesMetric: Record<string, {width: number, height: number, area: number}> = { // area in sq m
    "1.2x2.4": { width: 1.2, height: 2.4, area: 2.88 }, // Approx 4x8 ft
    "1.2x3.0": { width: 1.2, height: 3.0, area: 3.6 },  // Approx 4x10 ft
};


export default function DrywallCalculator() {
  const [units, setUnits] = useState<UnitSystemDrywall>('imperial');
  const [roomLength, setRoomLength] = useState<string>('');
  const [roomWidth, setRoomWidth] = useState<string>('');
  const [roomHeight, setRoomHeight] = useState<string>('');
  const [sheetSize, setSheetSize] = useState<string>(units === 'imperial' ? "4x8" : "1.2x2.4");
  const [includeCeiling, setIncludeCeiling] = useState<boolean>(true);
  const [numOpenings, setNumOpenings] = useState<string>('0'); // doors/windows
  const [avgOpeningArea, setAvgOpeningArea] = useState<string>(units === 'imperial' ? '20' : '2'); // sq ft or sq m

  const [numSheets, setNumSheets] = useState<string | null>(null);
  const [totalWallArea, setTotalWallArea] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateDrywall = () => {
    setError(null); setNumSheets(null); setTotalWallArea(null);
    const L = parseFloat(roomLength);
    const W = parseFloat(roomWidth);
    const H = parseFloat(roomHeight);
    const openings = parseInt(numOpenings) || 0;
    const openingArea = parseFloat(avgOpeningArea) || 0;

    if (isNaN(L) || L<=0 || isNaN(W) || W<=0 || isNaN(H) || H<=0) {
      setError('Room dimensions (L, W, H) must be positive numbers.'); return;
    }
    if (isNaN(openings) || openings < 0 || isNaN(openingArea) || openingArea < 0) {
      setError('Openings and their area must be non-negative.'); return;
    }

    const currentSheetSizes = units === 'imperial' ? sheetSizesImperial : sheetSizesMetric;
    const selectedSheet = currentSheetSizes[sheetSize];
    if (!selectedSheet) { setError('Invalid sheet size selected.'); return; }

    const wallArea1 = L * H * 2; // Two walls of Length x Height
    const wallArea2 = W * H * 2; // Two walls of Width x Height
    let totalArea = wallArea1 + wallArea2;
    if (includeCeiling) totalArea += L * W;
    
    const totalOpeningArea = openings * openingArea;
    const netAreaToCover = Math.max(0, totalArea - totalOpeningArea);
    setTotalWallArea(`${netAreaToCover.toFixed(2)} ${units==='imperial' ? 'sq ft' : 'sq m'}`);

    const sheetsNeededRaw = netAreaToCover / selectedSheet.area;
    const sheetsWithWastage = Math.ceil(sheetsNeededRaw * 1.10); // Add 10% for wastage
    setNumSheets(sheetsWithWastage.toString());
  };

  const resetForm = () => {
    setRoomLength(''); setRoomWidth(''); setRoomHeight('');
    setSheetSize(units === 'imperial' ? "4x8" : "1.2x2.4");
    setIncludeCeiling(true); setNumOpenings('0'); setAvgOpeningArea(units === 'imperial' ? '20' : '2');
    setNumSheets(null); setTotalWallArea(null); setError(null);
  };

  // Update sheet size and opening area when units change
  React.useEffect(() => {
    setSheetSize(units === 'imperial' ? "4x8" : "1.2x2.4");
    setAvgOpeningArea(units === 'imperial' ? '20' : '2');
  }, [units]);

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Drywall Calculator</AlertTitle><AlertDescription>Estimate the number of drywall sheets needed for walls and optionally ceiling. Includes 10% wastage factor.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter room and sheet dimensions.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="drywallUnits">Unit System</Label><Select value={units} onValueChange={(v:UnitSystemDrywall)=>setUnits(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Imperial (Feet for room, Sheet size in feet)</SelectItem><SelectItem value="metric">Metric (Meters for room, Sheet size in meters)</SelectItem></SelectContent></Select></div>
            <p className="text-sm font-medium text-muted-foreground">Room Dimensions ({units === 'imperial' ? 'feet' : 'meters'}):</p>
            <div className="grid grid-cols-3 gap-2">
              <Input type="number" value={roomLength} onChange={e=>setRoomLength(e.target.value)} placeholder="Length"/>
              <Input type="number" value={roomWidth} onChange={e=>setRoomWidth(e.target.value)} placeholder="Width"/>
              <Input type="number" value={roomHeight} onChange={e=>setRoomHeight(e.target.value)} placeholder="Height"/>
            </div>
            <div><Label htmlFor="drywallSheetSize">Drywall Sheet Size</Label><Select value={sheetSize} onValueChange={setSheetSize}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                {Object.keys(units === 'imperial' ? sheetSizesImperial : sheetSizesMetric).map(s => <SelectItem key={s} value={s}>{s} {units==='imperial'?'ft':'m'}</SelectItem>)}
            </SelectContent></Select></div>
            <div className="flex items-center space-x-2"><input type="checkbox" id="includeCeilingDrywall" checked={includeCeiling} onChange={e=>setIncludeCeiling(e.target.checked)} className="form-checkbox h-4 w-4"/><Label htmlFor="includeCeilingDrywall">Include Ceiling</Label></div>
            <p className="text-sm font-medium text-muted-foreground">Openings (Doors/Windows - Optional Deduction):</p>
            <div className="grid grid-cols-2 gap-2">
              <Input type="number" value={numOpenings} onChange={e=>setNumOpenings(e.target.value)} placeholder="Number of Openings"/>
              <Input type="number" value={avgOpeningArea} onChange={e=>setAvgOpeningArea(e.target.value)} placeholder={`Avg. Area per Opening (${units === 'imperial' ? 'sq ft' : 'sq m'})`}/>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateDrywall}>Calculate Sheets</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(numSheets || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Drywall Needed</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalWallArea && (<div className="p-2 bg-muted rounded-md text-sm">Net Area to Cover: <strong className="font-semibold">{totalWallArea}</strong></div>)}
              {numSheets && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Number of Drywall Sheets (incl. 10% waste)</p><p className="text-2xl font-bold text-primary">{numSheets} sheets</p></div><CopyButton textToCopy={numSheets}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
    

// ====== END OF FILE: DrywallCalculator.tsx ======
==================================================

// ====== START OF FILE: DueDateCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.87 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { format, addDays, isValid, parse } from 'date-fns';
import { cn } from '@/lib/utils';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CalendarClock, CalendarDays } from "lucide-react";

type CalculationMethod = 'lmp' | 'conception_date';

export default function DueDateCalculator() {
  const [method, setMethod] = useState<CalculationMethod>('lmp');
  const [referenceDate, setReferenceDate] = useState<Date | undefined>(undefined);
  const [cycleLength, setCycleLength] = useState<string>('28'); // Only for LMP method if adjusting

  const [estimatedDueDate, setEstimatedDueDate] = useState<string | null>(null);
  const [gestationalAge, setGestationalAge] = useState<string | null>(null); // Weeks and days
  const [error, setError] = useState<string | null>(null);

  const calculateDueDate = () => {
    setError(null);
    setEstimatedDueDate(null);
    setGestationalAge(null);

    if (!referenceDate || !isValid(referenceDate)) {
      setError('Please select a valid reference date.');
      return;
    }

    let dueDate: Date;
    if (method === 'lmp') {
      // Naegele's Rule: LMP + 280 days (or LMP - 3 months + 7 days + 1 year)
      // Some adjust for cycle length different from 28 days.
      // LMP + (280 + (actual cycle length - 28))
      const cLength = parseInt(cycleLength);
       if (isNaN(cLength) || cLength < 20 || cLength > 45) {
          setError('Please enter a typical cycle length (20-45 days) if using LMP method.');
          return;
       }
      dueDate = addDays(referenceDate, 280 + (cLength - 28) );
    } else { // Conception Date
      // Due date = Conception Date + 266 days (38 weeks)
      dueDate = addDays(referenceDate, 266);
    }
    
    setEstimatedDueDate(format(dueDate, "PPP, EEEE")); // e.g., Jan 1, 2025, Wednesday

    // Calculate current gestational age (weeks and days from LMP or conception + 2 weeks)
    const today = new Date();
    let startDateForGestation = referenceDate;
    if (method === 'conception_date') {
        startDateForGestation = addDays(referenceDate, -14); // Estimate LMP from conception date
    }

    if (today < startDateForGestation) {
        setGestationalAge("Pregnancy has not started yet based on reference date.");
    } else {
        const diffDays = Math.floor((today.getTime() - startDateForGestation.getTime()) / (1000 * 60 * 60 * 24));
        const weeks = Math.floor(diffDays / 7);
        const days = diffDays % 7;
        setGestationalAge(`${weeks} weeks, ${days} days`);
    }
  };

  const resetForm = () => {
    setMethod('lmp');
    setReferenceDate(undefined);
    setCycleLength('28');
    setEstimatedDueDate(null);
    setGestationalAge(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Medical Disclaimer</AlertTitle>
        <AlertDescription>
          This calculator provides an estimated due date and gestational age. It is <strong className="font-semibold">not a substitute for professional medical advice</strong>. Consult your healthcare provider for accurate due date determination and prenatal care.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate your pregnancy due date.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="method">Calculation Method</Label>
              <Select value={method} onValueChange={(v: CalculationMethod) => setMethod(v)}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="lmp">Last Menstrual Period (LMP)</SelectItem>
                  <SelectItem value="conception_date">Date of Conception</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="refDate">{method === 'lmp' ? 'First Day of Last Menstrual Period' : 'Date of Conception'}</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button id="refDate" variant={"outline"} className={cn("w-full justify-start text-left font-normal", !referenceDate && "text-muted-foreground")}>
                    <CalendarDays className="mr-2 h-4 w-4" />
                    {referenceDate ? format(referenceDate, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={referenceDate} onSelect={setReferenceDate} initialFocus /></PopoverContent>
              </Popover>
            </div>
            {method === 'lmp' && (
              <div>
                <Label htmlFor="cycleLengthDueDate">Average Cycle Length (days)</Label>
                <Input id="cycleLengthDueDate" type="number" value={cycleLength} onChange={(e) => setCycleLength(e.target.value)} placeholder="e.g., 28" />
              </div>
            )}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateDueDate}>Calculate Due Date</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(estimatedDueDate || gestationalAge || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Dates</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {estimatedDueDate && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Estimated Due Date</p>
                  <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{estimatedDueDate}</p><CopyButton textToCopy={estimatedDueDate} size="sm" variant="ghost"/></div>
                </div>
              )}
              {gestationalAge && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Current Estimated Gestational Age (from today)</p>
                  <p className="font-semibold">{gestationalAge}</p>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: DueDateCalculator.tsx ======
==================================================

// ====== START OF FILE: EbtCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.05 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, DollarSign } from "lucide-react";

export default function EbtCalculator() {
  const [ebit, setEbit] = useState<string>('');
  const [interestExpense, setInterestExpense] = useState<string>('');

  const [ebtResult, setEbtResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateEbt = () => {
    setError(null);
    setEbtResult(null);

    const ebitVal = parseFloat(ebit);
    const interestVal = parseFloat(interestExpense);

    if (isNaN(ebitVal) || isNaN(interestVal)) {
      setError('Please enter valid numbers for EBIT and Interest Expense.');
      return;
    }
    
    const ebt = ebitVal - interestVal;
    setEbtResult(ebt.toFixed(2));
  };

  const resetForm = () => {
    setEbit('');
    setInterestExpense('');
    setEbtResult(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Earnings Before Tax (EBT) Calculator</AlertTitle>
        <AlertDescription>
          Calculate Earnings Before Tax (EBT) from Earnings Before Interest and Tax (EBIT) and interest expenses. EBT = EBIT - Interest Expense.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter financial figures.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="ebit">Earnings Before Interest & Tax (EBIT) ($)</Label>
              <Input
                id="ebit"
                type="number"
                value={ebit}
                onChange={(e) => setEbit(e.target.value)}
                placeholder="e.g., 100000"
              />
            </div>
            <div>
              <Label htmlFor="interestExpense">Interest Expense ($)</Label>
              <Input
                id="interestExpense"
                type="number"
                value={interestExpense}
                onChange={(e) => setInterestExpense(e.target.value)}
                placeholder="e.g., 5000"
              />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateEbt}>Calculate EBT</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(ebtResult || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Calculated EBT</CardDescription>
            </CardHeader>
            <CardContent>
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {ebtResult !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Earnings Before Tax (EBT)</p>
                    <p className="text-2xl font-bold text-primary">${ebtResult}</p>
                  </div>
                  <CopyButton textToCopy={ebtResult} />
                </div>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    EBT is a measure of a company's profitability before considering the effects of taxes.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: EbtCalculator.tsx ======
==================================================

// ====== START OF FILE: ElectricalLoadCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.96 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { PlusCircle, Trash2, Zap } from 'lucide-react';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info } from "lucide-react";

interface Appliance {
  id: string;
  name: string;
  wattage: number;
  quantity: number;
}

export default function ElectricalLoadCalculator() {
  const [appliances, setAppliances] = useState<Appliance[]>([
    { id: crypto.randomUUID(), name: 'Refrigerator', wattage: 200, quantity: 1 },
    { id: crypto.randomUUID(), name: 'Lights (LED)', wattage: 10, quantity: 10 },
  ]);
  const [totalWattage, setTotalWattage] = useState<number | null>(null);
  const [totalAmps120V, setTotalAmps120V] = useState<string | null>(null); // Optional: Amps at 120V
  const [totalAmps240V, setTotalAmps240V] = useState<string | null>(null); // Optional: Amps at 240V
  const [error, setError] = useState<string | null>(null);

  const handleApplianceChange = (id: string, field: keyof Omit<Appliance, 'id'>, value: string) => {
    setAppliances(prev => prev.map(app => app.id === id ? { ...app, [field]: field === 'name' ? value : parseFloat(value) || 0 } : app));
    setTotalWattage(null); setTotalAmps120V(null); setTotalAmps240V(null); // Reset on change
  };

  const addAppliance = () => {
    setAppliances(prev => [...prev, { id: crypto.randomUUID(), name: '', wattage: 0, quantity: 1 }]);
  };

  const removeAppliance = (id: string) => {
    if (appliances.length > 1) {
      setAppliances(prev => prev.filter(app => app.id !== id));
    } else { // If only one left, clear its values
      setAppliances([{ id: crypto.randomUUID(), name: '', wattage: 0, quantity: 1 }]);
    }
    setTotalWattage(null); setTotalAmps120V(null); setTotalAmps240V(null);
  };

  const calculateTotalLoad = () => {
    setError(null);
    if (appliances.some(app => app.wattage < 0 || app.quantity < 0)) {
      setError("Wattage and quantity cannot be negative.");
      return;
    }
    const totalW = appliances.reduce((sum, app) => sum + (app.wattage * app.quantity), 0);
    setTotalWattage(totalW);
    setTotalAmps120V((totalW / 120).toFixed(2)); // P = IV => I = P/V
    setTotalAmps240V((totalW / 240).toFixed(2));
  };

  const resetForm = () => {
    setAppliances([{ id: crypto.randomUUID(), name: 'Refrigerator', wattage: 200, quantity: 1 },{ id: crypto.randomUUID(), name: 'Lights (LED)', wattage: 10, quantity: 10 }]);
    setTotalWattage(null); setTotalAmps120V(null); setTotalAmps240V(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Electrical Load Calculator</AlertTitle><AlertDescription>Estimate the total electrical load (wattage) by listing appliances and their power ratings. This helps in sizing generators or understanding circuit capacity needs. Assumes all loads are resistive or power factor corrected for simplicity.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardDescription>List Your Appliances</CardDescription></CardHeader>
          <CardContent className="space-y-3 max-h-[400px] overflow-y-auto pr-2">
            {appliances.map((app, index) => (
              <div key={app.id} className="grid grid-cols-[1fr_100px_80px_auto] gap-2 items-center p-2 border rounded-md">
                <Input type="text" placeholder={`Appliance ${index+1}`} value={app.name} onChange={e=>handleApplianceChange(app.id,'name',e.target.value)} className="h-9"/>
                <Input type="number" value={app.wattage || ''} onChange={e=>handleApplianceChange(app.id,'wattage',e.target.value)} placeholder="Watts" className="h-9"/>
                <Input type="number" value={app.quantity || ''} onChange={e=>handleApplianceChange(app.id,'quantity',e.target.value)} placeholder="Qty" className="h-9"/>
                <Button variant="ghost" size="icon" onClick={()=>removeAppliance(app.id)} disabled={appliances.length === 1 && app.name ==='' && app.wattage===0} className="h-9 w-9"><Trash2 className="h-4 w-4 text-destructive"/></Button>
              </div>
            ))}
            <Button variant="outline" size="sm" onClick={addAppliance}><PlusCircle className="mr-2 h-4 w-4"/> Add Appliance</Button>
          </CardContent>
          <CardFooter><Button onClick={calculateTotalLoad} className="w-full md:w-auto">Calculate Total Load</Button></CardFooter>
        </Card>
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Load Summary</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {totalWattage !== null && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Total Estimated Wattage</p><p className="text-2xl font-bold text-primary">{totalWattage.toLocaleString()} W</p></div><CopyButton textToCopy={totalWattage.toString()}/></div>)}
            {totalAmps120V !== null && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Approx. Amps @ 120V</p><p className="font-semibold">{totalAmps120V} A</p></div>)}
            {totalAmps240V !== null && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Approx. Amps @ 240V</p><p className="font-semibold">{totalAmps240V} A</p></div>)}
          </CardContent>
           <CardFooter><Button variant="outline" onClick={resetForm} className="w-full">Reset</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}

    

// ====== END OF FILE: ElectricalLoadCalculator.tsx ======
==================================================

// ====== START OF FILE: ElectricityCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.64 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Bolt } from "lucide-react";

export default function ElectricityCalculator() {
  const [powerWatts, setPowerWatts] = useState<string>('');
  const [hoursUsed, setHoursUsed] = useState<string>(''); // Per day
  const [daysUsed, setDaysUsed] = useState<string>('30'); // Per month (default)
  const [costPerKwh, setCostPerKwh] = useState<string>(''); // e.g., 0.15 for $0.15/kWh

  const [totalKwh, setTotalKwh] = useState<string | null>(null);
  const [totalCost, setTotalCost] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateElectricity = () => {
    setError(null);
    setTotalKwh(null);
    setTotalCost(null);

    const powerW = parseFloat(powerWatts);
    const hours = parseFloat(hoursUsed);
    const days = parseInt(daysUsed);
    const costKwh = parseFloat(costPerKwh);

    if (isNaN(powerW) || powerW <= 0 || isNaN(hours) || hours <= 0 || isNaN(days) || days <= 0 || isNaN(costKwh) || costKwh < 0) {
      setError('Please enter valid positive numbers for power, hours/day, days/month, and cost/kWh (cost can be 0).');
      return;
    }

    const powerKw = powerW / 1000;
    const dailyKwh = powerKw * hours;
    const monthlyKwh = dailyKwh * days;
    const calculatedTotalCost = monthlyKwh * costKwh;

    setTotalKwh(monthlyKwh.toFixed(2));
    setTotalCost(calculatedTotalCost.toFixed(2));
  };

  const resetForm = () => {
    setPowerWatts(''); setHoursUsed(''); setDaysUsed('30'); setCostPerKwh('');
    setTotalKwh(null); setTotalCost(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Electricity Cost Estimation</AlertTitle><AlertDescription>Estimate electricity consumption (kWh) and cost for an appliance or device. Actual costs may vary due to tiered rates or other fees.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter appliance details and usage.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="powerWatts">Appliance Power (Watts)</Label><Input id="powerWatts" type="number" value={powerWatts} onChange={(e) => setPowerWatts(e.target.value)} placeholder="e.g., 100" /></div>
            <div><Label htmlFor="hoursUsed">Hours Used Per Day</Label><Input id="hoursUsed" type="number" value={hoursUsed} onChange={(e) => setHoursUsed(e.target.value)} placeholder="e.g., 4" /></div>
            <div><Label htmlFor="daysUsed">Days Used Per Month</Label><Input id="daysUsed" type="number" value={daysUsed} onChange={(e) => setDaysUsed(e.target.value)} placeholder="e.g., 30" /></div>
            <div><Label htmlFor="costPerKwh">Cost Per kWh ($)</Label><Input id="costPerKwh" type="number" value={costPerKwh} onChange={(e) => setCostPerKwh(e.target.value)} placeholder="e.g., 0.15" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateElectricity}>Calculate Cost</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(totalKwh || totalCost || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Consumption & Cost</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalKwh && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Total Energy Consumption</p>
                  <p className="font-semibold">{totalKwh} kWh / month</p>
                </div>
              )}
              {totalCost && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Total Cost</p><p className="text-3xl font-bold text-primary">${totalCost} / month</p></div>
                  <CopyButton textToCopy={totalCost} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ElectricityCalculator.tsx ======
==================================================

// ====== START OF FILE: EllipseCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.76 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Circle } from "lucide-react"; // Circle as a stand-in for Ellipse

export default function EllipseCalculator() {
  const [semiMajorAxis, setSemiMajorAxis] = useState<string>(''); // a
  const [semiMinorAxis, setSemiMinorAxis] = useState<string>(''); // b

  const [area, setArea] = useState<string | null>(null);
  const [circumferenceApprox, setCircumferenceApprox] = useState<string | null>(null); // Ramanujan's approximation
  const [eccentricity, setEccentricity] = useState<string | null>(null);
  const [fociDistance, setFociDistance] = useState<string | null>(null); // Distance from center to focus (c)
  const [error, setError] = useState<string | null>(null);

  const calculateEllipse = () => {
    setError(null); setArea(null); setCircumferenceApprox(null); setEccentricity(null); setFociDistance(null);
    const a = parseFloat(semiMajorAxis);
    const b = parseFloat(semiMinorAxis);

    if (isNaN(a) || a <= 0 || isNaN(b) || b <= 0) {
      setError("Semi-major (a) and semi-minor (b) axes must be positive numbers.");
      return;
    }
    if (b > a) {
      setError("Semi-minor axis (b) cannot be greater than semi-major axis (a). Swap values if needed.");
      return;
    }

    // Area: A = πab
    setArea((Math.PI * a * b).toFixed(4));

    // Eccentricity: e = sqrt(1 - (b^2 / a^2))
    setEccentricity(Math.sqrt(1 - (b*b)/(a*a)).toFixed(4));

    // Distance from center to focus: c = sqrt(a^2 - b^2)
    setFociDistance(Math.sqrt(a*a - b*b).toFixed(4));

    // Circumference (Ramanujan's approximation): P ≈ π [3(a+b) - sqrt((3a+b)(a+3b))]
    const h = Math.pow(a-b, 2) / Math.pow(a+b, 2);
    // A more common Ramanujan approximation is P ≈ π(a+b)(1 + 3h / (10 + sqrt(4-3h))) - this one is complex.
    // Using the simpler one often cited: P ≈ π [3(a+b) - sqrt((3a+b)(a+3b))]
    const circApprox = Math.PI * (3*(a+b) - Math.sqrt((3*a+b)*(a+3*b)));
    setCircumferenceApprox(circApprox.toFixed(4));
  };

  const resetForm = () => {
    setSemiMajorAxis(''); setSemiMinorAxis('');
    setArea(null); setCircumferenceApprox(null); setEccentricity(null); setFociDistance(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Ellipse Calculator</AlertTitle><AlertDescription>Calculate area, approximate circumference, eccentricity, and focal distance of an ellipse from its semi-major (a) and semi-minor (b) axes.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter ellipse axes (a ≥ b).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="semiMajorA">Semi-major axis (a)</Label><Input id="semiMajorA" type="number" value={semiMajorAxis} onChange={e=>setSemiMajorAxis(e.target.value)} placeholder="e.g., 5"/></div>
            <div><Label htmlFor="semiMinorB">Semi-minor axis (b)</Label><Input id="semiMinorB" type="number" value={semiMinorAxis} onChange={e=>setSemiMinorAxis(e.target.value)} placeholder="e.g., 3"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateEllipse}>Calculate Properties</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(area || error) && (
          <Card>
            <CardHeader><CardDescription>Ellipse Properties</CardDescription></CardHeader>
            <CardContent className="space-y-2 text-sm">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {area && (<div className="p-1 bg-muted rounded-md">Area: <strong className="font-semibold">{area} units²</strong></div>)}
              {circumferenceApprox && (<div className="p-1 bg-muted rounded-md">Approx. Circumference: <strong className="font-semibold">{circumferenceApprox} units</strong></div>)}
              {eccentricity && (<div className="p-1 bg-muted rounded-md">Eccentricity (e): <strong className="font-semibold">{eccentricity}</strong></div>)}
              {fociDistance && (<div className="p-1 bg-muted rounded-md">Focal Distance (c): <strong className="font-semibold">{fociDistance} units</strong></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: EllipseCalculator.tsx ======
==================================================

// ====== START OF FILE: Emc2Calculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.74 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Atom } from "lucide-react"; // Atom icon seems fitting

const C_SPEED_OF_LIGHT = 299792458; // meters per second

export default function Emc2Calculator() {
  const [massKg, setMassKg] = useState<string>('');

  const [energyJoules, setEnergyJoules] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateEnergy = () => {
    setError(null);
    setEnergyJoules(null);

    const m = parseFloat(massKg);

    if (isNaN(m) || m < 0) {
      setError('Please enter a valid non-negative mass in kilograms (kg).');
      return;
    }

    const E = m * Math.pow(C_SPEED_OF_LIGHT, 2);

    if (isNaN(E) || !isFinite(E)) {
      setError('Calculation resulted in an invalid number. Mass may be too large.');
      return;
    }

    setEnergyJoules(E.toExponential(4)); // Use scientific notation for large result
  };

  const resetForm = () => {
    setMassKg('');
    setEnergyJoules(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Mass-Energy Equivalence (E=mc²)</AlertTitle>
        <AlertDescription>
          Calculate the energy equivalent of a given mass using Einstein's famous formula. Note the immense amount of energy even in small masses.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter mass to find its energy equivalent.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="massKg">Mass (m) in Kilograms (kg)</Label>
              <Input
                id="massKg"
                type="number"
                value={massKg}
                onChange={(e) => setMassKg(e.target.value)}
                placeholder="e.g., 1 (for 1 kg)"
              />
            </div>
             <p className="text-xs text-muted-foreground">Speed of light (c) ≈ {C_SPEED_OF_LIGHT.toLocaleString()} m/s</p>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateEnergy}>Calculate Energy (E)</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(energyJoules || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Calculated Energy</CardDescription>
            </CardHeader>
            <CardContent>
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {energyJoules && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Energy (E) in Joules</p>
                    <p className="text-2xl font-bold text-primary break-all">{energyJoules} J</p>
                  </div>
                  <CopyButton textToCopy={energyJoules} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: Emc2Calculator.tsx ======
==================================================

// ====== START OF FILE: EnergyUnitConverterBtu.tsx ======
// File converted from TSX to TXT
// Original size: 4.87 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Flame } from "lucide-react";

type EnergyUnit = 'btu' | 'joules' | 'kcal' | 'kwh';

const toJoulesFactors: Record<EnergyUnit, number> = {
  btu: 1055.06,
  joules: 1,
  kcal: 4184,
  kwh: 3600000,
};

const fromJoulesFactors: Record<EnergyUnit, number> = {
  btu: 1 / 1055.06,
  joules: 1,
  kcal: 1 / 4184,
  kwh: 1 / 3600000,
};

const unitLabels: Record<EnergyUnit, string> = {
  btu: "British Thermal Units (BTU)",
  joules: "Joules (J)",
  kcal: "Kilocalories (kcal)",
  kwh: "Kilowatt-hours (kWh)",
};

export default function EnergyUnitConverterBtu() {
  const [inputValue, setInputValue] = useState<string>('1');
  const [fromUnit, setFromUnit] = useState<EnergyUnit>('btu');
  const [toUnit, setToUnit] = useState<EnergyUnit>('joules');
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const convertEnergy = () => {
    setError(null);
    setResult(null);
    const val = parseFloat(inputValue);
    if (isNaN(val) || val < 0) {
      setError('Input value must be a non-negative number.');
      return;
    }
    if (fromUnit === toUnit) {
      setResult(val.toPrecision(5));
      return;
    }

    const valueInJoules = val * toJoulesFactors[fromUnit];
    const convertedValue = valueInJoules * fromJoulesFactors[toUnit];
    setResult(convertedValue.toPrecision(5));
  };

  const resetForm = () => {
    setInputValue('1');
    setFromUnit('btu');
    setToUnit('joules');
    setResult(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Energy Unit Converter</AlertTitle><AlertDescription>Convert between various energy units like BTU, Joules, Kilocalories, and Kilowatt-hours.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter value and select units to convert.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="inputValueEnergy">Value</Label>
              <Input id="inputValueEnergy" type="number" value={inputValue} onChange={e => setInputValue(e.target.value)} placeholder="e.g., 1000" />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="fromUnitEnergy">From</Label>
                <Select value={fromUnit} onValueChange={(v: EnergyUnit) => setFromUnit(v)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>{Object.entries(unitLabels).map(([key, label]) => <SelectItem key={`from-${key}`} value={key}>{label}</SelectItem>)}</SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="toUnitEnergy">To</Label>
                <Select value={toUnit} onValueChange={(v: EnergyUnit) => setToUnit(v)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>{Object.entries(unitLabels).map(([key, label]) => <SelectItem key={`to-${key}`} value={key}>{label}</SelectItem>)}</SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={convertEnergy}>Convert</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Conversion Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">{inputValue} {unitLabels[fromUnit]} is</p>
                    <p className="text-2xl font-bold text-primary">{result} {unitLabels[toUnit]}</p>
                  </div>
                  <CopyButton textToCopy={`${result} ${unitLabels[toUnit]}`} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: EnergyUnitConverterBtu.tsx ======
==================================================

// ====== START OF FILE: EngineHorsepowerCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.46 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Gauge } from "lucide-react";

// Common formula: Horsepower = (Torque (lb-ft) * RPM) / 5252

export default function EngineHorsepowerCalculator() {
  const [torque, setTorque] = useState<string>(''); // lb-ft
  const [rpm, setRpm] = useState<string>(''); // Revolutions Per Minute
  
  const [horsepower, setHorsepower] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateHorsepower = () => {
    setError(null);
    setHorsepower(null);

    const tq = parseFloat(torque);
    const engineRpm = parseFloat(rpm);

    if (isNaN(tq) || tq < 0 || isNaN(engineRpm) || engineRpm < 0) {
      setError('Please enter valid non-negative numbers for torque (lb-ft) and RPM.');
      return;
    }
    if (engineRpm === 0 && tq > 0) { // HP is 0 if RPM is 0, unless torque is also 0.
        setHorsepower('0.00');
        return;
    }
    if (engineRpm === 0 && tq === 0){
        setHorsepower('0.00');
        return;
    }


    const hp = (tq * engineRpm) / 5252;
    setHorsepower(hp.toFixed(2));
  };

  const resetForm = () => {
    setTorque('');
    setRpm('');
    setHorsepower(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Engine Horsepower Estimation</AlertTitle><AlertDescription>Calculate engine horsepower using the common formula: HP = (Torque × RPM) / 5252. Ensure torque is in lb-ft.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter engine torque and RPM.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="torque">Torque (lb-ft)</Label><Input id="torque" type="number" value={torque} onChange={(e) => setTorque(e.target.value)} placeholder="e.g., 300" /></div>
            <div><Label htmlFor="rpm">Engine RPM</Label><Input id="rpm" type="number" value={rpm} onChange={(e) => setRpm(e.target.value)} placeholder="e.g., 5000" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateHorsepower}>Calculate HP</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(horsepower || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Horsepower</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {horsepower && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Horsepower (HP)</p><p className="text-3xl font-bold text-primary">{horsepower}</p></div>
                  <CopyButton textToCopy={horsepower} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: EngineHorsepowerCalculator.tsx ======
==================================================

// ====== START OF FILE: EsgImpactCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.1 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Rocket, Globe } from "lucide-react";

// This conceptual calculator uses a simplified Scorecard Method, similar to those used in venture capital.
// Each factor is given a weight, and the user rates the company on that factor.
// This is for illustrative purposes only.
const esgFactors = [
  { id: 'environmental_policy', label: 'Environmental Policy & Impact', weight: 0.30 },
  { id: 'social_labor', label: 'Social Impact & Labor Practices', weight: 0.30 },
  { id: 'governance', label: 'Corporate Governance & Transparency', weight: 0.25 },
  { id: 'supply_chain', label: 'Sustainable Supply Chain', weight: 0.15 },
];

const ratingOptions = [
  { value: '0', label: '0% - Very Weak / Not Addressed' },
  { value: '0.25', label: '25% - Weak / Nascent' },
  { value: '0.5', label: '50% - Average / Compliant' },
  { value: '0.75', label: '75% - Strong / Proactive' },
  { value: '1', label: '100% - Excellent / Industry Leader' },
];

type FactorRatings = Record<string, string>;

export default function EsgImpactCalculator() {
  const initialRatings = esgFactors.reduce((acc, factor) => {
    acc[factor.id] = '0.5'; // Default to Average
    return acc;
  }, {} as FactorRatings);
  
  const [ratings, setRatings] = useState<FactorRatings>(initialRatings);
  const [esgScore, setEsgScore] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateEsgScore = () => {
    setError(null); setEsgScore(null);
    let totalWeightedScore = 0;
    for (const factor of esgFactors) {
      const ratingValue = parseFloat(ratings[factor.id]);
      if (isNaN(ratingValue)) {
        setError(`Invalid rating for ${factor.label}.`);
        return;
      }
      totalWeightedScore += ratingValue * factor.weight;
    }
    const finalScore = totalWeightedScore * 100;
    setEsgScore(finalScore.toFixed(1));
  };

  const resetForm = () => {
    setRatings(initialRatings);
    setEsgScore(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Conceptual ESG Scorecard - For Illustration Only</AlertTitle>
        <AlertDescription>
          True ESG analysis is highly complex, relying on extensive, audited data and sophisticated models. This calculator uses a <strong className="font-semibold">simplified, subjective scorecard for educational purposes only.</strong> The score is illustrative and should NOT be used for any investment decisions. Consult professional ESG rating agencies and financial advisors for actual analysis.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Rate the investment on these key ESG factors (0-100%).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            {esgFactors.map(factor => (
              <div key={factor.id}>
                <Label htmlFor={factor.id} className="font-medium">{factor.label}</Label>
                <p className="text-xs text-muted-foreground mb-1">(Weight: {factor.weight * 100}%)</p>
                <Select value={ratings[factor.id]} onValueChange={(v) => handleRatingChange(factor.id, v)}>
                  <SelectTrigger id={factor.id}><SelectValue/></SelectTrigger>
                  <SelectContent>{ratingOptions.map(opt=><SelectItem key={opt.value} value={opt.value}>{opt.label}</SelectItem>)}</SelectContent>
                </Select>
              </div>
            ))}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateEsgScore}>Estimate ESG Score</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(esgScore || error) && (
          <Card>
            <CardHeader><CardDescription>Illustrative ESG Score</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {esgScore && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Conceptual ESG Score</p><p className="text-3xl font-bold text-primary">{esgScore} / 100</p></div><CopyButton textToCopy={esgScore}/></div>)}
              <AlertDescription className="text-xs pt-2 mt-2">A higher score suggests a better ESG profile based on this illustrative model. This is not a formal rating.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: EsgImpactCalculator.tsx ======
==================================================

// ====== START OF FILE: EsgImpactScoreCalculatorConceptual.tsx ======
// File converted from TSX to TXT
// Original size: 5.33 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Info, Leaf, Globe, Users } from "lucide-react";

interface EsgFactor {
  id: string;
  question: string;
  category: 'Environmental' | 'Social' | 'Governance';
  weight: number; 
}

const esgQuestions: EsgFactor[] = [
  { id: 'e1', question: 'Does the investment actively reduce carbon emissions or promote renewable energy?', category: 'Environmental', weight: 3 },
  { id: 'e2', question: 'Does it prioritize water conservation and waste reduction?', category: 'Environmental', weight: 2 },
  { id: 's1', question: 'Does it ensure fair labor practices and employee well-being?', category: 'Social', weight: 3 },
  { id: 's2', question: 'Does it contribute positively to local communities or underserved populations?', category: 'Social', weight: 2 },
  { id: 'g1', question: 'Does it have transparent and ethical corporate governance structures?', category: 'Governance', weight: 3 },
  { id: 'g2', question: 'Is there strong board independence and accountability?', category: 'Governance', weight: 2 },
];

type Answers = Record<string, boolean>;

export default function EsgImpactScoreCalculatorConceptual() {
  const initialAnswers = esgQuestions.reduce((acc, q) => ({...acc, [q.id]: false}), {} as Answers);
  const [answers, setAnswers] = useState<Answers>(initialAnswers);
  const [impactScore, setImpactScore] = useState<string | null>(null);
  const [impactLevel, setImpactLevel] = useState<string | null>(null);

  const handleCheckboxChange = (id: string, checked: boolean) => {
    setAnswers(prev => ({ ...prev, [id]: checked }));
  };

  const calculateEsgScore = () => {
    let score = 0;
    let maxScore = 0;
    esgQuestions.forEach(q => {
      if (answers[q.id]) score += q.weight;
      maxScore += q.weight;
    });
    
    const percentageScore = maxScore > 0 ? (score / maxScore) * 100 : 0;
    setImpactScore(percentageScore.toFixed(0) + "%");

    if (percentageScore >= 75) setImpactLevel("High Positive Impact Potential (Illustrative)");
    else if (percentageScore >= 50) setImpactLevel("Moderate Positive Impact Potential (Illustrative)");
    else if (percentageScore >= 25) setImpactLevel("Some Positive Impact Aspects (Illustrative)");
    else setImpactLevel("Low or Unclear Positive Impact (Illustrative)");
  };

  const resetForm = () => {
    setAnswers(initialAnswers); setImpactScore(null); setImpactLevel(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4"/>
        <AlertTitle>Conceptual ESG Impact Estimator - For Illustration Only</AlertTitle>
        <AlertDescription>
          Measuring true ESG (Environmental, Social, Governance) impact is extremely complex. This calculator uses a <strong className="font-semibold">highly simplified, qualitative questionnaire for educational purposes ONLY.</strong> The "score" generated has no official standing and should NOT be used for investment decisions. Consult specialized ESG data providers and financial advisors.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Consider these ESG factors for an investment (Illustrative).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            {esgQuestions.map(q => (
              <div key={q.id} className="flex items-start space-x-2 p-2 border rounded-md">
                <Checkbox id={q.id} checked={answers[q.id]} onCheckedChange={(checked) => handleCheckboxChange(q.id, !!checked)} className="mt-1"/>
                <div className="grid gap-1.5 leading-none">
                  <Label htmlFor={q.id} className="text-sm font-medium">{q.question}</Label>
                  <p className="text-xs text-muted-foreground">Category: {q.category} (Illustrative Points: {q.weight})</p>
                </div>
              </div>
            ))}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateEsgScore}>Assess Impact (Illustrative)</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(impactScore) && (
          <Card>
            <CardHeader><CardDescription>Illustrative ESG Impact Profile</CardDescription></CardHeader>
            <CardContent className="space-y-3">
                <div className="p-3 bg-primary/10 rounded-md text-center">
                    <p className="text-sm text-muted-foreground">Illustrative ESG Score</p>
                    <p className="text-3xl font-bold text-primary">{impactScore}</p>
                </div>
                {impactLevel && <Alert className="mt-2"><Globe className="h-4 w-4"/><AlertTitle>Potential Impact Level</AlertTitle><AlertDescription>{impactLevel}</AlertDescription></Alert>}
                <AlertDescription className="text-xs pt-2">This score is based on your selections and predefined illustrative weights. It's not a formal ESG rating.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: EsgImpactScoreCalculatorConceptual.tsx ======
==================================================

// ====== START OF FILE: EstateTaxCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.42 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Landmark } from "lucide-react";

// Note: Estate tax laws are complex and vary by jurisdiction and year.
// This is a highly simplified placeholder.
// Key factors: Gross Estate Value, Deductions, Applicable Exclusion Amount, Tax Rates.

export default function EstateTaxCalculator() {
  const [grossEstateValue, setGrossEstateValue] = useState<string>('');
  const [deductions, setDeductions] = useState<string>('0'); // e.g., debts, funeral expenses, charitable contributions
  const [applicableExclusion, setApplicableExclusion] = useState<string>('13610000'); // Federal for 2024, as example
  
  const [taxableEstate, setTaxableEstate] = useState<string | null>(null);
  const [estimatedEstateTax, setEstimatedEstateTax] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Simplified progressive tax rate - placeholder
  const calculateSimplifiedTax = (taxableAmount: number): number => {
    if (taxableAmount <= 0) return 0;
    // This is extremely simplified. Real estate tax has multiple brackets.
    // Example: flat 40% on amount over exclusion (very rough)
    if (taxableAmount > 0) return taxableAmount * 0.40; 
    return 0;
  };

  const calculateTax = () => {
    setError(null);
    setTaxableEstate(null);
    setEstimatedEstateTax(null);

    const gev = parseFloat(grossEstateValue);
    const ded = parseFloat(deductions);
    const excl = parseFloat(applicableExclusion);

    if (isNaN(gev) || gev < 0 || isNaN(ded) || ded < 0 || isNaN(excl) || excl < 0) {
      setError('Please enter valid non-negative numbers for all fields.');
      return;
    }

    const netTaxableEstate = Math.max(0, gev - ded - excl);
    setTaxableEstate(netTaxableEstate.toFixed(2));
    
    const tax = calculateSimplifiedTax(netTaxableEstate);
    setEstimatedEstateTax(tax.toFixed(2));
  };
  
  const resetForm = () => {
    setGrossEstateValue('');
    setDeductions('0');
    setApplicableExclusion('13610000');
    setTaxableEstate(null);
    setEstimatedEstateTax(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Simplified Estimator - For Informational Purposes Only</AlertTitle>
        <AlertDescription>
          Estate tax laws are extremely complex, vary significantly by jurisdiction (federal/state), and change frequently. This calculator uses highly simplified assumptions (e.g., a flat tax rate above exclusion and 2024 federal exclusion) and <strong className="font-semibold">should not be used for actual financial or legal planning</strong>. Consult with a qualified estate planning attorney or tax professional for advice.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate potential estate tax (highly simplified).</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="grossEstateValue">Gross Estate Value ($)</Label><Input id="grossEstateValue" type="number" value={grossEstateValue} onChange={(e) => setGrossEstateValue(e.target.value)} placeholder="e.g., 15000000" /></div>
            <div><Label htmlFor="deductions">Allowable Deductions ($)</Label><Input id="deductions" type="number" value={deductions} onChange={(e) => setDeductions(e.target.value)} placeholder="e.g., 500000" /></div>
            <div><Label htmlFor="applicableExclusion">Applicable Exclusion Amount ($)</Label><Input id="applicableExclusion" type="number" value={applicableExclusion} onChange={(e) => setApplicableExclusion(e.target.value)} placeholder="e.g., 13610000 (2024 Federal)" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTax}>Estimate Tax</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(taxableEstate || estimatedEstateTax || error) && (
          <Card>
            <CardHeader><CardDescription>Estimation Results (Simplified)</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {taxableEstate && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Taxable Estate (After Excl.)</p><p className="font-semibold">${taxableEstate}</p></div>)}
              {estimatedEstateTax && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Estate Tax</p><p className="text-2xl font-bold text-primary">${estimatedEstateTax}</p></div>
                  <CopyButton textToCopy={estimatedEstateTax} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: EstateTaxCalculator.tsx ======
==================================================

// ====== START OF FILE: ExponentCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.66 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Superscript } from "lucide-react";

export default function ExponentCalculator() {
  const [base, setBase] = useState<string>('');
  const [exponent, setExponent] = useState<string>('');
  
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateExponent = () => {
    setError(null);
    setResult(null);

    const baseNum = parseFloat(base);
    const expNum = parseFloat(exponent);

    if (isNaN(baseNum) || isNaN(expNum)) {
      setError('Please enter valid numbers for both base and exponent.');
      return;
    }
    
    // Handle 0^0 as undefined or 1 based on context, Math.pow returns 1.
    // Handle negative base with fractional exponent (complex numbers) - this calculator won't.
    if (baseNum < 0 && expNum % 1 !== 0 && expNum > 0 && expNum < 1) {
        setError("Calculating fractional exponents of negative bases results in complex numbers, which this calculator does not support.");
        return;
    }


    const calculatedResult = Math.pow(baseNum, expNum);
    
    if (isNaN(calculatedResult) || !isFinite(calculatedResult)) {
        setError('Calculation resulted in an invalid number (e.g., too large, undefined).');
        return;
    }

    // Format large/small numbers with scientific notation if needed or limit precision
    setResult(Number(calculatedResult.toPrecision(15)).toString()); // Show up to 15 significant digits
  };
  
  const resetForm = () => {
    setBase('');
    setExponent('');
    setResult(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate the result of a base raised to an exponent (base<sup>exponent</sup>).</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="base">Base</Label><Input id="base" type="number" value={base} onChange={(e) => setBase(e.target.value)} placeholder="e.g., 2" /></div>
            <div><Label htmlFor="exponent">Exponent</Label><Input id="exponent" type="number" value={exponent} onChange={(e) => setExponent(e.target.value)} placeholder="e.g., 10" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateExponent}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Result</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Result</p><p className="text-3xl font-bold text-primary break-all">{result}</p></div>
                  <CopyButton textToCopy={result} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ExponentCalculator.tsx ======
==================================================

// ====== START OF FILE: ExponentiationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.62 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Superscript } from "lucide-react"; // Using Superscript as it's relevant

// This calculator is functionally identical to ExponentCalculator for now.
// It can be expanded later for more specific exponentiation features if needed.

export default function ExponentiationCalculator() {
  const [base, setBase] = useState<string>('');
  const [exponent, setExponent] = useState<string>('');
  
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateExponentiation = () => {
    setError(null);
    setResult(null);

    const baseNum = parseFloat(base);
    const expNum = parseFloat(exponent);

    if (isNaN(baseNum) || isNaN(expNum)) {
      setError('Please enter valid numbers for both base and exponent.');
      return;
    }
    
    if (baseNum < 0 && expNum % 1 !== 0 && expNum > 0 && expNum < 1) {
        setError("Calculating fractional exponents of negative bases results in complex numbers, which this calculator does not support.");
        return;
    }

    const calculatedResult = Math.pow(baseNum, expNum);
    
    if (isNaN(calculatedResult) || !isFinite(calculatedResult)) {
        setError('Calculation resulted in an invalid number (e.g., too large, undefined).');
        return;
    }
    
    setResult(Number(calculatedResult.toPrecision(15)).toString());
  };
  
  const resetForm = () => {
    setBase('');
    setExponent('');
    setResult(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Perform exponentiation: calculate base raised to the power of an exponent (base<sup>exponent</sup>).</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="baseExpo">Base</Label><Input id="baseExpo" type="number" value={base} onChange={(e) => setBase(e.target.value)} placeholder="e.g., 3" /></div>
            <div><Label htmlFor="exponentExpo">Exponent</Label><Input id="exponentExpo" type="number" value={exponent} onChange={(e) => setExponent(e.target.value)} placeholder="e.g., 4" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateExponentiation}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Result</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Result</p><p className="text-3xl font-bold text-primary break-all">{result}</p></div>
                  <CopyButton textToCopy={result} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ExponentiationCalculator.tsx ======
==================================================

// ====== START OF FILE: FactorCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.68 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, DivideSquare } from "lucide-react";

export default function FactorCalculator() {
  const [numberInput, setNumberInput] = useState<string>('');
  
  const [factors, setFactors] = useState<string | null>(null);
  const [primeFactors, setPrimeFactors] = useState<string | null>(null);
  const [isNumberPrime, setIsNumberPrime] = useState<boolean | null>(null);
  const [error, setError] = useState<string | null>(null);

  const getFactors = (n: number): number[] => {
    const factorList: number[] = [];
    for (let i = 1; i * i <= n; i++) {
      if (n % i === 0) {
        factorList.push(i);
        if (i * i !== n) {
          factorList.push(n / i);
        }
      }
    }
    return factorList.sort((a, b) => a - b);
  };

  const getPrimeFactors = (n: number): number[] => {
    const primeFactorList: number[] = [];
    let num = n;
    for (let i = 2; i * i <= num; i++) {
      while (num % i === 0) {
        primeFactorList.push(i);
        num /= i;
      }
    }
    if (num > 1) { // Remaining number is prime
      primeFactorList.push(num);
    }
    return primeFactorList;
  };
  
  const checkPrime = (n: number): boolean => {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 === 0 || n % 3 === 0) return false;
    for (let i = 5; i * i <= n; i = i + 6) {
        if (n % i === 0 || n % (i + 2) === 0) return false;
    }
    return true;
  };

  const calculateFactors = () => {
    setError(null);
    setFactors(null);
    setPrimeFactors(null);
    setIsNumberPrime(null);

    const num = parseInt(numberInput);

    if (isNaN(num) || num <= 0) {
      setError('Please enter a valid positive integer greater than 0.');
      return;
    }
    if (num > 1000000) { // Performance limit
        setError('Number too large for quick factorization (max 1,000,000).');
        return;
    }

    const allFactors = getFactors(num);
    setFactors(allFactors.join(', '));

    const primeFactorList = getPrimeFactors(num);
    setPrimeFactors(primeFactorList.join(' × '));
    
    setIsNumberPrime(checkPrime(num));
  };
  
  const resetForm = () => {
    setNumberInput('');
    setFactors(null);
    setPrimeFactors(null);
    setIsNumberPrime(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Find all factors and prime factorization of an integer.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="numberInputFactor">Enter a Positive Integer</Label><Input id="numberInputFactor" type="number" value={numberInput} onChange={(e) => setNumberInput(e.target.value)} placeholder="e.g., 60" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateFactors}>Find Factors</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(factors || error) && (
          <Card>
            <CardHeader><CardDescription>Factorization Results</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {isNumberPrime !== null && (
                <Alert variant={isNumberPrime ? "default" : "destructive"} className={isNumberPrime ? "bg-green-500/10 border-green-500/50" : ""}>
                  <AlertDescription>{numberInput} is {isNumberPrime ? 'a Prime Number' : 'a Composite Number'}.</AlertDescription>
                </Alert>
              )}
              {factors && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">All Factors</p><p className="font-semibold break-all">{factors}</p></div>)}
              {primeFactors && (<div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">Prime Factorization</p><div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{primeFactors}</p><CopyButton textToCopy={primeFactors} size="sm" variant="ghost"/></div></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: FactorCalculator.tsx ======
==================================================

// ====== START OF FILE: FahrenheitToCelsiusConverter.tsx ======
// File converted from TSX to TXT
// Original size: 2.48 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState, ChangeEvent } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Thermometer } from "lucide-react";

export default function FahrenheitToCelsiusConverter() {
  const [celsius, setCelsius] = useState<string>('');
  const [fahrenheit, setFahrenheit] = useState<string>('');

  const handleCelsiusChange = (e: ChangeEvent<HTMLInputElement>) => {
    const C = e.target.value;
    setCelsius(C);
    if (C === '' || C === '-') {
      setFahrenheit('');
      return;
    }
    const numC = parseFloat(C);
    if (!isNaN(numC)) {
      const F = (numC * 9/5) + 32;
      setFahrenheit(F.toFixed(2));
    }
  };

  const handleFahrenheitChange = (e: ChangeEvent<HTMLInputElement>) => {
    const F = e.target.value;
    setFahrenheit(F);
    if (F === '' || F === '-') {
      setCelsius('');
      return;
    }
    const numF = parseFloat(F);
    if (!isNaN(numF)) {
      const C = (numF - 32) * 5/9;
      setCelsius(C.toFixed(2));
    }
  };

  const resetConverter = () => {
    setCelsius('');
    setFahrenheit('');
  };

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardDescription>Enter a value in either field to convert between Fahrenheit and Celsius.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex items-center space-x-2">
          <Thermometer className="h-5 w-5 text-muted-foreground" />
          <Label htmlFor="fahrenheit" className="w-20">Fahrenheit (°F)</Label>
          <Input 
            id="fahrenheit" 
            type="number" 
            value={fahrenheit}
            onChange={handleFahrenheitChange}
            placeholder="e.g., 68"
          />
        </div>
        <div className="flex items-center space-x-2">
          <Thermometer className="h-5 w-5 text-muted-foreground" />
          <Label htmlFor="celsius" className="w-20">Celsius (°C)</Label>
          <Input 
            id="celsius" 
            type="number" 
            value={celsius}
            onChange={handleCelsiusChange}
            placeholder="e.g., 20"
          />
        </div>
      </CardContent>
      <CardFooter>
        <Button variant="outline" onClick={resetConverter} className="w-full">
          Reset
        </Button>
      </CardFooter>
    </Card>
  );
}


// ====== END OF FILE: FahrenheitToCelsiusConverter.tsx ======
==================================================

// ====== START OF FILE: FatIntakeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.92 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Drumstick } from "lucide-react";

// AMDR for fat: 20-35% of total daily calories. 1g fat = 9 calories.
const fatPercentageLevels = [
  { name: "Lower End (20%)", percentage: 0.20 },
  { name: "Moderate (25%)", percentage: 0.25 },
  { name: "Moderate-High (30%)", percentage: 0.30 },
  { name: "Higher End (35%)", percentage: 0.35 },
];

export default function FatIntakeCalculator() {
  const [totalDailyCalories, setTotalDailyCalories] = useState<string>('');
  const [fatPercentage, setFatPercentage] = useState<string>(fatPercentageLevels[1].percentage.toString()); // Default to Moderate (25%)

  const [fatGrams, setFatGrams] = useState<string | null>(null);
  const [fatCalories, setFatCalories] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateFatIntake = () => {
    setError(null);
    setFatGrams(null);
    setFatCalories(null);

    const calories = parseInt(totalDailyCalories);
    const percentage = parseFloat(fatPercentage);
    
    if (isNaN(calories) || calories <= 0 || isNaN(percentage) || percentage < 0.20 || percentage > 0.35) {
      setError('Please enter valid total daily calories (>0) and select a fat percentage within the AMDR (20-35%).');
      return;
    }

    const calculatedFatCalories = calories * percentage;
    const calculatedFatGrams = calculatedFatCalories / 9; // 9 calories per gram of fat

    setFatCalories(calculatedFatCalories.toFixed(0));
    setFatGrams(calculatedFatGrams.toFixed(0));
  };
  
  const resetForm = () => {
    setTotalDailyCalories('');
    setFatPercentage(fatPercentageLevels[1].percentage.toString());
    setFatGrams(null);
    setFatCalories(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Nutritional Disclaimer</AlertTitle>
        <AlertDescription>
          This calculator estimates daily fat intake based on general AMDR guidelines (20-35% of total calories). Individual needs vary. Consult a healthcare professional or registered dietitian for personalized dietary advice. Focus on healthy unsaturated fats.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate your daily fat intake.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="totalDailyCaloriesFat">Total Daily Calorie Intake (kcal)</Label><Input id="totalDailyCaloriesFat" type="number" value={totalDailyCalories} onChange={(e) => setTotalDailyCalories(e.target.value)} placeholder="e.g., 2000" /></div>
            <div>
              <Label htmlFor="fatPercentage">Desired Fat Percentage of Calories</Label>
              <Select value={fatPercentage} onValueChange={setFatPercentage}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  {fatPercentageLevels.map(level => (<SelectItem key={level.name} value={level.percentage.toString()}>{level.name}</SelectItem>))}
                </SelectContent>
              </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateFatIntake}>Calculate Fat Intake</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(fatGrams || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Daily Fat Intake</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {fatGrams && fatCalories && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Recommended Fat Intake</p>
                    <p className="text-2xl font-bold text-primary">{fatGrams} grams</p>
                    <p className="text-xs text-muted-foreground mt-1">({fatCalories} Calories from Fat)</p>
                  </div>
                  <CopyButton textToCopy={`${fatGrams}g (${fatCalories} Cal)`} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: FatIntakeCalculator.tsx ======
==================================================

// ====== START OF FILE: FenceCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.87 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, PanelTop } from "lucide-react";

type UnitSystemFence = 'imperial' | 'metric'; // imperial: feet, metric: meters

export default function FenceCalculator() {
  const [units, setUnits] = useState<UnitSystemFence>('imperial');
  const [totalFenceLength, setTotalFenceLength] = useState<string>('');
  const [postSpacing, setPostSpacing] = useState<string>(units === 'imperial' ? '8' : '2.5'); // Default ft or m
  const [panelWidth, setPanelWidth] = useState<string>(units === 'imperial' ? '8' : '2.5'); // Optional, for panel fences
  const [includeEndPost, setIncludeEndPost] = useState<boolean>(true); // Add one extra post for the end

  const [numPosts, setNumPosts] = useState<string | null>(null);
  const [numSectionsOrPanels, setNumSectionsOrPanels] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateFence = () => {
    setError(null); setNumPosts(null); setNumSectionsOrPanels(null);
    const totalLen = parseFloat(totalFenceLength);
    const spacing = parseFloat(postSpacing);
    const panelW = parseFloat(panelWidth);

    if (isNaN(totalLen) || totalLen <=0 || isNaN(spacing) || spacing <=0 ) {
      setError("Total fence length and post spacing must be positive numbers."); return;
    }
    if (panelWidth && (isNaN(panelW) || panelW <=0)) {
      setError("Panel width must be positive if specified."); return;
    }

    const sections = Math.ceil(totalLen / spacing);
    setNumSectionsOrPanels(`${sections} sections`);
    
    let posts = sections;
    if(includeEndPost) posts += 1;
    setNumPosts(posts.toString());

    // If panel width is given, can estimate number of panels
    if (panelWidth && !isNaN(panelW) && panelW > 0) {
        const panels = Math.ceil(totalLen / panelW);
        setNumSectionsOrPanels(`${sections} sections (approx. ${panels} panels if using ${panelW} ${units==='imperial'?'ft':'m'} wide panels)`);
    }
  };

  const resetForm = () => {
    setTotalFenceLength(''); 
    setPostSpacing(units === 'imperial' ? '8' : '2.5');
    setPanelWidth(units === 'imperial' ? '8' : '2.5');
    setNumPosts(null); setNumSectionsOrPanels(null); setError(null);
  };
  
  React.useEffect(() => { // Update defaults when unit system changes
    setPostSpacing(units === 'imperial' ? '8' : '2.5');
    setPanelWidth(units === 'imperial' ? '8' : '2.5');
  }, [units]);

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Fence Material Estimator</AlertTitle><AlertDescription>Estimate the number of posts and sections/panels for your fence project. Assumes straight lines.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter fence dimensions.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="fenceUnits">Unit System</Label><Select value={units} onValueChange={(v:UnitSystemFence)=>setUnits(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Imperial (Feet)</SelectItem><SelectItem value="metric">Metric (Meters)</SelectItem></SelectContent></Select></div>
            <div><Label htmlFor="totalFenceLen">Total Fence Length ({units==='imperial'?'ft':'m'})</Label><Input id="totalFenceLen" type="number" value={totalFenceLength} onChange={e=>setTotalFenceLength(e.target.value)} placeholder="e.g., 100"/></div>
            <div><Label htmlFor="postSpacingFence">Post Spacing ({units==='imperial'?'ft':'m'})</Label><Input id="postSpacingFence" type="number" value={postSpacing} onChange={e=>setPostSpacing(e.target.value)} placeholder={`e.g., ${units==='imperial'?'8':'2.5'}`}/></div>
            <div><Label htmlFor="panelWidthFence">Panel Width ({units==='imperial'?'ft':'m'}) (Optional)</Label><Input id="panelWidthFence" type="number" value={panelWidth} onChange={e=>setPanelWidth(e.target.value)} placeholder={`e.g., ${units==='imperial'?'8':'2.4'}`}/></div>
            <div className="flex items-center space-x-2"><input type="checkbox" id="includeEndPostFence" checked={includeEndPost} onChange={e=>setIncludeEndPost(e.target.checked)} className="form-checkbox"/><Label htmlFor="includeEndPostFence">Include extra end post</Label></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateFence}>Estimate Materials</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(numPosts || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Fence Materials</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {numSectionsOrPanels && (<div className="p-2 bg-muted rounded-md text-sm">Number of Sections/Panels: <strong className="font-semibold">{numSectionsOrPanels}</strong></div>)}
              {numPosts && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Number of Posts</p><p className="text-2xl font-bold text-primary">{numPosts} posts</p></div><CopyButton textToCopy={numPosts}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
    

// ====== END OF FILE: FenceCalculator.tsx ======
==================================================

// ====== START OF FILE: FertilityWindowCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.67 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { format, addDays, subDays, isValid } from 'date-fns';
import { cn } from '@/lib/utils';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CalendarHeart, CalendarCheck2 } from "lucide-react";

export default function FertilityWindowCalculator() {
  const [lastMenstrualPeriod, setLastMenstrualPeriod] = useState<Date | undefined>(undefined);
  const [cycleLength, setCycleLength] = useState<string>('28');
  
  const [estimatedOvulationDate, setEstimatedOvulationDate] = useState<string | null>(null);
  const [fertileWindowStart, setFertileWindowStart] = useState<string | null>(null);
  const [fertileWindowEnd, setFertileWindowEnd] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateFertilityDates = () => {
    setError(null);
    setEstimatedOvulationDate(null);
    setFertileWindowStart(null);
    setFertileWindowEnd(null);

    if (!lastMenstrualPeriod || !isValid(lastMenstrualPeriod)) {
      setError('Please select a valid date for the first day of your last menstrual period.');
      return;
    }
    const cLength = parseInt(cycleLength);
    if (isNaN(cLength) || cLength < 20 || cLength > 45) {
      setError('Please enter a typical cycle length (usually between 20 and 45 days).');
      return;
    }

    const ovulationDayOffset = cLength - 14;
    const ovulationDate = addDays(lastMenstrualPeriod, ovulationDayOffset);
    setEstimatedOvulationDate(format(ovulationDate, "PPP, EEEE"));

    // Fertile window: 5 days before ovulation + ovulation day + 1 day after (egg viable for ~24h)
    setFertileWindowStart(format(subDays(ovulationDate, 5), "PPP"));
    setFertileWindowEnd(format(addDays(ovulationDate, 1), "PPP"));
  };
  
  const resetForm = () => {
    setLastMenstrualPeriod(undefined);
    setCycleLength('28');
    setEstimatedOvulationDate(null);
    setFertileWindowStart(null);
    setFertileWindowEnd(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Medical Disclaimer - Estimation Only</AlertTitle>
        <AlertDescription>
          This calculator provides estimates based on typical cycle patterns and is <strong className="font-semibold">not a substitute for medical advice or precise fertility tracking methods</strong>. Cycle lengths and ovulation can vary. Consult a healthcare professional.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate your fertile window and ovulation date.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="lmpDateFertility">First Day of Last Menstrual Period (LMP)</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button id="lmpDateFertility" variant={"outline"} className={cn("w-full justify-start text-left font-normal", !lastMenstrualPeriod && "text-muted-foreground")}>
                    <CalendarCheck2 className="mr-2 h-4 w-4" />
                    {lastMenstrualPeriod ? format(lastMenstrualPeriod, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={lastMenstrualPeriod} onSelect={setLastMenstrualPeriod} initialFocus /></PopoverContent>
              </Popover>
            </div>
            <div><Label htmlFor="cycleLengthFertility">Average Cycle Length (days)</Label><Input id="cycleLengthFertility" type="number" value={cycleLength} onChange={(e) => setCycleLength(e.target.value)} placeholder="e.g., 28" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateFertilityDates}>Calculate Dates</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(estimatedOvulationDate || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Fertility Dates</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {estimatedOvulationDate && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Ovulation Date</p><p className="font-semibold">{estimatedOvulationDate}</p></div>)}
              {fertileWindowStart && fertileWindowEnd && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md mt-2"><div><p className="text-sm text-muted-foreground">Estimated Fertile Window</p><p className="text-lg font-bold text-primary">{fertileWindowStart} - {fertileWindowEnd}</p></div><CopyButton textToCopy={`${fertileWindowStart} - ${fertileWindowEnd}`} size="sm" variant="ghost"/></div>)}
            </CardContent>
            <CardFooter><p className="text-xs text-muted-foreground">Sperm can survive up to 5 days; an egg is viable for about 24 hours.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: FertilityWindowCalculator.tsx ======
==================================================

// ====== START OF FILE: FhaLoanCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.8 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Home } from "lucide-react";

// FHA loans have specific rules like MIP (Mortgage Insurance Premium) - upfront and annual.
// This is a simplified P&I calculator and does NOT include MIP, taxes, or insurance (PITI).

export default function FhaLoanCalculator() {
  const [homePrice, setHomePrice] = useState<string>('');
  const [downPaymentPercent, setDownPaymentPercent] = useState<string>('3.5'); // Minimum for FHA often 3.5%
  const [interestRate, setInterestRate] = useState<string>(''); // Annual %
  const [loanTermYears, setLoanTermYears] = useState<string>('30');
  
  const [loanAmount, setLoanAmount] = useState<string | null>(null);
  const [monthlyPandI, setMonthlyPandI] = useState<string | null>(null); // Principal & Interest only
  const [error, setError] = useState<string | null>(null);

  const calculateFhaLoan = () => {
    setError(null);
    setLoanAmount(null);
    setMonthlyPandI(null);

    const price = parseFloat(homePrice);
    const dpRate = parseFloat(downPaymentPercent) / 100;
    const annualRate = parseFloat(interestRate) / 100;
    const termYrs = parseInt(loanTermYears);

    if (isNaN(price) || price <= 0 || isNaN(dpRate) || dpRate < 0 || dpRate >= 1) {
      setError('Enter valid home price and down payment percentage (0-99.99).');
      return;
    }
    if (isNaN(annualRate) || annualRate < 0 || isNaN(termYrs) || termYrs <= 0) {
      setError('Enter valid interest rate and loan term (years).');
      return;
    }

    const downPaymentAmount = price * dpRate;
    const P = price - downPaymentAmount; // Principal Loan Amount
    setLoanAmount(P.toFixed(2));

    const monthlyRate = annualRate / 12;
    const N = termYrs * 12; // Total number of payments

    let M; // Monthly P&I
    if (monthlyRate === 0) {
      M = P / N;
    } else {
      M = P * (monthlyRate * Math.pow(1 + monthlyRate, N)) / (Math.pow(1 + monthlyRate, N) - 1);
    }
    
    if (isNaN(M) || !isFinite(M)) {
      setError('Could not calculate monthly payment. Check inputs.');
      return;
    }
    setMonthlyPandI(M.toFixed(2));
  };
  
  const resetForm = () => {
    setHomePrice(''); setDownPaymentPercent('3.5'); setInterestRate(''); setLoanTermYears('30');
    setLoanAmount(null); setMonthlyPandI(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="default">
        <Info className="h-4 w-4" />
        <AlertTitle>FHA Loan P&I Estimator (Simplified)</AlertTitle>
        <AlertDescription>
          This calculator estimates the Principal and Interest (P&I) portion of an FHA loan. It <strong className="font-semibold">does not include FHA Mortgage Insurance Premiums (MIP), property taxes, or homeowners insurance (PITI)</strong>, which significantly increase total monthly payment. FHA loans have specific eligibility requirements and loan limits. Consult an FHA-approved lender for accurate details.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate FHA loan P&I.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="homePrice">Home Price ($)</Label><Input id="homePrice" type="number" value={homePrice} onChange={(e) => setHomePrice(e.target.value)} placeholder="e.g., 250000" /></div>
            <div><Label htmlFor="downPaymentPercent">Down Payment (%)</Label><Input id="downPaymentPercent" type="number" value={downPaymentPercent} onChange={(e) => setDownPaymentPercent(e.target.value)} placeholder="e.g., 3.5" /></div>
            <div><Label htmlFor="interestRateFHA">Interest Rate (Annual %)</Label><Input id="interestRateFHA" type="number" value={interestRate} onChange={(e) => setInterestRate(e.target.value)} placeholder="e.g., 6.5" /></div>
            <div><Label htmlFor="loanTermYearsFHA">Loan Term (Years)</Label><Input id="loanTermYearsFHA" type="number" value={loanTermYears} onChange={(e) => setLoanTermYears(e.target.value)} placeholder="e.g., 30" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateFhaLoan}>Calculate P&I</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(monthlyPandI || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Loan Details (P&I Only)</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {loanAmount && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Loan Amount</p><p className="font-semibold">${loanAmount}</p></div>)}
              {monthlyPandI && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Est. Monthly P&I Payment</p><p className="text-2xl font-bold text-primary">${monthlyPandI}</p></div>
                  <CopyButton textToCopy={monthlyPandI} />
                </div>
              )}
            </CardContent>
            <CardFooter><p className="text-xs text-muted-foreground">Remember: Actual payment will be higher with MIP, taxes, and insurance.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: FhaLoanCalculator.tsx ======
==================================================

// ====== START OF FILE: FileTransferTimeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.17 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Timer } from "lucide-react";

type FileSizeUnit = 'KB' | 'MB' | 'GB' | 'TB';
type SpeedUnit = 'Kbps' | 'Mbps' | 'Gbps';

export default function FileTransferTimeCalculator() {
  const [fileSize, setFileSize] = useState<string>('');
  const [fileSizeUnit, setFileSizeUnit] = useState<FileSizeUnit>('MB');
  const [transferSpeed, setTransferSpeed] = useState<string>('');
  const [speedUnit, setSpeedUnit] = useState<SpeedUnit>('Mbps');

  const [transferTime, setTransferTime] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTime = () => {
    setError(null);
    setTransferTime(null);

    const size = parseFloat(fileSize);
    const speed = parseFloat(transferSpeed);

    if (isNaN(size) || size <= 0 || isNaN(speed) || speed <= 0) {
      setError('File size and transfer speed must be positive numbers.');
      return;
    }

    let sizeInMegabits: number;
    switch (fileSizeUnit) {
      case 'KB': sizeInMegabits = (size * 1024 * 8) / 1_000_000; break;
      case 'GB': sizeInMegabits = size * 1024 * 8; break;
      case 'TB': sizeInMegabits = size * 1024 * 1024 * 8; break;
      case 'MB': default: sizeInMegabits = size * 8; break;
    }

    let speedInMbps: number;
    switch (speedUnit) {
      case 'Kbps': speedInMbps = speed / 1000; break;
      case 'Gbps': speedInMbps = speed * 1000; break;
      case 'Mbps': default: speedInMbps = speed; break;
    }
    
    if (speedInMbps === 0) {
        setError("Speed cannot be zero.");
        return;
    }

    const timeSeconds = sizeInMegabits / speedInMbps;
    
    const hours = Math.floor(timeSeconds / 3600);
    const minutes = Math.floor((timeSeconds % 3600) / 60);
    const seconds = (timeSeconds % 60).toFixed(2);
    
    setTransferTime(`${hours > 0 ? `${hours}h ` : ''}${minutes > 0 ? `${minutes}m ` : ''}${seconds}s`);
  };

  const resetForm = () => {
    setFileSize('');
    setTransferSpeed('');
    setTransferTime(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>File Transfer Time Estimator</AlertTitle>
        <AlertDescription>
          Estimate how long it will take to transfer a file based on its size and your connection speed. Note: 1 MB = 1024 KB, but 1 Mbps = 1,000 Kbps.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter file and connection details.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div>
                <Label htmlFor="fileSize">File Size</Label>
                <Input id="fileSize" type="number" value={fileSize} onChange={e => setFileSize(e.target.value)} placeholder="e.g., 100"/>
              </div>
              <div>
                <Label htmlFor="fileSizeUnit">Unit</Label>
                <Select value={fileSizeUnit} onValueChange={(v: FileSizeUnit) => setFileSizeUnit(v)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="KB">KB</SelectItem>
                    <SelectItem value="MB">MB</SelectItem>
                    <SelectItem value="GB">GB</SelectItem>
                    <SelectItem value="TB">TB</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div>
                <Label htmlFor="transferSpeed">Transfer Speed</Label>
                <Input id="transferSpeed" type="number" value={transferSpeed} onChange={e => setTransferSpeed(e.target.value)} placeholder="e.g., 50"/>
              </div>
              <div>
                <Label htmlFor="speedUnit">Unit</Label>
                <Select value={speedUnit} onValueChange={(v: SpeedUnit) => setSpeedUnit(v)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Kbps">Kbps</SelectItem>
                    <SelectItem value="Mbps">Mbps</SelectItem>
                    <SelectItem value="Gbps">Gbps</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateTime}>Calculate Time</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(transferTime || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Transfer Time</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {transferTime && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Estimated Time</p>
                    <p className="text-2xl font-bold text-primary">{transferTime}</p>
                  </div>
                  <CopyButton textToCopy={transferTime} />
                </div>
              )}
               <AlertDescription className="text-xs pt-2">This is a theoretical download time. Real-world speeds vary due to network latency, server load, and overhead.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

// ====== END OF FILE: FileTransferTimeCalculator.tsx ======
==================================================

// ====== START OF FILE: FireCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.23 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Target as TargetIcon } from "lucide-react"; // Renamed to avoid conflict

export default function FireCalculator() {
  const [currentAnnualExpenses, setCurrentAnnualExpenses] = useState<string>('');
  const [withdrawalRate, setWithdrawalRate] = useState<string>('4'); // Safe Withdrawal Rate %
  const [currentSavingsFIRE, setCurrentSavingsFIRE] = useState<string>('0');
  const [annualSavingsFIRE, setAnnualSavingsFIRE] = useState<string>('');
  const [annualReturnRateFIRE, setAnnualReturnRateFIRE] = useState<string>(''); // Nominal %

  const [fireNumber, setFireNumber] = useState<string | null>(null);
  const [yearsToFire, setYearsToFire] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateFire = () => {
    setError(null); setFireNumber(null); setYearsToFire(null);
    const expenses = parseFloat(currentAnnualExpenses);
    const wdRate = parseFloat(withdrawalRate) / 100;
    const currentPot = parseFloat(currentSavingsFIRE);
    const annualSave = parseFloat(annualSavingsFIRE);
    const returnRateNominal = parseFloat(annualReturnRateFIRE) / 100;

    if (isNaN(expenses) || expenses <=0 || isNaN(wdRate) || wdRate <=0 || wdRate >= 0.15) { // WD rate too high is risky
      setError("Valid annual expenses (>0) and withdrawal rate (e.g., 1-15%) required."); return;
    }
    if (isNaN(currentPot) || currentPot < 0 || isNaN(annualSave) || annualSave <=0 || isNaN(returnRateNominal) || returnRateNominal < 0) {
      setError("Current savings (>=0), annual savings (>0), and return rate (>=0) must be valid numbers."); return;
    }

    const targetNestEgg = expenses / wdRate;
    setFireNumber(targetNestEgg.toFixed(2));

    if (targetNestEgg <= currentPot) {
      setYearsToFire("Already FIRE! (or goal met)");
      return;
    }
    
    // Simplified calculation for years to FIRE (using logs for periodic investments)
    // FV = P(1+r)^t + PMT * [((1+r)^t - 1) / r]
    // This is solving for t, which is complex directly. Iterative approach:
    let years = 0;
    let balance = currentPot;
    const MAX_YEARS = 100; // Safety break

    while (balance < targetNestEgg && years < MAX_YEARS) {
      balance = (balance + annualSave) * (1 + returnRateNominal); // Assume saving at start of year
      years++;
    }

    if (years >= MAX_YEARS && balance < targetNestEgg) {
      setYearsToFire(`Over ${MAX_YEARS} years (check assumptions)`);
    } else {
      setYearsToFire(years.toString());
    }
  };

  const resetForm = () => {
    setCurrentAnnualExpenses(''); setWithdrawalRate('4'); setCurrentSavingsFIRE('0');
    setAnnualSavingsFIRE(''); setAnnualReturnRateFIRE('');
    setFireNumber(null); setYearsToFire(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>FIRE (Financial Independence, Retire Early) Calculator</AlertTitle><AlertDescription>Estimate your FIRE number (target nest egg) and years to reach it. Uses simplified assumptions and does not account for inflation, taxes, or varying returns. Consult a financial advisor.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your financial details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="annualExpensesFIRE">Current Annual Expenses ($)</Label><Input id="annualExpensesFIRE" type="number" value={currentAnnualExpenses} onChange={e=>setCurrentAnnualExpenses(e.target.value)} /></div>
            <div><Label htmlFor="withdrawalRateFIRE">Safe Withdrawal Rate (%)</Label><Input id="withdrawalRateFIRE" type="number" value={withdrawalRate} onChange={e=>setWithdrawalRate(e.target.value)} placeholder="e.g., 4 (for 4%)"/></div>
            <div><Label htmlFor="currentSavingsFIRE">Current Retirement Savings ($)</Label><Input id="currentSavingsFIRE" type="number" value={currentSavingsFIRE} onChange={e=>setCurrentSavingsFIRE(e.target.value)}/></div>
            <div><Label htmlFor="annualSavingsFIRE">Annual Savings/Contributions ($)</Label><Input id="annualSavingsFIRE" type="number" value={annualSavingsFIRE} onChange={e=>setAnnualSavingsFIRE(e.target.value)}/></div>
            <div><Label htmlFor="returnRateFIRE">Expected Annual Investment Return (%)</Label><Input id="returnRateFIRE" type="number" value={annualReturnRateFIRE} onChange={e=>setAnnualReturnRateFIRE(e.target.value)} placeholder="e.g., 7 (nominal)"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateFire}>Calculate FIRE</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(fireNumber || error) && (
          <Card>
            <CardHeader><CardDescription>FIRE Projection</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {fireNumber && (<div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">Your FIRE Number (Target Nest Egg)</p><div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">${fireNumber}</p><CopyButton textToCopy={fireNumber} size="sm" variant="ghost"/></div></div>)}
              {yearsToFire && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Years to Reach FIRE</p><p className="font-semibold">{yearsToFire} years</p></div>)}
              <AlertDescription className="text-xs pt-2">This is a simplified estimate. Market returns, inflation, and expenses can vary significantly.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
    

// ====== END OF FILE: FireCalculator.tsx ======
==================================================

// ====== START OF FILE: FlightTimeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.82 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, PlaneTakeoff } from "lucide-react";

type DistanceUnitFT = 'km' | 'miles' | 'nm'; // Nautical Miles
type SpeedUnitFT = 'kmh' | 'mph' | 'knots';

export default function FlightTimeCalculator() {
  const [distance, setDistance] = useState<string>('');
  const [speed, setSpeed] = useState<string>('');
  const [distanceUnit, setDistanceUnit] = useState<DistanceUnitFT>('km');
  const [speedUnit, setSpeedUnit] = useState<SpeedUnitFT>('kmh');

  const [flightTime, setFlightTime] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const kmPerMile = 1.60934;
  const kmPerNm = 1.852;

  const calculateFlightTime = () => {
    setError(null); setFlightTime(null);
    const distVal = parseFloat(distance);
    const speedVal = parseFloat(speed);

    if (isNaN(distVal) || distVal <= 0 || isNaN(speedVal) || speedVal <= 0) {
      setError('Distance and speed must be positive numbers.');
      return;
    }

    let distInKm = distVal;
    if (distanceUnit === 'miles') distInKm = distVal * kmPerMile;
    else if (distanceUnit === 'nm') distInKm = distVal * kmPerNm;

    let speedInKmh = speedVal;
    if (speedUnit === 'mph') speedInKmh = speedVal * kmPerMile;
    else if (speedUnit === 'knots') speedInKmh = speedVal * kmPerNm;
    
    if (speedInKmh === 0) {
        setError("Speed cannot be zero.");
        return;
    }

    const timeHoursDecimal = distInKm / speedInKmh;
    const hours = Math.floor(timeHoursDecimal);
    const minutes = Math.round((timeHoursDecimal - hours) * 60);

    setFlightTime(`${hours} hours, ${minutes} minutes`);
  };

  const resetForm = () => {
    setDistance(''); setSpeed('');
    setFlightTime(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Flight Time Calculator</AlertTitle><AlertDescription>Estimate flight duration based on distance and average speed. Does not account for taxi, takeoff, landing, or wind.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter flight details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="distanceFT">Distance</Label><Input id="distanceFT" type="number" value={distance} onChange={e=>setDistance(e.target.value)}/></div>
              <div><Label htmlFor="distUnitFT">Unit</Label><Select value={distanceUnit} onValueChange={(v:DistanceUnitFT)=>setDistanceUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="km">km</SelectItem><SelectItem value="miles">miles</SelectItem><SelectItem value="nm">Nautical Miles</SelectItem></SelectContent></Select></div>
            </div>
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="speedFT">Average Speed</Label><Input id="speedFT" type="number" value={speed} onChange={e=>setSpeed(e.target.value)}/></div>
              <div><Label htmlFor="speedUnitFT">Unit</Label><Select value={speedUnit} onValueChange={(v:SpeedUnitFT)=>setSpeedUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="kmh">km/h</SelectItem><SelectItem value="mph">mph</SelectItem><SelectItem value="knots">knots</SelectItem></SelectContent></Select></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateFlightTime}>Calculate Time</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(flightTime || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Flight Time</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {flightTime && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Est. Flight Time</p><p className="text-2xl font-bold text-primary">{flightTime}</p></div><CopyButton textToCopy={flightTime}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: FlightTimeCalculator.tsx ======
==================================================

// ====== START OF FILE: FloorCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 2.7 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, ArrowDownToDot } from "lucide-react";

export default function FloorCalculator() {
  const [numberInput, setNumberInput] = useState<string>('');
  
  const [floorResult, setFloorResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateFloor = () => {
    setError(null);
    setFloorResult(null);

    const num = parseFloat(numberInput);

    if (isNaN(num)) {
      setError('Please enter a valid number.');
      return;
    }

    const calculatedFloor = Math.floor(num);
    setFloorResult(calculatedFloor.toString());
  };
  
  const resetForm = () => {
    setNumberInput('');
    setFloorResult(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate the floor of a number (the greatest integer less than or equal to the number).</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="numberFloor">Enter Number</Label><Input id="numberFloor" type="number" value={numberInput} onChange={(e) => setNumberInput(e.target.value)} placeholder="e.g., 4.7 or -2.3" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateFloor}>Calculate Floor</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(floorResult || error) && (
          <Card>
            <CardHeader><CardDescription>Result</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {floorResult && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Floor( {numberInput} )</p><p className="text-3xl font-bold text-primary">{floorResult}</p></div>
                  <CopyButton textToCopy={floorResult} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: FloorCalculator.tsx ======
==================================================

// ====== START OF FILE: FlooringCostCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.01 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Layers3 } from "lucide-react";

type AreaUnit = 'sqft' | 'sqm';

export default function FlooringCostCalculator() {
  const [area, setArea] = useState<string>('');
  const [areaUnit, setAreaUnit] = useState<AreaUnit>('sqft');
  const [costPerUnitArea, setCostPerUnitArea] = useState<string>('');
  const [wastagePercent, setWastagePercent] = useState<string>('10'); // Default 10% wastage

  const [totalMaterialNeeded, setTotalMaterialNeeded] = useState<string | null>(null);
  const [totalCost, setTotalCost] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateFlooringCost = () => {
    setError(null);
    setTotalMaterialNeeded(null);
    setTotalCost(null);

    const areaVal = parseFloat(area);
    const costPUA = parseFloat(costPerUnitArea);
    const waste = parseFloat(wastagePercent) / 100;

    if (isNaN(areaVal) || areaVal <= 0 || isNaN(costPUA) || costPUA <= 0 || isNaN(waste) || waste < 0) {
      setError('Please enter valid positive numbers for area, cost per unit area, and wastage (>=0).');
      return;
    }

    const materialWithWastage = areaVal * (1 + waste);
    const calculatedTotalCost = materialWithWastage * costPUA;

    setTotalMaterialNeeded(`${materialWithWastage.toFixed(2)} ${areaUnit}`);
    setTotalCost(calculatedTotalCost.toFixed(2));
  };
  
  const resetForm = () => {
    setArea(''); setCostPerUnitArea(''); setWastagePercent('10');
    setTotalMaterialNeeded(null); setTotalCost(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Flooring Cost Estimation</AlertTitle><AlertDescription>Estimate the material needed and total cost for your flooring project. Includes a wastage factor.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter project details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="area">Area to Cover</Label><Input id="area" type="number" value={area} onChange={(e) => setArea(e.target.value)} placeholder="e.g., 200"/></div>
              <div><Label htmlFor="areaUnit">Unit</Label><Select value={areaUnit} onValueChange={(v: AreaUnit) => setAreaUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="sqft">Square Feet (sq ft)</SelectItem><SelectItem value="sqm">Square Meters (sq m)</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="costPerUnitArea">Cost per {areaUnit === 'sqft' ? 'Square Foot' : 'Square Meter'} ($)</Label><Input id="costPerUnitArea" type="number" value={costPerUnitArea} onChange={(e) => setCostPerUnitArea(e.target.value)} placeholder="e.g., 5.50"/></div>
            <div><Label htmlFor="wastagePercent">Wastage Factor (%)</Label><Input id="wastagePercent" type="number" value={wastagePercent} onChange={(e) => setWastagePercent(e.target.value)} placeholder="e.g., 10 (5-15% is common)"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateFlooringCost}>Calculate Cost</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(totalCost || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Flooring Costs</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalMaterialNeeded && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Material Needed (incl. wastage)</p><p className="font-semibold">{totalMaterialNeeded}</p></div>)}
              {totalCost && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Total Material Cost</p><p className="text-2xl font-bold text-primary">${totalCost}</p></div>
                  <CopyButton textToCopy={totalCost} />
                </div>
              )}
            </CardContent>
            <CardFooter><p className="text-xs text-muted-foreground">This does not include labor or additional supplies.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: FlooringCostCalculator.tsx ======
==================================================

// ====== START OF FILE: FoodPointsCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.83 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Apple } from "lucide-react";

// VERY SIMPLIFIED and GENERIC points system for food items. NOT Weight Watchers.
// Example: Points = (Calories / 50) + (Fat Grams / 12) - (Fiber Grams / 5)
// Protein can be used to reduce points: Points = Points - (Protein Grams / 10)
// Points should be non-negative.

export default function FoodPointsCalculator() {
  const [calories, setCalories] = useState<string>('');
  const [fatGrams, setFatGrams] = useState<string>('');
  const [fiberGrams, setFiberGrams] = useState<string>('0');
  const [proteinGrams, setProteinGrams] = useState<string>('0');

  const [points, setPoints] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePoints = () => {
    setError(null); setPoints(null);
    const cal = parseFloat(calories);
    const fat = parseFloat(fatGrams);
    const fiber = parseFloat(fiberGrams);
    const protein = parseFloat(proteinGrams);

    if (isNaN(cal) || cal < 0 || isNaN(fat) || fat < 0 || isNaN(fiber) || fiber < 0 || isNaN(protein) || protein < 0) {
      setError('Please enter valid non-negative numbers for all nutritional values.');
      return;
    }

    let calculatedPoints = (cal / 50) + (fat / 12) - (fiber / 5);
    // Optional: Protein reduces points
    calculatedPoints = calculatedPoints - (protein / 10);
    
    calculatedPoints = Math.max(0, calculatedPoints); // Points cannot be negative

    setPoints(calculatedPoints.toFixed(1));
  };

  const resetForm = () => {
    setCalories(''); setFatGrams(''); setFiberGrams('0'); setProteinGrams('0');
    setPoints(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Illustrative Food Score Calculator - Not for Medical/Dietary Advice</AlertTitle>
        <AlertDescription>
          This calculator uses a <strong className="font-semibold">generic, simplified formula to assign "points" to food items for illustrative purposes only</strong>. It is NOT affiliated with, nor does it replicate, any official or proprietary diet program (like Weight Watchers®). Do NOT use this for actual dietary planning or medical advice. Consult a healthcare professional or registered dietitian for nutritional guidance.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate generic food "points".</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="caloriesFood">Calories</Label><Input id="caloriesFood" type="number" value={calories} onChange={e=>setCalories(e.target.value)} placeholder="e.g., 250"/></div>
            <div><Label htmlFor="fatGramsFood">Fat (grams)</Label><Input id="fatGramsFood" type="number" value={fatGrams} onChange={e=>setFatGrams(e.target.value)} placeholder="e.g., 10"/></div>
            <div><Label htmlFor="fiberGramsFood">Fiber (grams)</Label><Input id="fiberGramsFood" type="number" value={fiberGrams} onChange={e=>setFiberGrams(e.target.value)} placeholder="e.g., 5"/></div>
            <div><Label htmlFor="proteinGramsFood">Protein (grams) (Optional, may reduce points)</Label><Input id="proteinGramsFood" type="number" value={proteinGrams} onChange={e=>setProteinGrams(e.target.value)} placeholder="e.g., 15"/></div>
             <AlertDescription className="text-xs">Formula: (Cal/50) + (Fat/12) - (Fiber/5) - (Protein/10). Min 0 points.</AlertDescription>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePoints}>Calculate Score</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(points || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Food Score</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {points && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Generic Food Score</p><p className="text-2xl font-bold text-primary">{points} points</p></div><CopyButton textToCopy={points}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: FoodPointsCalculator.tsx ======
==================================================

// ====== START OF FILE: FuelCostCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.53 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Fuel } from "lucide-react";

export default function FuelCostCalculator() {
  const [distance, setDistance] = useState<string>(''); // e.g., miles or km
  const [fuelEfficiency, setFuelEfficiency] = useState<string>(''); // e.g., MPG or L/100km
  const [fuelPrice, setFuelPrice] = useState<string>(''); // e.g., $/gallon or $/liter
  
  // For simplicity, this example assumes US units (miles, MPG, $/gallon)
  // A more advanced version would handle unit conversions.

  const [totalFuelNeeded, setTotalFuelNeeded] = useState<string | null>(null);
  const [totalFuelCost, setTotalFuelCost] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateFuelCost = () => {
    setError(null);
    setTotalFuelNeeded(null);
    setTotalFuelCost(null);

    const dist = parseFloat(distance);
    const eff = parseFloat(fuelEfficiency); // MPG
    const price = parseFloat(fuelPrice); // $/gallon

    if (isNaN(dist) || dist <= 0 || isNaN(eff) || eff <= 0 || isNaN(price) || price < 0) {
      setError('Please enter valid positive numbers for distance, fuel efficiency (MPG), and fuel price ($/gallon). Price can be zero.');
      return;
    }

    const fuelNeededGallons = dist / eff;
    const calculatedTotalCost = fuelNeededGallons * price;

    setTotalFuelNeeded(`${fuelNeededGallons.toFixed(2)} gallons`);
    setTotalFuelCost(calculatedTotalCost.toFixed(2));
  };
  
  const resetForm = () => {
    setDistance(''); setFuelEfficiency(''); setFuelPrice('');
    setTotalFuelNeeded(null); setTotalFuelCost(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Trip Fuel Cost Estimator</AlertTitle><AlertDescription>Estimate the fuel needed and cost for a trip. (Assumes US units: miles, MPG, $/gallon)</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter trip and vehicle details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="distanceTrip">Trip Distance (miles)</Label><Input id="distanceTrip" type="number" value={distance} onChange={(e) => setDistance(e.target.value)} placeholder="e.g., 300" /></div>
            <div><Label htmlFor="fuelEfficiency">Vehicle Fuel Efficiency (MPG)</Label><Input id="fuelEfficiency" type="number" value={fuelEfficiency} onChange={(e) => setFuelEfficiency(e.target.value)} placeholder="e.g., 25" /></div>
            <div><Label htmlFor="fuelPrice">Fuel Price ($ per gallon)</Label><Input id="fuelPrice" type="number" value={fuelPrice} onChange={(e) => setFuelPrice(e.target.value)} placeholder="e.g., 3.50" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateFuelCost}>Calculate Fuel Cost</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(totalFuelCost || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Fuel & Cost</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalFuelNeeded && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Fuel Needed</p><p className="font-semibold">{totalFuelNeeded}</p></div>)}
              {totalFuelCost && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Total Fuel Cost</p><p className="text-2xl font-bold text-primary">${totalFuelCost}</p></div>
                  <CopyButton textToCopy={totalFuelCost} />
                </div>
              )}
            </CardContent>
            <CardFooter><p className="text-xs text-muted-foreground">Actual costs may vary based on driving conditions and exact fuel prices.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: FuelCostCalculator.tsx ======
==================================================

// ====== START OF FILE: FutureValueCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.23 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, TrendingUp } from "lucide-react";

// FV = PV * (1 + r/n)^(nt)
// This is for a single sum, without periodic contributions. For contributions, use Compound Interest Calculator.

export default function FutureValueCalculator() {
  const [presentValue, setPresentValue] = useState<string>('');
  const [interestRate, setInterestRate] = useState<string>(''); // Annual %
  const [years, setYears] = useState<string>('');
  const [compoundingFrequency, setCompoundingFrequency] = useState<string>('1'); // Annually default

  const [futureValueResult, setFutureValueResult] = useState<string | null>(null);
  const [totalInterestEarned, setTotalInterestEarned] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateFutureValue = () => {
    setError(null);
    setFutureValueResult(null);
    setTotalInterestEarned(null);

    const PV = parseFloat(presentValue);
    const r = parseFloat(interestRate) / 100; // Annual rate as decimal
    const t = parseFloat(years);
    const n = parseInt(compoundingFrequency);

    if (isNaN(PV) || PV < 0 || isNaN(r) || r < 0 || isNaN(t) || t <= 0 || isNaN(n) || n <= 0) {
      setError('Please enter valid numbers: Present Value (>=0), Rate (>=0), Years (>0), Compounding Freq (>0).');
      return;
    }

    const FV = PV * Math.pow(1 + (r / n), n * t);
    const interest = FV - PV;

    if (isNaN(FV) || !isFinite(FV)) {
        setError("Could not calculate Future Value. Check for very large numbers or invalid inputs.");
        return;
    }

    setFutureValueResult(FV.toFixed(2));
    setTotalInterestEarned(interest.toFixed(2));
  };

  const resetForm = () => {
    setPresentValue(''); setInterestRate(''); setYears(''); setCompoundingFrequency('1');
    setFutureValueResult(null); setTotalInterestEarned(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate the future value of a single sum investment (lump sum).</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="presentValueFV">Present Value (Initial Investment) ($)</Label><Input id="presentValueFV" type="number" value={presentValue} onChange={(e) => setPresentValue(e.target.value)} placeholder="e.g., 1000" /></div>
            <div><Label htmlFor="interestRateFV">Annual Interest Rate (%)</Label><Input id="interestRateFV" type="number" value={interestRate} onChange={(e) => setInterestRate(e.target.value)} placeholder="e.g., 5" /></div>
            <div><Label htmlFor="yearsFV">Number of Years</Label><Input id="yearsFV" type="number" value={years} onChange={(e) => setYears(e.target.value)} placeholder="e.g., 10" /></div>
            <div>
              <Label htmlFor="compoundingFrequencyFV">Compounding Frequency</Label>
              <Select value={compoundingFrequency} onValueChange={setCompoundingFrequency}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="1">Annually</SelectItem>
                  <SelectItem value="2">Semi-Annually</SelectItem>
                  <SelectItem value="4">Quarterly</SelectItem>
                  <SelectItem value="12">Monthly</SelectItem>
                  <SelectItem value="365">Daily</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateFutureValue}>Calculate FV</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(futureValueResult || error) && (
          <Card>
            <CardHeader><CardDescription>Investment Projection</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalInterestEarned && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Interest Earned</p><p className="font-semibold">${totalInterestEarned}</p></div>)}
              {futureValueResult && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Future Value</p><p className="text-2xl font-bold text-primary">${futureValueResult}</p></div>
                  <CopyButton textToCopy={futureValueResult} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: FutureValueCalculator.tsx ======
==================================================

// ====== START OF FILE: GasMileageCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.62 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Fuel } from "lucide-react";

type DistanceUnit = 'miles' | 'km';
type VolumeUnit = 'gallons' | 'liters';
type MileageUnit = 'mpg' | 'l100km' | 'kml';

export default function GasMileageCalculator() {
  const [distance, setDistance] = useState<string>('');
  const [fuelUsed, setFuelUsed] = useState<string>('');
  const [distanceUnit, setDistanceUnit] = useState<DistanceUnit>('miles');
  const [volumeUnit, setVolumeUnit] = useState<VolumeUnit>('gallons');
  const [desiredMileageUnit, setDesiredMileageUnit] = useState<MileageUnit>('mpg');

  const [mileage, setMileage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateMileage = () => {
    setError(null);
    setMileage(null);

    const dist = parseFloat(distance);
    const fuel = parseFloat(fuelUsed);

    if (isNaN(dist) || dist <= 0 || isNaN(fuel) || fuel <= 0) {
      setError('Please enter valid positive numbers for distance and fuel used.');
      return;
    }

    let distKm = dist;
    if (distanceUnit === 'miles') distKm = dist * 1.60934;

    let fuelLiters = fuel;
    if (volumeUnit === 'gallons') fuelLiters = fuel * 3.78541; // US Gallons

    let resultMileage: number;
    let resultUnitLabel = '';

    if (desiredMileageUnit === 'mpg') {
      const distMiles = distKm / 1.60934;
      const fuelGallons = fuelLiters / 3.78541;
      resultMileage = distMiles / fuelGallons;
      resultUnitLabel = 'MPG';
    } else if (desiredMileageUnit === 'l100km') {
      resultMileage = (fuelLiters / distKm) * 100;
      resultUnitLabel = 'L/100km';
    } else { // kml
      resultMileage = distKm / fuelLiters;
      resultUnitLabel = 'km/L';
    }
    
    if (isNaN(resultMileage) || !isFinite(resultMileage)) {
        setError("Could not calculate mileage. Check units and values.");
        return;
    }

    setMileage(`${resultMileage.toFixed(2)} ${resultUnitLabel}`);
  };
  
  const resetForm = () => {
    setDistance(''); setFuelUsed('');
    setMileage(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Gas Mileage Calculator</AlertTitle><AlertDescription>Calculate your vehicle's fuel efficiency in MPG, L/100km, or km/L.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter trip details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="distanceGas">Distance Traveled</Label><Input id="distanceGas" type="number" value={distance} onChange={(e) => setDistance(e.target.value)} placeholder="e.g., 300" /></div>
              <div><Label htmlFor="distanceUnitGas">Unit</Label><Select value={distanceUnit} onValueChange={(v: DistanceUnit) => setDistanceUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="miles">Miles</SelectItem><SelectItem value="km">Kilometers</SelectItem></SelectContent></Select></div>
            </div>
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="fuelUsed">Fuel Used</Label><Input id="fuelUsed" type="number" value={fuelUsed} onChange={(e) => setFuelUsed(e.target.value)} placeholder="e.g., 10" /></div>
              <div><Label htmlFor="volumeUnitGas">Unit</Label><Select value={volumeUnit} onValueChange={(v: VolumeUnit) => setVolumeUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="gallons">Gallons (US)</SelectItem><SelectItem value="liters">Liters</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="desiredMileageUnit">Calculate As</Label><Select value={desiredMileageUnit} onValueChange={(v: MileageUnit) => setDesiredMileageUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="mpg">Miles Per Gallon (MPG)</SelectItem><SelectItem value="l100km">Liters per 100km (L/100km)</SelectItem><SelectItem value="kml">Kilometers per Liter (km/L)</SelectItem></SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateMileage}>Calculate Mileage</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(mileage || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Fuel Efficiency</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {mileage && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Fuel Efficiency</p><p className="text-3xl font-bold text-primary">{mileage}</p></div>
                  <CopyButton textToCopy={mileage} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: GasMileageCalculator.tsx ======
==================================================

// ====== START OF FILE: GcdLcmCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.02 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, SigmaSquare } from "lucide-react";

export default function GcdLcmCalculator() {
  const [number1, setNumber1] = useState<string>('');
  const [number2, setNumber2] = useState<string>('');
  
  const [gcf, setGcf] = useState<string | null>(null);
  const [lcm, setLcm] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateGcf = (a: number, b: number): number => {
    if (b === 0) return a;
    return calculateGcf(b, a % b);
  };

  const calculateLcm = (a: number, b: number, g: number): number => {
    if (g === 0) return 0;
    return Math.abs(a * b) / g;
  };

  const handleCalculate = () => {
    setError(null);
    setGcf(null);
    setLcm(null);

    const num1 = parseInt(number1);
    const num2 = parseInt(number2);

    if (isNaN(num1) || isNaN(num2)) {
      setError('Please enter valid integers for both numbers.');
      return;
    }
    if (num1 === 0 && num2 === 0) {
        setError('GCF and LCM are not well-defined for two zeros.');
        return;
    }
    
    const absNum1 = Math.abs(num1);
    const absNum2 = Math.abs(num2);

    const calculatedGcf = calculateGcf(absNum1, absNum2);
    setGcf(calculatedGcf.toString());
    
    const calculatedLcm = calculateLcm(absNum1, absNum2, calculatedGcf);
    setLcm(calculatedLcm.toString());
  };
  
  const resetForm = () => {
    setNumber1(''); setNumber2('');
    setGcf(null); setLcm(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Find the Greatest Common Divisor (GCD/GCF) and Least Common Multiple (LCM) of two integers.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="number1GcdLcm">First Integer</Label><Input id="number1GcdLcm" type="number" value={number1} onChange={(e) => setNumber1(e.target.value)} placeholder="e.g., 48" /></div>
            <div><Label htmlFor="number2GcdLcm">Second Integer</Label><Input id="number2GcdLcm" type="number" value={number2} onChange={(e) => setNumber2(e.target.value)} placeholder="e.g., 60" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={handleCalculate}>Calculate GCD & LCM</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(gcf || lcm || error) && (
          <Card>
            <CardHeader><CardDescription>Results</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {gcf && (
                <div className="flex justify-between items-center p-2 bg-muted rounded-md">
                  <div><p className="text-sm text-muted-foreground">Greatest Common Divisor (GCD/GCF)</p><p className="text-xl font-semibold">{gcf}</p></div>
                  <CopyButton textToCopy={gcf} size="icon" variant="ghost" />
                </div>
              )}
              {lcm && (
                <div className="flex justify-between items-center p-2 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Least Common Multiple (LCM)</p><p className="text-xl font-bold text-primary">{lcm}</p></div>
                  <CopyButton textToCopy={lcm} size="icon" variant="ghost" className="text-primary" />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: GcdLcmCalculator.tsx ======
==================================================

// ====== START OF FILE: GdpCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.82 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, LineChart } from "lucide-react";

// Simplified GDP calculation using Expenditure Approach: GDP = C + I + G + (X - M)
// C = Consumption, I = Investment, G = Government Spending, X = Exports, M = Imports

export default function GdpCalculator() {
  const [consumption, setConsumption] = useState<string>('');
  const [investment, setInvestment] = useState<string>('');
  const [governmentSpending, setGovernmentSpending] = useState<string>('');
  const [exportsVal, setExportsVal] = useState<string>('');
  const [importsVal, setImportsVal] = useState<string>('');

  const [gdp, setGdp] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateGdp = () => {
    setError(null);
    setGdp(null);

    const C = parseFloat(consumption) || 0;
    const I = parseFloat(investment) || 0;
    const G = parseFloat(governmentSpending) || 0;
    const X = parseFloat(exportsVal) || 0;
    const M = parseFloat(importsVal) || 0;

    if ( (consumption && isNaN(C)) || (investment && isNaN(I)) || (governmentSpending && isNaN(G)) || (exportsVal && isNaN(X)) || (importsVal && isNaN(M)) ) {
      setError('Please ensure all entered values are valid numbers.');
      return;
    }
    // Values can be negative (e.g. net exports), but typically positive for main components.

    const calculatedGdp = C + I + G + (X - M);
    setGdp(calculatedGdp.toFixed(2));
  };
  
  const resetForm = () => {
    setConsumption(''); setInvestment(''); setGovernmentSpending(''); setExportsVal(''); setImportsVal('');
    setGdp(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Simplified GDP Estimation</AlertTitle><AlertDescription>This calculator provides a simplified GDP estimate using the expenditure approach (C+I+G+(X-M)). Real GDP calculations are far more complex and involve numerous data sources and adjustments.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter components for GDP calculation (Expenditure Approach).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="consumption">Consumption (C)</Label><Input id="consumption" type="number" value={consumption} onChange={(e) => setConsumption(e.target.value)} placeholder="e.g., 10000 (in billions)" /></div>
            <div><Label htmlFor="investment">Investment (I)</Label><Input id="investment" type="number" value={investment} onChange={(e) => setInvestment(e.target.value)} placeholder="e.g., 3000" /></div>
            <div><Label htmlFor="governmentSpending">Government Spending (G)</Label><Input id="governmentSpending" type="number" value={governmentSpending} onChange={(e) => setGovernmentSpending(e.target.value)} placeholder="e.g., 2500" /></div>
            <div><Label htmlFor="exportsVal">Exports (X)</Label><Input id="exportsVal" type="number" value={exportsVal} onChange={(e) => setExportsVal(e.target.value)} placeholder="e.g., 1500" /></div>
            <div><Label htmlFor="importsVal">Imports (M)</Label><Input id="importsVal" type="number" value={importsVal} onChange={(e) => setImportsVal(e.target.value)} placeholder="e.g., 2000" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateGdp}>Calculate GDP</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(gdp || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Gross Domestic Product (GDP)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {gdp && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated GDP</p><p className="text-3xl font-bold text-primary">${gdp} (units as entered)</p></div>
                  <CopyButton textToCopy={gdp} />
                </div>
              )}
            </CardContent>
             <CardFooter><p className="text-xs text-muted-foreground">Units (e.g., billions, trillions) depend on input values.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: GdpCalculator.tsx ======
==================================================

// ====== START OF FILE: GeneralProteinIntakeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.02 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Beef } from "lucide-react";

// General protein recommendations:
// RDA: 0.8g per kg body weight for average adults.
// Active individuals may need more (e.g., 1.2-1.8g/kg).

const activityLevelsGeneralProtein = [
  { name: "Sedentary (little to no exercise)", factor: 0.8 },
  { name: "Lightly Active (exercise 1-3 days/week)", factor: 1.2 },
  { name: "Moderately Active (exercise 3-5 days/week)", factor: 1.4 },
  { name: "Very Active (exercise 6-7 days/week)", factor: 1.6 },
  { name: "Extremely Active (intense exercise/physical job)", factor: 1.8 },
];

export default function GeneralProteinIntakeCalculator() {
  const [weight, setWeight] = useState<string>('');
  const [weightUnit, setWeightUnit] = useState<'kg' | 'lb'>('kg');
  const [activityLevelFactor, setActivityLevelFactor] = useState<string>(activityLevelsGeneralProtein[1].factor.toString());

  const [proteinRangeGrams, setProteinRangeGrams] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateProtein = () => {
    setError(null);
    setProteinRangeGrams(null);

    let weightInKg = parseFloat(weight);
    if (isNaN(weightInKg) || weightInKg <= 0) {
      setError('Please enter a valid positive body weight.');
      return;
    }

    if (weightUnit === 'lb') {
      weightInKg = weightInKg * 0.453592; // Convert lbs to kg
    }

    const factor = parseFloat(activityLevelFactor);
    if (isNaN(factor)) {
      setError("Invalid activity level selected.");
      return;
    }

    // Provide a range based on the selected activity factor and the general RDA as a baseline.
    const rdaMin = weightInKg * 0.8;
    const recommendedProtein = weightInKg * factor;
    
    // Display a range from RDA up to the calculated amount for active people.
    if (factor > 0.8) {
      setProteinRangeGrams(`${rdaMin.toFixed(0)} - ${recommendedProtein.toFixed(0)} grams per day`);
    } else {
      setProteinRangeGrams(`${recommendedProtein.toFixed(0)} grams per day (RDA)`);
    }
  };
  
  const resetForm = () => {
    setWeight('');
    setActivityLevelFactor(activityLevelsGeneralProtein[1].factor.toString());
    setProteinRangeGrams(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Nutritional Disclaimer</AlertTitle>
        <AlertDescription>
          This calculator provides general protein intake estimates. Individual needs vary based on health, fitness goals, and medical conditions. Consult a healthcare professional or registered dietitian for personalized dietary advice.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate your daily protein needs.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="weightProteinGen">Body Weight</Label>
                <Input id="weightProteinGen" type="number" value={weight} onChange={(e) => setWeight(e.target.value)} placeholder="e.g., 70 or 154" />
              </div>
              <div>
                <Label htmlFor="weightUnitProteinGen">Unit</Label>
                <Select value={weightUnit} onValueChange={(value: 'kg' | 'lb') => setWeightUnit(value)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="kg">Kilograms (kg)</SelectItem>
                    <SelectItem value="lb">Pounds (lb)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div>
              <Label htmlFor="activityLevelProteinGen">Activity Level</Label>
              <Select value={activityLevelFactor} onValueChange={setActivityLevelFactor}>
                <SelectTrigger id="activityLevelProteinGen"><SelectValue placeholder="Select activity level" /></SelectTrigger>
                <SelectContent>
                  {activityLevelsGeneralProtein.map(level => (
                    <SelectItem key={level.name} value={level.factor.toString()}>
                      {level.name} ({level.factor}g/kg)
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateProtein}>Calculate Protein</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(proteinRangeGrams || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Daily Protein Intake</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {proteinRangeGrams && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Recommended Protein Intake</p>
                    <p className="text-2xl font-bold text-primary">{proteinRangeGrams}</p>
                  </div>
                  <CopyButton textToCopy={proteinRangeGrams} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: GeneralProteinIntakeCalculator.tsx ======
==================================================

// ====== START OF FILE: GfrCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.3 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, FileText } from "lucide-react";

// Using the CKD-EPI Creatinine Equation (2021) as an example. Other formulas exist (MDRD, Schwartz for children).
// Formula is complex and differs by sex and race (though race factor is now often debated/removed).
// This is a simplified placeholder for the UI and concept.

export default function GfrCalculator() {
  const [serumCreatinine, setSerumCreatinine] = useState<string>(''); // mg/dL
  const [age, setAge] = useState<string>(''); // years
  const [gender, setGender] = useState<'male' | 'female'>('female'); // CKD-EPI has different factors
  // Race factor removed based on recent guidelines but was part of original CKD-EPI.

  const [gfr, setGfr] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateGfr = () => {
    setError(null);
    setGfr(null);

    const scr = parseFloat(serumCreatinine); // Serum Creatinine in mg/dL
    const ageYears = parseInt(age);

    if (isNaN(scr) || scr <= 0 || isNaN(ageYears) || ageYears <= 0) {
      setError('Please enter valid positive values for serum creatinine (mg/dL) and age (years).');
      return;
    }

    // Simplified CKD-EPI 2021 (without race factor)
    // Variables: k, alpha, female_factor
    let k: number, alpha: number;
    const female_factor = gender === 'female' ? 1.012 : 1; // For 2021 CKD-EPI, adjustment for females

    if (gender === 'female') {
      k = scr <= 0.7 ? 0.7 : 0.7; // Kappa is 0.7 for females
      alpha = scr <= 0.7 ? -0.241 : -1.200;
    } else { // Male
      k = scr <= 0.9 ? 0.9 : 0.9; // Kappa is 0.9 for males
      alpha = scr <= 0.9 ? -0.302 : -1.200;
    }
    
    // GFR = 142 * min(Scr/κ, 1)^α * max(Scr/κ, 1)^-1.200 * 0.9938^Age * (if female then 1.012)
    // This simplified version just demonstrates the structure. A full implementation needs accurate constants and logic.
    // For demonstration, let's use a placeholder calculation:
    
    // Placeholder logic (NOT actual CKD-EPI - this is a placeholder)
    let calculatedGfr_placeholder = (140 - ageYears) * (1 / scr) * (gender === 'female' ? 0.85 : 1) * 72 / 72; // Simplified Cockcroft-Gault like structure for placeholder
    if (calculatedGfr_placeholder < 5) calculatedGfr_placeholder = 5; // Min sensible value
    if (calculatedGfr_placeholder > 200) calculatedGfr_placeholder = 200; // Max sensible value
    
    // More accurate CKD-EPI 2021 attempt (still ensure constants are double-checked from reliable source)
    let gfr_calc = 142 * Math.pow(Math.min(scr/k, 1), alpha) * Math.pow(Math.max(scr/k, 1), -1.200) * Math.pow(0.9938, ageYears) * female_factor;


    if (isNaN(gfr_calc) || !isFinite(gfr_calc)){
        setError("Calculation resulted in an invalid number. Please check inputs and ensure serum creatinine is in mg/dL.");
        setGfr(calculatedGfr_placeholder.toFixed(0)); // Fallback to placeholder if complex formula fails
        return;
    }
    
    setGfr(gfr_calc.toFixed(0));
  };
  
  const resetForm = () => {
    setSerumCreatinine(''); setAge(''); setGender('female');
    setGfr(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Medical Disclaimer - For Informational Use Only</AlertTitle>
        <AlertDescription>
          Estimated Glomerular Filtration Rate (eGFR) is a key indicator of kidney function. This calculator uses a formula (e.g., CKD-EPI 2021) which provides an estimate. <strong className="font-semibold">It is NOT a substitute for professional medical advice, diagnosis, or treatment.</strong> Kidney function assessment is complex. Always consult your doctor or a qualified healthcare provider for any health concerns or before making any decisions related to your health or treatment. Do not use this tool for self-diagnosis.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate Glomerular Filtration Rate (eGFR). See disclaimer.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="serumCreatinine">Serum Creatinine (mg/dL)</Label><Input id="serumCreatinine" type="number" value={serumCreatinine} onChange={(e) => setSerumCreatinine(e.target.value)} placeholder="e.g., 0.9" /></div>
            <div><Label htmlFor="ageGfr">Age (Years)</Label><Input id="ageGfr" type="number" value={age} onChange={(e) => setAge(e.target.value)} placeholder="e.g., 45" /></div>
            <div><Label htmlFor="genderGfr">Biological Sex (for formula)</Label><Select value={gender} onValueChange={(v: 'male' | 'female') => setGender(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="female">Female</SelectItem><SelectItem value="male">Male</SelectItem></SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateGfr}>Calculate eGFR</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(gfr || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated GFR (eGFR)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {gfr && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">eGFR (mL/min/1.73m²)</p><p className="text-3xl font-bold text-primary">{gfr}</p></div>
                  <CopyButton textToCopy={gfr} />
                </div>
              )}
              <Alert variant="default" className="mt-4">
                <Info className="h-4 w-4"/>
                <AlertTitle>General eGFR Stages (approximate):</AlertTitle>
                <AlertDescription className="text-xs">
                    <ul className="list-disc pl-5">
                        <li>Stage 1: &ge;90 (Normal or high, kidney damage present if other signs)</li>
                        <li>Stage 2: 60-89 (Mildly decreased, kidney damage present if other signs)</li>
                        <li>Stage 3a: 45-59 (Mild to moderately decreased)</li>
                        <li>Stage 3b: 30-44 (Moderate to severely decreased)</li>
                        <li>Stage 4: 15-29 (Severely decreased)</li>
                        <li>Stage 5: &lt;15 (Kidney failure)</li>
                    </ul>
                    <p className="mt-1">Interpretation requires clinical context. Consult your doctor.</p>
                </AlertDescription>
               </Alert>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: GfrCalculator.tsx ======
==================================================

// ====== START OF FILE: GolfClubDistanceGapAnalyzer.tsx ======
// File converted from TSX to TXT
// Original size: 5.98 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { PlusCircle, Trash2, ArrowDown, Trophy } from 'lucide-react';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal } from "lucide-react";

interface ClubEntry {
  id: string;
  name: string;
  distance: number;
}

interface GapResult {
  fromClub: string;
  toClub: string;
  gap: number;
}

export default function GolfClubDistanceGapAnalyzer() {
  const [clubs, setClubs] = useState<ClubEntry[]>([
    { id: crypto.randomUUID(), name: 'Pitching Wedge', distance: 120 },
    { id: crypto.randomUUID(), name: '9 Iron', distance: 135 },
    { id: crypto.randomUUID(), name: '8 Iron', distance: 150 },
  ]);
  const [gaps, setGaps] = useState<GapResult[] | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleClubChange = (id: string, field: 'name' | 'distance', value: string) => {
    setClubs(prev => prev.map(club => {
      if (club.id === id) {
        return { ...club, [field]: field === 'distance' ? parseFloat(value) || 0 : value };
      }
      return club;
    }));
    setGaps(null); // Reset results on change
  };

  const addClub = () => {
    setClubs(prev => [...prev, { id: crypto.randomUUID(), name: '', distance: 0 }]);
  };

  const removeClub = (id: string) => {
    if (clubs.length > 2) {
      setClubs(prev => prev.filter(club => club.id !== id));
    }
  };

  const analyzeGaps = () => {
    setError(null);
    if (clubs.some(c => c.distance <= 0 || !c.name.trim())) {
      setError("All clubs must have a name and a positive distance value.");
      return;
    }
    if (clubs.length < 2) {
      setError("Please enter at least two clubs to analyze the gaps.");
      return;
    }

    const sortedClubs = [...clubs].sort((a, b) => b.distance - a.distance); // Sort descending by distance

    const calculatedGaps: GapResult[] = [];
    for (let i = 0; i < sortedClubs.length - 1; i++) {
      const from = sortedClubs[i];
      const to = sortedClubs[i+1];
      calculatedGaps.push({
        fromClub: from.name,
        toClub: to.name,
        gap: from.distance - to.distance,
      });
    }
    setGaps(calculatedGaps);
  };

  const resetForm = () => {
    setClubs([
      { id: crypto.randomUUID(), name: 'Pitching Wedge', distance: 120 },
      { id: crypto.randomUUID(), name: '9 Iron', distance: 135 },
      { id: crypto.randomUUID(), name: '8 Iron', distance: 150 },
    ]);
    setGaps(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Trophy className="h-4 w-4" />
        <AlertTitle>Golf Club Distance Gapping</AlertTitle>
        <AlertDescription>
          Analyze the distance gaps between your clubs to ensure consistent yardage increments and optimize your set.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader>
            <CardDescription>Enter your clubs and their average carry distances.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-3 max-h-[400px] overflow-y-auto pr-2">
            {clubs.map((club, index) => (
              <div key={club.id} className="grid grid-cols-[1fr_auto_auto] gap-2 items-center p-2 border rounded-md">
                <Input
                  type="text"
                  placeholder={`Club Name ${index + 1}`}
                  value={club.name}
                  onChange={e => handleClubChange(club.id, 'name', e.target.value)}
                  className="h-9"
                />
                <Input
                  type="number"
                  placeholder="Distance"
                  value={club.distance || ''}
                  onChange={e => handleClubChange(club.id, 'distance', e.target.value)}
                  className="h-9 w-28"
                  aria-label={`${club.name} distance`}
                />
                <Button variant="ghost" size="icon" onClick={() => removeClub(club.id)} disabled={clubs.length <= 2} className="h-9 w-9">
                  <Trash2 className="h-4 w-4 text-destructive" />
                </Button>
              </div>
            ))}
             <Button variant="outline" size="sm" onClick={addClub} className="mt-2">
                <PlusCircle className="mr-2 h-4 w-4"/> Add Club
             </Button>
          </CardContent>
           <CardFooter>
            <Button onClick={analyzeGaps} className="w-full md:w-auto">Analyze Gaps</Button>
          </CardFooter>
        </Card>
        
        <Card className="lg:col-span-1">
          <CardHeader>
            <CardDescription>Distance Gap Analysis</CardDescription>
          </CardHeader>
          <CardContent className="space-y-2">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {gaps && gaps.length > 0 ? (
              gaps.map((gap, index) => (
                <div key={index} className="p-2 bg-muted rounded-md text-center">
                    <p className="font-semibold text-sm">{gap.fromClub} → {gap.toClub}</p>
                    <div className="flex items-center justify-center gap-2">
                        <ArrowDown className="h-4 w-4 text-primary"/>
                        <p className="text-lg font-bold text-primary">{gap.gap} yd/m gap</p>
                    </div>
                </div>
              ))
            ) : !error && (
              <p className="text-muted-foreground text-sm">Results will appear here.</p>
            )}
          </CardContent>
          <CardFooter>
             <Button variant="outline" onClick={resetForm} className="w-full">Reset</Button>
          </CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: GolfClubDistanceGapAnalyzer.tsx ======
==================================================

// ====== START OF FILE: GolfHandicapCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.96 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { PlusCircle, Trash2 } from 'lucide-react';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Target } from "lucide-react";

interface ScoreEntry {
  id: string;
  score: number;
  courseRating: number;
  slopeRating: number;
}

// Note: Actual handicap calculation (WHS/USGA) is complex, involving score differentials,
// best scores, adjustments, etc. This is a VASTLY simplified placeholder.

export default function GolfHandicapCalculator() {
  const [scores, setScores] = useState<ScoreEntry[]>([{ id: crypto.randomUUID(), score: 0, courseRating: 0, slopeRating: 0 }]);
  const [handicapIndex, setHandicapIndex] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleScoreChange = (id: string, field: keyof Omit<ScoreEntry, 'id'>, value: string) => {
    setScores(prev => prev.map(s => s.id === id ? { ...s, [field]: parseFloat(value) || 0 } : s));
  };
  const addScore = () => setScores(prev => [...prev, { id: crypto.randomUUID(), score: 0, courseRating: 0, slopeRating: 0 }]);
  const removeScore = (id: string) => setScores(prev => prev.filter(s => s.id !== id && scores.length > 1));

  const calculateHandicap = () => {
    setError(null);
    setHandicapIndex(null);

    if (scores.some(s => s.score <= 0 || s.courseRating <= 0 || s.slopeRating <= 0)) {
      setError('Please enter valid positive scores, course ratings, and slope ratings for all entries.');
      return;
    }
    if (scores.length < 1) { // Typically need more scores, e.g., 3 for an initial WHS index.
        setError('Enter at least one score for a basic estimation.');
        return;
    }

    // Highly simplified placeholder logic: Average of (Score - Course Rating) * (113 / Slope Rating)
    const differentials = scores.map(s => (s.score - s.courseRating) * (113 / s.slopeRating));
    const avgDifferential = differentials.reduce((sum, d) => sum + d, 0) / differentials.length;
    
    // Further simplified: just use average differential as a raw index estimate
    setHandicapIndex(avgDifferential.toFixed(1));
  };

  const resetForm = () => {
    setScores([{ id: crypto.randomUUID(), score: 0, courseRating: 0, slopeRating: 0 }]);
    setHandicapIndex(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Highly Simplified Handicap Estimator</AlertTitle>
        <AlertDescription>
          Official golf handicap calculation (e.g., World Handicap System) is complex, involving specific rules for score differentials, adjustments, and number of scores used. This calculator provides a <strong className="font-semibold">very basic, non-official estimate</strong> for illustrative purposes only. For an official handicap, use services authorized by golf's governing bodies.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardTitle className="font-headline">Enter Your Scores</CardTitle></CardHeader>
          <CardContent className="space-y-3">
            {scores.map((entry, index) => (
              <div key={entry.id} className="p-3 border rounded-md space-y-2">
                <div className="flex justify-between items-center">
                  <Label className="text-sm font-semibold">Score Entry {index + 1}</Label>
                  {scores.length > 1 && <Button variant="ghost" size="icon" onClick={() => removeScore(entry.id)} className="h-7 w-7"><Trash2 className="h-4 w-4 text-destructive" /></Button>}
                </div>
                <div className="grid grid-cols-3 gap-2">
                  <div><Label htmlFor={`score-${entry.id}`} className="text-xs">Score</Label><Input id={`score-${entry.id}`} type="number" value={entry.score || ''} onChange={e => handleScoreChange(entry.id, 'score', e.target.value)} placeholder="e.g., 85" /></div>
                  <div><Label htmlFor={`cr-${entry.id}`} className="text-xs">Course Rating</Label><Input id={`cr-${entry.id}`} type="number" step="0.1" value={entry.courseRating || ''} onChange={e => handleScoreChange(entry.id, 'courseRating', e.target.value)} placeholder="e.g., 71.5" /></div>
                  <div><Label htmlFor={`sr-${entry.id}`} className="text-xs">Slope Rating</Label><Input id={`sr-${entry.id}`} type="number" value={entry.slopeRating || ''} onChange={e => handleScoreChange(entry.id, 'slopeRating', e.target.value)} placeholder="e.g., 125" /></div>
                </div>
              </div>
            ))}
            <Button variant="outline" size="sm" onClick={addScore}><PlusCircle className="mr-2 h-4 w-4" /> Add Score</Button>
          </CardContent>
        </Card>

        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Handicap Estimation</CardDescription></CardHeader>
          <CardContent>
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {handicapIndex && (
              <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                <div><p className="text-sm text-muted-foreground">Estimated Index (Simplified)</p><p className="text-3xl font-bold text-primary">{handicapIndex}</p></div>
                <CopyButton textToCopy={handicapIndex} />
              </div>
            )}
          </CardContent>
          <CardFooter>
            <Button onClick={calculateHandicap} className="w-full">Calculate Handicap</Button>
          </CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: GolfHandicapCalculator.tsx ======
==================================================

// ====== START OF FILE: GolfScoreDifferentialCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.56 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Target } from "lucide-react";

export default function GolfScoreDifferentialCalculator() {
  const [adjustedGrossScore, setAdjustedGrossScore] = useState<string>('');
  const [courseRating, setCourseRating] = useState<string>('');
  const [slopeRating, setSlopeRating] = useState<string>('');

  const [scoreDifferential, setScoreDifferential] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateDifferential = () => {
    setError(null);
    setScoreDifferential(null);

    const ags = parseInt(adjustedGrossScore);
    const cr = parseFloat(courseRating);
    const sr = parseInt(slopeRating);

    if (isNaN(ags) || ags <= 0 || isNaN(cr) || cr <= 0 || isNaN(sr) || sr < 55 || sr > 155) {
      setError('Please enter valid numbers: positive Score, positive Course Rating, and Slope Rating (typically 55-155).');
      return;
    }
    
    // Formula: (113 / Slope Rating) * (Adjusted Gross Score - Course Rating)
    const differential = (113 / sr) * (ags - cr);
    setScoreDifferential(differential.toFixed(1));
  };

  const resetForm = () => {
    setAdjustedGrossScore('');
    setCourseRating('');
    setSlopeRating('');
    setScoreDifferential(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Golf Score Differential Calculator (Simplified)</AlertTitle>
        <AlertDescription>
          Calculate the Score Differential for a single round of golf, a key component of the World Handicap System (WHS). This does not include PCC adjustments.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your score and course details.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="ags">Adjusted Gross Score</Label>
              <Input id="ags" type="number" value={adjustedGrossScore} onChange={(e) => setAdjustedGrossScore(e.target.value)} placeholder="e.g., 85" />
            </div>
            <div>
              <Label htmlFor="courseRating">Course Rating</Label>
              <Input id="courseRating" type="number" step="0.1" value={courseRating} onChange={(e) => setCourseRating(e.target.value)} placeholder="e.g., 71.5" />
            </div>
            <div>
              <Label htmlFor="slopeRating">Slope Rating</Label>
              <Input id="slopeRating" type="number" value={slopeRating} onChange={(e) => setSlopeRating(e.target.value)} placeholder="e.g., 125" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateDifferential}>Calculate Differential</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(scoreDifferential || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Calculated Score Differential</CardDescription>
            </CardHeader>
            <CardContent>
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {scoreDifferential !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Score Differential</p>
                    <p className="text-2xl font-bold text-primary">{scoreDifferential}</p>
                  </div>
                  <CopyButton textToCopy={scoreDifferential} />
                </div>
              )}
              <AlertDescription className="text-xs pt-2">
                A Handicap Index is calculated from the average of the best 8 of your last 20 Score Differentials.
              </AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: GolfScoreDifferentialCalculator.tsx ======
==================================================

// ====== START OF FILE: GpaCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.25 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { PlusCircle, Trash2 } from 'lucide-react';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, GraduationCap } from "lucide-react";

interface Course {
  id: string;
  name: string;
  credits: number;
  grade: string; // e.g., 'A', 'B+', '3.7'
}

// Common Grade to GPA Point mapping (4.0 scale)
const gradePoints: { [key: string]: number } = {
  'A+': 4.0, 'A': 4.0, 'A-': 3.7,
  'B+': 3.3, 'B': 3.0, 'B-': 2.7,
  'C+': 2.3, 'C': 2.0, 'C-': 1.7,
  'D+': 1.3, 'D': 1.0, 'D-': 0.7, // Some systems might not have D-
  'F': 0.0,
};

export default function GpaCalculator() {
  const [courses, setCourses] = useState<Course[]>([{ id: crypto.randomUUID(), name: '', credits: 0, grade: 'A' }]);
  const [gpa, setGpa] = useState<string | null>(null);
  const [totalCredits, setTotalCredits] = useState<number | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleCourseChange = (id: string, field: keyof Omit<Course, 'id'>, value: string | number) => {
    setCourses(prev => prev.map(c => c.id === id ? { ...c, [field]: field === 'credits' ? Number(value) || 0 : value } : c));
  };
  const addCourse = () => setCourses(prev => [...prev, { id: crypto.randomUUID(), name: '', credits: 0, grade: 'A' }]);
  const removeCourse = (id: string) => setCourses(prev => prev.filter(c => c.id !== id && courses.length > 1));

  const calculateGpa = () => {
    setError(null);
    setGpa(null);
    setTotalCredits(null);

    let totalQualityPoints = 0;
    let currentTotalCredits = 0;

    if (courses.some(c => c.credits <= 0 || !gradePoints[c.grade.toUpperCase()])) {
      setError('Please enter valid positive credits and select a valid grade for all courses.');
      return;
    }
    if (courses.length === 0) {
        setError("Please add at least one course.");
        return;
    }

    for (const course of courses) {
      const points = gradePoints[course.grade.toUpperCase()];
      if (typeof points === 'undefined') {
          setError(`Invalid grade '${course.grade}' for course '${course.name || 'Unnamed'}'. Use standard letter grades.`);
          return;
      }
      totalQualityPoints += points * course.credits;
      currentTotalCredits += course.credits;
    }

    if (currentTotalCredits === 0) {
      setError('Total credits cannot be zero.');
      return;
    }

    const calculatedGpa = totalQualityPoints / currentTotalCredits;
    setGpa(calculatedGpa.toFixed(2));
    setTotalCredits(currentTotalCredits);
  };

  const resetForm = () => {
    setCourses([{ id: crypto.randomUUID(), name: '', credits: 0, grade: 'A' }]);
    setGpa(null); setTotalCredits(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>GPA Calculator (4.0 Scale)</AlertTitle><AlertDescription>Calculate your Grade Point Average. Assumes a standard 4.0 grading scale. Grade point values can vary by institution.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardTitle className="font-headline">Enter Your Courses</CardTitle></CardHeader>
          <CardContent className="space-y-3">
            {courses.map((course, index) => (
              <div key={course.id} className="p-3 border rounded-md space-y-2">
                <div className="flex justify-between items-center">
                  <Input type="text" placeholder={`Course Name ${index + 1} (Optional)`} value={course.name} onChange={e => handleCourseChange(course.id, 'name', e.target.value)} className="h-8 text-sm flex-grow mr-2"/>
                  {courses.length > 1 && <Button variant="ghost" size="icon" onClick={() => removeCourse(course.id)} className="h-8 w-8"><Trash2 className="h-4 w-4 text-destructive" /></Button>}
                </div>
                <div className="grid grid-cols-2 gap-2">
                  <div><Label htmlFor={`credits-${course.id}`} className="text-xs">Credits</Label><Input id={`credits-${course.id}`} type="number" value={course.credits || ''} onChange={e => handleCourseChange(course.id, 'credits', e.target.value)} placeholder="e.g., 3" /></div>
                  <div><Label htmlFor={`grade-${course.id}`} className="text-xs">Grade</Label>
                    <Select value={course.grade} onValueChange={val => handleCourseChange(course.id, 'grade', val)}>
                      <SelectTrigger><SelectValue /></SelectTrigger>
                      <SelectContent>{Object.keys(gradePoints).map(g => <SelectItem key={g} value={g}>{g}</SelectItem>)}</SelectContent>
                    </Select>
                  </div>
                </div>
              </div>
            ))}
            <Button variant="outline" size="sm" onClick={addCourse}><PlusCircle className="mr-2 h-4 w-4" /> Add Course</Button>
          </CardContent>
        </Card>
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>GPA Result</CardDescription></CardHeader>
          <CardContent>
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {gpa && totalCredits && (
              <>
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Calculated GPA</p><p className="text-3xl font-bold text-primary">{gpa}</p></div>
                  <CopyButton textToCopy={gpa} />
                </div>
                <p className="text-sm text-muted-foreground mt-2">Based on {totalCredits} total credits.</p>
              </>
            )}
          </CardContent>
          <CardFooter> <Button onClick={calculateGpa} className="w-full">Calculate GPA</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: GpaCalculator.tsx ======
==================================================

// ====== START OF FILE: GratuitySplitCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.73 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Slider } from "@/components/ui/slider";
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, HandCoins } from "lucide-react";

export default function GratuitySplitCalculator() {
  const [billAmount, setBillAmount] = useState<string>('');
  const [tipPercentage, setTipPercentage] = useState<number>(18);
  const [numPeople, setNumPeople] = useState<string>('1');

  const [tipAmount, setTipAmount] = useState<string | null>(null);
  const [totalAmount, setTotalAmount] = useState<string | null>(null);
  const [amountPerPerson, setAmountPerPerson] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTip = () => {
    setError(null); setTipAmount(null); setTotalAmount(null); setAmountPerPerson(null);
    const bill = parseFloat(billAmount);
    const people = parseInt(numPeople);

    if (isNaN(bill) || bill < 0 || isNaN(tipPercentage) || tipPercentage < 0 || isNaN(people) || people <= 0) {
      setError('Please enter valid numbers: Bill Amount (>=0), Tip % (>=0), and Number of People (>0).');
      return;
    }

    const tip = bill * (tipPercentage / 100);
    const total = bill + tip;
    const perPerson = total / people;

    setTipAmount(tip.toFixed(2));
    setTotalAmount(total.toFixed(2));
    setAmountPerPerson(perPerson.toFixed(2));
  };

  const resetForm = () => {
    setBillAmount(''); setTipPercentage(18); setNumPeople('1');
    setTipAmount(null); setTotalAmount(null); setAmountPerPerson(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Gratuity &amp; Tip Split Calculator</AlertTitle><AlertDescription>Calculate tip amount, total bill, and amount per person if splitting with a group.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter bill details.</CardDescription></CardHeader>
          <CardContent className="space-y-6">
            <div><Label htmlFor="billAmountTip">Bill Amount ($)</Label><Input id="billAmountTip" type="number" value={billAmount} onChange={e=>setBillAmount(e.target.value)} placeholder="e.g., 120.50"/></div>
            <div><Label htmlFor="tipPercentSlider">Tip Percentage: {tipPercentage}%</Label><Slider id="tipPercentSlider" defaultValue={[tipPercentage]} value={[tipPercentage]} min={0} max={50} step={1} onValueChange={(val)=>setTipPercentage(val[0])}/></div>
            <div className="flex gap-2"><Button variant="outline" size="sm" onClick={()=>setTipPercentage(15)}>15%</Button><Button variant="outline" size="sm" onClick={()=>setTipPercentage(18)}>18%</Button><Button variant="outline" size="sm" onClick={()=>setTipPercentage(20)}>20%</Button><Button variant="outline" size="sm" onClick={()=>setTipPercentage(25)}>25%</Button></div>
            <div><Label htmlFor="numPeopleTip">Split Between How Many People?</Label><Input id="numPeopleTip" type="number" value={numPeople} onChange={e=>setNumPeople(e.target.value)} placeholder="e.g., 4" min="1"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTip}>Calculate Split</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(totalAmount || error) && (
          <Card>
            <CardHeader><CardDescription>Gratuity Calculation</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {tipAmount && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Tip Amount</p><p className="font-semibold">${tipAmount}</p></div>)}
              {totalAmount && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Bill (with Tip)</p><p className="font-semibold">${totalAmount}</p></div>)}
              {amountPerPerson && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Amount Per Person</p><p className="text-2xl font-bold text-primary">${amountPerPerson}</p></div><CopyButton textToCopy={amountPerPerson} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: GratuitySplitCalculator.tsx ======
==================================================

// ====== START OF FILE: GravelCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.76 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Archive } from "lucide-react";

type UnitSystemGravel = 'imperial' | 'metric'; // imperial: feet/inches, result in cubic yards/tons. metric: meters/cm, result in cubic meters/tonnes.
const DENSITY_GRAVEL_LB_PER_CU_FT = 105; // Approximate, varies greatly (e.g. 90-130)
const DENSITY_GRAVEL_KG_PER_CU_M = 1680; // Approximate (105 lb/ft³ * 16.0185 kg/m³ per lb/ft³)

export default function GravelCalculator() {
  const [units, setUnits] = useState<UnitSystemGravel>('imperial');
  const [length, setLength] = useState<string>('');
  const [width, setWidth] = useState<string>('');
  const [depth, setDepth] = useState<string>(''); // Inches for imperial, CM for metric for depth input
  const [wastage, setWastage] = useState<string>('10'); // Percentage

  const [volumeResult, setVolumeResult] = useState<string | null>(null);
  const [weightResult, setWeightResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateGravel = () => {
    setError(null);
    setVolumeResult(null);
    setWeightResult(null);

    const len = parseFloat(length);
    const wid = parseFloat(width);
    const dep = parseFloat(depth);
    const wasteFactor = 1 + (parseFloat(wastage) / 100 || 0);

    if (isNaN(len) || len <= 0 || isNaN(wid) || wid <= 0 || isNaN(dep) || dep <= 0 || isNaN(wasteFactor -1) || (wasteFactor-1) < 0) {
      setError('Please enter valid positive numbers for length, width, depth, and wastage (>=0).');
      return;
    }

    let volumeCubicBaseUnit: number; // Cubic feet or cubic meters
    let weightBaseUnit: number; // Pounds or Kilograms
    let volumeUnitLabel = '';
    let weightUnitLabel = '';

    if (units === 'imperial') {
      const depthFeet = dep / 12; // Convert depth from inches to feet
      volumeCubicBaseUnit = len * wid * depthFeet;
      const volumeWithWastageCuFt = volumeCubicBaseUnit * wasteFactor;
      setVolumeResult(`${(volumeWithWastageCuFt / 27).toFixed(2)} cubic yards`); // Convert cubic feet to cubic yards

      weightBaseUnit = volumeWithWastageCuFt * DENSITY_GRAVEL_LB_PER_CU_FT;
      setWeightResult(`${(weightBaseUnit / 2000).toFixed(2)} US tons`); // Pounds to US tons
    } else { // Metric
      const depthMeters = dep / 100; // Convert depth from cm to meters
      volumeCubicBaseUnit = len * wid * depthMeters;
      const volumeWithWastageCuM = volumeCubicBaseUnit * wasteFactor;
      setVolumeResult(`${volumeWithWastageCuM.toFixed(2)} cubic meters`);

      weightBaseUnit = volumeWithWastageCuM * DENSITY_GRAVEL_KG_PER_CU_M;
      setWeightResult(`${(weightBaseUnit / 1000).toFixed(2)} tonnes`); // Kilograms to tonnes
    }
  };

  const resetForm = () => {
    setLength(''); setWidth(''); setDepth(''); setWastage('10');
    setVolumeResult(null); setWeightResult(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Gravel Estimation</AlertTitle><AlertDescription>Estimate the volume and weight of gravel needed for your project. Gravel density can vary; this calculator uses an average. Includes wastage factor.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter project dimensions.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="unitSystemGravel">Units</Label><Select value={units} onValueChange={(v: UnitSystemGravel) => setUnits(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Imperial (Length/Width in Feet, Depth in Inches)</SelectItem><SelectItem value="metric">Metric (Length/Width in Meters, Depth in CM)</SelectItem></SelectContent></Select></div>
            <div><Label htmlFor="lengthGravel">Length ({units === 'imperial' ? 'feet' : 'meters'})</Label><Input id="lengthGravel" type="number" value={length} onChange={(e) => setLength(e.target.value)} /></div>
            <div><Label htmlFor="widthGravel">Width ({units === 'imperial' ? 'feet' : 'meters'})</Label><Input id="widthGravel" type="number" value={width} onChange={(e) => setWidth(e.target.value)} /></div>
            <div><Label htmlFor="depthGravel">Depth ({units === 'imperial' ? 'inches' : 'cm'})</Label><Input id="depthGravel" type="number" value={depth} onChange={(e) => setDepth(e.target.value)} /></div>
            <div><Label htmlFor="wastageGravel">Wastage (%)</Label><Input id="wastageGravel" type="number" value={wastage} onChange={(e) => setWastage(e.target.value)} placeholder="e.g., 10"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateGravel}>Calculate Gravel</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(volumeResult || weightResult || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Gravel Needed</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {volumeResult && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Estimated Volume (incl. wastage)</p>
                  <div className="flex justify-between items-center"><p className="font-semibold">{volumeResult}</p><CopyButton textToCopy={volumeResult} size="icon" variant="ghost" /></div>
                </div>
              )}
              {weightResult && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Estimated Weight (incl. wastage)</p>
                  <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{weightResult}</p><CopyButton textToCopy={weightResult} size="icon" variant="ghost" className="text-primary"/></div>
                </div>
              )}
              <AlertDescription className="text-xs pt-2">Density used: approx {DENSITY_GRAVEL_LB_PER_CU_FT} lb/ft³ or {DENSITY_GRAVEL_KG_PER_CU_M} kg/m³.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: GravelCalculator.tsx ======
==================================================

// ====== START OF FILE: GravitationalForceCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.13 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Atom } from "lucide-react";

// Newton's Law of Universal Gravitation: F = G * (m1 * m2) / r^2
// G = Gravitational constant ≈ 6.67430 × 10^-11 N(m/kg)^2

const G = 6.67430e-11;

export default function GravitationalForceCalculator() {
  const [mass1, setMass1] = useState<string>(''); // kg
  const [mass2, setMass2] = useState<string>(''); // kg
  const [distance, setDistance] = useState<string>(''); // meters

  const [force, setForce] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateForce = () => {
    setError(null);
    setForce(null);

    const m1 = parseFloat(mass1);
    const m2 = parseFloat(mass2);
    const r = parseFloat(distance);

    if (isNaN(m1) || m1 <= 0 || isNaN(m2) || m2 <= 0 || isNaN(r) || r <= 0) {
      setError('Please enter valid positive numbers for mass 1 (kg), mass 2 (kg), and distance (m).');
      return;
    }

    const calculatedForce = G * (m1 * m2) / (r * r);
    
    if (isNaN(calculatedForce) || !isFinite(calculatedForce)) {
        setError("Calculation resulted in an invalid number. Check inputs, especially for very small distance.");
        return;
    }
    // Format with scientific notation for potentially very small/large numbers
    setForce(calculatedForce.toExponential(4));
  };
  
  const resetForm = () => {
    setMass1(''); setMass2(''); setDistance('');
    setForce(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Gravitational Force</AlertTitle><AlertDescription>Calculate the gravitational force between two objects using Newton's law. Ensure inputs are in kilograms (kg) for mass and meters (m) for distance.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter mass and distance values.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="mass1">Mass of Object 1 (kg)</Label><Input id="mass1" type="number" value={mass1} onChange={(e) => setMass1(e.target.value)} placeholder="e.g., 5.972e24 (Earth)" /></div>
            <div><Label htmlFor="mass2">Mass of Object 2 (kg)</Label><Input id="mass2" type="number" value={mass2} onChange={(e) => setMass2(e.target.value)} placeholder="e.g., 7.348e22 (Moon)" /></div>
            <div><Label htmlFor="distanceGrav">Distance between centers (meters)</Label><Input id="distanceGrav" type="number" value={distance} onChange={(e) => setDistance(e.target.value)} placeholder="e.g., 3.844e8 (Earth-Moon)" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateForce}>Calculate Force</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(force || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Gravitational Force</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {force && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Force (Newtons)</p><p className="text-3xl font-bold text-primary">{force} N</p></div>
                  <CopyButton textToCopy={force} />
                </div>
              )}
            </CardContent>
            <CardFooter><p className="text-xs text-muted-foreground">G ≈ 6.67430 × 10⁻¹¹ N(m/kg)²</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: GravitationalForceCalculator.tsx ======
==================================================

// ====== START OF FILE: GreatCommonFactorCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.67 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, DivideSquare } from "lucide-react";

export default function GreatCommonFactorCalculator() {
  const [number1, setNumber1] = useState<string>('');
  const [number2, setNumber2] = useState<string>('');
  
  const [gcf, setGcf] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Euclidean algorithm for GCF
  const calculateGcf = (a: number, b: number): number => {
    if (b === 0) return a;
    return calculateGcf(b, a % b);
  };

  const handleCalculate = () => {
    setError(null);
    setGcf(null);

    const num1 = parseInt(number1);
    const num2 = parseInt(number2);

    if (isNaN(num1) || isNaN(num2)) {
      setError('Please enter valid integers for both numbers.');
      return;
    }
     if (num1 === 0 && num2 === 0) {
        setError('GCF is not well-defined for two zeros. Some define it as 0.');
        setGcf('0 (by convention)');
        return;
    }
    
    const absNum1 = Math.abs(num1);
    const absNum2 = Math.abs(num2);

    const calculatedGcf = calculateGcf(absNum1, absNum2);
    setGcf(calculatedGcf.toString());
  };
  
  const resetForm = () => {
    setNumber1('');
    setNumber2('');
    setGcf(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Find the Greatest Common Factor (GCF) / Greatest Common Divisor (GCD) of two integers.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="number1Gcf">First Integer</Label>
              <Input id="number1Gcf" type="number" value={number1} onChange={(e) => setNumber1(e.target.value)} placeholder="e.g., 48" />
            </div>
            <div>
              <Label htmlFor="number2Gcf">Second Integer</Label>
              <Input id="number2Gcf" type="number" value={number2} onChange={(e) => setNumber2(e.target.value)} placeholder="e.g., 60" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={handleCalculate}>Calculate GCF</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(gcf || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Result</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {gcf && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Greatest Common Factor (GCF)</p>
                    <p className="text-3xl font-bold text-primary">{gcf}</p>
                  </div>
                  <CopyButton textToCopy={gcf} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: GreatCommonFactorCalculator.tsx ======
==================================================

// ====== START OF FILE: HalfLifeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.14 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Hourglass } from "lucide-react";

type HalfLifeTarget = 'final_amount' | 'initial_amount' | 'half_life' | 'time_elapsed';

export default function HalfLifeCalculator() {
  const [target, setTarget] = useState<HalfLifeTarget>('final_amount');
  const [initialAmount, setInitialAmount] = useState<string>('');
  const [finalAmount, setFinalAmount] = useState<string>('');
  const [halfLife, setHalfLife] = useState<string>('');
  const [timeElapsed, setTimeElapsed] = useState<string>('');
  
  const [result, setResult] = useState<string | null>(null);
  const [resultLabel, setResultLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const calculate = () => {
    setError(null); setResult(null); setResultLabel('');
    const N0 = parseFloat(initialAmount);
    const Nt = parseFloat(finalAmount);
    const T_half = parseFloat(halfLife);
    const t = parseFloat(timeElapsed);
    let calcValue: number;

    try {
      switch(target) {
        case 'final_amount': // Nt = N0 * 0.5^(t/T_half)
          if(isNaN(N0)||N0<0||isNaN(T_half)||T_half<=0||isNaN(t)||t<0) throw new Error("Initial Amount (>=0), Half-Life (>0), and Time (>=0) must be valid.");
          calcValue = N0 * Math.pow(0.5, t / T_half);
          setResultLabel('Final Amount Remaining');
          break;
        case 'initial_amount': // N0 = Nt / 0.5^(t/T_half)
          if(isNaN(Nt)||Nt<0||isNaN(T_half)||T_half<=0||isNaN(t)||t<0) throw new Error("Final Amount (>=0), Half-Life (>0), and Time (>=0) must be valid.");
          calcValue = Nt / Math.pow(0.5, t / T_half);
          setResultLabel('Initial Amount');
          break;
        case 'half_life': // T_half = t * ln(0.5) / ln(Nt/N0)
          if(isNaN(N0)||N0<=0||isNaN(Nt)||Nt<=0||isNaN(t)||t<=0||Nt>=N0) throw new Error("Initial (>0), Final (>0), and Time (>0) must be valid. Final must be less than Initial.");
          calcValue = t * Math.log(0.5) / Math.log(Nt / N0);
          setResultLabel('Half-Life (same time unit as elapsed)');
          break;
        case 'time_elapsed': // t = T_half * ln(Nt/N0) / ln(0.5)
          if(isNaN(N0)||N0<=0||isNaN(Nt)||Nt<=0||isNaN(T_half)||T_half<=0||Nt>=N0) throw new Error("Initial (>0), Final (>0), and Half-Life (>0) must be valid. Final must be less than Initial.");
          calcValue = T_half * Math.log(Nt / N0) / Math.log(0.5);
          setResultLabel('Time Elapsed (same time unit as half-life)');
          break;
        default: throw new Error("Invalid calculation target.");
      }
      if(isNaN(calcValue) || !isFinite(calcValue)) throw new Error("Calculation resulted in an invalid number.");
      setResult(calcValue.toPrecision(5));
    } catch(e:any) { setError(e.message); }
  };
  
  const resetForm = () => {
    setInitialAmount(''); setFinalAmount(''); setHalfLife(''); setTimeElapsed('');
    setResult(null); setError(null); setResultLabel('');
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Half-Life Calculator</AlertTitle><AlertDescription>Calculate final amount, initial amount, half-life, or time elapsed for radioactive decay or other half-life processes. Ensure time units are consistent.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Solve for the unknown variable.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="targetHL">Calculate:</Label><Select value={target} onValueChange={(v:HalfLifeTarget)=>{setTarget(v);resetForm()}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
              <SelectItem value="final_amount">Final Amount</SelectItem><SelectItem value="initial_amount">Initial Amount</SelectItem>
              <SelectItem value="half_life">Half-Life</SelectItem><SelectItem value="time_elapsed">Time Elapsed</SelectItem>
            </SelectContent></Select></div>
            {target!=='initial_amount' && <div><Label htmlFor="initialAmountHL">Initial Amount</Label><Input id="initialAmountHL" type="number" value={initialAmount} onChange={e=>setInitialAmount(e.target.value)}/></div>}
            {target!=='final_amount' && <div><Label htmlFor="finalAmountHL">Final Amount</Label><Input id="finalAmountHL" type="number" value={finalAmount} onChange={e=>setFinalAmount(e.target.value)}/></div>}
            {target!=='half_life' && <div><Label htmlFor="halfLifeHL">Half-Life</Label><Input id="halfLifeHL" type="number" value={halfLife} onChange={e=>setHalfLife(e.target.value)}/></div>}
            {target!=='time_elapsed' && <div><Label htmlFor="timeElapsedHL">Time Elapsed</Label><Input id="timeElapsedHL" type="number" value={timeElapsed} onChange={e=>setTimeElapsed(e.target.value)}/></div>}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">{resultLabel}</p><p className="text-2xl font-bold text-primary">{result}</p></div><CopyButton textToCopy={result}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: HalfLifeCalculator.tsx ======
==================================================

// ====== START OF FILE: HealthyWeightCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.49 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Scale } from "lucide-react";

// Using BMI ranges for healthy weight: Healthy BMI = 18.5 to 24.9
// Weight (kg) = BMI * height (m)^2

export default function HealthyWeightCalculator() {
  const [height, setHeight] = useState<string>('');
  const [heightUnit, setHeightUnit] = useState<'cm' | 'in'>('cm');
  
  const [healthyWeightRange, setHealthyWeightRange] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateHealthyWeight = () => {
    setError(null);
    setHealthyWeightRange(null);

    let hCm = parseFloat(height);
    if (isNaN(hCm) || hCm <= 0) {
      setError('Please enter a valid positive height.');
      return;
    }

    if (heightUnit === 'in') {
      hCm = hCm * 2.54; // Convert inches to cm
    }
    
    const hMeters = hCm / 100; // Convert cm to meters

    const lowerBmi = 18.5;
    const upperBmi = 24.9;

    const lowerWeightKg = lowerBmi * (hMeters * hMeters);
    const upperWeightKg = upperBmi * (hMeters * hMeters);

    const lowerWeightLb = lowerWeightKg * 2.20462;
    const upperWeightLb = upperWeightKg * 2.20462;

    setHealthyWeightRange(
      `${lowerWeightKg.toFixed(1)} - ${upperWeightKg.toFixed(1)} kg  (${lowerWeightLb.toFixed(1)} - ${upperWeightLb.toFixed(1)} lbs)`
    );
  };
  
  const resetForm = () => {
    setHeight('');
    setHealthyWeightRange(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Medical Disclaimer</AlertTitle>
        <AlertDescription>
          This calculator provides an estimated healthy weight range based on BMI. BMI is a general indicator and may not be accurate for all body types (e.g., athletes). Consult a healthcare professional for personalized medical advice.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate your healthy weight range.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="heightHw">Height</Label>
                <Input id="heightHw" type="number" value={height} onChange={(e) => setHeight(e.target.value)} placeholder="e.g., 170" />
              </div>
              <div>
                <Label htmlFor="heightUnitHw">Unit</Label>
                <Select value={heightUnit} onValueChange={(value: 'cm' | 'in') => setHeightUnit(value)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="cm">cm</SelectItem>
                    <SelectItem value="in">inches</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateHealthyWeight}>Calculate Range</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(healthyWeightRange || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Healthy Weight Range</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {healthyWeightRange && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Healthy Weight Range (BMI 18.5-24.9)</p><p className="text-xl font-bold text-primary">{healthyWeightRange}</p></div>
                  <CopyButton textToCopy={healthyWeightRange} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: HealthyWeightCalculator.tsx ======
==================================================

// ====== START OF FILE: HeartDiseaseRiskCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.24 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, HeartPulse } from "lucide-react";

interface RiskFactor {
  id: keyof typeof initialAnswers;
  question: string;
  category: 'Personal' | 'Lifestyle' | 'Medical';
  points: number;
}

const riskFactors: RiskFactor[] = [
  { id: 'age', question: "Are you over 45 (male) or over 55 (female)?", category: 'Personal', points: 2 },
  { id: 'familyHistory', question: "Do you have a first-degree relative with premature heart disease?", category: 'Personal', points: 2 },
  { id: 'smoking', question: "Do you currently smoke or have you quit in the last year?", category: 'Lifestyle', points: 3 },
  { id: 'physicalActivity', question: "Do you get less than 150 minutes of moderate exercise per week?", category: 'Lifestyle', points: 1 },
  { id: 'highBP', question: "Have you been diagnosed with or are you being treated for high blood pressure?", category: 'Medical', points: 2 },
  { id: 'highCholesterol', question: "Have you been diagnosed with or are you being treated for high cholesterol?", category: 'Medical', points: 2 },
  { id: 'diabetes', question: "Have you been diagnosed with diabetes?", category: 'Medical', points: 3 },
  { id: 'overweight', question: "Is your BMI over 25 (overweight or obese)?", category: 'Medical', points: 1 },
];

const initialAnswers = {
  age: false,
  familyHistory: false,
  smoking: false,
  physicalActivity: false,
  highBP: false,
  highCholesterol: false,
  diabetes: false,
  overweight: false,
};

type Answers = typeof initialAnswers;

export default function HeartDiseaseRiskCalculator() {
  const [answers, setAnswers] = useState<Answers>(initialAnswers);
  const [riskScore, setRiskScore] = useState<number | null>(null);
  const [riskLevel, setRiskLevel] = useState<string | null>(null);

  const assessRisk = () => {
    let score = 0;
    for (const factor of riskFactors) {
      if (answers[factor.id]) {
        score += factor.points;
      }
    }
    setRiskScore(score);

    if (score <= 2) setRiskLevel("Lower Relative Risk");
    else if (score <= 5) setRiskLevel("Moderate Relative Risk");
    else if (score <= 8) setRiskLevel("High Relative Risk");
    else setRiskLevel("Very High Relative Risk");
  };

  const resetForm = () => {
    setAnswers(initialAnswers);
    setRiskScore(null);
    setRiskLevel(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle className="font-bold text-lg">CRITICAL MEDICAL DISCLAIMER - ILLUSTRATIVE TOOL ONLY</AlertTitle>
        <AlertDescription className="text-base">
          This Heart Disease Risk Calculator is a <strong className="font-semibold">highly simplified, illustrative tool based on a general checklist. It CANNOT and DOES NOT provide a medical diagnosis or an accurate risk assessment.</strong> Heart disease risk is complex and influenced by numerous factors not covered here. <strong className="font-semibold">ALWAYS consult your doctor or a qualified healthcare professional</strong> for a comprehensive risk assessment.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Check the risk factors that apply to you. READ DISCLAIMER.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            {riskFactors.map(factor => (
              <div key={factor.id} className="flex items-start space-x-3 p-2 border rounded-md">
                <Checkbox id={factor.id} checked={answers[factor.id]} onCheckedChange={checked => setAnswers(prev => ({ ...prev, [factor.id]: !!checked }))} className="mt-1" />
                <Label htmlFor={factor.id} className="text-sm font-medium">{factor.question}</Label>
              </div>
            ))}
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={assessRisk}>Assess Risk (Illustrative)</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>
        {(riskLevel !== null) && (
          <Card>
            <CardHeader><CardDescription>Illustrative Risk Assessment</CardDescription></CardHeader>
            <CardContent>
              <div className="p-3 bg-primary/10 rounded-md text-center">
                <p className="text-sm text-muted-foreground">Illustrative Risk Level</p>
                <p className="text-2xl font-bold text-primary">{riskLevel}</p>
                {riskScore !== null && <p className="text-xs text-muted-foreground">(Score: {riskScore})</p>}
              </div>
              <AlertDescription className="text-xs pt-2 mt-2">This score is not a medical diagnosis. The higher the score, the more important it is to discuss your cardiovascular health with your doctor.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: HeartDiseaseRiskCalculator.tsx ======
==================================================

// ====== START OF FILE: HeartDiseaseRiskFactorChecklistAwareness.tsx ======
// File converted from TSX to TXT
// Original size: 5.8 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Card, CardContent, CardHeader, CardDescription, CardFooter } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { HeartPulse, Info, AlertTriangle } from "lucide-react";

interface RiskFactor {
  id: string;
  question: string;
  category: string; 
}

const riskFactorsList: RiskFactor[] = [
  { id: 'age', question: "Are you male over 45 or female over 55 (or post-menopausal)?", category: "Unmodifiable" },
  { id: 'family_history', question: "Do you have a close male relative (father, brother) who had heart disease before 55, or a female relative (mother, sister) before 65?", category: "Unmodifiable" },
  { id: 'smoking', question: "Do you currently smoke or are you regularly exposed to secondhand smoke?", category: "Lifestyle" },
  { id: 'high_bp', question: "Have you been diagnosed with high blood pressure or are you taking medication for it?", category: "Medical" },
  { id: 'high_cholesterol', question: "Have you been diagnosed with high cholesterol or are you taking medication for it?", category: "Medical" },
  { id: 'diabetes', question: "Have you been diagnosed with diabetes?", category: "Medical" },
  { id: 'activity', question: "Do you get less than 150 minutes of moderate-intensity exercise per week?", category: "Lifestyle" },
  { id: 'diet', question: "Is your diet high in saturated fats, trans fats, sodium, and added sugars?", category: "Lifestyle" },
  { id: 'overweight', question: "Are you considered overweight or obese (e.g., BMI > 25)?", category: "Medical" },
];

type Answers = Record<string, boolean>;

export default function HeartDiseaseRiskFactorChecklistAwareness() {
  const initialAnswers = riskFactorsList.reduce((acc, q) => ({...acc, [q.id]: false}), {} as Answers);
  const [answers, setAnswers] = useState<Answers>(initialAnswers);
  const [awarenessMessage, setAwarenessMessage] = useState<string | null>(null);

  const checkAwareness = () => {
    const checkedCount = Object.values(answers).filter(Boolean).length;
    if (checkedCount === 0) {
      setAwarenessMessage("You have not identified any common risk factors. Continue maintaining a healthy lifestyle.");
    } else if (checkedCount <= 2) {
      setAwarenessMessage(`You have identified ${checkedCount} common risk factor(s). It's a good time to focus on maintaining and improving healthy habits.`);
    } else if (checkedCount <= 4) {
      setAwarenessMessage(`You have identified ${checkedCount} common risk factors. Discussing these with your doctor is a proactive step for your long-term health.`);
    } else {
      setAwarenessMessage(`You have identified ${checkedCount} or more common risk factors. It is strongly recommended to speak with your doctor about a comprehensive cardiovascular risk assessment.`);
    }
  };

  const resetChecklist = () => {
    setAnswers(initialAnswers);
    setAwarenessMessage(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <AlertTriangle className="h-4 w-4" />
        <AlertTitle className="font-bold text-lg">MEDICAL DISCLAIMER - AWARENESS TOOL ONLY</AlertTitle>
        <AlertDescription className="text-base">
          <p>This is a checklist of common risk factors and is <strong className="font-semibold">NOT A DIAGNOSTIC TOOL</strong>. It cannot and does not provide a medical diagnosis or a comprehensive risk assessment. Many other factors influence cardiovascular health.</p>
          <p className="mt-2"><strong className="font-semibold">ALWAYS consult your doctor or a qualified healthcare professional</strong> for any health concerns and for a proper risk assessment based on your full medical history and clinical tests.</p>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Check any of the following common risk factors that apply to you for awareness.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-3 max-h-[500px] overflow-y-auto pr-2">
            {riskFactorsList.map(factor => (
              <div key={factor.id} className="flex items-start space-x-3 p-2.5 border rounded-md">
                <Checkbox id={factor.id} checked={answers[factor.id]} onCheckedChange={checked => setAnswers(prev => ({...prev, [factor.id]: !!checked}))} className="mt-1 shrink-0"/>
                <div className="grid gap-1.5 leading-none">
                  <Label htmlFor={factor.id} className="text-sm font-medium leading-snug">{factor.question}</Label>
                  <p className="text-xs text-muted-foreground">Category: {factor.category}</p>
                </div>
              </div>
            ))}
          </CardContent>
           <CardFooter className="flex justify-between">
            <Button onClick={checkAwareness}>Check Awareness</Button>
            <Button variant="outline" onClick={resetChecklist}>Reset</Button>
          </CardFooter>
        </Card>
        
        {awarenessMessage && (
          <Card>
            <CardHeader>
              <CardDescription>Awareness Summary</CardDescription>
            </CardHeader>
            <CardContent>
              <Alert className="mt-2">
                <HeartPulse className="h-4 w-4"/>
                <AlertTitle>Note on Your Selections</AlertTitle>
                <AlertDescription>{awarenessMessage}</AlertDescription>
              </Alert>
              <p className="text-xs text-muted-foreground mt-4">Remember, this is not medical advice. The next best step is always to discuss your health with a doctor.</p>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: HeartDiseaseRiskFactorChecklistAwareness.tsx ======
==================================================

// ====== START OF FILE: HeartRateRecoveryCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.47 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, HeartPulse } from "lucide-react";

export default function HeartRateRecoveryCalculator() {
  const [peakHr, setPeakHr] = useState<string>(''); // BPM at end of exercise
  const [hrAfter1Min, setHrAfter1Min] = useState<string>(''); // BPM 1 minute after stopping exercise
  const [hrAfter2Min, setHrAfter2Min] = useState<string>(''); // Optional: BPM 2 mins after

  const [recovery1Min, setRecovery1Min] = useState<string | null>(null);
  const [recovery2Min, setRecovery2Min] = useState<string | null>(null);
  const [recoveryLevel, setRecoveryLevel] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateRecovery = () => {
    setError(null); setRecovery1Min(null); setRecovery2Min(null); setRecoveryLevel(null);
    const peak = parseInt(peakHr);
    const hr1 = parseInt(hrAfter1Min);
    const hr2 = parseInt(hrAfter2Min); // Optional

    if (isNaN(peak) || peak <=0 || isNaN(hr1) || hr1 <=0) {
      setError('Peak Heart Rate and Heart Rate after 1 min must be positive numbers.');
      return;
    }
    if (hr1 >= peak) {
      setError('Heart rate after 1 minute should be lower than peak heart rate.');
      return;
    }
    if (hrAfter2Min && (isNaN(hr2) || hr2 <=0)) {
      setError('If providing Heart Rate after 2 mins, it must be a positive number.');
      return;
    }
    if (hrAfter2Min && hr2 >= hr1) {
      setError('Heart rate after 2 minutes should generally be lower than or equal to heart rate after 1 minute.');
      // Allow calculation but with potential data issue.
    }

    const rec1 = peak - hr1;
    setRecovery1Min(rec1.toString());

    let level = "N/A";
    // Simplified interpretation based on 1-minute recovery
    if (rec1 < 12) level = "Poor Recovery (Consult Doctor if concerned)";
    else if (rec1 <= 22) level = "Fair Recovery";
    else if (rec1 <= 42) level = "Good Recovery";
    else level = "Excellent Recovery";
    setRecoveryLevel(level);

    if (!isNaN(hr2) && hr2 > 0 && hr2 < peak) {
      const rec2 = peak - hr2;
      setRecovery2Min(rec2.toString());
      // Could refine level based on 2-min recovery too.
    }
  };

  const resetForm = () => {
    setPeakHr(''); setHrAfter1Min(''); setHrAfter2Min('');
    setRecovery1Min(null); setRecovery2Min(null); setRecoveryLevel(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Fitness & Medical Disclaimer</AlertTitle>
        <AlertDescription>
          Heart Rate Recovery (HRR) can be an indicator of cardiovascular fitness. This calculator provides an estimate. <strong className="font-semibold">It is not a substitute for professional medical advice or fitness assessment.</strong> Factors like age, fitness level, and exertion affect HRR. If you have health concerns, consult a doctor.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Measure your heart rate recovery.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="peakHr">Peak Heart Rate (BPM at end of exercise)</Label><Input id="peakHr" type="number" value={peakHr} onChange={e=>setPeakHr(e.target.value)} placeholder="e.g., 160"/></div>
            <div><Label htmlFor="hrAfter1Min">Heart Rate After 1 Minute of Rest (BPM)</Label><Input id="hrAfter1Min" type="number" value={hrAfter1Min} onChange={e=>setHrAfter1Min(e.target.value)} placeholder="e.g., 130"/></div>
            <div><Label htmlFor="hrAfter2Min">Heart Rate After 2 Minutes of Rest (BPM) (Optional)</Label><Input id="hrAfter2Min" type="number" value={hrAfter2Min} onChange={e=>setHrAfter2Min(e.target.value)} placeholder="e.g., 110"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateRecovery}>Calculate Recovery</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(recovery1Min || error) && (
          <Card>
            <CardHeader><CardDescription>Heart Rate Recovery Results</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {recovery1Min && (<div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">HR Drop After 1 Min</p><p className="text-xl font-bold text-primary">{recovery1Min} BPM</p></div>)}
              {recovery2Min && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">HR Drop After 2 Mins</p><p className="font-semibold">{recovery2Min} BPM</p></div>)}
              {recoveryLevel && (<Alert className="mt-2"><Info className="h-4 w-4"/><AlertTitle>Recovery Level (Simplified)</AlertTitle><AlertDescription>{recoveryLevel}</AlertDescription></Alert>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: HeartRateRecoveryCalculator.tsx ======
==================================================

// ====== START OF FILE: HeartRateZoneCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.36 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, HeartPulse } from "lucide-react";

interface HeartRateZone {
  name: string;
  percentage: string;
  bpmRange: string;
}

export default function HeartRateZoneCalculator() {
  const [age, setAge] = useState<string>('');
  
  const [maxHeartRate, setMaxHeartRate] = useState<number | null>(null);
  const [zones, setZones] = useState<HeartRateZone[]>([]);
  const [error, setError] = useState<string | null>(null);

  const calculateHeartRateZones = () => {
    setError(null);
    setMaxHeartRate(null);
    setZones([]);

    const ageVal = parseInt(age);
    if (isNaN(ageVal) || ageVal <= 0 || ageVal > 120) {
      setError('Please enter a valid age (1-120 years).');
      return;
    }

    const mhr = 220 - ageVal;
    setMaxHeartRate(mhr);

    const zoneData = [
      { name: "Very Light (Warm-up/Cool-down)", low: 0.50, high: 0.60 },
      { name: "Light (Fat Burning / Endurance)", low: 0.60, high: 0.70 },
      { name: "Moderate (Aerobic Fitness)", low: 0.70, high: 0.80 },
      { name: "Hard (Anaerobic Threshold)", low: 0.80, high: 0.90 },
      { name: "Maximum (Peak Effort)", low: 0.90, high: 1.00 },
    ];

    const calculatedZones = zoneData.map(z => ({
      name: z.name,
      percentage: `${(z.low * 100).toFixed(0)}% - ${(z.high * 100).toFixed(0)}% MHR`,
      bpmRange: `${(mhr * z.low).toFixed(0)} - ${(mhr * z.high).toFixed(0)} BPM`
    }));
    setZones(calculatedZones);
  };
  
  const resetForm = () => {
    setAge('');
    setMaxHeartRate(null);
    setZones([]);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Fitness Disclaimer</AlertTitle>
        <AlertDescription>
          This calculator uses the basic "220 - age" formula for Max Heart Rate (MHR), which is a general estimate. Individual MHR can vary. Consult a healthcare professional before starting any new exercise program.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Calculate your target heart rate zones for exercise.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="ageHrz">Your Age (Years)</Label><Input id="ageHrz" type="number" value={age} onChange={(e) => setAge(e.target.value)} placeholder="e.g., 30" /></div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateHeartRateZones}>Calculate Zones</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(maxHeartRate !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Heart Rate Zones</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {maxHeartRate !== null && (
                <div className="p-2 bg-muted rounded-md mb-4">
                  <p className="text-sm text-muted-foreground">Estimated Max Heart Rate (MHR)</p>
                  <p className="text-xl font-semibold">{maxHeartRate} BPM</p>
                </div>
              )}
              {zones.length > 0 && (
                <div className="space-y-2">
                  {zones.map(zone => (
                    <div key={zone.name} className="p-2 border rounded-md">
                      <p className="font-semibold text-sm">{zone.name}</p>
                      <p className="text-xs text-muted-foreground">{zone.percentage}</p>
                      <p className="text-primary font-medium">{zone.bpmRange}</p>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: HeartRateZoneCalculator.tsx ======
==================================================

// ====== START OF FILE: HeatIndexCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.21 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, ThermometerSun } from "lucide-react";

// Simplified Heat Index formula (approximation based on Steadman's equation or similar)
// HI = -42.379 + 2.04901523*T + 10.14333127*RH - .22475541*T*RH - .00683783*T*T - .05481717*RH*RH + .00122874*T*T*RH + .00085282*T*RH*RH - .00000199*T*T*RH*RH
// Where T is temperature in Fahrenheit and RH is relative humidity as a percentage (e.g., 60 for 60%).

export default function HeatIndexCalculator() {
  const [temperature, setTemperature] = useState<string>('');
  const [humidity, setHumidity] = useState<string>('');
  const [tempUnit, setTempUnit] = useState<'F' | 'C'>('F');

  const [heatIndexF, setHeatIndexF] = useState<string | null>(null);
  const [heatIndexC, setHeatIndexC] = useState<string | null>(null);
  const [dangerLevel, setDangerLevel] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const getDangerLevel = (hiF: number): string => {
    if (hiF < 80) return "Low risk";
    if (hiF <= 90) return "Caution: Fatigue possible with prolonged exposure and/or physical activity.";
    if (hiF <= 103) return "Extreme Caution: Heat stroke, heat cramps, or heat exhaustion possible with prolonged exposure and/or physical activity.";
    if (hiF <= 124) return "Danger: Heat cramps or heat exhaustion likely; heat stroke possible with prolonged exposure and/or physical activity.";
    return "Extreme Danger: Heat stroke highly likely.";
  };

  const calculateHeatIndex = () => {
    setError(null);
    setHeatIndexF(null);
    setHeatIndexC(null);
    setDangerLevel(null);

    let T_F = parseFloat(temperature);
    const RH = parseFloat(humidity);

    if (isNaN(T_F) || isNaN(RH) || RH < 0 || RH > 100) {
      setError('Please enter a valid temperature and relative humidity (0-100%).');
      return;
    }

    if (tempUnit === 'C') {
      T_F = (T_F * 9/5) + 32; // Convert Celsius to Fahrenheit
    }

    if (T_F < 80) { // Simplified formula not accurate below 80°F
        setError("Heat Index calculation is generally for temperatures 80°F (27°C) and above, and humidity above 40%. Result may be inaccurate.");
        setHeatIndexF(T_F.toFixed(1)); // Show original temp if below threshold for HI calculation
        setHeatIndexC(((T_F - 32) * 5/9).toFixed(1));
        setDangerLevel("Low risk (or below threshold for significant heat index effects)");
        return;
    }


    // Rothfusz regression (NOAA's version of Steadman formula)
    let hi = 0.5 * (T_F + 61.0 + ((T_F - 68.0) * 1.2) + (RH * 0.094)); // Simple approximation if T_F is low

    if (hi >= 80) {
        hi = -42.379 + 
             (2.04901523 * T_F) + 
             (10.14333127 * RH) - 
             (0.22475541 * T_F * RH) - 
             (0.00683783 * T_F * T_F) - 
             (0.05481717 * RH * RH) + 
             (0.00122874 * T_F * T_F * RH) + 
             (0.00085282 * T_F * RH * RH) - 
             (0.00000199 * T_F * T_F * RH * RH);

        // Adjustments for low humidity or high temp/humidity combinations
        if (RH < 13 && T_F >= 80 && T_F <= 112) {
            const adj = ((13 - RH) / 4) * Math.sqrt((17 - Math.abs(T_F - 95.0)) / 17);
            hi -= adj;
        } else if (RH > 85 && T_F >= 80 && T_F <= 87) {
            const adj = ((RH - 85) / 10) * ((87 - T_F) / 5);
            hi += adj;
        }
    }
    
    if (isNaN(hi) || !isFinite(hi)){
        setError("Could not calculate Heat Index with the given values.");
        return;
    }

    const hi_f_final = parseFloat(hi.toFixed(1));
    const hi_c_final = parseFloat(((hi_f_final - 32) * 5/9).toFixed(1));

    setHeatIndexF(hi_f_final.toString());
    setHeatIndexC(hi_c_final.toString());
    setDangerLevel(getDangerLevel(hi_f_final));
  };
  
  const resetForm = () => {
    setTemperature(''); setHumidity(''); setTempUnit('F');
    setHeatIndexF(null); setHeatIndexC(null); setDangerLevel(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Heat Index Calculator</AlertTitle><AlertDescription>Estimate the "feels like" temperature based on air temperature and relative humidity. Uses NOAA's Heat Index formula. Stay safe in hot weather!</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter temperature and humidity.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="temperatureHI">Air Temperature</Label><Input id="temperatureHI" type="number" value={temperature} onChange={(e) => setTemperature(e.target.value)} placeholder="e.g., 90" /></div>
              <div><Label htmlFor="tempUnitHI">Unit</Label><Select value={tempUnit} onValueChange={(v: 'F' | 'C') => setTempUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="F">°F</SelectItem><SelectItem value="C">°C</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="humidityHI">Relative Humidity (%)</Label><Input id="humidityHI" type="number" value={humidity} onChange={(e) => setHumidity(e.target.value)} placeholder="e.g., 60" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateHeatIndex}>Calculate Heat Index</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(heatIndexF || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Heat Index</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {heatIndexF && heatIndexC && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Heat Index (Feels Like)</p><p className="text-3xl font-bold text-primary">{heatIndexF}°F / {heatIndexC}°C</p></div>
                  <CopyButton textToCopy={`${heatIndexF}°F / ${heatIndexC}°C`} />
                </div>
              )}
              {dangerLevel && (<Alert variant={dangerLevel.startsWith("Extreme Danger") || dangerLevel.startsWith("Danger") ? "destructive" : "default"} className={dangerLevel.startsWith("Extreme Caution") ? "border-orange-500/50 text-orange-700 dark:text-orange-400 [&>svg]:text-orange-600" : ""}><Info className="h-4 w-4" /><AlertTitle>Danger Level</AlertTitle><AlertDescription>{dangerLevel}</AlertDescription></Alert>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: HeatIndexCalculator.tsx ======
==================================================

// ====== START OF FILE: HeightCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.52 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Ruler } from "lucide-react";

// Simplified Mid-Parental Height formula:
// For boys: ((Mother's Height + Father's Height) / 2) + 2.5 inches (or 6.5 cm)
// For girls: ((Mother's Height + Father's Height) / 2) - 2.5 inches (or 6.5 cm)
// This is a very rough estimate.

export default function HeightCalculator() {
  const [motherHeight, setMotherHeight] = useState<string>('');
  const [fatherHeight, setFatherHeight] = useState<string>('');
  const [childGender, setChildGender] = useState<'boy' | 'girl'>('boy');
  const [unit, setUnit] = useState<'cm' | 'in'>('cm');
  
  const [predictedHeight, setPredictedHeight] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePredictedHeight = () => {
    setError(null);
    setPredictedHeight(null);

    let mH = parseFloat(motherHeight);
    let fH = parseFloat(fatherHeight);

    if (isNaN(mH) || mH <= 0 || isNaN(fH) || fH <= 0) {
      setError('Please enter valid positive heights for both parents.');
      return;
    }

    let avgParentHeight = (mH + fH) / 2;
    let prediction: number;

    if (unit === 'cm') {
      prediction = childGender === 'boy' ? avgParentHeight + 6.5 : avgParentHeight - 6.5;
    } else { // inches
      prediction = childGender === 'boy' ? avgParentHeight + 2.5 : avgParentHeight - 2.5;
    }
    
    setPredictedHeight(`${prediction.toFixed(1)} ${unit}`);
  };
  
  const resetForm = () => {
    setMotherHeight('');
    setFatherHeight('');
    setPredictedHeight(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Height Prediction Disclaimer</AlertTitle>
        <AlertDescription>
          This calculator provides a very rough estimate of a child's adult height using the Mid-Parental Height method. Actual adult height is influenced by many factors including genetics, nutrition, and overall health. This is not a substitute for professional medical advice.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate a child's adult height based on parental heights.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
                <Label htmlFor="unitHeightPred">Unit for Heights</Label>
                <Select value={unit} onValueChange={(value: 'cm' | 'in') => setUnit(value)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="cm">Centimeters (cm)</SelectItem>
                    <SelectItem value="in">Inches (in)</SelectItem>
                  </SelectContent>
                </Select>
            </div>
            <div><Label htmlFor="motherHeight">Mother's Height ({unit})</Label><Input id="motherHeight" type="number" value={motherHeight} onChange={(e) => setMotherHeight(e.target.value)} placeholder={`e.g., ${unit==='cm' ? 165 : 65}`} /></div>
            <div><Label htmlFor="fatherHeight">Father's Height ({unit})</Label><Input id="fatherHeight" type="number" value={fatherHeight} onChange={(e) => setFatherHeight(e.target.value)} placeholder={`e.g., ${unit==='cm' ? 180 : 71}`} /></div>
            <div>
                <Label htmlFor="childGender">Child's Biological Gender</Label>
                <Select value={childGender} onValueChange={(value: 'boy' | 'girl') => setChildGender(value)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="boy">Boy</SelectItem>
                    <SelectItem value="girl">Girl</SelectItem>
                  </SelectContent>
                </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculatePredictedHeight}>Predict Height</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(predictedHeight || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Adult Height</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {predictedHeight && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Adult Height</p><p className="text-2xl font-bold text-primary">{predictedHeight}</p></div>
                  <CopyButton textToCopy={predictedHeight} />
                </div>
              )}
            </CardContent>
            <CardFooter><p className="text-xs text-muted-foreground">This is a rough estimate. A common range is ±2 inches (5 cm).</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: HeightCalculator.tsx ======
==================================================

// ====== START OF FILE: HexCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.9 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Hash } from "lucide-react";

type HexBase = 'hex' | 'decimal' | 'binary' | 'octal';
type HexOperation = 'add' | 'subtract'; // Could add more like AND, OR, XOR

export default function HexCalculator() {
  const [hexInputValue, setHexInputValue] = useState<string>('');
  const [hexInputBase, setHexInputBase] = useState<HexBase>('hex');
  const [hexOutputBase, setHexOutputBase] = useState<HexBase>('decimal');
  
  const [hexConversionResult, setHexConversionResult] = useState<string | null>(null);
  const [hexConversionError, setHexConversionError] = useState<string | null>(null);

  const [hexNum1, setHexNum1] = useState<string>('');
  const [hexNum2, setHexNum2] = useState<string>('');
  const [hexOperation, setHexOperation] = useState<HexOperation>('add');
  const [hexArithmeticResult, setHexArithmeticResult] = useState<string | null>(null);
  const [hexArithmeticError, setHexArithmeticError] = useState<string | null>(null);

  const handleHexConversion = () => {
    setHexConversionError(null);
    setHexConversionResult(null);
    try {
      if (hexInputValue.trim() === '') throw new Error("Input value cannot be empty.");
      let decimalValue: number;
      switch (hexInputBase) {
        case 'hex':
          if (!/^[0-9a-fA-F]+$/.test(hexInputValue)) throw new Error("Invalid hexadecimal input.");
          decimalValue = parseInt(hexInputValue, 16);
          break;
        case 'decimal':
          if (!/^-?\d+$/.test(hexInputValue)) throw new Error("Invalid decimal input.");
          decimalValue = parseInt(hexInputValue, 10);
          break;
        case 'binary':
          if (!/^[01]+$/.test(hexInputValue)) throw new Error("Invalid binary input.");
          decimalValue = parseInt(hexInputValue, 2);
          break;
        case 'octal':
          if (!/^[0-7]+$/.test(hexInputValue)) throw new Error("Invalid octal input.");
          decimalValue = parseInt(hexInputValue, 8);
          break;
        default: throw new Error("Invalid input base.");
      }

      if (isNaN(decimalValue)) throw new Error("Failed to parse input value.");

      let resultString: string;
      switch (hexOutputBase) {
        case 'hex': resultString = decimalValue.toString(16).toUpperCase(); break;
        case 'decimal': resultString = decimalValue.toString(10); break;
        case 'binary': resultString = decimalValue.toString(2); break;
        case 'octal': resultString = decimalValue.toString(8); break;
        default: throw new Error("Invalid output base.");
      }
      setHexConversionResult(resultString);
    } catch (e: any) {
      setHexConversionError(e.message);
    }
  };

  const handleHexArithmetic = () => {
    setHexArithmeticError(null);
    setHexArithmeticResult(null);
    try {
      if (hexNum1.trim() === '' || hexNum2.trim() === '') throw new Error("Both hexadecimal numbers are required for arithmetic.");
      if (!/^[0-9a-fA-F]+$/.test(hexNum1) || !/^[0-9a-fA-F]+$/.test(hexNum2)) throw new Error("Inputs must be valid hexadecimal numbers.");

      const num1Dec = parseInt(hexNum1, 16);
      const num2Dec = parseInt(hexNum2, 16);
      let resultDec: number;

      switch (hexOperation) {
        case 'add': resultDec = num1Dec + num2Dec; break;
        case 'subtract': resultDec = num1Dec - num2Dec; break;
        default: throw new Error("Invalid hexadecimal operation.");
      }
      // Result is shown in Hex
      setHexArithmeticResult(resultDec.toString(16).toUpperCase());
    } catch (e:any) {
      setHexArithmeticError(e.message);
    }
  };

  return (
    <div className="space-y-8">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Hexadecimal Operations</AlertTitle><AlertDescription>Convert numbers to/from hexadecimal and perform basic arithmetic on hex values.</AlertDescription></Alert>
      
      <Card>
        <CardHeader><CardDescription>Number Base Conversion (including Hexadecimal)</CardDescription></CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 items-end">
            <div><Label htmlFor="hexInputValue">Input Value</Label><Input id="hexInputValue" value={hexInputValue} onChange={(e) => setHexInputValue(e.target.value)} placeholder="e.g., FF or 255" /></div>
            <div><Label htmlFor="hexInputBase">From Base</Label><Select value={hexInputBase} onValueChange={(v: HexBase) => setHexInputBase(v)}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent><SelectItem value="hex">Hexadecimal</SelectItem><SelectItem value="decimal">Decimal</SelectItem><SelectItem value="binary">Binary</SelectItem><SelectItem value="octal">Octal</SelectItem></SelectContent></Select></div>
            <div><Label htmlFor="hexOutputBase">To Base</Label><Select value={hexOutputBase} onValueChange={(v: HexBase) => setHexOutputBase(v)}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent><SelectItem value="hex">Hexadecimal</SelectItem><SelectItem value="decimal">Decimal</SelectItem><SelectItem value="binary">Binary</SelectItem><SelectItem value="octal">Octal</SelectItem></SelectContent></Select></div>
          </div>
          {hexConversionError && <Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{hexConversionError}</AlertDescription></Alert>}
          {hexConversionResult && (
            <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
              <div><p className="text-sm text-muted-foreground">Conversion Result</p><p className="text-2xl font-bold text-primary">{hexConversionResult}</p></div>
              <CopyButton textToCopy={hexConversionResult} />
            </div>
          )}
        </CardContent>
        <CardFooter><Button onClick={handleHexConversion}>Convert</Button></CardFooter>
      </Card>

      <Card>
        <CardHeader><CardDescription>Hexadecimal Arithmetic (Add/Subtract)</CardDescription></CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 items-end">
            <div><Label htmlFor="hexNum1">Hex Number 1</Label><Input id="hexNum1" value={hexNum1} onChange={(e) => setHexNum1(e.target.value.toUpperCase())} placeholder="e.g., A5" /></div>
            <div><Label htmlFor="hexOperation">Operation</Label><Select value={hexOperation} onValueChange={(v: HexOperation) => setHexOperation(v)}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent><SelectItem value="add">Add (+)</SelectItem><SelectItem value="subtract">Subtract (-)</SelectItem></SelectContent></Select></div>
            <div><Label htmlFor="hexNum2">Hex Number 2</Label><Input id="hexNum2" value={hexNum2} onChange={(e) => setHexNum2(e.target.value.toUpperCase())} placeholder="e.g., 1F" /></div>
          </div>
          {hexArithmeticError && <Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{hexArithmeticError}</AlertDescription></Alert>}
          {hexArithmeticResult && (
            <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
              <div><p className="text-sm text-muted-foreground">Result (Hexadecimal)</p><p className="text-2xl font-bold text-primary">{hexArithmeticResult}</p></div>
              <CopyButton textToCopy={hexArithmeticResult} />
            </div>
          )}
        </CardContent>
        <CardFooter><Button onClick={handleHexArithmetic}>Calculate Hex</Button></CardFooter>
      </Card>
    </div>
  );
}


// ====== END OF FILE: HexCalculator.tsx ======
==================================================

// ====== START OF FILE: HikingTimeEstimator.tsx ======
// File converted from TSX to TXT
// Original size: 5.99 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Mountain, Timer } from "lucide-react";

type UnitSystemHiking = 'imperial' | 'metric';

// Naismith's rule simplified: 1 hour for every 3 miles (5km) forward, plus 1 hour for every 2000 feet (600m) of ascent.
const MILES_PER_HOUR_NAISMITH = 3;
const KM_PER_HOUR_NAISMITH = 5;
const FEET_ASCENT_PER_HOUR = 2000;
const METERS_ASCENT_PER_HOUR = 600;

export default function HikingTimeEstimator() {
  const [distance, setDistance] = useState<string>('');
  const [elevationGain, setElevationGain] = useState<string>('0');
  const [units, setUnits] = useState<UnitSystemHiking>('imperial');

  const [estimatedTime, setEstimatedTime] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const formatTime = (totalHours: number): string => {
    const hours = Math.floor(totalHours);
    const minutes = Math.round((totalHours - hours) * 60);
    return `${hours} hour(s), ${minutes} minute(s)`;
  };

  const calculateTime = () => {
    setError(null);
    setEstimatedTime(null);

    const dist = parseFloat(distance);
    const elev = parseFloat(elevationGain);

    if (isNaN(dist) || dist <= 0 || isNaN(elev) || elev < 0) {
      setError('Distance must be a positive number. Elevation gain must be non-negative.');
      return;
    }

    let timeForDistanceHours: number;
    let timeForElevationHours: number;

    if (units === 'imperial') { // miles and feet
      timeForDistanceHours = dist / MILES_PER_HOUR_NAISMITH;
      timeForElevationHours = elev / FEET_ASCENT_PER_HOUR;
    } else { // km and meters
      timeForDistanceHours = dist / KM_PER_HOUR_NAISMITH;
      timeForElevationHours = elev / METERS_ASCENT_PER_HOUR;
    }
    
    const totalTime = timeForDistanceHours + timeForElevationHours;
    setEstimatedTime(formatTime(totalTime));
  };

  const resetForm = () => {
    setDistance('');
    setElevationGain('0');
    setEstimatedTime(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Hiking Time Estimator (Naismith's Rule)</AlertTitle>
        <AlertDescription>
          Estimate your hiking time based on distance and elevation gain using a simplified version of Naismith's Rule. This is a guideline and doesn't account for individual fitness, terrain, or weather.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your hike details.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
                <Label htmlFor="hikingUnits">Unit System</Label>
                <Select value={units} onValueChange={(v: UnitSystemHiking) => setUnits(v)}>
                    <SelectTrigger><SelectValue /></SelectTrigger>
                    <SelectContent>
                        <SelectItem value="imperial">Imperial (Miles / Feet)</SelectItem>
                        <SelectItem value="metric">Metric (Kilometers / Meters)</SelectItem>
                    </SelectContent>
                </Select>
            </div>
            <div>
              <Label htmlFor="hikingDistance">Hike Distance ({units === 'imperial' ? 'miles' : 'km'})</Label>
              <Input
                id="hikingDistance"
                type="number"
                value={distance}
                onChange={(e) => setDistance(e.target.value)}
                placeholder="e.g., 6"
              />
            </div>
            <div>
              <Label htmlFor="hikingElevation">Total Elevation Gain ({units === 'imperial' ? 'feet' : 'meters'})</Label>
              <Input
                id="hikingElevation"
                type="number"
                value={elevationGain}
                onChange={(e) => setElevationGain(e.target.value)}
                placeholder="e.g., 1500"
              />
            </div>
             <AlertDescription className="text-xs">
                Based on ~{units === 'imperial' ? `${MILES_PER_HOUR_NAISMITH} mph` : `${KM_PER_HOUR_NAISMITH} km/h`} on flat ground, plus 1 hour for every {units === 'imperial' ? `${FEET_ASCENT_PER_HOUR} ft` : `${METERS_ASCENT_PER_HOUR} m`} of ascent.
            </AlertDescription>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateTime}>Estimate Time</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>
        {(estimatedTime || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Estimated Hiking Time</CardDescription>
            </CardHeader>
            <CardContent>
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {estimatedTime && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Est. Hiking Time</p>
                    <p className="text-2xl font-bold text-primary">{estimatedTime}</p>
                  </div>
                  <CopyButton textToCopy={estimatedTime} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: HikingTimeEstimator.tsx ======
==================================================

// ====== START OF FILE: HomeLoanAffordabilityCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.32 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Home } from "lucide-react";

// Simplified affordability: Max Mortgage Payment = (Income * DTI_Housing_Ratio) - Other Debts
// Affordable Home Price = (Max Mortgage Payment / ( (i/12) / (1 - (1 + i/12)^-N) ) ) + Down Payment
// DTI_Housing_Ratio often around 28-36% for PITI. We simplify to just P&I.

export default function HomeLoanAffordabilityCalculator() {
  const [annualIncome, setAnnualIncome] = useState<string>('');
  const [monthlyDebts, setMonthlyDebts] = useState<string>('0'); // e.g., car loans, student loans, credit card minimums
  const [downPayment, setDownPayment] = useState<string>('');
  const [interestRate, setInterestRate] = useState<string>(''); // Annual %
  const [loanTermYears, setLoanTermYears] = useState<string>('30');
  const [dtiRatioPercent, setDtiRatioPercent] = useState<string>('36'); // Desired total DTI for mortgage calculation

  const [affordableHomePrice, setAffordableHomePrice] = useState<string | null>(null);
  const [maxMonthlyPayment, setMaxMonthlyPayment] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateAffordability = () => {
    setError(null);
    setAffordableHomePrice(null);
    setMaxMonthlyPayment(null);

    const income = parseFloat(annualIncome);
    const debts = parseFloat(monthlyDebts);
    const dp = parseFloat(downPayment);
    const rate = parseFloat(interestRate) / 100;
    const term = parseInt(loanTermYears);
    const dti = parseFloat(dtiRatioPercent) / 100;

    if (isNaN(income) || income <= 0 || isNaN(debts) || debts < 0 || isNaN(dp) || dp < 0 || isNaN(rate) || rate <= 0 || isNaN(term) || term <= 0 || isNaN(dti) || dti <= 0 || dti > 0.5) {
      setError('Please enter valid positive numbers for all fields. DTI ratio should be reasonable (e.g., 0.28-0.43).');
      return;
    }

    const monthlyIncome = income / 12;
    // Max total monthly debt payment based on DTI ratio
    const maxTotalDebtAfforded = monthlyIncome * dti;
    // Max mortgage payment (PITI) = Max Total Debt - Other Monthly Debts
    let maxMortgagePITI = maxTotalDebtAfforded - debts;

    if (maxMortgagePITI <= 0) {
      setError('Your current debts exceed or meet the affordable debt limit based on your DTI. Cannot afford additional mortgage.');
      return;
    }
    
    // Simplified: Assume maxMortgagePITI is just for P&I for this calculator
    // (Does not include taxes or insurance which is a major simplification)
    setMaxMonthlyPayment(maxMortgagePITI.toFixed(2));

    const monthlyIntRate = rate / 12;
    const numPayments = term * 12;
    
    let maxLoanAmount;
    if (monthlyIntRate === 0) {
        maxLoanAmount = maxMortgagePITI * numPayments;
    } else {
        maxLoanAmount = maxMortgagePITI * ( (Math.pow(1 + monthlyIntRate, numPayments) - 1) / (monthlyIntRate * Math.pow(1 + monthlyIntRate, numPayments)) );
    }


    const affordablePrice = maxLoanAmount + dp;
    setAffordableHomePrice(affordablePrice.toFixed(2));
  };
  
  const resetForm = () => {
    setAnnualIncome(''); setMonthlyDebts('0'); setDownPayment(''); setInterestRate(''); setLoanTermYears('30'); setDtiRatioPercent('36');
    setAffordableHomePrice(null); setMaxMonthlyPayment(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Home Affordability Estimator (Simplified)</AlertTitle>
        <AlertDescription>
          This calculator provides a rough estimate of what you might afford. It simplifies many factors, notably <strong className="font-semibold">excluding property taxes, homeowners insurance (PITI), and HOA fees</strong>, which significantly impact affordability. Lender criteria vary. Consult a financial advisor and mortgage professional.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate how much house you can afford.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="annualIncomeAff">Gross Annual Income ($)</Label><Input id="annualIncomeAff" type="number" value={annualIncome} onChange={(e) => setAnnualIncome(e.target.value)} placeholder="e.g., 75000"/></div>
            <div><Label htmlFor="monthlyDebtsAff">Total Monthly Debt Payments ($)</Label><Input id="monthlyDebtsAff" type="number" value={monthlyDebts} onChange={(e) => setMonthlyDebts(e.target.value)} placeholder="e.g., 500 (car, student loan, CCs)"/></div>
            <div><Label htmlFor="downPaymentAff">Down Payment Available ($)</Label><Input id="downPaymentAff" type="number" value={downPayment} onChange={(e) => setDownPayment(e.target.value)} placeholder="e.g., 20000"/></div>
            <div><Label htmlFor="interestRateAff">Estimated Mortgage Interest Rate (%)</Label><Input id="interestRateAff" type="number" value={interestRate} onChange={(e) => setInterestRate(e.target.value)} placeholder="e.g., 6.5"/></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="loanTermAff">Loan Term (Years)</Label><Input id="loanTermAff" type="number" value={loanTermYears} onChange={(e) => setLoanTermYears(e.target.value)} placeholder="e.g., 30"/></div>
              <div><Label htmlFor="dtiRatioAff">Desired DTI Ratio (%)</Label><Input id="dtiRatioAff" type="number" value={dtiRatioPercent} onChange={(e) => setDtiRatioPercent(e.target.value)} placeholder="e.g., 36 (for mortgage)"/></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateAffordability}>Estimate Affordability</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(affordableHomePrice || error) && (
          <Card>
            <CardHeader><CardDescription>Affordability Estimate</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {maxMonthlyPayment && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Max Monthly P&I Payment</p><p className="font-semibold">${maxMonthlyPayment}</p></div>)}
              {affordableHomePrice && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Affordable Home Price</p><p className="text-2xl font-bold text-primary">${affordableHomePrice}</p></div>
                  <CopyButton textToCopy={affordableHomePrice} />
                </div>
              )}
            </CardContent>
            <CardFooter><p className="text-xs text-muted-foreground">This estimate is for P&I only. Actual total payment will be higher.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: HomeLoanAffordabilityCalculator.tsx ======
==================================================

// ====== START OF FILE: HorsepowerCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.43 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Gauge } from "lucide-react";

// Common formula: Horsepower = (Torque (lb-ft) * RPM) / 5252
// Alternative for kW: Power (kW) = Torque (N·m) * RPM / 9549

export default function HorsepowerCalculator() {
  const [torque, setTorque] = useState<string>('');
  const [rpm, setRpm] = useState<string>('');
  const [unitSystem, setUnitSystem] = useState<'imperial' | 'metric'>('imperial');
  
  const [horsepower, setHorsepower] = useState<string | null>(null);
  const [horsepowerUnit, setHorsepowerUnit] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const calculateHorsepower = () => {
    setError(null);
    setHorsepower(null);
    setHorsepowerUnit('');

    const tq = parseFloat(torque);
    const engineRpm = parseFloat(rpm);

    if (isNaN(tq) || tq < 0 || isNaN(engineRpm) || engineRpm < 0) {
      setError('Please enter valid non-negative numbers for torque and RPM.');
      return;
    }
     if (engineRpm === 0) {
        setHorsepower('0.00');
        setHorsepowerUnit(unitSystem === 'imperial' ? 'HP' : 'kW');
        return;
    }

    let hp_kw: number;
    if (unitSystem === 'imperial') {
      // Torque in lb-ft
      hp_kw = (tq * engineRpm) / 5252;
      setHorsepowerUnit('HP');
    } else {
      // Torque in N·m
      hp_kw = (tq * engineRpm) / 9549;
      setHorsepowerUnit('kW');
    }
    setHorsepower(hp_kw.toFixed(2));
  };

  const resetForm = () => {
    setTorque('');
    setRpm('');
    setHorsepower(null);
    setHorsepowerUnit('');
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Horsepower Estimation</AlertTitle><AlertDescription>Calculate engine/motor horsepower (HP or kW) using torque and RPM. Ensure units match selection.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter torque and RPM.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="unitSystemHP">Unit System</Label>
              <Select value={unitSystem} onValueChange={(v: 'imperial' | 'metric') => setUnitSystem(v)}>
                <SelectTrigger><SelectValue/></SelectTrigger>
                <SelectContent>
                  <SelectItem value="imperial">Imperial (Torque in lb-ft, Output in HP)</SelectItem>
                  <SelectItem value="metric">Metric (Torque in N·m, Output in kW)</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div><Label htmlFor="torqueHP">Torque ({unitSystem === 'imperial' ? 'lb-ft' : 'N·m'})</Label><Input id="torqueHP" type="number" value={torque} onChange={(e) => setTorque(e.target.value)} placeholder="e.g., 300 or 400" /></div>
            <div><Label htmlFor="rpmHP">Engine/Motor RPM</Label><Input id="rpmHP" type="number" value={rpm} onChange={(e) => setRpm(e.target.value)} placeholder="e.g., 5000" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateHorsepower}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(horsepower || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Horsepower / Power</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {horsepower && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Power</p><p className="text-3xl font-bold text-primary">{horsepower} {horsepowerUnit}</p></div>
                  <CopyButton textToCopy={`${horsepower} ${horsepowerUnit}`} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: HorsepowerCalculator.tsx ======
==================================================

// ====== START OF FILE: HourlyToAnnualCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.77 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Briefcase } from "lucide-react";

export default function HourlyToAnnualCalculator() {
  const [hourlyWage, setHourlyWage] = useState<string>('');
  const [hoursPerWeek, setHoursPerWeekHTA] = useState<string>('40');
  const [weeksPerYear, setWeeksPerYearHTA] = useState<string>('52');

  const [annualSalary, setAnnualSalary] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const convertHourlyToAnnual = () => {
    setError(null); setAnnualSalary(null);
    const wage = parseFloat(hourlyWage);
    const hours = parseFloat(hoursPerWeekHTA);
    const weeks = parseFloat(weeksPerYearHTA);

    if (isNaN(wage) || wage < 0 || isNaN(hours) || hours < 0 || isNaN(weeks) || weeks < 0) {
      setError('Please enter valid non-negative numbers for wage, hours/week, and weeks/year.');
      return;
    }
    if (hours > 168) { setError("Hours per week cannot exceed 168."); return; }
    if (weeks > 52.1775) { setError("Weeks per year is typically around 52."); return; }


    const salary = wage * hours * weeks;
    setAnnualSalary(salary.toFixed(2));
  };

  const resetForm = () => {
    setHourlyWage(''); setHoursPerWeekHTA('40'); setWeeksPerYearHTA('52');
    setAnnualSalary(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Hourly to Annual Salary Converter</AlertTitle><AlertDescription>Convert an hourly wage to an equivalent annual salary based on hours per week and weeks per year.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter hourly rate and work schedule.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="hourlyWageHTA">Hourly Wage ($)</Label><Input id="hourlyWageHTA" type="number" value={hourlyWage} onChange={e=>setHourlyWage(e.target.value)} placeholder="e.g., 25.50"/></div>
            <div><Label htmlFor="hoursPerWeekHTA">Hours Worked Per Week</Label><Input id="hoursPerWeekHTA" type="number" value={hoursPerWeekHTA} onChange={e=>setHoursPerWeekHTA(e.target.value)} placeholder="e.g., 40"/></div>
            <div><Label htmlFor="weeksPerYearHTA">Weeks Worked Per Year</Label><Input id="weeksPerYearHTA" type="number" value={weeksPerYearHTA} onChange={e=>setWeeksPerYearHTA(e.target.value)} placeholder="e.g., 52"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={convertHourlyToAnnual}>Convert to Annual</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(annualSalary || error) && (
          <Card>
            <CardHeader><CardDescription>Equivalent Annual Salary</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {annualSalary && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Annual Salary</p><p className="text-2xl font-bold text-primary">${annualSalary} / year</p></div><CopyButton textToCopy={annualSalary}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: HourlyToAnnualCalculator.tsx ======
==================================================

// ====== START OF FILE: HoursCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.99 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Clock } from "lucide-react";

export default function HoursCalculator() {
  const [startTime, setStartTime] = useState<string>(''); // HH:MM format (24-hour)
  const [endTime, setEndTime] = useState<string>('');   // HH:MM format (24-hour)
  const [breakMinutes, setBreakMinutes] = useState<string>('0');

  const [totalHours, setTotalHours] = useState<string | null>(null);
  const [decimalHours, setDecimalHours] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const parseTimeToMinutes = (timeStr: string): number | null => {
    const parts = timeStr.split(':');
    if (parts.length !== 2) return null;
    const hours = parseInt(parts[0]);
    const minutes = parseInt(parts[1]);
    if (isNaN(hours) || hours < 0 || hours > 23 || isNaN(minutes) || minutes < 0 || minutes > 59) return null;
    return hours * 60 + minutes;
  };

  const calculateHours = () => {
    setError(null);
    setTotalHours(null);
    setDecimalHours(null);

    const startTotalMinutes = parseTimeToMinutes(startTime);
    const endTotalMinutes = parseTimeToMinutes(endTime);
    const breakMins = parseInt(breakMinutes) || 0;

    if (startTotalMinutes === null || endTotalMinutes === null) {
      setError('Please enter valid start and end times in HH:MM format (e.g., 09:00, 17:30).');
      return;
    }
    if (isNaN(breakMins) || breakMins < 0) {
        setError("Break time must be zero or a positive number of minutes.");
        return;
    }
    
    let durationMinutes = endTotalMinutes - startTotalMinutes;
    if (durationMinutes < 0) { // Handles overnight shifts assuming end time is next day
      durationMinutes += 24 * 60; 
    }
    
    durationMinutes -= breakMins;

    if (durationMinutes < 0) {
        setError("Break time cannot exceed total work duration.");
        return;
    }

    const hoursPart = Math.floor(durationMinutes / 60);
    const minutesPart = durationMinutes % 60;
    
    setTotalHours(`${hoursPart} hours, ${minutesPart} minutes`);
    setDecimalHours((durationMinutes / 60).toFixed(2));
  };
  
  const resetForm = () => {
    setStartTime(''); setEndTime(''); setBreakMinutes('0');
    setTotalHours(null); setDecimalHours(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Hours Calculation</AlertTitle><AlertDescription>Calculate the total hours and minutes between a start and end time, optionally deducting break time. Use 24-hour format (HH:MM).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter time details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="startTime">Start Time (HH:MM)</Label><Input id="startTime" type="time" value={startTime} onChange={(e) => setStartTime(e.target.value)} /></div>
              <div><Label htmlFor="endTime">End Time (HH:MM)</Label><Input id="endTime" type="time" value={endTime} onChange={(e) => setEndTime(e.target.value)} /></div>
            </div>
            <div><Label htmlFor="breakMinutes">Break Time (minutes)</Label><Input id="breakMinutes" type="number" value={breakMinutes} onChange={(e) => setBreakMinutes(e.target.value)} placeholder="e.g., 30"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateHours}>Calculate Hours</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(totalHours || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Duration</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalHours && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Total Duration</p><p className="text-2xl font-bold text-primary">{totalHours}</p></div>
                  <CopyButton textToCopy={totalHours} />
                </div>
              )}
              {decimalHours && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Duration in Decimal Hours</p><p className="font-semibold">{decimalHours} hours</p></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: HoursCalculator.tsx ======
==================================================

// ====== START OF FILE: HouseAffordabilityCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.02 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Home } from "lucide-react";

// This is similar to HomeLoanAffordabilityCalculator but might focus on different inputs or perspectives.
// For instance, it could start with desired monthly payment.
// Let's make it slightly different: user inputs desired PITI payment.

export default function HouseAffordabilityCalculator() {
  const [desiredMonthlyPITI, setDesiredMonthlyPITI] = useState<string>('');
  const [annualPropertyTax, setAnnualPropertyTax] = useState<string>('0');
  const [annualHomeInsurance, setAnnualHomeInsurance] = useState<string>('0');
  const [downPayment, setDownPaymentHA] = useState<string>('');
  const [interestRateHA, setInterestRateHA] = useState<string>(''); // Annual %
  const [loanTermYearsHA, setLoanTermYearsHA] = useState<string>('30');

  const [affordableHomePriceHA, setAffordableHomePriceHA] = useState<string | null>(null);
  const [maxLoanAmountHA, setMaxLoanAmountHA] = useState<string | null>(null);
  const [errorHA, setErrorHA] = useState<string | null>(null);

  const calculateHouseAffordability = () => {
    setErrorHA(null);
    setAffordableHomePriceHA(null);
    setMaxLoanAmountHA(null);

    const piti = parseFloat(desiredMonthlyPITI);
    const taxAnnual = parseFloat(annualPropertyTax);
    const insuranceAnnual = parseFloat(annualHomeInsurance);
    const dp = parseFloat(downPaymentHA);
    const rate = parseFloat(interestRateHA) / 100;
    const term = parseInt(loanTermYearsHA);

    if (isNaN(piti) || piti <= 0 || isNaN(taxAnnual) || taxAnnual < 0 || isNaN(insuranceAnnual) || insuranceAnnual < 0 || isNaN(dp) || dp < 0 || isNaN(rate) || rate <= 0 || isNaN(term) || term <= 0) {
      setErrorHA('Please enter valid positive numbers for all fields. Tax/Insurance/DP can be zero.');
      return;
    }

    const monthlyTax = taxAnnual / 12;
    const monthlyInsurance = insuranceAnnual / 12;
    const maxMonthlyPandI = piti - monthlyTax - monthlyInsurance;

    if (maxMonthlyPandI <= 0) {
      setErrorHA('Desired PITI is too low to cover estimated taxes and insurance. Please adjust inputs.');
      return;
    }

    const monthlyIntRate = rate / 12;
    const numPayments = term * 12;
    
    let calculatedMaxLoan;
    if (monthlyIntRate === 0) {
        calculatedMaxLoan = maxMonthlyPandI * numPayments;
    } else {
        calculatedMaxLoan = maxMonthlyPandI * ((Math.pow(1 + monthlyIntRate, numPayments) - 1) / (monthlyIntRate * Math.pow(1 + monthlyIntRate, numPayments)));
    }
    
    if (isNaN(calculatedMaxLoan) || calculatedMaxLoan <= 0) {
        setErrorHA("Could not calculate affordable loan amount with these parameters. Principal & Interest payment might be too low.");
        return;
    }

    setMaxLoanAmountHA(calculatedMaxLoan.toFixed(2));
    const affordablePrice = calculatedMaxLoan + dp;
    setAffordableHomePriceHA(affordablePrice.toFixed(2));
  };
  
  const resetFormHA = () => {
    setDesiredMonthlyPITI(''); setAnnualPropertyTax('0'); setAnnualHomeInsurance('0'); setDownPaymentHA(''); setInterestRateHA(''); setLoanTermYearsHA('30');
    setAffordableHomePriceHA(null); setMaxLoanAmountHA(null); setErrorHA(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>House Affordability Estimator</AlertTitle>
        <AlertDescription>
          Estimate an affordable house price based on your desired total monthly payment (PITI), down payment, and loan terms. This is a simplified financial estimation.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Determine your housing budget.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="desiredPITI">Desired Max Monthly Payment (PITI) ($)</Label><Input id="desiredPITI" type="number" value={desiredMonthlyPITI} onChange={(e) => setDesiredMonthlyPITI(e.target.value)} placeholder="e.g., 2000"/></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="annualTax">Est. Annual Property Tax ($)</Label><Input id="annualTax" type="number" value={annualPropertyTax} onChange={(e) => setAnnualPropertyTax(e.target.value)} placeholder="e.g., 3000"/></div>
              <div><Label htmlFor="annualInsurance">Est. Annual Home Insurance ($)</Label><Input id="annualInsurance" type="number" value={annualHomeInsurance} onChange={(e) => setAnnualHomeInsurance(e.target.value)} placeholder="e.g., 1200"/></div>
            </div>
            <div><Label htmlFor="downPaymentHA">Down Payment Available ($)</Label><Input id="downPaymentHA" type="number" value={downPaymentHA} onChange={(e) => setDownPaymentHA(e.target.value)} placeholder="e.g., 50000"/></div>
            <div><Label htmlFor="interestRateHA">Estimated Mortgage Interest Rate (%)</Label><Input id="interestRateHA" type="number" value={interestRateHA} onChange={(e) => setInterestRateHA(e.target.value)} placeholder="e.g., 6.5"/></div>
            <div><Label htmlFor="loanTermHA">Loan Term (Years)</Label><Input id="loanTermHA" type="number" value={loanTermYearsHA} onChange={(e) => setLoanTermYearsHA(e.target.value)} placeholder="e.g., 30"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateHouseAffordability}>Estimate</Button><Button variant="outline" onClick={resetFormHA}>Reset</Button></CardFooter>
        </Card>

        {(affordableHomePriceHA || errorHA) && (
          <Card>
            <CardHeader><CardDescription>Affordability Results</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {errorHA && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{errorHA}</AlertDescription></Alert>)}
              {maxLoanAmountHA && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Max Loan Amount</p><p className="font-semibold">${maxLoanAmountHA}</p></div>)}
              {affordableHomePriceHA && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Affordable House Price</p><p className="text-2xl font-bold text-primary">${affordableHomePriceHA}</p></div>
                  <CopyButton textToCopy={affordableHomePriceHA} />
                </div>
              )}
            </CardContent>
            <CardFooter><p className="text-xs text-muted-foreground">Remember other closing costs and fees. Consult professionals.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: HouseAffordabilityCalculator.tsx ======
==================================================

// ====== START OF FILE: HouseFlippingProfitCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.97 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, DollarSign } from "lucide-react";

export default function HouseFlippingProfitCalculator() {
  const [purchasePrice, setPurchasePrice] = useState<string>('');
  const [renovationCosts, setRenovationCosts] = useState<string>('');
  const [sellingPrice, setSellingPrice] = useState<string>('');
  const [holdingCosts, setHoldingCosts] = useState<string>(''); // e.g., utilities, taxes, insurance during flip
  const [sellingCosts, setSellingCosts] = useState<string>(''); // e.g., agent commissions, closing costs

  const [estimatedProfit, setEstimatedProfit] = useState<string | null>(null);
  const [returnOnInvestment, setReturnOnInvestment] = useState<string | null>(null);
  const [totalInvestment, setTotalInvestment] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateProfit = () => {
    setError(null);
    setEstimatedProfit(null);
    setReturnOnInvestment(null);
    setTotalInvestment(null);

    const pp = parseFloat(purchasePrice);
    const rc = parseFloat(renovationCosts);
    const sp = parseFloat(sellingPrice);
    const hc = parseFloat(holdingCosts);
    const sc = parseFloat(sellingCosts);

    if (isNaN(pp) || pp <= 0 || isNaN(rc) || rc < 0 || isNaN(sp) || sp <= 0 || isNaN(hc) || hc < 0 || isNaN(sc) || sc < 0) {
      setError('Please enter valid numbers. Purchase and Selling Price must be positive. Costs can be zero.');
      return;
    }

    const calculatedTotalInvestment = pp + rc + hc + sc; // Total cash outlay
    const profit = sp - calculatedTotalInvestment;
    const roi = (profit / calculatedTotalInvestment) * 100;
    
    if(isNaN(profit) || isNaN(roi)){
        setError("Could not calculate profit/ROI. Check inputs.");
        return;
    }

    setTotalInvestment(calculatedTotalInvestment.toFixed(2));
    setEstimatedProfit(profit.toFixed(2));
    setReturnOnInvestment(roi.toFixed(2));
  };
  
  const resetForm = () => {
    setPurchasePrice(''); setRenovationCosts(''); setSellingPrice(''); setHoldingCosts(''); setSellingCosts('');
    setEstimatedProfit(null); setReturnOnInvestment(null); setTotalInvestment(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>House Flipping Profit Estimator</AlertTitle>
        <AlertDescription>
          Estimate potential profit and ROI from a house flip. This is a simplified model and doesn't include financing costs or all potential variables. Market conditions can change.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your project numbers.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="purchasePrice">Purchase Price ($)</Label><Input id="purchasePrice" type="number" value={purchasePrice} onChange={(e) => setPurchasePrice(e.target.value)} placeholder="e.g., 150000"/></div>
            <div><Label htmlFor="renovationCosts">Renovation Costs ($)</Label><Input id="renovationCosts" type="number" value={renovationCosts} onChange={(e) => setRenovationCosts(e.target.value)} placeholder="e.g., 30000"/></div>
            <div><Label htmlFor="sellingPrice">Expected Selling Price ($)</Label><Input id="sellingPrice" type="number" value={sellingPrice} onChange={(e) => setSellingPrice(e.target.value)} placeholder="e.g., 250000"/></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="holdingCosts">Total Holding Costs ($)</Label><Input id="holdingCosts" type="number" value={holdingCosts} onChange={(e) => setHoldingCosts(e.target.value)} placeholder="e.g., 5000"/></div>
              <div><Label htmlFor="sellingCosts">Total Selling Costs ($)</Label><Input id="sellingCosts" type="number" value={sellingCosts} onChange={(e) => setSellingCosts(e.target.value)} placeholder="e.g., 15000 (agent, closing)"/></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateProfit}>Calculate Profit</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(estimatedProfit || error) && (
          <Card>
            <CardHeader><CardDescription>Flip Analysis</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalInvestment && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Investment (Outlay)</p><p className="font-semibold">${totalInvestment}</p></div>)}
              {estimatedProfit && (
                <div className={`flex justify-between items-center p-3 rounded-md ${parseFloat(estimatedProfit) >= 0 ? 'bg-green-500/10' : 'bg-red-500/10'}`}>
                  <div><p className="text-sm text-muted-foreground">Estimated Profit / Loss</p><p className={`text-2xl font-bold ${parseFloat(estimatedProfit) >= 0 ? 'text-green-600' : 'text-red-600'}`}>${estimatedProfit}</p></div>
                  <CopyButton textToCopy={estimatedProfit} />
                </div>
              )}
              {returnOnInvestment && (<div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">Return on Investment (ROI)</p><p className="text-xl font-bold text-primary">{returnOnInvestment}%</p></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: HouseFlippingProfitCalculator.tsx ======
==================================================

// ====== START OF FILE: HvacDuctSizeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.53 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, AirVent } from "lucide-react";
import CopyButton from '@/components/shared/CopyButton';

export default function HvacDuctSizeCalculator() {
  const [roomArea, setRoomArea] = useState<string>(''); // in sq ft
  const [cfmPerSqFt, setCfmPerSqFt] = useState<string>('1'); // Common rule of thumb
  const [targetAirVelocity, setTargetAirVelocity] = useState<string>('700'); // FPM for branch ducts

  const [requiredCfm, setRequiredCfm] = useState<string | null>(null);
  const [ductDiameter, setDuctDiameter] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateDuctSize = () => {
    setError(null);
    setRequiredCfm(null);
    setDuctDiameter(null);

    const area = parseFloat(roomArea);
    const cfmFactor = parseFloat(cfmPerSqFt);
    const velocity = parseFloat(targetAirVelocity);

    if (isNaN(area) || area <= 0 || isNaN(cfmFactor) || cfmFactor <= 0 || isNaN(velocity) || velocity <= 0) {
      setError('Please enter valid positive numbers for all fields.');
      return;
    }

    // 1. Calculate required airflow (CFM)
    const cfm = area * cfmFactor;
    setRequiredCfm(cfm.toFixed(0));

    // 2. Calculate required duct area (in sq ft) using Q = AV => A = Q/V
    // Q is CFM (cubic feet per minute), V is FPM (feet per minute)
    const requiredDuctAreaSqFt = cfm / velocity;

    // 3. Convert area to round duct diameter (in inches)
    // Area = π * r², so r = sqrt(Area / π). Diameter = 2r
    const radiusInFt = Math.sqrt(requiredDuctAreaSqFt / Math.PI);
    const diameterInInches = radiusInFt * 2 * 12;

    setDuctDiameter(diameterInInches.toFixed(1));
  };

  const resetForm = () => {
    setRoomArea('');
    setCfmPerSqFt('1');
    setTargetAirVelocity('700');
    setError(null);
    setRequiredCfm(null);
    setDuctDiameter(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle className="font-bold text-lg">For Illustration Only - Consult a Professional</AlertTitle>
        <AlertDescription className="text-base">
          <p>HVAC duct sizing is a critical engineering task that impacts system efficiency and comfort. This calculator uses a <strong className="font-semibold">highly simplified rule-of-thumb method and should not be used for actual system design.</strong></p>
          <p className="mt-2">Proper design requires heat load calculations (ACCA Manual J) and duct design procedures (ACCA Manual D). <strong className="font-semibold">Always consult a qualified HVAC engineer or technician.</strong></p>
        </AlertDescription>
      </Alert>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Get a rough estimate for a round branch duct size.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="roomAreaHvac">Room Area (sq ft)</Label>
              <Input id="roomAreaHvac" type="number" value={roomArea} onChange={e => setRoomArea(e.target.value)} placeholder="e.g., 150"/>
            </div>
             <div>
              <Label htmlFor="cfmFactorHvac">Airflow Needed per Square Foot (CFM/sq ft)</Label>
              <Input id="cfmFactorHvac" type="number" value={cfmPerSqFt} onChange={e => setCfmPerSqFt(e.target.value)} placeholder="e.g., 1 (typical rule of thumb)"/>
            </div>
            <div>
              <Label htmlFor="targetVelocityHvac">Target Air Velocity (FPM)</Label>
              <Input id="targetVelocityHvac" type="number" value={targetAirVelocity} onChange={e => setTargetAirVelocity(e.target.value)} placeholder="e.g., 700 for branch ducts"/>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateDuctSize}>Estimate Duct Size</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(requiredCfm || ductDiameter || error) && (
          <Card>
            <CardHeader><CardDescription>Simplified Duct Size Estimate</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {requiredCfm && (
                <div className="p-2 bg-muted rounded-md mb-2">
                  <p className="text-sm text-muted-foreground">Est. Required Airflow (CFM)</p>
                  <p className="font-semibold">{requiredCfm} CFM</p>
                </div>
              )}
              {ductDiameter && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Est. Round Duct Diameter</p>
                    <p className="text-2xl font-bold text-primary">{ductDiameter} inches</p>
                  </div>
                  <CopyButton textToCopy={ductDiameter}/>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: HvacDuctSizeCalculator.tsx ======
==================================================

// ====== START OF FILE: HydrationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.43 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, GlassWater, ThermometerSun as ClimateIcon } from "lucide-react";

type WeightUnitHydration = 'kg' | 'lb';
type ExerciseIntensity = 'none' | 'light' | 'moderate' | 'intense';
type ClimateType = 'cool_dry' | 'temperate' | 'hot_dry' | 'hot_humid';

const exerciseFluidLossMlPerHour: Record<ExerciseIntensity, number> = {
  none: 0,
  light: 500,  // Approx 0.5 L/hr
  moderate: 1000, // Approx 1 L/hr
  intense: 1500, // Approx 1.5 L/hr or more
};
const climateFactorMultiplier: Record<ClimateType, number> = {
  cool_dry: 1.0,
  temperate: 1.1,
  hot_dry: 1.25,
  hot_humid: 1.4,
};

export default function HydrationCalculator() {
  const [weight, setWeight] = useState<string>('');
  const [weightUnit, setWeightUnit] = useState<WeightUnitHydration>('kg');
  const [exerciseDurationMinutes, setExerciseDurationMinutes] = useState<string>('0');
  const [exerciseIntensity, setExerciseIntensity] = useState<ExerciseIntensity>('none');
  const [climate, setClimate] = useState<ClimateType>('temperate');

  const [dailyIntakeMl, setDailyIntakeMl] = useState<string | null>(null);
  const [dailyIntakeOz, setDailyIntakeOz] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateHydration = () => {
    setError(null); setDailyIntakeMl(null); setDailyIntakeOz(null);
    const w = parseFloat(weight);
    const durationMins = parseFloat(exerciseDurationMinutes);
    if (isNaN(w) || w <= 0 || isNaN(durationMins) || durationMins < 0) {
      setError('Please enter valid positive weight and non-negative exercise duration.');
      return;
    }

    let weightInKg = w;
    if (weightUnit === 'lb') weightInKg = w * 0.453592;

    // Base intake: ~30-35 ml per kg of body weight. Using 33ml.
    let baseMl = weightInKg * 33;
    
    // Add for exercise
    const exerciseLossPerHour = exerciseFluidLossMlPerHour[exerciseIntensity];
    const exerciseDurationHours = durationMins / 60;
    const totalExerciseFluidLoss = exerciseLossPerHour * exerciseDurationHours;
    baseMl += totalExerciseFluidLoss;

    // Adjust for climate
    const finalIntakeMl = baseMl * climateFactorMultiplier[climate];
    const finalIntakeOz = finalIntakeMl / 29.5735; // 1 fl oz = 29.5735 mL

    setDailyIntakeMl(finalIntakeMl.toFixed(0));
    setDailyIntakeOz(finalIntakeOz.toFixed(0));
  };

  const resetForm = () => {
    setWeight(''); setExerciseDurationMinutes('0'); setExerciseIntensity('none'); setClimate('temperate');
    setDailyIntakeMl(null); setDailyIntakeOz(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Daily Hydration Needs Estimator</AlertTitle><AlertDescription>Estimate your daily fluid intake based on weight, exercise, and climate. These are general guidelines; individual needs vary. Listen to your body and consult professionals for specific advice.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your details for estimation.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="weightHydration">Body Weight</Label><Input id="weightHydration" type="number" value={weight} onChange={e=>setWeight(e.target.value)}/></div>
              <div><Label htmlFor="weightUnitHydration">Unit</Label><Select value={weightUnit} onValueChange={(v:WeightUnitHydration)=>setWeightUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="kg">kg</SelectItem><SelectItem value="lb">lbs</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="exerciseDurationHyd">Exercise Duration (minutes per day)</Label><Input id="exerciseDurationHyd" type="number" value={exerciseDurationMinutes} onChange={e=>setExerciseDurationMinutes(e.target.value)} placeholder="e.g., 60"/></div>
            <div><Label htmlFor="exerciseIntensityHyd">Exercise Intensity</Label><Select value={exerciseIntensity} onValueChange={(v:ExerciseIntensity)=>setExerciseIntensity(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                {Object.keys(exerciseFluidLossMlPerHour).map(lvl => <SelectItem key={lvl} value={lvl} className="capitalize">{lvl.replace('_',' ')}</SelectItem>)}
            </SelectContent></Select></div>
            <div><Label htmlFor="climateHyd">Predominant Climate</Label><Select value={climate} onValueChange={(v:ClimateType)=>setClimate(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                {Object.keys(climateFactorMultiplier).map(cl => <SelectItem key={cl} value={cl} className="capitalize">{cl.replace('_',' ')}</SelectItem>)}
            </SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateHydration}>Calculate Hydration</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(dailyIntakeMl || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Daily Fluid Intake</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {dailyIntakeMl && dailyIntakeOz && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Recommended Intake</p><p className="text-2xl font-bold text-primary">{dailyIntakeMl} mL / {dailyIntakeOz} fl oz</p></div><CopyButton textToCopy={`${dailyIntakeMl} mL / ${dailyIntakeOz} fl oz`}/></div>)}
              <AlertDescription className="text-xs pt-2 mt-2">Includes water from all beverages and food. Drink when thirsty.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: HydrationCalculator.tsx ======
==================================================

// ====== START OF FILE: HyperbolaCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.04 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Minimize2 } from "lucide-react"; // Minimize2 can represent the shape

export default function HyperbolaCalculator() {
  // Standard form: x^2/a^2 - y^2/b^2 = 1 (horizontal) or y^2/a^2 - x^2/b^2 = 1 (vertical)
  // User inputs a and b
  const [valA, setValA] = useState<string>(''); // Transverse semi-axis
  const [valB, setValB] = useState<string>(''); // Conjugate semi-axis

  const [fociDistC, setFociDistC] = useState<string | null>(null); // Distance from center to focus (c) where c^2 = a^2 + b^2
  const [eccentricityHyp, setEccentricityHyp] = useState<string | null>(null); // e = c/a
  const [asymptotesEq, setAsymptotesEq] = useState<string | null>(null); // y = ±(b/a)x for horizontal, y = ±(a/b)x for vertical
  const [error, setError] = useState<string | null>(null);

  const calculateHyperbola = () => {
    setError(null); setFociDistC(null); setEccentricityHyp(null); setAsymptotesEq(null);
    const a = parseFloat(valA);
    const b = parseFloat(valB);

    if (isNaN(a) || a <= 0 || isNaN(b) || b <= 0) {
      setError("Semi-axes 'a' and 'b' must be positive numbers.");
      return;
    }

    const cSquared = a*a + b*b;
    const c = Math.sqrt(cSquared);
    setFociDistC(c.toFixed(4));
    setEccentricityHyp((c/a).toFixed(4));
    // Assuming horizontal hyperbola for asymptotes for this simplified version (x^2/a^2 - y^2/b^2 = 1)
    setAsymptotesEq(`y = ±(${(b/a).toFixed(3)})x`);
  };

  const resetForm = () => {
    setValA(''); setValB('');
    setFociDistC(null); setEccentricityHyp(null); setAsymptotesEq(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Hyperbola Calculator (Simplified)</AlertTitle><AlertDescription>Calculate properties of a hyperbola (focal distance, eccentricity, asymptotes) given semi-axes 'a' and 'b'. Assumes horizontal hyperbola (x²/a² - y²/b² = 1).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter semi-axes a and b.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="valAHyp">Transverse semi-axis (a)</Label><Input id="valAHyp" type="number" value={valA} onChange={e=>setValA(e.target.value)} placeholder="e.g., 3"/></div>
            <div><Label htmlFor="valBHyp">Conjugate semi-axis (b)</Label><Input id="valBHyp" type="number" value={valB} onChange={e=>setValB(e.target.value)} placeholder="e.g., 4"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateHyperbola}>Calculate Properties</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(fociDistC || error) && (
          <Card>
            <CardHeader><CardDescription>Hyperbola Properties</CardDescription></CardHeader>
            <CardContent className="space-y-2 text-sm">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {fociDistC && (<div className="p-1 bg-muted rounded-md">Focal Distance (c): <strong className="font-semibold">{fociDistC} units</strong></div>)}
              {eccentricityHyp && (<div className="p-1 bg-muted rounded-md">Eccentricity (e): <strong className="font-semibold">{eccentricityHyp}</strong></div>)}
              {asymptotesEq && (<div className="p-1 bg-muted rounded-md">Asymptotes: <strong className="font-semibold">{asymptotesEq}</strong></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: HyperbolaCalculator.tsx ======
==================================================

// ====== START OF FILE: IdealGasLawCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 11.46 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CloudSun } from "lucide-react";

// Ideal Gas Law: PV = nRT
// R (Ideal Gas Constant) values:
// 0.08206 L·atm / (mol·K)
// 8.314 J / (mol·K)  (or Pa·m³ / (mol·K))
// 62.36 L·mmHg / (mol·K)

type TargetVariable = 'pressure' | 'volume' | 'moles' | 'temperature';
type PressureUnit = 'atm' | 'Pa' | 'kPa' | 'mmHg';
type VolumeUnitIGL = 'L' | 'm3';
type TemperatureUnitIGL = 'K' | 'C';

const R_values = {
    'L·atm/(mol·K)': 0.082057,
    'Pa·m³/(mol·K)': 8.31446, // Also J/(mol·K)
    'L·mmHg/(mol·K)': 62.3636,
};

export default function IdealGasLawCalculator() {
  const [target, setTarget] = useState<TargetVariable>('pressure');
  const [pressure, setPressure] = useState<string>('');
  const [volume, setVolume] = useState<string>('');
  const [moles, setMoles] = useState<string>('');
  const [temperature, setTemperature] = useState<string>('');

  const [pressureUnit, setPressureUnit] = useState<PressureUnit>('atm');
  const [volumeUnit, setVolumeUnit] = useState<VolumeUnitIGL>('L');
  const [temperatureUnit, setTemperatureUnit] = useState<TemperatureUnitIGL>('K');
  
  const [result, setResult] = useState<string | null>(null);
  const [resultUnitLabel, setResultUnitLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const getRValueAndBaseUnits = (): { R: number, pUnit: PressureUnit, vUnit: VolumeUnitIGL, tUnit: TemperatureUnitIGL } => {
    // Select R based on output or most common input units.
    // This logic might need adjustment for a more flexible unit system.
    // For now, let's try to align R with selected units if possible, or convert inputs to match a chosen R.
    
    // Default to L·atm/(mol·K) and convert inputs
    return { R: R_values['L·atm/(mol·K)'], pUnit: 'atm', vUnit: 'L', tUnit: 'K' };
  };

  const convertPressure = (val: number, from: PressureUnit, to: PressureUnit): number => {
    if (from === to) return val;
    // Convert `from` to atm (base for chosen R)
    let valInAtm = val;
    if (from === 'Pa') valInAtm = val / 101325;
    else if (from === 'kPa') valInAtm = val / 101.325;
    else if (from === 'mmHg') valInAtm = val / 760;
    
    // Convert from atm to `to` unit
    if (to === 'atm') return valInAtm;
    if (to === 'Pa') return valInAtm * 101325;
    if (to === 'kPa') return valInAtm * 101.325;
    if (to === 'mmHg') return valInAtm * 760;
    return val; // Should not reach here
  };

  const convertVolume = (val: number, from: VolumeUnitIGL, to: VolumeUnitIGL): number => {
    if (from === to) return val;
    let valInL = val;
    if (from === 'm3') valInL = val * 1000;

    if (to === 'L') return valInL;
    if (to === 'm3') return valInL / 1000;
    return val;
  };

  const convertTemperature = (val: number, from: TemperatureUnitIGL, to: TemperatureUnitIGL): number => {
    if (from === to) return val;
    let valInK = val;
    if (from === 'C') valInK = val + 273.15;
    
    if (to === 'K') return valInK;
    if (to === 'C') return valInK - 273.15;
    return val;
  };


  const calculate = () => {
    setError(null);
    setResult(null);
    setResultUnitLabel('');

    const P_val = parseFloat(pressure);
    const V_val = parseFloat(volume);
    const n_val = parseFloat(moles);
    const T_val = parseFloat(temperature);

    const { R, pUnit: basePUnit, vUnit: baseVUnit, tUnit: baseTUnit } = getRValueAndBaseUnits();

    try {
      let P = target !== 'pressure' ? convertPressure(P_val, pressureUnit, basePUnit) : 0;
      let V = target !== 'volume' ? convertVolume(V_val, volumeUnit, baseVUnit) : 0;
      let n = target !== 'moles' ? n_val : 0;
      let T = target !== 'temperature' ? convertTemperature(T_val, temperatureUnit, baseTUnit) : 0;
      
      if (target !== 'moles' && (isNaN(n_val) || n_val <= 0)) throw new Error("Moles (n) must be a positive value.");
      if (target !== 'temperature' && (T <= 0)) throw new Error("Temperature (in Kelvin) must be positive.");

      let calculatedValue: number;

      switch (target) {
        case 'pressure':
          if (isNaN(V_val) || V_val <= 0 || isNaN(n_val) || n_val <= 0 || isNaN(T_val)) throw new Error("Volume, Moles, and Temperature inputs are required and must be valid.");
          V = convertVolume(V_val, volumeUnit, baseVUnit);
          n = n_val;
          T = convertTemperature(T_val, temperatureUnit, baseTUnit);
          if (V <= 0 || T <= 0) throw new Error("Volume and Temperature (in Kelvin) must be positive.");
          calculatedValue = (n * R * T) / V; // Result in basePUnit (atm)
          calculatedValue = convertPressure(calculatedValue, basePUnit, pressureUnit); // Convert back to user's selected P unit
          setResultUnitLabel(pressureUnit);
          break;
        case 'volume':
          if (isNaN(P_val) || P_val <= 0 || isNaN(n_val) || n_val <= 0 || isNaN(T_val)) throw new Error("Pressure, Moles, and Temperature inputs are required.");
          P = convertPressure(P_val, pressureUnit, basePUnit);
          n = n_val;
          T = convertTemperature(T_val, temperatureUnit, baseTUnit);
          if (P <= 0 || T <= 0) throw new Error("Pressure and Temperature (in Kelvin) must be positive.");
          calculatedValue = (n * R * T) / P; // Result in baseVUnit (L)
          calculatedValue = convertVolume(calculatedValue, baseVUnit, volumeUnit);
          setResultUnitLabel(volumeUnit);
          break;
        case 'moles':
          if (isNaN(P_val) || P_val <= 0 || isNaN(V_val) || V_val <= 0 || isNaN(T_val)) throw new Error("Pressure, Volume, and Temperature inputs are required.");
          P = convertPressure(P_val, pressureUnit, basePUnit);
          V = convertVolume(V_val, volumeUnit, baseVUnit);
          T = convertTemperature(T_val, temperatureUnit, baseTUnit);
          if (P <= 0 || V <= 0 || T <= 0) throw new Error("Pressure, Volume, and Temperature (in Kelvin) must be positive.");
          calculatedValue = (P * V) / (R * T);
          setResultUnitLabel('mol');
          break;
        case 'temperature':
          if (isNaN(P_val) || P_val <= 0 || isNaN(V_val) || V_val <= 0 || isNaN(n_val) || n_val <= 0) throw new Error("Pressure, Volume, and Moles inputs are required.");
          P = convertPressure(P_val, pressureUnit, basePUnit);
          V = convertVolume(V_val, volumeUnit, baseVUnit);
          n = n_val;
           if (P <= 0 || V <= 0 ) throw new Error("Pressure and Volume must be positive.");
          calculatedValue = (P * V) / (n * R); // Result in baseTUnit (K)
          calculatedValue = convertTemperature(calculatedValue, baseTUnit, temperatureUnit);
          setResultUnitLabel(temperatureUnit);
          break;
        default: throw new Error("Invalid target variable.");
      }
      if (isNaN(calculatedValue) || !isFinite(calculatedValue)) throw new Error("Calculation resulted in an invalid number.");
      setResult(calculatedValue.toPrecision(5));

    } catch (e: any) { setError(e.message); }
  };

  const resetForm = () => {
    setPressure(''); setVolume(''); setMoles(''); setTemperature('');
    setResult(null); setError(null); setResultUnitLabel('');
  };
  
  const renderInputs = () => (
    <>
      {target !== 'pressure' && <div><Label htmlFor="pressureIGL">Pressure</Label><div className="flex gap-2"><Input id="pressureIGL" type="number" value={pressure} onChange={(e) => setPressure(e.target.value)} className="flex-grow" /><Select value={pressureUnit} onValueChange={(v: PressureUnit) => setPressureUnit(v)}><SelectTrigger className="w-[100px]"><SelectValue/></SelectTrigger><SelectContent><SelectItem value="atm">atm</SelectItem><SelectItem value="Pa">Pa</SelectItem><SelectItem value="kPa">kPa</SelectItem><SelectItem value="mmHg">mmHg</SelectItem></SelectContent></Select></div></div>}
      {target !== 'volume' && <div><Label htmlFor="volumeIGL">Volume</Label><div className="flex gap-2"><Input id="volumeIGL" type="number" value={volume} onChange={(e) => setVolume(e.target.value)} className="flex-grow" /><Select value={volumeUnit} onValueChange={(v: VolumeUnitIGL) => setVolumeUnit(v)}><SelectTrigger className="w-[100px]"><SelectValue/></SelectTrigger><SelectContent><SelectItem value="L">L</SelectItem><SelectItem value="m3">m³</SelectItem></SelectContent></Select></div></div>}
      {target !== 'moles' && <div><Label htmlFor="molesIGL">Moles (n)</Label><Input id="molesIGL" type="number" value={moles} onChange={(e) => setMoles(e.target.value)} placeholder="mol"/></div>}
      {target !== 'temperature' && <div><Label htmlFor="temperatureIGL">Temperature</Label><div className="flex gap-2"><Input id="temperatureIGL" type="number" value={temperature} onChange={(e) => setTemperature(e.target.value)} className="flex-grow" /><Select value={temperatureUnit} onValueChange={(v: TemperatureUnitIGL) => setTemperatureUnit(v)}><SelectTrigger className="w-[100px]"><SelectValue/></SelectTrigger><SelectContent><SelectItem value="K">K</SelectItem><SelectItem value="C">°C</SelectItem></SelectContent></Select></div></div>}
    </>
  );


  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Ideal Gas Law (PV=nRT)</AlertTitle><AlertDescription>Calculate Pressure (P), Volume (V), Moles (n), or Temperature (T) of an ideal gas. Ensure units are consistent. R ≈ 0.08206 L·atm/(mol·K).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Solve for the unknown variable.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="targetIGL">Variable to Calculate</Label><Select value={target} onValueChange={(v: TargetVariable) => {setTarget(v); setResult(null); setError(null);}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="pressure">Pressure (P)</SelectItem><SelectItem value="volume">Volume (V)</SelectItem><SelectItem value="moles">Moles (n)</SelectItem><SelectItem value="temperature">Temperature (T)</SelectItem></SelectContent></Select></div>
            {renderInputs()}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Calculated {target}</p><p className="text-2xl font-bold text-primary">{result} <span className="text-lg">{resultUnitLabel}</span></p></div>
                  <CopyButton textToCopy={`${result} ${resultUnitLabel}`} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}



// ====== END OF FILE: IdealGasLawCalculator.tsx ======
==================================================

// ====== START OF FILE: IdealRunningWeightCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.27 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Scale, Footprints } from "lucide-react";

// Ideal running weight is highly individual and controversial.
// This uses a VERY simplified approach, e.g., BMI + qualitative adjustment.
// Common "ideal" BMI for runners often cited as 19-22 for males, 18-21 for females.

export default function IdealRunningWeightCalculator() {
  const [height, setHeight] = useState<string>('');
  const [heightUnit, setHeightUnit] = useState<'cm' | 'in'>('cm');
  const [gender, setGender] = useState<'male' | 'female'>('male');
  
  const [idealWeightRange, setIdealWeightRange] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateIdealRunningWeight = () => {
    setError(null);
    setIdealWeightRange(null);

    let hCm = parseFloat(height);
    if (isNaN(hCm) || hCm <= 0) {
      setError('Please enter a valid positive height.');
      return;
    }

    if (heightUnit === 'in') hCm = hCm * 2.54; // Convert inches to cm
    const hMeters = hCm / 100;

    // Target BMI ranges for runners (example, highly variable)
    const targetBmiLower = gender === 'male' ? 19 : 18;
    const targetBmiUpper = gender === 'male' ? 22 : 21;

    const lowerWeightKg = targetBmiLower * (hMeters * hMeters);
    const upperWeightKg = targetBmiUpper * (hMeters * hMeters);

    const lowerWeightLb = lowerWeightKg * 2.20462;
    const upperWeightLb = upperWeightKg * 2.20462;

    setIdealWeightRange(
      `${lowerWeightKg.toFixed(1)} - ${upperWeightKg.toFixed(1)} kg (${lowerWeightLb.toFixed(1)} - ${upperWeightLb.toFixed(1)} lbs)`
    );
  };
  
  const resetForm = () => {
    setHeight(''); setGender('male');
    setIdealWeightRange(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Fitness & Health Disclaimer - Estimation Only</AlertTitle>
        <AlertDescription>
          "Ideal running weight" is highly subjective and varies greatly based on individual body composition, genetics, training level, and running goals. This calculator provides a <strong className="font-semibold">very general estimate based on typical BMI ranges cited for runners</strong>. It is NOT a substitute for professional medical or sports nutrition advice. Focus on health, performance, and feeling good rather than a specific number. <strong className="font-semibold">Consult a doctor or dietitian.</strong>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate an illustrative ideal running weight range.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="heightIRW">Height</Label><Input id="heightIRW" type="number" value={height} onChange={(e) => setHeight(e.target.value)} placeholder="e.g., 175 or 69" /></div>
              <div><Label htmlFor="heightUnitIRW">Unit</Label><Select value={heightUnit} onValueChange={(v: 'cm' | 'in') => setHeightUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="cm">cm</SelectItem><SelectItem value="in">inches</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="genderIRW">Biological Sex</Label><Select value={gender} onValueChange={(v: 'male' | 'female') => setGender(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="male">Male</SelectItem><SelectItem value="female">Female</SelectItem></SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateIdealRunningWeight}>Estimate Weight</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(idealWeightRange || error) && (
          <Card>
            <CardHeader><CardDescription>Illustrative Ideal Running Weight Range</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {idealWeightRange && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Estimated Range (BMI {gender==='male'?'19-22':'18-21'})</p><p className="text-xl font-bold text-primary">{idealWeightRange}</p></div><CopyButton textToCopy={idealWeightRange} /></div>)}
              <AlertDescription className="text-xs pt-2">This is a general estimate. Consult professionals for personalized advice.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: IdealRunningWeightCalculator.tsx ======
==================================================

// ====== START OF FILE: IdealWeightCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.54 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Scale } from "lucide-react";

// Common Ideal Body Weight (IBW) formulas. These are estimates and have limitations.
// Devine Formula (often used for drug dosage):
// Male: 50 kg + 2.3 kg for each inch over 5 feet.
// Female: 45.5 kg + 2.3 kg for each inch over 5 feet.
// Robinson Formula:
// Male: 52 kg + 1.9 kg for each inch over 5 feet.
// Female: 49 kg + 1.7 kg for each inch over 5 feet.
// Miller Formula:
// Male: 56.2 kg + 1.41 kg for each inch over 5 feet.
// Female: 53.1 kg + 1.36 kg for each inch over 5 feet.
// Hamwi Formula:
// Male: 106 lbs (48kg) for first 5 feet + 6 lbs (2.7kg) per inch over 5 feet.
// Female: 100 lbs (45kg) for first 5 feet + 5 lbs (2.26kg) per inch over 5 feet.

type IbwFormula = 'devine' | 'robinson' | 'miller' | 'hamwi';

export default function IdealWeightCalculator() {
  const [height, setHeight] = useState<string>('');
  const [heightUnit, setHeightUnit] = useState<'cm' | 'in'>('cm');
  const [gender, setGender] = useState<'male' | 'female'>('male');
  const [formula, setFormula] = useState<IbwFormula>('devine');
  
  const [idealWeight, setIdealWeight] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateIdealWeight = () => {
    setError(null);
    setIdealWeight(null);

    let h = parseFloat(height);
    if (isNaN(h) || h <= 0) {
      setError('Please enter a valid positive height.');
      return;
    }

    let heightInches: number;
    if (heightUnit === 'cm') {
      heightInches = h / 2.54;
    } else {
      heightInches = h;
    }

    if (heightInches < 60) { // 5 feet = 60 inches
      setError('These formulas are generally for heights 5 feet (152.4 cm) and above.');
      return;
    }

    const inchesOver5Feet = heightInches - 60;
    let ibwKg: number;

    switch (formula) {
      case 'devine':
        ibwKg = (gender === 'male' ? 50 : 45.5) + (2.3 * inchesOver5Feet);
        break;
      case 'robinson':
        ibwKg = (gender === 'male' ? 52 : 49) + (gender === 'male' ? 1.9 : 1.7) * inchesOver5Feet;
        break;
      case 'miller':
        ibwKg = (gender === 'male' ? 56.2 : 53.1) + (gender === 'male' ? 1.41 : 1.36) * inchesOver5Feet;
        break;
      case 'hamwi':
        const baseLbs = gender === 'male' ? 106 : 100;
        const lbsPerInch = gender === 'male' ? 6 : 5;
        const ibwLbs = baseLbs + (lbsPerInch * inchesOver5Feet);
        ibwKg = ibwLbs * 0.453592; // Convert lbs to kg
        break;
      default:
        setError("Invalid formula selected.");
        return;
    }
    
    if (isNaN(ibwKg) || ibwKg <=0) {
        setError("Could not calculate ideal weight with the given inputs.");
        return;
    }

    setIdealWeight(`${ibwKg.toFixed(1)} kg / ${(ibwKg * 2.20462).toFixed(1)} lbs`);
  };
  
  const resetForm = () => {
    setHeight(''); setGender('male'); setFormula('devine');
    setIdealWeight(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Medical Disclaimer - Estimation Only</AlertTitle>
        <AlertDescription>
          Ideal Body Weight (IBW) formulas provide estimates and have limitations. They do not account for individual body composition (muscle vs. fat), age, or ethnic variations. Healthy weight is highly individual. <strong className="font-semibold">Consult a healthcare professional for personalized health and weight advice.</strong>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate Ideal Body Weight (IBW) using various formulas.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="heightIBW">Height</Label><Input id="heightIBW" type="number" value={height} onChange={(e) => setHeight(e.target.value)} placeholder="e.g., 170 or 67" /></div>
              <div><Label htmlFor="heightUnitIBW">Unit</Label><Select value={heightUnit} onValueChange={(v: 'cm' | 'in') => setHeightUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="cm">cm</SelectItem><SelectItem value="in">inches</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="genderIBW">Biological Sex</Label><Select value={gender} onValueChange={(v: 'male' | 'female') => setGender(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="male">Male</SelectItem><SelectItem value="female">Female</SelectItem></SelectContent></Select></div>
            <div><Label htmlFor="formulaIBW">Formula</Label><Select value={formula} onValueChange={(v: IbwFormula) => setFormula(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="devine">Devine</SelectItem><SelectItem value="robinson">Robinson</SelectItem><SelectItem value="miller">Miller</SelectItem><SelectItem value="hamwi">Hamwi</SelectItem></SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateIdealWeight}>Calculate IBW</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(idealWeight || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Ideal Body Weight</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {idealWeight && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Ideal Weight ({formula})</p><p className="text-xl font-bold text-primary">{idealWeight}</p></div>
                  <CopyButton textToCopy={idealWeight} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: IdealWeightCalculator.tsx ======
==================================================

// ====== START OF FILE: ImageAspectRatioCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.6 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, AspectRatio } from "lucide-react";

export default function ImageAspectRatioCalculator() {
  const [originalWidth, setOriginalWidth] = useState<string>('');
  const [originalHeight, setOriginalHeight] = useState<string>('');
  const [newWidth, setNewWidth] = useState<string>('');
  const [newHeight, setNewHeight] = useState<string>('');
  
  const [error, setError] = useState<string | null>(null);
  const [calculatedFor, setCalculatedFor] = useState<'width' | 'height' | null>(null);

  const calculateNewDimension = (target: 'width' | 'height') => {
    setError(null);
    setCalculatedFor(null);

    const oW = parseFloat(originalWidth);
    const oH = parseFloat(originalHeight);
    const nW = parseFloat(newWidth);
    const nH = parseFloat(newHeight);

    if (isNaN(oW) || oW <= 0 || isNaN(oH) || oH <= 0) {
      setError('Original width and height must be valid positive numbers.');
      return;
    }

    const aspectRatio = oW / oH;

    if (target === 'height') { // Calculate new height based on new width
      if (isNaN(nW) || nW <= 0) {
        setError('New width must be a valid positive number to calculate new height.');
        return;
      }
      const calculatedHeight = nW / aspectRatio;
      setNewHeight(calculatedHeight.toFixed(0)); // Often pixel values are integers
      setCalculatedFor('height');
    } else { // Calculate new width based on new height
      if (isNaN(nH) || nH <= 0) {
        setError('New height must be a valid positive number to calculate new width.');
        return;
      }
      const calculatedWidth = nH * aspectRatio;
      setNewWidth(calculatedWidth.toFixed(0));
      setCalculatedFor('width');
    }
  };
  
  const resetForm = () => {
    setOriginalWidth(''); setOriginalHeight(''); setNewWidth(''); setNewHeight('');
    setError(null); setCalculatedFor(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Aspect Ratio Calculator</AlertTitle><AlertDescription>Maintain image proportions when resizing. Enter original dimensions and one new dimension to find the other.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter image dimensions.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="originalWidth">Original Width (px)</Label><Input id="originalWidth" type="number" value={originalWidth} onChange={(e) => setOriginalWidth(e.target.value)} placeholder="e.g., 1920"/></div>
              <div><Label htmlFor="originalHeight">Original Height (px)</Label><Input id="originalHeight" type="number" value={originalHeight} onChange={(e) => setOriginalHeight(e.target.value)} placeholder="e.g., 1080"/></div>
            </div>
            <div className="border-t pt-4 mt-4 space-y-2">
                <p className="text-sm font-medium">Calculate New Dimensions:</p>
                <div className="grid grid-cols-[1fr_auto] gap-2 items-center">
                    <div><Label htmlFor="newWidth">New Width (px)</Label><Input id="newWidth" type="number" value={newWidth} onChange={(e) => { setNewWidth(e.target.value); setNewHeight(''); }} placeholder="Enter new width..."/></div>
                    <Button onClick={() => calculateNewDimension('height')} size="sm" className="self-end">Calc Height</Button>
                </div>
                 <div className="grid grid-cols-[1fr_auto] gap-2 items-center">
                    <div><Label htmlFor="newHeight">New Height (px)</Label><Input id="newHeight" type="number" value={newHeight} onChange={(e) => { setNewHeight(e.target.value); setNewWidth(''); }} placeholder="...or new height"/></div>
                    <Button onClick={() => calculateNewDimension('width')} size="sm" className="self-end">Calc Width</Button>
                </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-end"><Button variant="outline" onClick={resetForm}>Reset All</Button></CardFooter>
        </Card>

        {(calculatedFor || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Dimensions</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {calculatedFor && (
                <div className="p-3 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">New Dimensions (Aspect Ratio Preserved)</p>
                  <p className="text-xl font-bold text-primary">
                    {calculatedFor === 'height' ? `${newWidth}px × ${newHeight}px` : `${newWidth}px × ${newHeight}px`}
                  </p>
                  <div className="mt-2 flex gap-2">
                     <CopyButton textToCopy={newWidth} buttonText="Copy Width" size="sm" />
                     <CopyButton textToCopy={newHeight} buttonText="Copy Height" size="sm" />
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ImageAspectRatioCalculator.tsx ======
==================================================

// ====== START OF FILE: IncomeTaxCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.07 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, FileText } from "lucide-react";

// Simplified tax brackets - Placeholder example (e.g., US Federal-like progressive)
const taxBrackets = [
  { limit: 11000, rate: 0.10 }, // 10% on income up to $11,000
  { limit: 44725, rate: 0.12 }, // 12% on income over $11,000 up to $44,725
  { limit: 95375, rate: 0.22 }, // 22% on income over $44,725 up to $95,375
  // ... add more brackets as needed for a more detailed simulation
  { limit: Infinity, rate: 0.24 }, // Example: 24% on amounts over $95,375
];

export default function IncomeTaxCalculator() {
  const [taxableIncome, setTaxableIncome] = useState<string>('');
  
  const [estimatedTax, setEstimatedTax] = useState<string | null>(null);
  const [effectiveTaxRate, setEffectiveTaxRate] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateIncomeTax = () => {
    setError(null);
    setEstimatedTax(null);
    setEffectiveTaxRate(null);

    const income = parseFloat(taxableIncome);
    if (isNaN(income) || income < 0) {
      setError('Please enter a valid non-negative taxable income.');
      return;
    }

    let tax = 0;
    let remainingIncome = income;
    let previousLimit = 0;

    for (const bracket of taxBrackets) {
      if (remainingIncome <= 0) break;
      
      const taxableInBracket = Math.min(remainingIncome, bracket.limit - previousLimit);
      tax += taxableInBracket * bracket.rate;
      remainingIncome -= taxableInBracket;
      previousLimit = bracket.limit;
      
      if (bracket.limit === Infinity && remainingIncome > 0) { // Last bracket for amounts over
        tax += remainingIncome * bracket.rate; // Tax the rest at the top bracket rate
        remainingIncome = 0; 
      }
    }
    
    setEstimatedTax(tax.toFixed(2));
    if (income > 0) {
      setEffectiveTaxRate(((tax / income) * 100).toFixed(2));
    } else {
      setEffectiveTaxRate("0.00");
    }
  };
  
  const resetForm = () => {
    setTaxableIncome('');
    setEstimatedTax(null);
    setEffectiveTaxRate(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Highly Simplified Estimator - For Illustrative Purposes Only</AlertTitle>
        <AlertDescription>
          Income tax laws are extremely complex and vary by jurisdiction (federal, state, local) and filing status. This calculator uses a <strong className="font-semibold">generic, placeholder progressive tax bracket system for demonstration only</strong>. It does not account for deductions, credits, specific tax laws, or different tax years. <strong className="font-semibold">Do NOT use for actual tax planning or filing.</strong> Consult a qualified tax professional.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate income tax (simplified progressive model).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="taxableIncome">Taxable Income ($)</Label><Input id="taxableIncome" type="number" value={taxableIncome} onChange={(e) => setTaxableIncome(e.target.value)} placeholder="e.g., 60000"/></div>
            <AlertDescription className="text-xs">Uses placeholder tax brackets: 10% up to $11k, 12% up to $44.7k, 22% up to $95.3k, 24% above.</AlertDescription>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateIncomeTax}>Estimate Tax</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(estimatedTax || error) && (
          <Card>
            <CardHeader><CardDescription>Tax Estimation (Simplified)</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {estimatedTax && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Income Tax</p><p className="text-2xl font-bold text-primary">${estimatedTax}</p></div>
                  <CopyButton textToCopy={estimatedTax} />
                </div>
              )}
              {effectiveTaxRate && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Effective Tax Rate</p><p className="font-semibold">{effectiveTaxRate}%</p></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: IncomeTaxCalculator.tsx ======
==================================================

// ====== START OF FILE: InflationAdjustedReturnCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.13 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, TrendingDown } from "lucide-react";

export default function InflationAdjustedReturnCalculator() {
  const [initialValue, setInitialValue] = useState<string>('');
  const [finalValue, setFinalValue] = useState<string>('');
  const [holdingPeriod, setHoldingPeriod] = useState<string>('1');
  const [avgInflationRate, setAvgInflationRate] = useState<string>('3');

  const [nominalReturn, setNominalReturn] = useState<string | null>(null);
  const [realReturn, setRealReturn] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateReturns = () => {
    setError(null);
    setNominalReturn(null);
    setRealReturn(null);

    const iv = parseFloat(initialValue);
    const fv = parseFloat(finalValue);
    const years = parseFloat(holdingPeriod);
    const inflation = parseFloat(avgInflationRate) / 100;

    if (isNaN(iv) || iv <= 0 || isNaN(fv) || fv < 0 || isNaN(years) || years <= 0 || isNaN(inflation) || inflation < -1) {
      setError('Please enter valid positive numbers for values and years. Inflation can be negative.');
      return;
    }

    // CAGR for nominal return
    const nominalRate = Math.pow(fv / iv, 1 / years) - 1;
    setNominalReturn((nominalRate * 100).toFixed(2));

    // Real Rate of Return = ((1 + Nominal Rate) / (1 + Inflation Rate)) - 1
    const realRate = ((1 + nominalRate) / (1 + inflation)) - 1;
    setRealReturn((realRate * 100).toFixed(2));
  };

  const resetForm = () => {
    setInitialValue('');
    setFinalValue('');
    setHoldingPeriod('1');
    setAvgInflationRate('3');
    setNominalReturn(null);
    setRealReturn(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Inflation-Adjusted (Real) Return Calculator</AlertTitle>
        <AlertDescription>
          Calculate the real return on an investment after accounting for inflation to see the true growth in your purchasing power.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your investment details.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="initialValueIAR">Initial Investment Value ($)</Label>
              <Input id="initialValueIAR" type="number" value={initialValue} onChange={e => setInitialValue(e.target.value)} placeholder="e.g., 10000" />
            </div>
            <div>
              <Label htmlFor="finalValueIAR">Final Value of Investment ($)</Label>
              <Input id="finalValueIAR" type="number" value={finalValue} onChange={e => setFinalValue(e.target.value)} placeholder="e.g., 15000" />
            </div>
            <div>
              <Label htmlFor="holdingPeriodIAR">Holding Period (Years)</Label>
              <Input id="holdingPeriodIAR" type="number" value={holdingPeriod} onChange={e => setHoldingPeriod(e.target.value)} placeholder="e.g., 5" />
            </div>
            <div>
              <Label htmlFor="avgInflationRateIAR">Average Annual Inflation Rate (%)</Label>
              <Input id="avgInflationRateIAR" type="number" value={avgInflationRate} onChange={e => setAvgInflationRate(e.target.value)} placeholder="e.g., 3" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateReturns}>Calculate Returns</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>
        {(realReturn || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Return Analysis</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {nominalReturn && <div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Nominal Annual Return (CAGR)</p><p className="font-semibold">{nominalReturn}%</p></div>}
              {realReturn && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Real Return (Inflation-Adjusted)</p>
                    <p className="text-2xl font-bold text-primary">{realReturn}%</p>
                  </div>
                  <CopyButton textToCopy={realReturn} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: InflationAdjustedReturnCalculator.tsx ======
==================================================

// ====== START OF FILE: InflationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.79 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, TrendingUp } from "lucide-react";

export default function InflationCalculator() {
  const [initialValue, setInitialValue] = useState<string>('');
  const [inflationRate, setInflationRate] = useState<string>(''); // Annual %
  const [numYears, setNumYears] = useState<string>('');

  const [futureValue, setFutureValue] = useState<string | null>(null);
  const [purchasingPowerEquivalent, setPurchasingPowerEquivalent] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateInflationEffect = () => {
    setError(null);
    setFutureValue(null);
    setPurchasingPowerEquivalent(null);

    const initial = parseFloat(initialValue);
    const rate = parseFloat(inflationRate) / 100; // Annual rate as decimal
    const years = parseInt(numYears);

    if (isNaN(initial) || initial < 0 || isNaN(rate) || rate < -1 || isNaN(years) || years <= 0) {
      setError('Please enter valid numbers: Initial Value (>=0), Inflation Rate (e.g., 3 for 3%, -2 for -2%), and Years (>0).');
      return;
    }

    // Future value of a sum considering inflation (what $X today will cost in Y years)
    const fv = initial * Math.pow(1 + rate, years);
    setFutureValue(fv.toFixed(2));
    
    // Purchasing power: what $X today is worth in Y years in today's dollars
    const pp = initial / Math.pow(1 + rate, years);
    setPurchasingPowerEquivalent(pp.toFixed(2));

  };
  
  const resetForm = () => {
    setInitialValue(''); setInflationRate(''); setNumYears('');
    setFutureValue(null); setPurchasingPowerEquivalent(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Inflation Effect Estimator</AlertTitle><AlertDescription>Calculate the future cost of an item or the change in purchasing power due to inflation.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter current value and inflation details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="initialValueInf">Initial Value / Current Cost ($)</Label><Input id="initialValueInf" type="number" value={initialValue} onChange={(e) => setInitialValue(e.target.value)} placeholder="e.g., 100"/></div>
            <div><Label htmlFor="inflationRateInf">Average Annual Inflation Rate (%)</Label><Input id="inflationRateInf" type="number" value={inflationRate} onChange={(e) => setInflationRate(e.target.value)} placeholder="e.g., 3"/></div>
            <div><Label htmlFor="numYearsInf">Number of Years</Label><Input id="numYearsInf" type="number" value={numYears} onChange={(e) => setNumYears(e.target.value)} placeholder="e.g., 10"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateInflationEffect}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(futureValue || error) && (
          <Card>
            <CardHeader><CardDescription>Inflation Impact</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {futureValue && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Future Cost of Today's ${initialValue} (after {numYears} years)</p>
                  <div className="flex justify-between items-center"><p className="font-semibold">${futureValue}</p><CopyButton textToCopy={futureValue} size="icon" variant="ghost"/></div>
                </div>
              )}
               {purchasingPowerEquivalent && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Value of Today's ${initialValue} in {numYears} Years (Today's Dollars)</p>
                  <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">${purchasingPowerEquivalent}</p><CopyButton textToCopy={purchasingPowerEquivalent} size="icon" variant="ghost" className="text-primary"/></div>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: InflationCalculator.tsx ======
==================================================

// ====== START OF FILE: InsulinDosageCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.93 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Syringe } from "lucide-react";

export default function InsulinDosageCalculator() {
  const [currentBg, setCurrentBg] = useState<string>(''); // Current Blood Glucose (mg/dL or mmol/L)
  const [targetBg, setTargetBg] = useState<string>('');   // Target Blood Glucose
  const [correctionFactor, setCorrectionFactor] = useState<string>(''); // Units of insulin per mg/dL (or mmol/L) BG drop
  const [carbRatio, setCarbRatio] = useState<string>('');         // Grams of carbs covered by 1 unit of insulin
  const [carbIntake, setCarbIntake] = useState<string>('0');      // Grams of carbs to be consumed

  const [estimatedInsulinUnits, setEstimatedInsulinUnits] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Note: BG units (mg/dL vs mmol/L) would need a toggle and different typical values for factors.
  // This example implicitly assumes consistent units for BG and correction factor.

  const calculateDosage = () => {
    setError(null);
    setEstimatedInsulinUnits(null);

    const curBG = parseFloat(currentBg);
    const tarBG = parseFloat(targetBg);
    const cf = parseFloat(correctionFactor); // ISF - Insulin Sensitivity Factor
    const cr = parseFloat(carbRatio);         // I:C Ratio
    const carbs = parseFloat(carbIntake);

    if (isNaN(curBG) || isNaN(tarBG) || isNaN(cf) || cf <= 0 || isNaN(cr) || cr <= 0 || isNaN(carbs) || carbs < 0) {
      setError('Please enter valid numbers. Current/Target BG, Correction Factor (>0), Carb Ratio (>0), and Carbs (>=0) are required.');
      return;
    }
    if (curBG < 0 || tarBG < 0) {
        setError("Blood glucose values cannot be negative.");
        return;
    }


    // Correction Dose: (Current BG - Target BG) / Correction Factor
    // Only apply correction if current BG is above target.
    const correctionDose = curBG > tarBG ? (curBG - tarBG) / cf : 0;

    // Carb Dose: Carb Intake / Carb Ratio
    const carbDose = carbs > 0 ? carbs / cr : 0;

    const totalDose = correctionDose + carbDose;
    
    if (totalDose < 0) { // Should not happen if logic is correct, but as a safeguard
        setEstimatedInsulinUnits("0 units (or re-check inputs, BG may be below target with no carbs)");
    } else {
        setEstimatedInsulinUnits(`${totalDose.toFixed(1)} units`);
    }
  };

  const resetForm = () => {
    setCurrentBg(''); setTargetBg(''); setCorrectionFactor(''); setCarbRatio(''); setCarbIntake('0');
    setEstimatedInsulinUnits(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive" className="border-red-500/50 text-red-700 dark:text-red-400 [&>svg]:text-red-600">
        <Info className="h-4 w-4" />
        <AlertTitle className="font-bold text-lg">EXTREME MEDICAL DISCLAIMER - FOR ILLUSTRATION ONLY</AlertTitle>
        <AlertDescription className="text-base">
          <p>This Insulin Dosage Calculator is a <strong className="font-semibold">highly simplified, illustrative tool and MUST NOT be used for actual medical decisions or insulin dosing</strong>. Insulin dosing is extremely complex, highly individual, and requires precise calculations, ongoing monitoring, and direct guidance from a qualified healthcare professional (e.g., endocrinologist, diabetes educator).</p>
          <p className="mt-2">Factors NOT considered here include: insulin on board (IOB), activity levels, illness, stress, type of insulin, individual sensitivity changes, site rotation, and many others. Incorrect insulin dosing can lead to <strong className="font-semibold">severe hypoglycemia (low blood sugar) or hyperglycemia (high blood sugar), which can be life-threatening.</strong></p>
          <p className="mt-2"><strong className="font-semibold">ALWAYS consult your doctor or healthcare provider for any questions regarding your diabetes management and insulin dosages. DO NOT make changes to your treatment based on this calculator.</strong></p>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Illustrative insulin dosage estimation. READ DISCLAIMER ABOVE.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="currentBg">Current Blood Glucose (e.g., mg/dL)</Label><Input id="currentBg" type="number" value={currentBg} onChange={e => setCurrentBg(e.target.value)} placeholder="e.g., 180"/></div>
            <div><Label htmlFor="targetBg">Target Blood Glucose (e.g., mg/dL)</Label><Input id="targetBg" type="number" value={targetBg} onChange={e => setTargetBg(e.target.value)} placeholder="e.g., 100"/></div>
            <div><Label htmlFor="correctionFactor">Correction Factor / ISF (1 unit lowers BG by X mg/dL)</Label><Input id="correctionFactor" type="number" value={correctionFactor} onChange={e => setCorrectionFactor(e.target.value)} placeholder="e.g., 50"/></div>
            <div><Label htmlFor="carbRatio">Carb Ratio (1 unit for X grams of carbs)</Label><Input id="carbRatio" type="number" value={carbRatio} onChange={e => setCarbRatio(e.target.value)} placeholder="e.g., 10"/></div>
            <div><Label htmlFor="carbIntake">Carbohydrate Intake (grams)</Label><Input id="carbIntake" type="number" value={carbIntake} onChange={e => setCarbIntake(e.target.value)} placeholder="e.g., 45"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateDosage}>Estimate Dosage (Illustrative)</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(estimatedInsulinUnits || error) && (
          <Card>
            <CardHeader><CardDescription>Illustrative Dosage Estimation</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error/Warning</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {estimatedInsulinUnits && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Est. Insulin Dose (Illustrative)</p><p className="text-2xl font-bold text-primary">{estimatedInsulinUnits}</p></div><CopyButton textToCopy={estimatedInsulinUnits}/></div>)}
              <AlertDescription className="text-xs pt-2 mt-2">This is a simplified calculation. Real dosing is complex. <strong className="font-semibold">Consult your doctor.</strong></AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: InsulinDosageCalculator.tsx ======
==================================================

// ====== START OF FILE: IntegerFactorCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.38 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, DivideSquare } from "lucide-react";

export default function IntegerFactorCalculator() {
  const [numberInput, setNumberInput] = useState<string>('');
  
  const [factors, setFactors] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const getFactors = (n: number): number[] => {
    const absN = Math.abs(n);
    const factorList: number[] = [];
    for (let i = 1; i * i <= absN; i++) {
      if (absN % i === 0) {
        factorList.push(i);
        if (i * i !== absN) {
          factorList.push(absN / i);
        }
      }
    }
    return factorList.sort((a, b) => a - b);
  };

  const calculateFactors = () => {
    setError(null);
    setFactors(null);

    const num = parseInt(numberInput);

    if (isNaN(num)) {
      setError('Please enter a valid integer.');
      return;
    }
     if (num === 0) {
      setError('Every integer is a factor of 0. Please enter a non-zero integer.');
      return;
    }
    if (Math.abs(num) > 10000000) { // Performance limit
        setError('Number too large for quick factorization (max absolute value 10,000,000).');
        return;
    }

    const allFactors = getFactors(num);
    setFactors(allFactors.join(', '));
  };
  
  const resetForm = () => {
    setNumberInput('');
    setFactors(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Find all positive integer factors of a given integer.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="numberInputFactorInt">Enter an Integer</Label><Input id="numberInputFactorInt" type="number" value={numberInput} onChange={(e) => setNumberInput(e.target.value)} placeholder="e.g., 120" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateFactors}>Find Factors</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(factors || error) && (
          <Card>
            <CardHeader><CardDescription>Factors</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {factors && (
                <div className="p-3 bg-primary/10 rounded-md">
                    <p className="text-sm text-muted-foreground">Positive Integer Factors of {numberInput}</p>
                    <div className="flex justify-between items-center">
                        <p className="font-semibold break-all">{factors}</p>
                        <CopyButton textToCopy={factors} size="icon" variant="ghost"/>
                    </div>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: IntegerFactorCalculator.tsx ======
==================================================

// ====== START OF FILE: IntegralCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 2.56 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { Card, CardContent, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Sigma, Info, ExternalLink } from "lucide-react";
import Link from 'next/link';

export default function IntegralCalculator() {
  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle className="font-bold text-lg">For Informational Purposes Only</AlertTitle>
        <AlertDescription className="text-base">
          <p>Calculating the integral of an arbitrary function (symbolic integration) is a highly complex task requiring a computer algebra system.</p>
          <p className="mt-2"><strong className="font-semibold">This tool is a conceptual placeholder and DOES NOT perform symbolic integration.</strong></p>
          <p className="mt-2">For accurate symbolic and definite integration, we recommend using a powerful, dedicated tool like <Link href="https://www.wolframalpha.com/calculators/integral-calculator/" target="_blank" rel="noopener noreferrer" className="font-semibold underline">WolframAlpha's Integral Calculator <ExternalLink className="inline h-3 w-3 ml-1"/></Link>.</p>
        </AlertDescription>
      </Alert>
      
      <Card>
        <CardHeader>
          <CardTitle className="font-headline flex items-center"><Sigma className="mr-2 h-6 w-6 text-primary"/>Understanding Integration</CardTitle>
          <CardDescription>Integration is a core concept in calculus used to find areas, volumes, and other accumulated quantities.</CardDescription>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground mb-4">
            There are two main types of integrals a calculator would handle:
          </p>
          <ul className="list-disc list-inside space-y-2 text-sm">
            <li><strong>Indefinite Integral (∫f(x)dx):</strong> This finds the "antiderivative" of a function, a family of functions whose derivative is f(x). The result includes a constant of integration, "+ C".</li>
            <li><strong>Definite Integral (∫f(x)dx from a to b):</strong> This calculates the net signed area between the function's curve, the x-axis, and the vertical lines x=a and x=b.</li>
          </ul>
           <p className="text-muted-foreground mt-4">
            A functional calculator would require the function, the variable of integration, and optional upper/lower bounds for a definite integral.
          </p>
        </CardContent>
      </Card>
    </div>
  );
}


// ====== END OF FILE: IntegralCalculator.tsx ======
==================================================

// ====== START OF FILE: InterestCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.43 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Percent } from "lucide-react";

// Simple Interest: I = P * R * T
// P = Principal, R = Annual Rate (decimal), T = Time (years)

export default function InterestCalculator() {
  const [principal, setPrincipal] = useState<string>('');
  const [rate, setRate] = useState<string>(''); // Annual %
  const [time, setTime] = useState<string>(''); // In years
  
  const [simpleInterest, setSimpleInterest] = useState<string | null>(null);
  const [totalAmount, setTotalAmount] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateSimpleInterest = () => {
    setError(null);
    setSimpleInterest(null);
    setTotalAmount(null);

    const P = parseFloat(principal);
    const R_annual_percent = parseFloat(rate);
    const T_years = parseFloat(time);

    if (isNaN(P) || P < 0 || isNaN(R_annual_percent) || R_annual_percent < 0 || isNaN(T_years) || T_years < 0) {
      setError('Please enter valid non-negative numbers for principal, rate, and time (years).');
      return;
    }

    const R_decimal = R_annual_percent / 100;
    const interest = P * R_decimal * T_years;
    const total = P + interest;

    setSimpleInterest(interest.toFixed(2));
    setTotalAmount(total.toFixed(2));
  };
  
  const resetForm = () => {
    setPrincipal(''); setRate(''); setTime('');
    setSimpleInterest(null); setTotalAmount(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Simple Interest Calculator</AlertTitle><AlertDescription>Calculate simple interest earned or paid on a principal amount. Does not include compounding.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter loan or investment details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="principalInt">Principal Amount ($)</Label><Input id="principalInt" type="number" value={principal} onChange={(e) => setPrincipal(e.target.value)} placeholder="e.g., 1000"/></div>
            <div><Label htmlFor="rateInt">Annual Interest Rate (%)</Label><Input id="rateInt" type="number" value={rate} onChange={(e) => setRate(e.target.value)} placeholder="e.g., 5"/></div>
            <div><Label htmlFor="timeInt">Time Period (Years)</Label><Input id="timeInt" type="number" value={time} onChange={(e) => setTime(e.target.value)} placeholder="e.g., 2"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateSimpleInterest}>Calculate Interest</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(simpleInterest || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Results</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {simpleInterest && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Simple Interest Earned/Paid</p>
                  <div className="flex justify-between items-center"><p className="font-semibold">${simpleInterest}</p><CopyButton textToCopy={simpleInterest} size="icon" variant="ghost"/></div>
                </div>
              )}
              {totalAmount && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Total Amount (Principal + Interest)</p>
                  <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">${totalAmount}</p><CopyButton textToCopy={totalAmount} size="icon" variant="ghost" className="text-primary"/></div>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: InterestCalculator.tsx ======
==================================================

// ====== START OF FILE: InterestRateCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.29 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, SearchCheck } from "lucide-react";

// Simple Interest Rate: R = (I / (P * T)) * 100
// I = Interest Amount, P = Principal, T = Time (years)

export default function InterestRateCalculator() {
  const [principal, setPrincipalRate] = useState<string>('');
  const [interestAmount, setInterestAmount] = useState<string>('');
  const [timeYears, setTimeYears] = useState<string>('');
  
  const [annualRate, setAnnualRate] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateInterestRate = () => {
    setError(null);
    setAnnualRate(null);

    const P = parseFloat(principal);
    const I = parseFloat(interestAmount);
    const T = parseFloat(timeYears);

    if (isNaN(P) || P <= 0 || isNaN(I) || I < 0 || isNaN(T) || T <= 0) {
      setError('Please enter valid positive numbers for principal, interest amount (can be 0), and time (years).');
      return;
    }
    if (P === 0 && I > 0) {
        setError("Cannot calculate rate if principal is zero and interest is positive.");
        return;
    }
    if (P === 0 && I === 0) { // Rate is undefined or can be anything
        setAnnualRate("0.00 (or N/A for zero principal & interest)");
        return;
    }


    const rateDecimal = I / (P * T);
    const ratePercent = rateDecimal * 100;

    if (isNaN(ratePercent) || !isFinite(ratePercent)) {
        setError("Could not calculate interest rate. Ensure principal and time are not zero if interest is non-zero.");
        return;
    }

    setAnnualRate(ratePercent.toFixed(2));
  };
  
  const resetForm = () => {
    setPrincipalRate(''); setInterestAmount(''); setTimeYears('');
    setAnnualRate(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Simple Interest Rate Calculator</AlertTitle><AlertDescription>Calculate the annual simple interest rate given principal, interest earned/paid, and time period.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter financial details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="principalRate">Principal Amount ($)</Label><Input id="principalRate" type="number" value={principal} onChange={(e) => setPrincipalRate(e.target.value)} placeholder="e.g., 1000"/></div>
            <div><Label htmlFor="interestAmount">Interest Amount ($)</Label><Input id="interestAmount" type="number" value={interestAmount} onChange={(e) => setInterestAmount(e.target.value)} placeholder="e.g., 100 (total interest over period)"/></div>
            <div><Label htmlFor="timeYearsRate">Time Period (Years)</Label><Input id="timeYearsRate" type="number" value={timeYears} onChange={(e) => setTimeYears(e.target.value)} placeholder="e.g., 2"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateInterestRate}>Calculate Rate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(annualRate || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Interest Rate</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {annualRate && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Annual Simple Interest Rate</p><p className="text-2xl font-bold text-primary">{annualRate}%</p></div>
                  <CopyButton textToCopy={annualRate} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: InterestRateCalculator.tsx ======
==================================================

// ====== START OF FILE: InvestmentCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 9.09 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, PiggyBank, TrendingUp } from "lucide-react";

// This will be similar to CompoundInterestCalculator but can be framed differently,
// e.g., for regular investments towards a goal.
// FV = P(1 + r/n)^(nt) + PMT * [((1 + r/n)^(nt) - 1) / (r/n)]  (if PMT at end of period)
// Or FV = P(1 + r/n)^(nt) + PMT * [((1 + r/n)^(nt) - 1) / (r/n)] * (1+r/n) (if PMT at start)
// For simplicity, using formula assuming PMT contributions are compounded at same frequency.

export default function InvestmentCalculator() {
  const [initialInvestment, setInitialInvestment] = useState<string>('0');
  const [regularContribution, setRegularContribution] = useState<string>('0');
  const [contributionFrequency, setContributionFrequency] = useState<string>('12'); // Monthly
  const [annualInterestRateInv, setAnnualInterestRateInv] = useState<string>(''); // %
  const [investmentTermYears, setInvestmentTermYears] = useState<string>('');
  const [compoundingFrequencyInv, setCompoundingFrequencyInv] = useState<string>('12'); // Monthly

  const [futureValueInv, setFutureValueInv] = useState<string | null>(null);
  const [totalPrincipalInv, setTotalPrincipalInv] = useState<string | null>(null);
  const [totalInterestInv, setTotalInterestInv] = useState<string | null>(null);
  const [errorInv, setErrorInv] = useState<string | null>(null);

  const calculateInvestmentGrowth = () => {
    setErrorInv(null);
    setFutureValueInv(null);
    setTotalPrincipalInv(null);
    setTotalInterestInv(null);

    const P0 = parseFloat(initialInvestment);
    const PMT = parseFloat(regularContribution);
    const n_contrib = parseInt(contributionFrequency);
    const r_annual = parseFloat(annualInterestRateInv) / 100;
    const t_years = parseFloat(investmentTermYears);
    const n_compound = parseInt(compoundingFrequencyInv);

    if (isNaN(P0) || P0 < 0 || isNaN(PMT) || PMT < 0 || isNaN(r_annual) || r_annual < 0 || isNaN(t_years) || t_years <= 0 || isNaN(n_compound) || n_compound <=0 || isNaN(n_contrib) || n_contrib <= 0) {
      setErrorInv('Please enter valid non-negative numbers for investments, positive rate, and positive term/frequencies.');
      return;
    }
    if (P0 === 0 && PMT === 0) {
        setErrorInv("Either initial investment or regular contribution must be greater than zero.");
        return;
    }

    // Future value of initial principal
    const fvP0 = P0 * Math.pow(1 + r_annual / n_compound, n_compound * t_years);

    // Future value of series of contributions (ordinary annuity, contributions at end of period)
    // Assuming contribution frequency effectively aligns with compounding period or an effective rate is used.
    let fvPMT = 0;
    const numTotalContributions = t_years * n_contrib;
    if (PMT > 0) {
      // Effective rate per contribution period, assuming compounding happens at n_compound frequency
      const i_effective_per_contrib_period = Math.pow(1 + r_annual / n_compound, n_compound / n_contrib) - 1;
      if (i_effective_per_contrib_period === 0 && r_annual === 0) {
        fvPMT = PMT * numTotalContributions;
      } else if (i_effective_per_contrib_period !== 0) {
        fvPMT = PMT * ((Math.pow(1 + i_effective_per_contrib_period, numTotalContributions) - 1) / i_effective_per_contrib_period);
      } else { // r_annual > 0 but i_effective_per_contrib_period is 0 due to formula precision for very frequent contributions vs less frequent compounding. This is a simplification.
        // Fallback for small effective rates - could be complex. Simplest: assume compounding at contribution frequency if rate > 0.
        const rate_per_contrib = r_annual / n_contrib;
        if (rate_per_contrib > 0) {
             fvPMT = PMT * ((Math.pow(1 + rate_per_contrib, numTotalContributions) - 1) / rate_per_contrib);
        } else {
            fvPMT = PMT * numTotalContributions; // if rate is truly 0.
        }
      }
    }

    const totalFV = fvP0 + fvPMT;
    const calculatedTotalPrincipal = P0 + (PMT * numTotalContributions);
    const calculatedTotalInterest = totalFV - calculatedTotalPrincipal;
    
    if (isNaN(totalFV) || !isFinite(totalFV) || isNaN(calculatedTotalInterest)) {
        setErrorInv("Calculation resulted in an invalid number. Please check inputs, especially for very high rates or long terms.");
        return;
    }

    setFutureValueInv(totalFV.toFixed(2));
    setTotalPrincipalInv(calculatedTotalPrincipal.toFixed(2));
    setTotalInterestInv(calculatedTotalInterest.toFixed(2));
  };
  
  const resetForm = () => {
    setInitialInvestment('0'); setRegularContribution('0'); setContributionFrequency('12');
    setAnnualInterestRateInv(''); setInvestmentTermYears(''); setCompoundingFrequencyInv('12');
    setFutureValueInv(null); setTotalPrincipalInv(null); setTotalInterestInv(null); setErrorInv(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Investment Growth Calculator</AlertTitle><AlertDescription>Project the future value of your investments, including initial sum and regular contributions. Assumes contributions are made at the end of each period.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your investment details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="initialInvestment">Initial Investment ($)</Label><Input id="initialInvestment" type="number" value={initialInvestment} onChange={(e) => setInitialInvestment(e.target.value)} placeholder="e.g., 1000"/></div>
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="regularContribution">Regular Contribution ($)</Label><Input id="regularContribution" type="number" value={regularContribution} onChange={(e) => setRegularContribution(e.target.value)} placeholder="e.g., 100"/></div>
              <div><Label htmlFor="contributionFrequencyInv">Frequency</Label><Select value={contributionFrequency} onValueChange={setContributionFrequency}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="12">Monthly</SelectItem><SelectItem value="4">Quarterly</SelectItem><SelectItem value="1">Annually</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="annualInterestRateInv">Expected Annual Interest Rate (%)</Label><Input id="annualInterestRateInv" type="number" value={annualInterestRateInv} onChange={(e) => setAnnualInterestRateInv(e.target.value)} placeholder="e.g., 7"/></div>
            <div><Label htmlFor="investmentTermYears">Investment Term (Years)</Label><Input id="investmentTermYears" type="number" value={investmentTermYears} onChange={(e) => setInvestmentTermYears(e.target.value)} placeholder="e.g., 10"/></div>
            <div><Label htmlFor="compoundingFrequencyInv">Interest Compounding Frequency</Label><Select value={compoundingFrequencyInv} onValueChange={setCompoundingFrequencyInv}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="1">Annually</SelectItem><SelectItem value="2">Semi-Annually</SelectItem><SelectItem value="4">Quarterly</SelectItem><SelectItem value="12">Monthly</SelectItem><SelectItem value="365">Daily</SelectItem></SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateInvestmentGrowth}>Calculate Growth</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(futureValueInv || errorInv) && (
          <Card>
            <CardHeader><CardDescription>Investment Projection</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {errorInv && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{errorInv}</AlertDescription></Alert>)}
              {futureValueInv && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Future Value</p><p className="text-2xl font-bold text-primary">${futureValueInv}</p></div><CopyButton textToCopy={futureValueInv} /></div>)}
              {totalPrincipalInv && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Principal Contributed</p><p className="font-semibold">${totalPrincipalInv}</p></div>)}
              {totalInterestInv && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Interest Earned</p><p className="font-semibold">${totalInterestInv}</p></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: InvestmentCalculator.tsx ======
==================================================

// ====== START OF FILE: IpSubnetCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.93 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Network } from "lucide-react";

interface SubnetDetails {
  ipAddress: string;
  cidr: number;
  subnetMask: string;
  networkAddress: string;
  broadcastAddress: string;
  firstUsableHost: string;
  lastUsableHost: string;
  numUsableHosts: string;
  ipClass: string;
}

export default function IpSubnetCalculator() {
  const [ipAddress, setIpAddress] = useState<string>('192.168.1.0');
  const [cidr, setCidr] = useState<string>('24');

  const [subnetInfo, setSubnetInfo] = useState<SubnetDetails | null>(null);
  const [error, setError] = useState<string | null>(null);

  const ipToLong = (ip: string): number => {
    return ip.split('.').reduce((acc, octet) => (acc << 8) + parseInt(octet, 10), 0) >>> 0;
  };

  const longToIp = (long: number): string => {
    return `${(long >>> 24)}.${(long >> 16) & 255}.${(long >> 8) & 255}.${long & 255}`;
  };

  const calculateSubnet = () => {
    setError(null);
    setSubnetInfo(null);

    const ipPattern = /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/;
    const cidrVal = parseInt(cidr);

    if (!ipPattern.test(ipAddress) || ipAddress.split('.').some(octet => parseInt(octet) > 255)) {
      setError('Please enter a valid IPv4 address.');
      return;
    }
    if (isNaN(cidrVal) || cidrVal < 0 || cidrVal > 32) {
      setError('Please enter a valid CIDR (0-32).');
      return;
    }

    try {
      const ipLong = ipToLong(ipAddress);
      const maskLong = ((1 << (32 - cidrVal)) - 1) ^ 0xFFFFFFFF;
      const networkLong = ipLong & maskLong;
      const broadcastLong = networkLong | (~maskLong >>> 0);
      
      const numHosts = cidrVal < 31 ? (Math.pow(2, 32 - cidrVal) - 2) : 0;
      const firstUsable = cidrVal < 31 ? networkLong + 1 : networkLong;
      const lastUsable = cidrVal < 31 ? broadcastLong - 1 : broadcastLong;

      const firstOctet = parseInt(ipAddress.split('.')[0]);
      let ipClass = 'E (Reserved/Experimental)';
        if (firstOctet >= 0 && firstOctet <= 127) {
            ipClass = 'A';
        } else if (firstOctet >= 128 && firstOctet <= 191) {
            ipClass = 'B';
        } else if (firstOctet >= 192 && firstOctet <= 223) {
            ipClass = 'C';
        } else if (firstOctet >= 224 && firstOctet <= 239) {
            ipClass = 'D (Multicast)';
        }
      

      setSubnetInfo({
        ipAddress: ipAddress,
        cidr: cidrVal,
        subnetMask: longToIp(maskLong),
        networkAddress: longToIp(networkLong),
        broadcastAddress: longToIp(broadcastLong),
        firstUsableHost: longToIp(firstUsable),
        lastUsableHost: longToIp(lastUsable),
        numUsableHosts: numHosts > 0 ? numHosts.toLocaleString() : '0',
        ipClass: ipClass,
      });

    } catch (e: any) {
        setError("An error occurred during calculation. Please check your inputs.");
    }
  };
  
  const resetForm = () => {
    setIpAddress('192.168.1.0'); setCidr('24');
    setSubnetInfo(null); setError(null);
  };

  return (
    <TooltipProvider>
      <div className="space-y-6">
        <Alert>
          <Info className="h-4 w-4" />
          <AlertTitle>IP Subnet Calculator</AlertTitle>
          <AlertDescription>
            Calculate subnet details like network address, subnet mask, usable host range, and broadcast address from an IP and CIDR.
          </AlertDescription>
        </Alert>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Card>
            <CardHeader><CardDescription>Enter IP address and CIDR for subnet details.</CardDescription></CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Tooltip>
                  <TooltipTrigger className="w-full text-left"><Label htmlFor="ipAddress">IP Address</Label></TooltipTrigger>
                  <TooltipContent><p>Enter the base IP address for the network (e.g., 192.168.1.0).</p></TooltipContent>
                </Tooltip>
                <Input id="ipAddress" value={ipAddress} onChange={(e) => setIpAddress(e.target.value)} placeholder="e.g., 192.168.1.0"/>
              </div>
              <div>
                <Tooltip>
                  <TooltipTrigger className="w-full text-left"><Label htmlFor="cidr">CIDR (e.g., /24)</Label></TooltipTrigger>
                  <TooltipContent><p>Classless Inter-Domain Routing. A number from 0-32 representing the network prefix length.</p></TooltipContent>
                </Tooltip>
                <Input id="cidr" type="number" value={cidr} onChange={(e) => setCidr(e.target.value)} placeholder="e.g., 24" min="0" max="32"/>
              </div>
            </CardContent>
            <CardFooter className="flex justify-between"><Button onClick={calculateSubnet}>Calculate Subnet</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
          </Card>

          {(subnetInfo || error) && (
            <Card>
              <CardHeader><CardDescription>Subnet Information</CardDescription></CardHeader>
              <CardContent>
                {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
                {subnetInfo && (
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between p-1 bg-muted/50 rounded-sm"><span>Network Address:</span> <strong className="font-mono">{subnetInfo.networkAddress}</strong></div>
                    <div className="flex justify-between p-1 bg-muted/50 rounded-sm"><span>Subnet Mask:</span> <strong className="font-mono">{subnetInfo.subnetMask}</strong></div>
                    <div className="flex justify-between p-1 bg-muted/50 rounded-sm"><span>Usable Host Range:</span> <strong className="font-mono">{subnetInfo.firstUsableHost} - {subnetInfo.lastUsableHost}</strong></div>
                    <div className="flex justify-between p-1 bg-muted/50 rounded-sm"><span>Broadcast Address:</span> <strong className="font-mono">{subnetInfo.broadcastAddress}</strong></div>
                    <div className="flex justify-between p-1 bg-muted/50 rounded-sm"><span>Number of Usable Hosts:</span> <strong className="font-mono">{subnetInfo.numUsableHosts}</strong></div>
                    <div className="flex justify-between p-1 bg-muted/50 rounded-sm"><span>IP Class:</span> <strong className="font-mono">{subnetInfo.ipClass}</strong></div>
                  </div>
                )}
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </TooltipProvider>
  );
}


// ====== END OF FILE: IpSubnetCalculator.tsx ======
==================================================

// ====== START OF FILE: IraCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.78 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, ShieldCheck, TrendingUp } from "lucide-react";

export default function IraCalculator() {
  const [currentAge, setCurrentAge] = useState<string>('');
  const [retirementAge, setRetirementAge] = useState<string>('');
  const [initialBalance, setInitialBalance] = useState<string>('0');
  const [annualContribution, setAnnualContribution] = useState<string>('');
  const [annualRateOfReturn, setAnnualRateOfReturn] = useState<string>(''); // %

  const [futureValueIra, setFutureValueIra] = useState<string | null>(null);
  const [totalContributionsIra, setTotalContributionsIra] = useState<string | null>(null);
  const [totalInterestIra, setTotalInterestIra] = useState<string | null>(null);
  const [errorIra, setErrorIra] = useState<string | null>(null);

  const calculateIraGrowth = () => {
    setErrorIra(null);
    setFutureValueIra(null);
    setTotalContributionsIra(null);
    setTotalInterestIra(null);

    const age = parseInt(currentAge);
    const retAge = parseInt(retirementAge);
    const P0 = parseFloat(initialBalance);
    const PMT_annual = parseFloat(annualContribution);
    const r_annual = parseFloat(annualRateOfReturn) / 100;

    if (isNaN(age) || age <= 0 || isNaN(retAge) || retAge <= age || isNaN(P0) || P0 < 0 || isNaN(PMT_annual) || PMT_annual < 0 || isNaN(r_annual) || r_annual < 0) {
      setErrorIra('Please enter valid numbers: Ages (Retirement > Current), Balances/Contributions (>=0), and Rate (>=0).');
      return;
    }

    const t_years = retAge - age;
    let fv = P0;
    let totalContrib = P0;

    // Calculate year by year to handle annual contributions and compounding
    for (let i = 0; i < t_years; i++) {
      fv = (fv + PMT_annual) * (1 + r_annual); // Assume contribution at start of year, then compound
      totalContrib += PMT_annual;
    }
    // If contribution is at end of year: fv = fv * (1+r_annual) + PMT_annual
    // The loop above effectively models end-of-year contributions if the final PMT for the last year isn't added to fv before final interest.
    // Or more simply for end-of-year:
    // fv_p0 = P0 * (1+r)^t
    // fv_pmt = PMT * [((1+r)^t - 1) / r]
    // total = fv_p0 + fv_pmt

    const fv_principal = P0 * Math.pow(1 + r_annual, t_years);
    let fv_contributions = 0;
    if (r_annual === 0) {
        fv_contributions = PMT_annual * t_years;
    } else {
        fv_contributions = PMT_annual * ((Math.pow(1 + r_annual, t_years) - 1) / r_annual);
    }
    
    const finalFV = fv_principal + fv_contributions;
    const finalTotalContributions = P0 + (PMT_annual * t_years);
    const finalTotalInterest = finalFV - finalTotalContributions;

    setFutureValueIra(finalFV.toFixed(2));
    setTotalContributionsIra(finalTotalContributions.toFixed(2));
    setTotalInterestIra(finalTotalInterest.toFixed(2));
  };
  
  const resetForm = () => {
    setCurrentAge(''); setRetirementAge(''); setInitialBalance('0'); setAnnualContribution(''); setAnnualRateOfReturn('');
    setFutureValueIra(null); setTotalContributionsIra(null); setTotalInterestIra(null); setErrorIra(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>IRA Growth Estimator (Simplified)</AlertTitle><AlertDescription>Estimate the future value of your IRA. This calculator uses simple annual compounding and contributions, and does not account for taxes, fees, or specific IRA contribution limits/rules. Consult a financial advisor.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your IRA details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="currentAgeIra">Current Age</Label><Input id="currentAgeIra" type="number" value={currentAge} onChange={(e) => setCurrentAge(e.target.value)} placeholder="e.g., 30"/></div>
              <div><Label htmlFor="retirementAgeIra">Retirement Age</Label><Input id="retirementAgeIra" type="number" value={retirementAge} onChange={(e) => setRetirementAge(e.target.value)} placeholder="e.g., 65"/></div>
            </div>
            <div><Label htmlFor="initialBalanceIra">Initial IRA Balance ($)</Label><Input id="initialBalanceIra" type="number" value={initialBalance} onChange={(e) => setInitialBalance(e.target.value)} placeholder="e.g., 10000"/></div>
            <div><Label htmlFor="annualContributionIra">Annual Contribution ($)</Label><Input id="annualContributionIra" type="number" value={annualContribution} onChange={(e) => setAnnualContribution(e.target.value)} placeholder="e.g., 6000"/></div>
            <div><Label htmlFor="annualRateOfReturnIra">Expected Annual Rate of Return (%)</Label><Input id="annualRateOfReturnIra" type="number" value={annualRateOfReturn} onChange={(e) => setAnnualRateOfReturn(e.target.value)} placeholder="e.g., 7"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateIraGrowth}>Calculate IRA Growth</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(futureValueIra || errorIra) && (
          <Card>
            <CardHeader><CardDescription>IRA Projection</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {errorIra && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{errorIra}</AlertDescription></Alert>)}
              {futureValueIra && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Estimated Future Value at Retirement</p><p className="text-2xl font-bold text-primary">${futureValueIra}</p></div><CopyButton textToCopy={futureValueIra} /></div>)}
              {totalContributionsIra && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Contributions</p><p className="font-semibold">${totalContributionsIra}</p></div>)}
              {totalInterestIra && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Interest Earned</p><p className="font-semibold">${totalInterestIra}</p></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: IraCalculator.tsx ======
==================================================

// ====== START OF FILE: IrrCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.83 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, LineChart } from "lucide-react";

// Function to calculate Net Present Value for a given rate
const calculateNpv = (rate: number, values: number[]): number => {
  let npv = values[0]; // Initial investment
  for (let i = 1; i < values.length; i++) {
    npv += values[i] / Math.pow(1 + rate, i);
  }
  return npv;
};

// Function to calculate the derivative of the NPV function for Newton-Raphson
const calculateNpvDerivative = (rate: number, values: number[]): number => {
  let derivative = 0;
  for (let i = 1; i < values.length; i++) {
    derivative += -i * values[i] / Math.pow(1 + rate, i + 1);
  }
  return derivative;
};

export default function IrrCalculator() {
  const [cashFlows, setCashFlows] = useState<string>('');
  const [irrResult, setIrrResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateIrr = () => {
    setError(null);
    setIrrResult(null);

    const flows = cashFlows.split(',').map(cf => parseFloat(cf.trim()));
    if (flows.some(isNaN)) {
      setError('Invalid cash flow values. Ensure all are numbers separated by commas.');
      return;
    }
    if (flows.length < 2 || flows[0] >= 0) {
      setError('Please enter at least two cash flows, with the first being a negative number (initial investment).');
      return;
    }

    let guess = 0.1; // Initial guess for IRR
    const maxIterations = 200; // Increased iterations
    const tolerance = 1e-7;

    for (let i = 0; i < maxIterations; i++) {
      const npv = calculateNpv(guess, flows);
      const derivative = calculateNpvDerivative(guess, flows);
      
      if (Math.abs(derivative) < 1e-10) { // Derivative is close to zero
          break; // Exit loop, might not converge
      }

      const newGuess = guess - npv / derivative;
      
      if (Math.abs(newGuess - guess) < tolerance) {
        setIrrResult((newGuess * 100).toFixed(2));
        return;
      }
      guess = newGuess;
    }

    setError('Could not converge to a solution. The cash flow series may not have a unique, real IRR, or it is far from the initial guess. Please check your values.');
  };
  
  const resetForm = () => {
    setCashFlows('');
    setIrrResult(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Internal Rate of Return (IRR) Calculator</AlertTitle>
        <AlertDescription>
          Calculate the IRR for a series of cash flows. The IRR is the discount rate at which the Net Present Value (NPV) of the investment is zero. Uses the Newton-Raphson method for calculation.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter cash flows to calculate IRR.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="cashFlows">Cash Flows (comma-separated)</Label>
              <Textarea 
                id="cashFlows" 
                value={cashFlows} 
                onChange={(e) => setCashFlows(e.target.value)} 
                placeholder="e.g., -1000, 250, 300, 350, 400" 
                rows={4}
              />
              <p className="text-xs text-muted-foreground mt-1">Enter initial investment as a negative number, followed by subsequent cash inflows.</p>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateIrr}>Calculate IRR</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(irrResult || error) && (
          <Card>
            <CardHeader><CardDescription>IRR Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error / Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {irrResult && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Internal Rate of Return (IRR)</p><p className="text-2xl font-bold text-primary">{irrResult}%</p></div>
                  <CopyButton textToCopy={irrResult} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: IrrCalculator.tsx ======
==================================================

// ====== START OF FILE: IsItWorthItCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.09 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, ShoppingCart } from "lucide-react";

type UsageFrequency = 'day' | 'week' | 'month';

export default function IsItWorthItCalculator() {
  const [itemPrice, setItemPrice] = useState<string>('');
  const [usageCount, setUsageCount] = useState<string>('');
  const [usageFrequency, setUsageFrequency] = useState<UsageFrequency>('week');
  const [itemLifespanYears, setItemLifespanYears] = useState<string>('1');
  
  const [costPerUse, setCostPerUse] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateWorth = () => {
    setError(null);
    setCostPerUse(null);

    const price = parseFloat(itemPrice);
    const uses = parseFloat(usageCount);
    const lifespan = parseFloat(itemLifespanYears);
    
    if (isNaN(price) || price < 0 || isNaN(uses) || uses <= 0 || isNaN(lifespan) || lifespan <= 0) {
      setError('Please enter valid, positive numbers for all fields.');
      return;
    }
    
    let totalUses: number;
    if (usageFrequency === 'day') totalUses = uses * 365 * lifespan;
    else if (usageFrequency === 'week') totalUses = uses * 52 * lifespan;
    else totalUses = uses * 12 * lifespan; // month
    
    if(totalUses === 0) {
        setError("Total uses cannot be zero.");
        return;
    }

    const calculatedCostPerUse = price / totalUses;
    setCostPerUse(calculatedCostPerUse.toFixed(2));
  };

  const resetForm = () => {
    setItemPrice(''); setUsageCount(''); setItemLifespanYears('1');
    setCostPerUse(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>"Is It Worth It?" Calculator</AlertTitle>
        <AlertDescription>
          Find the "cost per use" of an item to help you decide if a purchase is a good value for you over its lifetime.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter item details.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="itemPrice">Item Price ($)</Label>
              <Input id="itemPrice" type="number" value={itemPrice} onChange={e => setItemPrice(e.target.value)} placeholder="e.g., 300" />
            </div>
            <div>
              <Label>How often will you use it?</Label>
              <div className="grid grid-cols-[1fr_auto_1fr] gap-2 items-center">
                <Input type="number" value={usageCount} onChange={e => setUsageCount(e.target.value)} placeholder="e.g., 3" />
                <span className="text-sm">times per</span>
                <Select value={usageFrequency} onValueChange={(v:UsageFrequency) => setUsageFrequency(v)}>
                    <SelectTrigger><SelectValue/></SelectTrigger>
                    <SelectContent>
                        <SelectItem value="day">Day</SelectItem>
                        <SelectItem value="week">Week</SelectItem>
                        <SelectItem value="month">Month</SelectItem>
                    </SelectContent>
                </Select>
              </div>
            </div>
             <div>
              <Label htmlFor="itemLifespan">Expected Item Lifespan (Years)</Label>
              <Input id="itemLifespan" type="number" value={itemLifespanYears} onChange={e => setItemLifespanYears(e.target.value)} placeholder="e.g., 2"/>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateWorth}>Calculate Value</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>
        {(costPerUse || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Cost Analysis</CardDescription>
            </CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {costPerUse !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Cost Per Use</p>
                    <p className="text-2xl font-bold text-primary">${costPerUse}</p>
                  </div>
                  <CopyButton textToCopy={costPerUse} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: IsItWorthItCalculator.tsx ======
==================================================

// ====== START OF FILE: KCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.56 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardDescription, CardFooter, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Info, Sigma, Atom, HelpCircle } from "lucide-react";
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Terminal } from 'lucide-react';

export default function KCalculator() {
  const [force, setForce] = useState<string>(''); // F, in Newtons
  const [displacement, setDisplacement] = useState<string>(''); // x, in meters
  
  const [springConstant, setSpringConstant] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateSpringConstant = () => {
    setError(null);
    setSpringConstant(null);

    const fVal = parseFloat(force);
    const xVal = parseFloat(displacement);

    if (isNaN(fVal) || isNaN(xVal) || xVal === 0) {
      setError('Please enter valid numbers for Force (N) and Displacement (m). Displacement cannot be zero.');
      return;
    }

    // Hooke's Law: F = -kx  => |k| = |F/x|
    const k = Math.abs(fVal / xVal);
    setSpringConstant(k.toFixed(2));
  };
  
  const resetForm = () => {
    setForce('');
    setDisplacement('');
    setSpringConstant(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="default">
        <Info className="h-4 w-4" />
        <AlertTitle>K Calculator - Spring Constant</AlertTitle>
        <AlertDescription>
          This calculator finds the Spring Constant (k) using Hooke's Law (F = kx). 'k' is a measure of a spring's stiffness.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter force applied and the resulting displacement.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="forceSpring">Force (F) in Newtons (N)</Label>
              <Input id="forceSpring" type="number" value={force} onChange={(e) => setForce(e.target.value)} placeholder="e.g., 50"/>
            </div>
            <div>
              <Label htmlFor="displacementSpring">Displacement (x) in meters (m)</Label>
              <Input id="displacementSpring" type="number" value={displacement} onChange={(e) => setDisplacement(e.target.value)} placeholder="e.g., 0.2"/>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateSpringConstant}>Calculate k</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(springConstant || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Spring Constant (k)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {springConstant && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Spring Constant (k)</p>
                    <p className="text-2xl font-bold text-primary">{springConstant} N/m</p>
                  </div>
                  <CopyButton textToCopy={springConstant} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
      <Card>
          <CardHeader>
              <CardTitle className="font-headline flex items-center gap-2"><HelpCircle className="h-6 w-6"/>About 'k'</CardTitle>
          </CardHeader>
          <CardContent className="text-sm text-muted-foreground">
              <p>'k' is a common variable in science and math. This calculator focuses on the <strong className="text-foreground">spring constant</strong> from physics, but 'k' can also represent:</p>
              <ul className="list-disc pl-5 mt-2 space-y-1">
                  <li><strong>Coulomb's Constant (kₑ)</strong> in electromagnetism.</li>
                  <li><strong>Boltzmann Constant (kₛ)</strong> in thermodynamics.</li>
                  <li><strong>Equilibrium Constant (Keq)</strong> in chemistry.</li>
              </ul>
          </CardContent>
      </Card>
    </div>
  );
}


// ====== END OF FILE: KCalculator.tsx ======
==================================================

// ====== START OF FILE: KineticEnergyCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.12 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Zap } from "lucide-react";

type KineticTarget = 'energy' | 'mass' | 'velocity';

export default function KineticEnergyCalculator() {
  const [target, setTarget] = useState<KineticTarget>('energy');
  const [mass, setMass] = useState<string>(''); // kg
  const [velocity, setVelocity] = useState<string>(''); // m/s
  const [energy, setEnergy] = useState<string>(''); // Joules

  const [result, setResult] = useState<string | null>(null);
  const [resultUnitLabel, setResultUnitLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const calculate = () => {
    setError(null); setResult(null); setResultUnitLabel('');
    const m = parseFloat(mass);
    const v = parseFloat(velocity);
    const E = parseFloat(energy);
    let calculatedValue: number;

    try {
      switch (target) {
        case 'energy': // E = 0.5 * m * v^2
          if(isNaN(m) || m<0 || isNaN(v)) throw new Error("Mass (>=0) and Velocity must be valid numbers.");
          calculatedValue = 0.5 * m * v * v;
          setResultUnitLabel('Joules (J)');
          break;
        case 'mass': // m = 2E / v^2
          if(isNaN(E) || E<0 || isNaN(v) || v===0) throw new Error("Energy (>=0) and Velocity (non-zero) must be valid numbers.");
          calculatedValue = (2 * E) / (v * v);
          setResultUnitLabel('Kilograms (kg)');
          break;
        case 'velocity': // v = sqrt(2E / m)
          if(isNaN(E) || E<0 || isNaN(m) || m<=0) throw new Error("Energy (>=0) and Mass (>0) must be valid numbers.");
          if ((2*E/m) < 0) throw new Error("Cannot take square root of negative number (E/m is negative).");
          calculatedValue = Math.sqrt((2 * E) / m);
          setResultUnitLabel('meters/second (m/s)');
          break;
        default: throw new Error("Invalid selection.");
      }
      if (isNaN(calculatedValue) || !isFinite(calculatedValue)) throw new Error("Calculation resulted in an invalid number.");
      setResult(calculatedValue.toPrecision(5));
    } catch(e:any) {setError(e.message)}
  };

  const resetForm = () => {
    setMass(''); setVelocity(''); setEnergy('');
    setResult(null); setError(null); setResultUnitLabel('');
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Kinetic Energy Calculator (KE = ½mv²)</AlertTitle><AlertDescription>Calculate Kinetic Energy, Mass, or Velocity. Ensure units are kg, m/s, and Joules.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Solve for the unknown variable.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="targetKE">Calculate:</Label><Select value={target} onValueChange={(v:KineticTarget)=>{setTarget(v);resetForm()}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
              <SelectItem value="energy">Kinetic Energy (E)</SelectItem><SelectItem value="mass">Mass (m)</SelectItem><SelectItem value="velocity">Velocity (v)</SelectItem>
            </SelectContent></Select></div>
            {target !== 'mass' && <div><Label htmlFor="massKE">Mass (kg)</Label><Input id="massKE" type="number" value={mass} onChange={e=>setMass(e.target.value)}/></div>}
            {target !== 'velocity' && <div><Label htmlFor="velocityKE">Velocity (m/s)</Label><Input id="velocityKE" type="number" value={velocity} onChange={e=>setVelocity(e.target.value)}/></div>}
            {target !== 'energy' && <div><Label htmlFor="energyKE">Kinetic Energy (Joules)</Label><Input id="energyKE" type="number" value={energy} onChange={e=>setEnergy(e.target.value)}/></div>}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Calculated {target}</p><p className="text-2xl font-bold text-primary">{result} <span className="text-lg">{resultUnitLabel}</span></p></div><CopyButton textToCopy={`${result} ${resultUnitLabel}`}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: KineticEnergyCalculator.tsx ======
==================================================

// ====== START OF FILE: LaplaceTransformCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 2.53 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { Card, CardContent, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { FunctionSquare, Info, ExternalLink } from "lucide-react";
import Link from 'next/link';

export default function LaplaceTransformCalculator() {
  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle className="font-bold text-lg">Conceptual Tool - Advanced Mathematics</AlertTitle>
        <AlertDescription className="text-base">
          <p>The Laplace Transform is a powerful mathematical tool used in engineering and physics to solve differential equations by converting them from the time domain (t) to the frequency domain (s). This requires complex symbolic integration.</p>
          <p className="mt-2"><strong className="font-semibold">This calculator is a conceptual placeholder and does not perform the actual symbolic math required.</strong></p>
          <p className="mt-2">For performing Laplace Transforms, we recommend using a specialized computational engine like <Link href="https://www.wolframalpha.com/calculators/laplace-transform-calculator/" target="_blank" rel="noopener noreferrer" className="font-semibold underline">WolframAlpha's Laplace Transform Calculator <ExternalLink className="inline h-3 w-3 ml-1"/></Link>.</p>
        </AlertDescription>
      </Alert>
      
      <Card>
        <CardHeader>
          <CardTitle className="font-headline flex items-center"><FunctionSquare className="mr-2 h-6 w-6 text-primary"/>Understanding the Laplace Transform</CardTitle>
          <CardDescription>The Laplace Transform, ℒ{'{f(t)}'} = F(s), simplifies the analysis of linear time-invariant systems.</CardDescription>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground mb-4">
            A functional calculator would take a function of a time variable (t) and compute its corresponding function in the complex frequency domain (s).
          </p>
          <h4 className="font-semibold mb-2">Common Transform Pairs:</h4>
          <ul className="list-disc list-inside space-y-1 text-sm font-mono">
            <li>ℒ{'{1}'} = 1/s</li>
            <li>ℒ{'{'}tⁿ{'}'} = n! / sⁿ⁺¹</li>
            <li>ℒ{'{'}eᵃᵗ{'}'} = 1 / (s - a)</li>
            <li>ℒ{'{'}cos(at){'}'} = s / (s² + a²)</li>
            <li>ℒ{'{'}sin(at){'}'} = a / (s² + a²)</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}


// ====== END OF FILE: LaplaceTransformCalculator.tsx ======
==================================================

// ====== START OF FILE: LaplaceTransformCalculatorCommonFunctions.tsx ======
// File converted from TSX to TXT
// Original size: 6.21 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, FunctionSquare } from "lucide-react";

// Common Laplace Transform pairs
const commonTransforms: Record<string, { f_t: string, F_s: string, needs_param: string | null }> = {
  'constant': { f_t: 'c', F_s: 'c/s', needs_param: 'c' },
  't': { f_t: 't', F_s: '1/s²', needs_param: null },
  't_n': { f_t: 'tⁿ', F_s: 'n!/sⁿ⁺¹', needs_param: 'n' },
  'exp_at': { f_t: 'eᵃᵗ', F_s: '1/(s-a)', needs_param: 'a' },
  'sin_at': { f_t: 'sin(at)', F_s: 'a/(s²+a²)', needs_param: 'a' },
  'cos_at': { f_t: 'cos(at)', F_s: 's/(s²+a²)', needs_param: 'a' },
  'sinh_at': { f_t: 'sinh(at)', F_s: 'a/(s²-a²)', needs_param: 'a' },
  'cosh_at': { f_t: 'cosh(at)', F_s: 's/(s²-a²)', needs_param: 'a' },
};

export default function LaplaceTransformCalculatorCommonFunctions() {
  const [selectedFunction, setSelectedFunction] = useState<string>('exp_at');
  const [parameter, setParameter] = useState<string>('2');
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTransform = () => {
    setError(null);
    setResult(null);
    const transformData = commonTransforms[selectedFunction];
    if (!transformData) {
      setError("Please select a function from the list.");
      return;
    }

    if (transformData.needs_param) {
      const paramValue = parseFloat(parameter);
      if (isNaN(paramValue)) {
        setError(`Please enter a valid numeric value for the parameter '${transformData.needs_param}'.`);
        return;
      }
      // Replace placeholder with the actual parameter value
      const resultString = transformData.F_s.replace(new RegExp(transformData.needs_param, 'g'), paramValue.toString());
      if (transformData.needs_param === 'n') {
          // factorial calculation for t^n
          const n = paramValue;
          if(!Number.isInteger(n) || n < 0) {
              setError("For tⁿ, the parameter 'n' must be a non-negative integer for this simplified factorial calculation.");
              return;
          }
          const factorial = (num: number): number => {
              if (num === 0 || num === 1) return 1;
              let res = 1;
              for(let i=2; i<=num; i++) res *= i;
              return res;
          };
          const factN = factorial(n);
          setResult(transformData.F_s.replace('n!', factN.toString()).replace(/n/g, n.toString()));
      } else {
        setResult(resultString);
      }
    } else {
      setResult(transformData.F_s);
    }
  };

  const resetForm = () => {
    setSelectedFunction('exp_at');
    setParameter('2');
    setResult(null);
    setError(null);
  };
  
  const currentFunctionData = commonTransforms[selectedFunction];

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Laplace Transform Calculator (Common Functions)</AlertTitle>
        <AlertDescription>
          Find the Laplace Transform for common functions using a lookup table. This tool does not perform symbolic integration.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Select a function and enter its parameter if required.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="functionSelect">Function f(t)</Label>
              <Select value={selectedFunction} onValueChange={(v: string) => setSelectedFunction(v)}>
                <SelectTrigger id="functionSelect">
                  <SelectValue placeholder="Select a function..." />
                </SelectTrigger>
                <SelectContent>
                  {Object.entries(commonTransforms).map(([key, { f_t }]) => (
                    <SelectItem key={key} value={key}>{f_t}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            {currentFunctionData && currentFunctionData.needs_param && (
              <div>
                <Label htmlFor="parameterInput">Parameter '{currentFunctionData.needs_param}' Value</Label>
                <Input
                  id="parameterInput"
                  type="number"
                  value={parameter}
                  onChange={(e) => setParameter(e.target.value)}
                  placeholder={`Enter value for ${currentFunctionData.needs_param}`}
                />
              </div>
            )}
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateTransform}>Transform</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Laplace Transform F(s)</CardDescription>
            </CardHeader>
            <CardContent>
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {result && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">F(s) = L{"{"}{currentFunctionData.f_t}{"}"}</p>
                    <p className="text-2xl font-bold text-primary">{result}</p>
                  </div>
                  <CopyButton textToCopy={result} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: LaplaceTransformCalculatorCommonFunctions.tsx ======
==================================================

// ====== START OF FILE: LeanBodyMassCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.29 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, UserRoundCheck } from "lucide-react";

// LBM = Body Weight - Fat Mass
// Fat Mass = Body Weight * (Body Fat Percentage / 100)
// This requires body fat percentage as an input.

export default function LeanBodyMassCalculator() {
  const [bodyWeight, setBodyWeight] = useState<string>('');
  const [bodyFatPercentage, setBodyFatPercentage] = useState<string>('');
  const [weightUnit, setWeightUnit] = useState<'kg' | 'lb'>('kg');

  const [leanBodyMass, setLeanBodyMass] = useState<string | null>(null);
  const [fatMass, setFatMass] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateLbm = () => {
    setError(null);
    setLeanBodyMass(null);
    setFatMass(null);

    const weight = parseFloat(bodyWeight);
    const bfp = parseFloat(bodyFatPercentage);

    if (isNaN(weight) || weight <= 0 || isNaN(bfp) || bfp < 0 || bfp >= 100) {
      setError('Please enter a valid positive body weight and a body fat percentage (0-99.9).');
      return;
    }

    const calculatedFatMass = weight * (bfp / 100);
    const calculatedLbm = weight - calculatedFatMass;

    setFatMass(`${calculatedFatMass.toFixed(1)} ${weightUnit}`);
    setLeanBodyMass(`${calculatedLbm.toFixed(1)} ${weightUnit}`);
  };

  const resetForm = () => {
    setBodyWeight('');
    setBodyFatPercentage('');
    setLeanBodyMass(null);
    setFatMass(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Lean Body Mass (LBM) Calculator</AlertTitle>
        <AlertDescription>
          Estimate your Lean Body Mass, which is your body weight minus body fat. You'll need your body weight and an estimated body fat percentage.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your measurements.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="bodyWeightLbm">Body Weight</Label>
                <Input id="bodyWeightLbm" type="number" value={bodyWeight} onChange={(e) => setBodyWeight(e.target.value)} placeholder="e.g., 70 or 154" />
              </div>
              <div>
                <Label htmlFor="weightUnitLbm">Unit</Label>
                <Select value={weightUnit} onValueChange={(value: 'kg' | 'lb') => setWeightUnit(value)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="kg">Kilograms (kg)</SelectItem>
                    <SelectItem value="lb">Pounds (lb)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div>
              <Label htmlFor="bodyFatPercentageLbm">Body Fat Percentage (%)</Label>
              <Input id="bodyFatPercentageLbm" type="number" value={bodyFatPercentage} onChange={(e) => setBodyFatPercentage(e.target.value)} placeholder="e.g., 15" />
              <p className="text-xs text-muted-foreground mt-1">Use our Body Fat Calculator or other methods for an estimate.</p>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateLbm}>Calculate LBM</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(leanBodyMass || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Results</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {fatMass && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Estimated Fat Mass</p>
                  <div className="flex justify-between items-center"><p className="font-semibold">{fatMass}</p><CopyButton textToCopy={fatMass} size="icon" variant="ghost"/></div>
                </div>
              )}
              {leanBodyMass && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Estimated Lean Body Mass</p>
                  <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{leanBodyMass}</p><CopyButton textToCopy={leanBodyMass} size="icon" variant="ghost" className="text-primary"/></div>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: LeanBodyMassCalculator.tsx ======
==================================================

// ====== START OF FILE: LeaseCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.02 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Car } from "lucide-react"; // Using Car icon for vehicle lease

export default function LeaseCalculator() {
  const [vehiclePrice, setVehiclePrice] = useState<string>(''); // MSRP or Negotiated Price
  const [downPaymentLease, setDownPaymentLease] = useState<string>('0');
  const [tradeInValueLease, setTradeInValueLease] = useState<string>('0');
  const [residualValuePercent, setResidualValuePercent] = useState<string>(''); // As percentage of MSRP
  const [leaseTermMonths, setLeaseTermMonths] = useState<string>('36');
  const [moneyFactor, setMoneyFactor] = useState<string>(''); // e.g., 0.00125 (APR = Money Factor * 2400)
  const [salesTaxRate, setSalesTaxRate] = useState<string>('0'); // Percentage

  const [estimatedMonthlyPayment, setEstimatedMonthlyPayment] = useState<string | null>(null);
  const [totalLeaseCost, setTotalLeaseCost] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateLeasePayment = () => {
    setError(null);
    setEstimatedMonthlyPayment(null);
    setTotalLeaseCost(null);

    const price = parseFloat(vehiclePrice);
    const dp = parseFloat(downPaymentLease);
    const tradeIn = parseFloat(tradeInValueLease);
    const residualPercent = parseFloat(residualValuePercent) / 100;
    const term = parseInt(leaseTermMonths);
    const mf = parseFloat(moneyFactor); // Example: 0.00125
    const tax = parseFloat(salesTaxRate) / 100;

    if (isNaN(price) || price <= 0 || isNaN(dp) || dp < 0 || isNaN(tradeIn) || tradeIn < 0 || isNaN(residualPercent) || residualPercent <= 0 || residualPercent >= 1 || isNaN(term) || term <= 0 || isNaN(mf) || mf <= 0 || isNaN(tax) || tax < 0) {
      setError('Please enter valid positive numbers for all fields. Down payment, trade-in, and sales tax can be zero.');
      return;
    }

    const capCost = price - dp - tradeIn;
    const residualVal = price * residualPercent; // Residual value is often based on MSRP, here simplified to price
    const depreciation = capCost - residualVal;
    const baseMonthlyDepreciation = depreciation / term;

    const rentCharge = (capCost + residualVal) * mf;
    const preTaxMonthlyPayment = baseMonthlyDepreciation + rentCharge;
    const monthlySalesTax = preTaxMonthlyPayment * tax;
    const finalMonthlyPayment = preTaxMonthlyPayment + monthlySalesTax;

    setEstimatedMonthlyPayment(finalMonthlyPayment.toFixed(2));
    setTotalLeaseCost((finalMonthlyPayment * term + dp).toFixed(2)); // Simplified: doesn't include fees, acquisition etc.
  };

  const resetForm = () => {
    setVehiclePrice(''); setDownPaymentLease('0'); setTradeInValueLease('0');
    setResidualValuePercent(''); setLeaseTermMonths('36'); setMoneyFactor(''); setSalesTaxRate('0');
    setEstimatedMonthlyPayment(null); setTotalLeaseCost(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Lease Payment Estimator (Simplified)</AlertTitle>
        <AlertDescription>
          Estimate your monthly car lease payment. This is a simplified calculation and does not include all potential fees (e.g., acquisition fee, disposition fee, mileage overages, or local taxes beyond sales tax on payment). Money Factor is like an interest rate (APR ≈ Money Factor × 2400).
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter lease and vehicle details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="vehiclePrice">Vehicle Price (MSRP/Negotiated) ($)</Label><Input id="vehiclePrice" type="number" value={vehiclePrice} onChange={(e) => setVehiclePrice(e.target.value)} placeholder="e.g., 35000"/></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="downPaymentLease">Down Payment ($)</Label><Input id="downPaymentLease" type="number" value={downPaymentLease} onChange={(e) => setDownPaymentLease(e.target.value)} placeholder="e.g., 2000"/></div>
              <div><Label htmlFor="tradeInValueLease">Trade-in Value ($)</Label><Input id="tradeInValueLease" type="number" value={tradeInValueLease} onChange={(e) => setTradeInValueLease(e.target.value)} placeholder="e.g., 5000"/></div>
            </div>
            <div><Label htmlFor="residualValuePercent">Residual Value (% of Price)</Label><Input id="residualValuePercent" type="number" value={residualValuePercent} onChange={(e) => setResidualValuePercent(e.target.value)} placeholder="e.g., 55 (for 55%)"/></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="leaseTermMonths">Lease Term (Months)</Label><Input id="leaseTermMonths" type="number" value={leaseTermMonths} onChange={(e) => setLeaseTermMonths(e.target.value)} placeholder="e.g., 36"/></div>
              <div><Label htmlFor="moneyFactor">Money Factor</Label><Input id="moneyFactor" type="number" step="0.00001" value={moneyFactor} onChange={(e) => setMoneyFactor(e.target.value)} placeholder="e.g., 0.00125"/></div>
            </div>
            <div><Label htmlFor="salesTaxRate">Sales Tax Rate on Payment (%)</Label><Input id="salesTaxRate" type="number" value={salesTaxRate} onChange={(e) => setSalesTaxRate(e.target.value)} placeholder="e.g., 7"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateLeasePayment}>Estimate Payment</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(estimatedMonthlyPayment || error) && (
          <Card>
            <CardHeader><CardDescription>Lease Estimation Results</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {estimatedMonthlyPayment && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Est. Monthly Payment (incl. tax)</p><p className="text-2xl font-bold text-primary">${estimatedMonthlyPayment}</p></div>
                  <CopyButton textToCopy={estimatedMonthlyPayment} />
                </div>
              )}
              {totalLeaseCost && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Est. Total Lease Cost (Payments + DP)</p><p className="font-semibold">${totalLeaseCost}</p></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: LeaseCalculator.tsx ======
==================================================

// ====== START OF FILE: LedResistorCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.44 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Lightbulb } from "lucide-react";

export default function LedResistorCalculator() {
  const [sourceVoltage, setSourceVoltage] = useState<string>(''); // Volts
  const [ledForwardVoltage, setLedForwardVoltage] = useState<string>(''); // Volts
  const [ledForwardCurrent, setLedForwardCurrent] = useState<string>(''); // Milliamperes (mA)

  const [resistorValue, setResistorValue] = useState<string | null>(null); // Ohms
  const [resistorPower, setResistorPower] = useState<string | null>(null); // Watts
  const [error, setError] = useState<string | null>(null);

  const calculateResistor = () => {
    setError(null);
    setResistorValue(null);
    setResistorPower(null);

    const Vs = parseFloat(sourceVoltage);
    const Vf = parseFloat(ledForwardVoltage);
    const If_mA = parseFloat(ledForwardCurrent);

    if (isNaN(Vs) || Vs <= 0 || isNaN(Vf) || Vf < 0 || isNaN(If_mA) || If_mA <= 0) {
      setError('Please enter valid positive numbers for all fields. LED Forward Voltage can be zero for some calculations but generally positive.');
      return;
    }
    if (Vf >= Vs) {
      setError('Source voltage must be greater than LED forward voltage.');
      return;
    }

    const If_A = If_mA / 1000; // Convert mA to Amperes
    const R_ohms = (Vs - Vf) / If_A;
    const P_watts = (Vs - Vf) * If_A;

    setResistorValue(R_ohms.toFixed(2));
    setResistorPower(P_watts.toFixed(3)); // Often small, more precision needed
  };

  const resetForm = () => {
    setSourceVoltage('');
    setLedForwardVoltage('');
    setLedForwardCurrent('');
    setResistorValue(null);
    setResistorPower(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>LED Resistor Calculation</AlertTitle>
        <AlertDescription>
          Calculate the required resistor value and power rating for an LED. Ensure your LED's specifications are correct. Choose a resistor with a power rating comfortably above the calculated value (e.g., 2x).
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter LED and source parameters.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="sourceVoltage">Source Voltage (Vs) - Volts</Label><Input id="sourceVoltage" type="number" value={sourceVoltage} onChange={(e) => setSourceVoltage(e.target.value)} placeholder="e.g., 5 or 12" /></div>
            <div><Label htmlFor="ledForwardVoltage">LED Forward Voltage (Vf) - Volts</Label><Input id="ledForwardVoltage" type="number" value={ledForwardVoltage} onChange={(e) => setLedForwardVoltage(e.target.value)} placeholder="e.g., 2.2 (Red), 3.3 (Blue/White)" /></div>
            <div><Label htmlFor="ledForwardCurrent">LED Forward Current (If) - Milliamperes (mA)</Label><Input id="ledForwardCurrent" type="number" value={ledForwardCurrent} onChange={(e) => setLedForwardCurrent(e.target.value)} placeholder="e.g., 20" /></div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateResistor}>Calculate Resistor</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(resistorValue || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Resistor Values</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {resistorValue && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Required Resistor Value</p>
                  <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{resistorValue} Ω (Ohms)</p><CopyButton textToCopy={resistorValue} size="sm" variant="ghost"/></div>
                  <p className="text-xs text-muted-foreground mt-1">Choose the nearest standard resistor value available that is equal to or greater than this.</p>
                </div>
              )}
              {resistorPower && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Minimum Resistor Power Rating</p>
                  <div className="flex justify-between items-center"><p className="font-semibold">{resistorPower} W (Watts)</p><CopyButton textToCopy={resistorPower} size="sm" variant="ghost"/></div>
                   <p className="text-xs text-muted-foreground mt-1">Select a resistor with a power rating well above this (e.g., 1/4W, 1/2W).</p>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: LedResistorCalculator.tsx ======
==================================================

// ====== START OF FILE: LinearRegressionCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.71 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, LineChart } from "lucide-react";

interface Point { x: number; y: number; }

export default function LinearRegressionCalculator() {
  const [dataPointsInput, setDataPointsInput] = useState<string>(''); // e.g., "1,2; 2,3; 3,5; 4,4"
  
  const [slope, setSlope] = useState<string | null>(null); // m
  const [intercept, setIntercept] = useState<string | null>(null); // b
  const [correlationR, setCorrelationR] = useState<string | null>(null); // r
  const [rSquared, setRSquared] = useState<string | null>(null); // R²
  const [equation, setEquation] = useState<string | null>(null); // y = mx + b
  const [error, setError] = useState<string | null>(null);

  const parseDataPoints = (input: string): Point[] | null => {
    try {
      return input.split(';').map(pairStr => {
        const parts = pairStr.split(',').map(s => parseFloat(s.trim()));
        if (parts.length !== 2 || parts.some(isNaN)) throw new Error("Invalid point format.");
        return { x: parts[0], y: parts[1] };
      }).filter(p => p !== null);
    } catch { return null; }
  };

  const calculateLinearRegression = () => {
    setError(null); setSlope(null); setIntercept(null); setCorrelationR(null); setRSquared(null); setEquation(null);
    const points = parseDataPoints(dataPointsInput);
    if (!points || points.length < 2) {
      setError("Please enter at least two valid data points (x,y pairs separated by ';', e.g., 1,2; 3,4).");
      return;
    }

    const n = points.length;
    let sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0, sumY2 = 0;
    points.forEach(p => {
      sumX += p.x; sumY += p.y; sumXY += p.x * p.y; sumX2 += p.x * p.x; sumY2 += p.y * p.y;
    });

    // Slope (m) = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX^2)
    const m_numerator = (n * sumXY) - (sumX * sumY);
    const m_denominator = (n * sumX2) - (sumX * sumX);
    if (m_denominator === 0) { setError("Cannot calculate slope (denominator is zero, vertical line or single X value)."); return; }
    const m_slope = m_numerator / m_denominator;
    setSlope(m_slope.toFixed(4));

    // Intercept (b) = (sumY - m * sumX) / n
    const b_intercept = (sumY - m_slope * sumX) / n;
    setIntercept(b_intercept.toFixed(4));
    setEquation(`y = ${m_slope.toFixed(4)}x ${b_intercept >= 0 ? '+' : '-'} ${Math.abs(b_intercept).toFixed(4)}`);

    // Correlation coefficient (r)
    const r_numerator = (n * sumXY) - (sumX * sumY);
    const r_den1 = Math.sqrt((n * sumX2) - (sumX * sumX));
    const r_den2 = Math.sqrt((n * sumY2) - (sumY * sumY));
    if (r_den1 === 0 || r_den2 === 0) {
        setCorrelationR("N/A (cannot calculate r, variance is zero in X or Y)");
        setRSquared("N/A");
    } else {
        const r_corr = r_numerator / (r_den1 * r_den2);
        setCorrelationR(r_corr.toFixed(4));
        setRSquared((r_corr * r_corr).toFixed(4)); // R-squared
    }
  };

  const resetForm = () => {
    setDataPointsInput('');
    setSlope(null); setIntercept(null); setCorrelationR(null); setRSquared(null); setEquation(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Linear Regression Calculator</AlertTitle><AlertDescription>Calculate the line of best fit (y = mx + b), correlation coefficient (r), and R-squared for a set of bivariate data points.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter data points (x,y pairs).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="dataPointsLR">Data Points (x,y pairs separated by ';')</Label><Textarea id="dataPointsLR" value={dataPointsInput} onChange={e=>setDataPointsInput(e.target.value)} placeholder="e.g., 1,2.5; 2,3.1; 3,4.5; 4,5.2" rows={5}/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateLinearRegression}>Calculate Regression</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(slope || error) && (
          <Card>
            <CardHeader><CardDescription>Regression Results</CardDescription></CardHeader>
            <CardContent className="space-y-2 text-sm">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {slope && (<div className="p-1 bg-muted rounded-md">Slope (m): <strong className="font-semibold">{slope}</strong></div>)}
              {intercept && (<div className="p-1 bg-muted rounded-md">Y-Intercept (b): <strong className="font-semibold">{intercept}</strong></div>)}
              {equation && (<div className="p-1 bg-primary/10 rounded-md">Equation: <strong className="font-semibold text-primary">{equation}</strong> <CopyButton textToCopy={equation} size="icon" variant="ghost" className="h-5 w-5 inline-flex"/></div>)}
              {correlationR && (<div className="p-1 bg-muted rounded-md">Correlation (r): <strong className="font-semibold">{correlationR}</strong></div>)}
              {rSquared && (<div className="p-1 bg-muted rounded-md">R-squared (R²): <strong className="font-semibold">{rSquared}</strong> (Coefficient of Determination)</div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: LinearRegressionCalculator.tsx ======
==================================================

// ====== START OF FILE: LineSlopeAndPropertiesCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.78 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, TrendingUp } from "lucide-react";

export default function LineSlopeAndPropertiesCalculator() {
  const [x1, setX1] = useState<string>('');
  const [y1, setY1] = useState<string>('');
  const [x2, setX2] = useState<string>('');
  const [y2, setY2] = useState<string>('');

  const [slope, setSlope] = useState<string | null>(null);
  const [equation, setEquation] = useState<string | null>(null); // y = mx + c
  const [error, setError] = useState<string | null>(null);

  const calculateSlope = () => {
    setError(null);
    setSlope(null);
    setEquation(null);

    const numX1 = parseFloat(x1);
    const numY1 = parseFloat(y1);
    const numX2 = parseFloat(x2);
    const numY2 = parseFloat(y2);

    if (isNaN(numX1) || isNaN(numY1) || isNaN(numX2) || isNaN(numY2)) {
      setError('Please enter valid numbers for all coordinates (x1, y1, x2, y2).');
      return;
    }

    if (numX2 - numX1 === 0) {
      setError('Slope is undefined (vertical line, x2 - x1 = 0).');
      setSlope("Undefined (Vertical Line)");
      setEquation(`x = ${numX1}`);
      return;
    }

    const m = (numY2 - numY1) / (numX2 - numX1);
    setSlope(m.toFixed(4));

    // Calculate y-intercept (c) for y = mx + c  => c = y - mx
    const c = numY1 - m * numX1;
    setEquation(`y = ${m.toFixed(4)}x ${c >= 0 ? '+' : '-'} ${Math.abs(c).toFixed(4)}`);
  };

  const resetForm = () => {
    setX1(''); setY1(''); setX2(''); setY2('');
    setSlope(null); setEquation(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Line Slope & Properties Calculator</AlertTitle>
        <AlertDescription>
          Calculate the slope (m) and equation (y = mx + c) of a line given two points (x₁, y₁) and (x₂, y₂).
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter coordinates of two points.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="x1">Point 1: X₁</Label><Input id="x1" type="number" value={x1} onChange={(e) => setX1(e.target.value)} placeholder="e.g., 1"/></div>
              <div><Label htmlFor="y1">Point 1: Y₁</Label><Input id="y1" type="number" value={y1} onChange={(e) => setY1(e.target.value)} placeholder="e.g., 2"/></div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="x2">Point 2: X₂</Label><Input id="x2" type="number" value={x2} onChange={(e) => setX2(e.target.value)} placeholder="e.g., 3"/></div>
              <div><Label htmlFor="y2">Point 2: Y₂</Label><Input id="y2" type="number" value={y2} onChange={(e) => setY2(e.target.value)} placeholder="e.g., 8"/></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateSlope}>Calculate Slope</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(slope || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Line Properties</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {slope && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Slope (m)</p>
                  <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{slope}</p><CopyButton textToCopy={slope} size="sm" variant="ghost"/></div>
                </div>
              )}
              {equation && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Equation of the Line</p>
                  <div className="flex justify-between items-center"><p className="font-semibold">{equation}</p><CopyButton textToCopy={equation} size="sm" variant="ghost"/></div>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
    

// ====== END OF FILE: LineSlopeAndPropertiesCalculator.tsx ======
==================================================

// ====== START OF FILE: LoanComparisonCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.1 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, GitCompareArrows } from "lucide-react";

interface LoanDetails {
  monthlyPayment: string;
  totalRepayment: string;
  totalInterest: string;
}

export default function LoanComparisonCalculator() {
  // Loan 1 States
  const [loanAmount1, setLoanAmount1] = useState<string>('');
  const [interestRate1, setInterestRate1] = useState<string>('');
  const [termMonths1, setTermMonths1] = useState<string>('');
  const [loan1Details, setLoan1Details] = useState<LoanDetails | null>(null);

  // Loan 2 States
  const [loanAmount2, setLoanAmount2] = useState<string>('');
  const [interestRate2, setInterestRate2] = useState<string>('');
  const [termMonths2, setTermMonths2] = useState<string>('');
  const [loan2Details, setLoan2Details] = useState<LoanDetails | null>(null);
  
  const [error, setError] = useState<string | null>(null);

  const calculateLoanDetails = (amountStr: string, rateStr: string, termStr: string): LoanDetails | {error: string} => {
    const P = parseFloat(amountStr);
    const annualRate = parseFloat(rateStr) / 100;
    const N = parseInt(termStr);

    if (isNaN(P) || P <= 0 || isNaN(annualRate) || annualRate < 0 || isNaN(N) || N <= 0) {
      return {error: 'Valid positive loan amount, non-negative rate, and positive term required.'};
    }
    const monthlyRate = annualRate / 12;
    let M;
    if (monthlyRate === 0) M = P / N;
    else M = P * (monthlyRate * Math.pow(1 + monthlyRate, N)) / (Math.pow(1 + monthlyRate, N) - 1);
    
    if (isNaN(M) || !isFinite(M)) return {error: 'Could not calculate payment.'};
    const totalRepayment = M * N;
    const totalInterest = totalRepayment - P;
    return { monthlyPayment: M.toFixed(2), totalRepayment: totalRepayment.toFixed(2), totalInterest: totalInterest.toFixed(2) };
  };

  const compareLoans = () => {
    setError(null); setLoan1Details(null); setLoan2Details(null);
    const details1 = calculateLoanDetails(loanAmount1, interestRate1, termMonths1);
    const details2 = calculateLoanDetails(loanAmount2, interestRate2, termMonths2);

    if ('error' in details1) { setError(`Loan 1: ${details1.error}`); return; }
    setLoan1Details(details1);
    if ('error' in details2) { setError(`Loan 2: ${details2.error}`); return; }
    setLoan2Details(details2);
  };

  const resetForm = () => {
    setLoanAmount1(''); setInterestRate1(''); setTermMonths1(''); setLoan1Details(null);
    setLoanAmount2(''); setInterestRate2(''); setTermMonths2(''); setLoan2Details(null);
    setError(null);
  };
  
  const renderLoanInputCard = (title: string, amount: string, setAmount: Function, rate: string, setRate: Function, term: string, setTerm: Function, details: LoanDetails | null) => (
    <Card>
      <CardHeader><CardTitle className="font-headline">{title}</CardTitle></CardHeader>
      <CardContent className="space-y-3">
        <div><Label>Loan Amount ($)</Label><Input type="number" value={amount} onChange={e=>setAmount(e.target.value)}/></div>
        <div><Label>Interest Rate (%)</Label><Input type="number" value={rate} onChange={e=>setRate(e.target.value)}/></div>
        <div><Label>Term (Months)</Label><Input type="number" value={term} onChange={e=>setTerm(e.target.value)}/></div>
        {details && (
          <div className="mt-3 pt-3 border-t text-sm space-y-1">
            <p>Monthly Payment: <strong className="text-primary">${details.monthlyPayment}</strong></p>
            <p>Total Interest: <strong className="text-primary">${details.totalInterest}</strong></p>
            <p>Total Repayment: <strong className="text-primary">${details.totalRepayment}</strong></p>
          </div>
        )}
      </CardContent>
    </Card>
  );

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Loan Comparison Calculator</AlertTitle><AlertDescription>Compare two loan options by their monthly payment, total interest, and total repayment. Does not include fees or taxes.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {renderLoanInputCard("Loan Option 1", loanAmount1, setLoanAmount1, interestRate1, setInterestRate1, termMonths1, setTermMonths1, loan1Details)}
        {renderLoanInputCard("Loan Option 2", loanAmount2, setLoanAmount2, interestRate2, setInterestRate2, termMonths2, setTermMonths2, loan2Details)}
      </div>
      {error && (<Alert variant="destructive" className="mt-4"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
      <div className="flex justify-center gap-4 mt-6">
        <Button onClick={compareLoans}>Compare Loans</Button>
        <Button variant="outline" onClick={resetForm}>Reset All</Button>
      </div>
       {loan1Details && loan2Details && (
        <Card className="mt-6">
          <CardHeader><CardTitle className="font-headline">Comparison Summary</CardTitle></CardHeader>
          <CardContent>
            <p>
              Loan 1 Monthly Payment: <strong className="text-primary">${loan1Details.monthlyPayment}</strong> vs. 
              Loan 2 Monthly Payment: <strong className="text-primary">${loan2Details.monthlyPayment}</strong>
            </p>
            <p className="mt-1">
              Difference in Monthly Payment: 
              <strong className={parseFloat(loan1Details.monthlyPayment) <= parseFloat(loan2Details.monthlyPayment) ? "text-green-600" : "text-red-600"}>
                ${(Math.abs(parseFloat(loan1Details.monthlyPayment) - parseFloat(loan2Details.monthlyPayment))).toFixed(2)}
              </strong>
              {parseFloat(loan1Details.monthlyPayment) < parseFloat(loan2Details.monthlyPayment) ? " (Loan 1 is cheaper monthly)" : parseFloat(loan1Details.monthlyPayment) > parseFloat(loan2Details.monthlyPayment) ? " (Loan 2 is cheaper monthly)" : " (Same monthly cost)"}
            </p>
            <p className="mt-3">
              Loan 1 Total Interest: <strong className="text-primary">${loan1Details.totalInterest}</strong> vs. 
              Loan 2 Total Interest: <strong className="text-primary">${loan2Details.totalInterest}</strong>
            </p>
             <p className="mt-1">
              Difference in Total Interest Paid: 
              <strong className={parseFloat(loan1Details.totalInterest) <= parseFloat(loan2Details.totalInterest) ? "text-green-600" : "text-red-600"}>
                ${(Math.abs(parseFloat(loan1Details.totalInterest) - parseFloat(loan2Details.totalInterest))).toFixed(2)}
              </strong>
               {parseFloat(loan1Details.totalInterest) < parseFloat(loan2Details.totalInterest) ? " (Loan 1 costs less interest)" : parseFloat(loan1Details.totalInterest) > parseFloat(loan2Details.totalInterest) ? " (Loan 2 costs less interest)" : " (Same total interest)"}
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
    

// ====== END OF FILE: LoanComparisonCalculator.tsx ======
==================================================

// ====== START OF FILE: LoanPaymentCalculatorPmt.tsx ======
// File converted from TSX to TXT
// Original size: 5.14 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, WalletCards } from "lucide-react";

// This calculator uses the standard PMT formula for loan payments.
// PMT = P * [r(1+r)^n] / [(1+r)^n-1]

export default function LoanPaymentCalculatorPmt() {
  const [loanAmount, setLoanAmount] = useState<string>('');
  const [interestRate, setInterestRate] = useState<string>(''); // Annual %
  const [loanTermMonths, setLoanTermMonths] = useState<string>('');
  
  const [monthlyPayment, setMonthlyPayment] = useState<string | null>(null);
  const [totalRepayment, setTotalRepayment] = useState<string | null>(null);
  const [totalInterest, setTotalInterest] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePayment = () => {
    setError(null);
    setMonthlyPayment(null);
    setTotalRepayment(null);
    setTotalInterest(null);

    const P = parseFloat(loanAmount);
    const annualRate = parseFloat(interestRate) / 100;
    const N = parseInt(loanTermMonths);

    if (isNaN(P) || P <= 0 || isNaN(annualRate) || annualRate < 0 || isNaN(N) || N <= 0) {
      setError('Please enter valid positive numbers for loan amount, interest rate, and term (months).');
      return;
    }

    const monthlyRate = annualRate / 12;
    let M; // Monthly Payment

    if (monthlyRate === 0) { // 0% interest
        M = P / N;
    } else {
        // Standard loan payment formula: M = P * [r(1+r)^N] / [(1+r)^N-1]
        M = P * (monthlyRate * Math.pow(1 + monthlyRate, N)) / (Math.pow(1 + monthlyRate, N) - 1);
    }
    
    if (isNaN(M) || !isFinite(M)) {
        setError('Could not calculate monthly payment. Check your inputs, especially for very long terms or high rates.');
        return;
    }

    const calculatedTotalRepayment = M * N;
    const calculatedTotalInterest = calculatedTotalRepayment - P;

    setMonthlyPayment(M.toFixed(2));
    setTotalRepayment(calculatedTotalRepayment.toFixed(2));
    setTotalInterest(calculatedTotalInterest.toFixed(2));
  };
  
  const resetForm = () => {
    setLoanAmount('');
    setInterestRate('');
    setLoanTermMonths('');
    setMonthlyPayment(null);
    setTotalRepayment(null);
    setTotalInterest(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Loan Payment Calculator (PMT)</AlertTitle><AlertDescription>Estimate monthly payments for a loan using the standard PMT formula.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter loan details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="loanAmountPmt">Loan Amount ($)</Label><Input id="loanAmountPmt" type="number" value={loanAmount} onChange={(e) => setLoanAmount(e.target.value)} placeholder="e.g., 20000"/></div>
            <div><Label htmlFor="interestRatePmt">Annual Interest Rate (%)</Label><Input id="interestRatePmt" type="number" value={interestRate} onChange={(e) => setInterestRate(e.target.value)} placeholder="e.g., 5.5"/></div>
            <div><Label htmlFor="loanTermMonthsPmt">Loan Term (Months)</Label><Input id="loanTermMonthsPmt" type="number" value={loanTermMonths} onChange={(e) => setLoanTermMonths(e.target.value)} placeholder="e.g., 60"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePayment}>Calculate Payment</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(monthlyPayment || error) && (
          <Card>
            <CardHeader><CardDescription>Loan Payment Estimates</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {monthlyPayment && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Monthly Payment</p><p className="text-2xl font-bold text-primary">${monthlyPayment}</p></div>
                  <CopyButton textToCopy={monthlyPayment} />
                </div>
              )}
              {totalRepayment && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Repayment</p><p className="font-semibold">${totalRepayment}</p></div>)}
              {totalInterest && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Interest Paid</p><p className="font-semibold">${totalInterest}</p></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: LoanPaymentCalculatorPmt.tsx ======
==================================================

// ====== START OF FILE: LogarithmCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.86 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, SigmaSquare } from "lucide-react"; // SigmaSquare as a generic math icon

export default function LogarithmCalculator() {
  const [baseLog, setBaseLog] = useState<string>('10');
  const [numberLogarithm, setNumberLogarithm] = useState<string>('');

  const [logResult, setLogResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateLogarithm = () => {
    setError(null);
    setLogResult(null);

    const base = parseFloat(baseLog);
    const num = parseFloat(numberLogarithm);

    if (isNaN(base) || base <= 0 || base === 1) {
      setError('Base must be a positive number and not equal to 1.');
      return;
    }
    if (isNaN(num) || num <= 0) {
      setError('Number must be a positive value for logarithm calculation.');
      return;
    }

    // log_b(x) = ln(x) / ln(b)
    const result = Math.log(num) / Math.log(base);

    if (isNaN(result) || !isFinite(result)) {
        setError("Could not calculate logarithm. Check input values.");
        return;
    }
    setLogResult(result.toPrecision(10));
  };

  const resetForm = () => {
    setBaseLog('10');
    setNumberLogarithm('');
    setLogResult(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Logarithm Calculator (log<sub>b</sub>(x))</AlertTitle>
        <AlertDescription>
          Calculate the logarithm of a number (x) to a specified base (b).
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter the number and the base.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="numberLogarithm">Number (x)</Label>
              <Input id="numberLogarithm" type="number" value={numberLogarithm} onChange={(e) => setNumberLogarithm(e.target.value)} placeholder="e.g., 1000" />
            </div>
            <div>
              <Label htmlFor="baseLog">Base (b)</Label>
              <Input id="baseLog" type="number" value={baseLog} onChange={(e) => setBaseLog(e.target.value)} placeholder="e.g., 10 or 2 or e (2.718...)" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateLogarithm}>Calculate log<sub>b</sub>(x)</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(logResult || error) && (
          <Card>
            <CardHeader><CardDescription>Logarithm Result</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {logResult && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">log<sub>{baseLog}</sub>({numberLogarithm})</p>
                  <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary break-all">{logResult}</p><CopyButton textToCopy={logResult} size="icon" variant="ghost" className="text-primary"/></div>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: LogarithmCalculator.tsx ======
==================================================

// ====== START OF FILE: LogCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.75 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, FunctionSquare } from "lucide-react";

export default function LogCalculator() {
  const [numberLog, setNumberLog] = useState<string>('');

  const [naturalLog, setNaturalLog] = useState<string | null>(null); // ln(x)
  const [base10Log, setBase10Log] = useState<string | null>(null); // log10(x)
  const [error, setError] = useState<string | null>(null);

  const calculateLogs = () => {
    setError(null);
    setNaturalLog(null);
    setBase10Log(null);

    const num = parseFloat(numberLog);

    if (isNaN(num) || num <= 0) {
      setError('Please enter a valid positive number for logarithm calculation.');
      return;
    }

    const lnResult = Math.log(num);
    const log10Result = Math.log10(num);

    setNaturalLog(lnResult.toPrecision(10));
    setBase10Log(log10Result.toPrecision(10));
  };

  const resetForm = () => {
    setNumberLog('');
    setNaturalLog(null);
    setBase10Log(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Logarithm Calculator (ln, log₁₀)</AlertTitle>
        <AlertDescription>
          Calculate the natural logarithm (ln) and base-10 logarithm (log₁₀) of a positive number.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter a positive number.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="numberLog">Number (x)</Label>
              <Input id="numberLog" type="number" value={numberLog} onChange={(e) => setNumberLog(e.target.value)} placeholder="e.g., 100 or 2.718" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateLogs}>Calculate Logs</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(naturalLog || base10Log || error) && (
          <Card>
            <CardHeader><CardDescription>Logarithm Results</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {naturalLog && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Natural Log (ln({numberLog}))</p>
                  <div className="flex justify-between items-center"><p className="font-semibold break-all">{naturalLog}</p><CopyButton textToCopy={naturalLog} size="icon" variant="ghost"/></div>
                </div>
              )}
              {base10Log && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Base-10 Log (log₁₀({numberLog}))</p>
                  <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary break-all">{base10Log}</p><CopyButton textToCopy={base10Log} size="icon" variant="ghost" className="text-primary"/></div>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: LogCalculator.tsx ======
==================================================

// ====== START OF FILE: LongDivisionCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.26 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Divide } from "lucide-react";

export default function LongDivisionCalculator() {
  const [dividend, setDividend] = useState<string>('');
  const [divisor, setDivisor] = useState<string>('');

  const [quotient, setQuotient] = useState<string | null>(null);
  const [remainder, setRemainder] = useState<string | null>(null);
  const [steps, setSteps] = useState<string | null>(null); // For visual steps
  const [error, setError] = useState<string | null>(null);

  const performLongDivision = () => {
    setError(null);
    setQuotient(null);
    setRemainder(null);
    setSteps(null);

    const numDividend = parseInt(dividend);
    const numDivisor = parseInt(divisor);

    if (isNaN(numDividend) || isNaN(numDivisor)) {
      setError('Please enter valid integers for both dividend and divisor.');
      return;
    }
    if (numDivisor === 0) {
      setError('Divisor cannot be zero.');
      return;
    }
    if (numDivisor < 0 || numDividend < 0) {
        setError('This simplified calculator currently supports positive integers only for long division visualization.');
        return;
    }


    const Q = Math.floor(numDividend / numDivisor);
    const R = numDividend % numDivisor;

    setQuotient(Q.toString());
    setRemainder(R.toString());

    // Visualizing long division steps algorithmically is very complex for a UI.
    // This will be a placeholder.
    setSteps(`Visual representation of long division steps for ${dividend} ÷ ${divisor} is complex to generate dynamically in this manner.\n\nResult:\nQuotient = ${Q}\nRemainder = ${R}\n\nSo, ${dividend} = ${Q} × ${divisor} + ${R}`);
  };

  const resetForm = () => {
    setDividend('');
    setDivisor('');
    setQuotient(null);
    setRemainder(null);
    setSteps(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Simplified Tool - Placeholder for Steps</AlertTitle>
        <AlertDescription>
          This calculator provides the quotient and remainder for integer division. <strong className="font-semibold">Displaying the step-by-step long division process visually is highly complex and is not fully implemented here.</strong>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Perform long division for two integers.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="dividend">Dividend (Number to be divided)</Label>
              <Input id="dividend" type="number" value={dividend} onChange={(e) => setDividend(e.target.value)} placeholder="e.g., 125" />
            </div>
            <div>
              <Label htmlFor="divisor">Divisor (Number to divide by)</Label>
              <Input id="divisor" type="number" value={divisor} onChange={(e) => setDivisor(e.target.value)} placeholder="e.g., 5" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={performLongDivision}>Calculate</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(quotient !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Division Result</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {quotient !== null && remainder !== null && (
                <>
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Quotient</p>
                  <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{quotient}</p><CopyButton textToCopy={quotient} size="sm" variant="ghost"/></div>
                </div>
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Remainder</p>
                  <div className="flex justify-between items-center"><p className="font-semibold">{remainder}</p><CopyButton textToCopy={remainder} size="sm" variant="ghost"/></div>
                </div>
                </>
              )}
              {steps && (
                <div className="mt-4">
                  <Label className="text-sm font-semibold">Steps (Conceptual):</Label>
                  <Textarea value={steps} readOnly rows={8} className="mt-1 font-mono text-xs bg-background/50"/>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: LongDivisionCalculator.tsx ======
==================================================

// ====== START OF FILE: LootBoxDropRateCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.51 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Gift } from "lucide-react";

export default function LootBoxDropRateCalculator() {
  const [dropRatePercent, setDropRatePercent] = useState<string>(''); // e.g., 1 for 1%
  const [numAttempts, setNumAttempts] = useState<string>(''); // e.g., 100 boxes opened

  const [probAtLeastOne, setProbAtLeastOne] = useState<string | null>(null);
  const [probExactlyOne, setProbExactlyOne] = useState<string | null>(null); // More complex, binomial
  const [error, setError] = useState<string | null>(null);

  // Binomial coefficient: C(n, k) = n! / (k! * (n-k)!)
  const combinations = (n: number, k: number): number => {
    if (k < 0 || k > n) return 0;
    if (k === 0 || k === n) return 1;
    if (k > n / 2) k = n - k; // Symmetry
    let res = 1;
    for (let i = 1; i <= k; i++) {
      res = res * (n - i + 1) / i;
    }
    return res;
  };

  const calculateProbabilities = () => {
    setError(null);
    setProbAtLeastOne(null);
    setProbExactlyOne(null);

    const pDrop = parseFloat(dropRatePercent) / 100; // Convert percentage to decimal
    const n = parseInt(numAttempts);

    if (isNaN(pDrop) || pDrop <= 0 || pDrop >= 1 || isNaN(n) || n <= 0) {
      setError('Please enter a valid drop rate (0-99.99%) and a positive number of attempts.');
      return;
    }

    // Probability of NOT getting the item in one attempt
    const qNotDrop = 1 - pDrop;

    // Probability of NOT getting the item in N attempts
    const probNotGettingAny = Math.pow(qNotDrop, n);

    // Probability of getting AT LEAST ONE item in N attempts
    const probGettingAtLeastOne = 1 - probNotGettingAny;
    setProbAtLeastOne((probGettingAtLeastOne * 100).toFixed(4));

    // Probability of getting EXACTLY ONE item in N attempts (Binomial Probability)
    // P(X=k) = C(n, k) * p^k * q^(n-k)  where k=1
    const probGettingExactlyOne = combinations(n, 1) * Math.pow(pDrop, 1) * Math.pow(qNotDrop, n - 1);
    setProbExactlyOne((probGettingExactlyOne * 100).toFixed(4));

  };

  const resetForm = () => {
    setDropRatePercent('');
    setNumAttempts('');
    setProbAtLeastOne(null);
    setProbExactlyOne(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Loot Box Drop Rate Probabilities</AlertTitle>
        <AlertDescription>
          Estimate the probability of obtaining a specific item from loot boxes or similar chance-based mechanics. Assumes independent attempts.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter item drop rate and number of attempts.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="dropRatePercent">Item Drop Rate (%)</Label>
              <Input id="dropRatePercent" type="number" value={dropRatePercent} onChange={(e) => setDropRatePercent(e.target.value)} placeholder="e.g., 1 (for 1%)" />
            </div>
            <div>
              <Label htmlFor="numAttempts">Number of Attempts (e.g., Boxes Opened)</Label>
              <Input id="numAttempts" type="number" value={numAttempts} onChange={(e) => setNumAttempts(e.target.value)} placeholder="e.g., 100" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateProbabilities}>Calculate Probabilities</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(probAtLeastOne || error) && (
          <Card>
            <CardHeader><CardDescription>Probability Results</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {probAtLeastOne && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Prob. of Getting at Least One Item</p>
                  <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{probAtLeastOne}%</p><CopyButton textToCopy={probAtLeastOne} size="sm" variant="ghost"/></div>
                </div>
              )}
               {probExactlyOne && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Prob. of Getting Exactly One Item</p>
                  <div className="flex justify-between items-center"><p className="font-semibold">{probExactlyOne}%</p><CopyButton textToCopy={probExactlyOne} size="sm" variant="ghost"/></div>
                </div>
              )}
              <AlertDescription className="text-xs pt-2">
                These are statistical probabilities. Actual outcomes can vary. "Gambler's fallacy" means past failures don't increase future odds per attempt.
              </AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: LootBoxDropRateCalculator.tsx ======
==================================================

// ====== START OF FILE: LoveCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.52 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Heart } from "lucide-react";
import { Progress } from "@/components/ui/progress";

export default function LoveCalculator() {
  const [name1, setName1] = useState<string>('');
  const [name2, setName2] = useState<string>('');

  const [lovePercentage, setLovePercentage] = useState<number | null>(null);
  const [compatibilityMessage, setCompatibilityMessage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateLove = () => {
    setError(null);
    setLovePercentage(null);
    setCompatibilityMessage(null);

    if (name1.trim() === '' || name2.trim() === '') {
      setError('Please enter both names.');
      return;
    }

    // Simple "for fun" algorithm: sum ASCII values of names, use modulo.
    // This is NOT scientific or real in any way.
    const name1Lower = name1.toLowerCase();
    const name2Lower = name2.toLowerCase();

    let sum1 = 0;
    for (let i = 0; i < name1Lower.length; i++) {
      sum1 += name1Lower.charCodeAt(i);
    }

    let sum2 = 0;
    for (let i = 0; i < name2Lower.length; i++) {
      sum2 += name2Lower.charCodeAt(i);
    }
    
    // Ensure names are different to avoid 100% for same name, or add more sophisticated logic
    let percentage = (sum1 + sum2 + name1Lower.length * name2Lower.length) % 101; // 0-100
    
    // Add a bit more "randomness" based on length difference and first letters
    percentage += (Math.abs(name1Lower.length - name2Lower.length) * 3);
    percentage += (Math.abs(name1Lower.charCodeAt(0) - name2Lower.charCodeAt(0)) % 7);
    
    // Introduce a small random factor to make it seem less deterministic for the same input
    const randomFactor = Math.floor(Math.random() * 10) - 5; // -5 to +5
    percentage += randomFactor;

    // Ensure percentage is within 0-100 bounds
    percentage = Math.max(20, Math.min(99, percentage)); // Let's make it fun, usually not below 20 or above 99

    setLovePercentage(percentage);

    if (percentage > 85) setCompatibilityMessage("Wow! A match made in heaven! ✨");
    else if (percentage > 70) setCompatibilityMessage("Looking very promising! Strong connection. ❤️");
    else if (percentage > 50) setCompatibilityMessage("Good potential! Worth exploring. 😊");
    else if (percentage > 30) setCompatibilityMessage("Could be a spark, or maybe just good friends. 🤔");
    else setCompatibilityMessage("Hmm, maybe it's friendship vibes? 🤷");
  };

  const resetForm = () => {
    setName1('');
    setName2('');
    setLovePercentage(null);
    setCompatibilityMessage(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="default" className="bg-pink-50 dark:bg-pink-900/30 border-pink-200 dark:border-pink-700 text-pink-700 dark:text-pink-300 [&>svg]:text-pink-500">
        <Heart className="h-4 w-4" />
        <AlertTitle className="font-semibold">For Fun Only!</AlertTitle>
        <AlertDescription>
          This Love Calculator is for entertainment purposes only. Real compatibility is about much more than names! Enjoy the fun. 💕
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter two names to see their "love compatibility".</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="name1">First Name</Label>
              <Input id="name1" value={name1} onChange={(e) => setName1(e.target.value)} placeholder="e.g., Alex" />
            </div>
            <div>
              <Label htmlFor="name2">Second Name</Label>
              <Input id="name2" value={name2} onChange={(e) => setName2(e.target.value)} placeholder="e.g., Jamie" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateLove} className="bg-pink-500 hover:bg-pink-600 text-white">Calculate Love 💕</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(lovePercentage !== null || error) && (
          <Card>
            <CardHeader><CardDescription>Compatibility Result</CardDescription></CardHeader>
            <CardContent className="space-y-4 text-center">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {lovePercentage !== null && (
                <>
                  <div className="text-5xl font-bold text-pink-500 my-4">{lovePercentage}%</div>
                  <Progress value={lovePercentage} className="w-full h-3 [&>div]:bg-pink-500" />
                  {compatibilityMessage && <p className="text-lg italic text-muted-foreground mt-4">{compatibilityMessage}</p>}
                  <CopyButton textToCopy={`${name1} & ${name2} = ${lovePercentage}% Love! ${compatibilityMessage}`} buttonText="Share Result" className="mt-4" />
                </>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: LoveCalculator.tsx ======
==================================================

// ====== START OF FILE: MacroCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.45 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Slider } from '@/components/ui/slider';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Apple } from "lucide-react";

interface Macros {
  proteinGrams: number;
  carbGrams: number;
  fatGrams: number;
  proteinCalories: number;
  carbCalories: number;
  fatCalories: number;
}

export default function MacroCalculator() {
  const [totalCalories, setTotalCalories] = useState<string>('2000');
  // Percentages, must sum to 100
  const [proteinPercent, setProteinPercent] = useState<number>(30);
  const [carbPercent, setCarbPercent] = useState<number>(40);
  const [fatPercent, setFatPercent] = useState<number>(30);

  const [macros, setMacros] = useState<Macros | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleSliderChange = (type: 'protein' | 'carb' | 'fat', value: number) => {
    let p = proteinPercent, c = carbPercent, f = fatPercent;
    if (type === 'protein') {
      p = value;
      const remaining = 100 - p;
      // Adjust carbs and fats proportionally to their current ratio if possible
      // or split remaining, for simplicity splitting:
      if (c + f > 0) {
        const oldCarbRatio = c / (c + f);
        c = Math.round(remaining * oldCarbRatio);
        f = remaining - c;
      } else { // if c and f were 0
        c = Math.round(remaining / 2);
        f = remaining - c;
      }
    } else if (type === 'carb') {
      c = value;
      const remaining = 100 - c;
      if (p + f > 0) {
        const oldProteinRatio = p / (p + f);
        p = Math.round(remaining * oldProteinRatio);
        f = remaining - p;
      } else {
        p = Math.round(remaining / 2);
        f = remaining - p;
      }
    } else { // fat
      f = value;
      const remaining = 100 - f;
      if (p + c > 0) {
        const oldProteinRatio = p / (p + c);
        p = Math.round(remaining * oldProteinRatio);
        c = remaining - p;
      } else {
        p = Math.round(remaining / 2);
        c = remaining - p;
      }
    }
    // Ensure sum is 100 due to rounding
    const sum = p + c + f;
    if (sum !== 100) {
        // adjust one of them, e.g., carbs
        c = c + (100-sum);
    }

    setProteinPercent(p);
    setCarbPercent(c);
    setFatPercent(f);
  };

  const calculateMacros = () => {
    setError(null);
    setMacros(null);

    const calories = parseInt(totalCalories);
    if (isNaN(calories) || calories <= 0) {
      setError('Please enter valid positive total daily calories.');
      return;
    }
    const sumPercent = proteinPercent + carbPercent + fatPercent;
    if (sumPercent !== 100) { // Should be handled by sliders, but good check
      setError(`Macro percentages must sum to 100. Current sum: ${sumPercent}%. Please adjust.`);
      return;
    }

    const proteinCal = calories * (proteinPercent / 100);
    const carbCal = calories * (carbPercent / 100);
    const fatCal = calories * (fatPercent / 100);

    const proteinG = proteinCal / 4; // 4 calories per gram of protein
    const carbG = carbCal / 4;     // 4 calories per gram of carbohydrate
    const fatG = fatCal / 9;       // 9 calories per gram of fat

    setMacros({
      proteinGrams: parseFloat(proteinG.toFixed(1)),
      carbGrams: parseFloat(carbG.toFixed(1)),
      fatGrams: parseFloat(fatG.toFixed(1)),
      proteinCalories: parseFloat(proteinCal.toFixed(0)),
      carbCalories: parseFloat(carbCal.toFixed(0)),
      fatCalories: parseFloat(fatCal.toFixed(0)),
    });
  };

  const resetForm = () => {
    setTotalCalories('2000');
    setProteinPercent(30); setCarbPercent(40); setFatPercent(30);
    setMacros(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Macronutrient Calculator</AlertTitle>
        <AlertDescription>
          Estimate your daily macronutrient needs (protein, carbohydrates, fat) based on your total calorie intake and desired percentage breakdown. Consult a nutritionist for personalized advice.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="md:col-span-2">
          <CardHeader><CardDescription>Set your calorie goal and macro percentages.</CardDescription></CardHeader>
          <CardContent className="space-y-6">
            <div><Label htmlFor="totalCaloriesMacro">Total Daily Calories (kcal)</Label><Input id="totalCaloriesMacro" type="number" value={totalCalories} onChange={(e) => setTotalCalories(e.target.value)} placeholder="e.g., 2000" /></div>
            
            <div><Label>Protein: {proteinPercent}%</Label><Slider defaultValue={[proteinPercent]} value={[proteinPercent]} max={100} step={1} onValueChange={(val) => handleSliderChange('protein', val[0])} /></div>
            <div><Label>Carbohydrates: {carbPercent}%</Label><Slider defaultValue={[carbPercent]} value={[carbPercent]} max={100} step={1} onValueChange={(val) => handleSliderChange('carb', val[0])} /></div>
            <div><Label>Fat: {fatPercent}%</Label><Slider defaultValue={[fatPercent]} value={[fatPercent]} max={100} step={1} onValueChange={(val) => handleSliderChange('fat', val[0])} /></div>
            <p className="text-xs text-muted-foreground">Total: {proteinPercent + carbPercent + fatPercent}% (Adjust sliders to ensure sum is 100%)</p>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateMacros}>Calculate Macros</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        <Card className="md:col-span-1">
          <CardHeader><CardDescription>Macronutrient Breakdown</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {macros && (
              <>
                <div className="p-2 bg-blue-500/10 rounded-md">
                  <p className="text-sm text-blue-700 dark:text-blue-400">Protein</p>
                  <p className="font-semibold">{macros.proteinGrams}g ({macros.proteinCalories} kcal)</p>
                </div>
                <div className="p-2 bg-green-500/10 rounded-md">
                  <p className="text-sm text-green-700 dark:text-green-400">Carbohydrates</p>
                  <p className="font-semibold">{macros.carbGrams}g ({macros.carbCalories} kcal)</p>
                </div>
                <div className="p-2 bg-yellow-500/10 rounded-md">
                  <p className="text-sm text-yellow-700 dark:text-yellow-400">Fat</p>
                  <p className="font-semibold">{macros.fatGrams}g ({macros.fatCalories} kcal)</p>
                </div>
                 <CopyButton 
                    textToCopy={`Protein: ${macros.proteinGrams}g, Carbs: ${macros.carbGrams}g, Fat: ${macros.fatGrams}g (Total ${totalCalories} kcal)`} 
                    buttonText="Copy Macros" 
                    className="w-full mt-2"
                 />
              </>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: MacroCalculator.tsx ======
==================================================

// ====== START OF FILE: MacroCyclingCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.92 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Apple } from "lucide-react";

interface MacroSet {
  protein: string;
  carbs: string;
  fat: string;
}

export default function MacroCyclingCalculator() {
  const [trainingDayCalories, setTrainingDayCalories] = useState<string>('');
  const [restDayCalories, setRestDayCalories] = useState<string>('');
  const [trainingDaysPerWeek, setTrainingDaysPerWeek] = useState<string>('4');
  
  // Percentages
  const [proteinPercentTrain, setProteinPercentTrain] = useState<string>('30');
  const [carbPercentTrain, setCarbPercentTrain] = useState<string>('50');
  const [fatPercentTrain, setFatPercentTrain] = useState<string>('20');
  
  const [proteinPercentRest, setProteinPercentRest] = useState<string>('35');
  const [carbPercentRest, setCarbPercentRest] = useState<string>('25');
  const [fatPercentRest, setFatPercentRest] = useState<string>('40');

  const [trainingDayMacros, setTrainingDayMacros] = useState<MacroSet | null>(null);
  const [restDayMacros, setRestDayMacros] = useState<MacroSet | null>(null);
  const [weeklyTotals, setWeeklyTotals] = useState<MacroSet | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateMacros = () => {
    setError(null);
    setTrainingDayMacros(null); setRestDayMacros(null); setWeeklyTotals(null);

    const trainCals = parseFloat(trainingDayCalories);
    const restCals = parseFloat(restDayCalories);
    const trainDays = parseInt(trainingDaysPerWeek);
    const restDays = 7 - trainDays;

    if (isNaN(trainCals) || trainCals < 0 || isNaN(restCals) || restCals < 0 || isNaN(trainDays) || trainDays < 0 || trainDays > 7) {
      setError("Please enter valid calories and number of training days (0-7).");
      return;
    }
    
    const pTrain = parseFloat(proteinPercentTrain)/100, cTrain = parseFloat(carbPercentTrain)/100, fTrain = parseFloat(fatPercentTrain)/100;
    const pRest = parseFloat(proteinPercentRest)/100, cRest = parseFloat(carbPercentRest)/100, fRest = parseFloat(fatPercentRest)/100;
    
    if (Math.round((pTrain+cTrain+fTrain)*100) !== 100 || Math.round((pRest+cRest+fRest)*100) !== 100) {
        setError("Macro percentages for each day type must sum to 100%.");
        return;
    }

    const trainMacros = {
      protein: ((trainCals * pTrain) / 4).toFixed(0),
      carbs: ((trainCals * cTrain) / 4).toFixed(0),
      fat: ((trainCals * fTrain) / 9).toFixed(0)
    };
    setTrainingDayMacros(trainMacros);

    const restMacros = {
      protein: ((restCals * pRest) / 4).toFixed(0),
      carbs: ((restCals * cRest) / 4).toFixed(0),
      fat: ((restCals * fRest) / 9).toFixed(0)
    };
    setRestDayMacros(restMacros);

    const weekly = {
        protein: ((parseFloat(trainMacros.protein) * trainDays) + (parseFloat(restMacros.protein) * restDays)).toFixed(0),
        carbs: ((parseFloat(trainMacros.carbs) * trainDays) + (parseFloat(restMacros.carbs) * restDays)).toFixed(0),
        fat: ((parseFloat(trainMacros.fat) * trainDays) + (parseFloat(restMacros.fat) * restDays)).toFixed(0),
    }
    setWeeklyTotals(weekly);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Macro Cycling Calculator</AlertTitle><AlertDescription>Plan your macronutrient intake for training days and rest days. Set calorie goals and macro splits for each day type to see your daily and weekly targets.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your calorie and macro split details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <Label>Calories & Schedule</Label>
            <div className="grid grid-cols-3 gap-2">
                <Input type="number" value={trainingDayCalories} onChange={e => setTrainingDayCalories(e.target.value)} placeholder="Training Day Cals"/>
                <Input type="number" value={restDayCalories} onChange={e => setRestDayCalories(e.target.value)} placeholder="Rest Day Cals"/>
                <Input type="number" value={trainingDaysPerWeek} onChange={e => setTrainingDaysPerWeek(e.target.value)} placeholder="# Training Days"/>
            </div>
            <Label>Training Day Macros (%)</Label>
            <div className="grid grid-cols-3 gap-2">
                <Input type="number" value={proteinPercentTrain} onChange={e => setProteinPercentTrain(e.target.value)} placeholder="Protein %"/>
                <Input type="number" value={carbPercentTrain} onChange={e => setCarbPercentTrain(e.target.value)} placeholder="Carb %"/>
                <Input type="number" value={fatPercentTrain} onChange={e => setFatPercentTrain(e.target.value)} placeholder="Fat %"/>
            </div>
             <Label>Rest Day Macros (%)</Label>
            <div className="grid grid-cols-3 gap-2">
                <Input type="number" value={proteinPercentRest} onChange={e => setProteinPercentRest(e.target.value)} placeholder="Protein %"/>
                <Input type="number" value={carbPercentRest} onChange={e => setCarbPercentRest(e.target.value)} placeholder="Carb %"/>
                <Input type="number" value={fatPercentRest} onChange={e => setFatPercentRest(e.target.value)} placeholder="Fat %"/>
            </div>
          </CardContent>
          <CardFooter><Button onClick={calculateMacros} className="w-full">Calculate Macro Plan</Button></CardFooter>
        </Card>
        
        <Card>
          <CardHeader><CardDescription>Your Macro Plan (grams/day)</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && <Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>}
            {trainingDayMacros && <>
              <CardTitle className="font-headline text-lg">Training Days</CardTitle>
              <div className="grid grid-cols-3 gap-2 text-center p-2 bg-muted rounded-md">
                <div><Label className="text-xs">Protein</Label><p className="font-bold">{trainingDayMacros.protein}g</p></div>
                <div><Label className="text-xs">Carbs</Label><p className="font-bold">{trainingDayMacros.carbs}g</p></div>
                <div><Label className="text-xs">Fat</Label><p className="font-bold">{trainingDayMacros.fat}g</p></div>
              </div>
            </>}
            {restDayMacros && <>
              <CardTitle className="font-headline text-lg pt-2">Rest Days</CardTitle>
              <div className="grid grid-cols-3 gap-2 text-center p-2 bg-muted rounded-md">
                <div><Label className="text-xs">Protein</Label><p className="font-bold">{restDayMacros.protein}g</p></div>
                <div><Label className="text-xs">Carbs</Label><p className="font-bold">{restDayMacros.carbs}g</p></div>
                <div><Label className="text-xs">Fat</Label><p className="font-bold">{restDayMacros.fat}g</p></div>
              </div>
            </>}
            {weeklyTotals && <>
              <CardTitle className="font-headline text-lg pt-2">Weekly Totals</CardTitle>
              <div className="grid grid-cols-3 gap-2 text-center p-2 bg-primary/10 rounded-md">
                <div><Label className="text-xs">Protein</Label><p className="font-bold text-primary">{weeklyTotals.protein}g</p></div>
                <div><Label className="text-xs">Carbs</Label><p className="font-bold text-primary">{weeklyTotals.carbs}g</p></div>
                <div><Label className="text-xs">Fat</Label><p className="font-bold text-primary">{weeklyTotals.fat}g</p></div>
              </div>
            </>}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: MacroCyclingCalculator.tsx ======
==================================================

// ====== START OF FILE: MagneticFieldStrengthCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.6 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Magnet } from "lucide-react";

type FieldSource = 'straight_wire' | 'solenoid_center';
const MU_0 = 4 * Math.PI * 1e-7; // Permeability of free space (T·m/A)

export default function MagneticFieldStrengthCalculator() {
  const [sourceType, setSourceType] = useState<FieldSource>('straight_wire');
  const [current, setCurrent] = useState<string>(''); // Amperes (A)
  const [distanceOrTurns, setDistanceOrTurns] = useState<string>(''); // meters for wire, turns/meter for solenoid
  const [solenoidLength, setSolenoidLength] = useState<string>(''); // meters, only for solenoid if turns are total

  const [magneticField, setMagneticField] = useState<string | null>(null); // Tesla (T)
  const [error, setError] = useState<string | null>(null);

  const calculateField = () => {
    setError(null); setMagneticField(null);
    const I = parseFloat(current);
    const val2 = parseFloat(distanceOrTurns); // r for wire, n (turns/length) for solenoid
    const L_solenoid = parseFloat(solenoidLength); // For solenoid if 'distanceOrTurns' is total turns

    if (isNaN(I) || I === 0) { setError('Current (I) must be a non-zero number.'); return; }
    if (isNaN(val2) || val2 <= 0) { setError(sourceType==='straight_wire' ? 'Distance (r) must be positive.' : 'Turns per meter (n) or total turns must be positive.'); return; }

    let B: number;
    if (sourceType === 'straight_wire') { // B = μ₀I / 2πr
      const r = val2; // distance in meters
      B = (MU_0 * I) / (2 * Math.PI * r);
    } else { // Solenoid center B = μ₀nI
      let n_turns_per_meter = val2;
      if(!isNaN(L_solenoid) && L_solenoid > 0) { // If length provided, assume val2 is total turns
          n_turns_per_meter = val2 / L_solenoid;
      } else if (L_solenoid && (isNaN(L_solenoid) || L_solenoid <=0)) {
          setError('Solenoid length must be positive if total turns are provided.'); return;
      }
      B = MU_0 * n_turns_per_meter * I;
    }

    if (isNaN(B) || !isFinite(B)) { setError('Calculation resulted in an invalid number.'); return; }
    setMagneticField(B.toExponential(4));
  };

  const resetForm = () => {
    setCurrent(''); setDistanceOrTurns(''); setSolenoidLength('');
    setMagneticField(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Magnetic Field Strength (Simplified)</AlertTitle><AlertDescription>Estimate magnetic field (B) for a long straight wire or center of a long solenoid. Uses μ₀ = 4π×10⁻⁷ T·m/A.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter parameters.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="mfSourceType">Field Source</Label><Select value={sourceType} onValueChange={(v:FieldSource)=>{setSourceType(v);resetForm();}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="straight_wire">Long Straight Wire</SelectItem><SelectItem value="solenoid_center">Center of Long Solenoid</SelectItem></SelectContent></Select></div>
            <div><Label htmlFor="mfCurrent">Current (I) - Amperes</Label><Input id="mfCurrent" type="number" value={current} onChange={e=>setCurrent(e.target.value)} placeholder="e.g., 10"/></div>
            {sourceType==='straight_wire' && (<div><Label htmlFor="mfDistance">Distance from Wire (r) - meters</Label><Input id="mfDistance" type="number" value={distanceOrTurns} onChange={e=>setDistanceOrTurns(e.target.value)} placeholder="e.g., 0.01"/></div>)}
            {sourceType==='solenoid_center' && (<>
              <div><Label htmlFor="mfTurns">Turns per Meter (n) OR Total Turns (N)</Label><Input id="mfTurns" type="number" value={distanceOrTurns} onChange={e=>setDistanceOrTurns(e.target.value)} placeholder="e.g., 1000 (for n) or 500 (for N)"/></div>
              <div><Label htmlFor="mfSolenoidLength">Solenoid Length (L) - meters (If N entered above)</Label><Input id="mfSolenoidLength" type="number" value={solenoidLength} onChange={e=>setSolenoidLength(e.target.value)} placeholder="e.g., 0.5 (optional)"/></div>
            </>)}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateField}>Calculate Field (B)</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(magneticField || error) && (
          <Card>
            <CardHeader><CardDescription>Magnetic Field Strength (B)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {magneticField && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Magnetic Field (B)</p><p className="text-2xl font-bold text-primary">{magneticField} Tesla (T)</p></div><CopyButton textToCopy={magneticField}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
    

// ====== END OF FILE: MagneticFieldStrengthCalculator.tsx ======
==================================================

// ====== START OF FILE: MagneticFieldWireCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.3 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Magnet } from "lucide-react";

// Magnetic field of a long straight wire: B = μ₀I / 2πr
const MU_0 = 4 * Math.PI * 1e-7; // Permeability of free space (T·m/A)

export default function MagneticFieldWireCalculator() {
  const [current, setCurrent] = useState<string>(''); // Amperes (A)
  const [distance, setDistance] = useState<string>(''); // meters (r)

  const [magneticField, setMagneticField] = useState<string | null>(null); // Tesla (T)
  const [error, setError] = useState<string | null>(null);

  const calculateField = () => {
    setError(null);
    setMagneticField(null);
    const I = parseFloat(current);
    const r = parseFloat(distance);

    if (isNaN(I) || I === 0) { // Current can be negative, so don't check for I < 0
      setError('Current (I) must be a non-zero number.');
      return;
    }
    if (isNaN(r) || r <= 0) {
      setError('Distance from wire (r) must be a positive number.');
      return;
    }

    const B = (MU_0 * I) / (2 * Math.PI * r);

    if (isNaN(B) || !isFinite(B)) {
      setError("Calculation resulted in an invalid number. Check inputs.");
      return;
    }
    setMagneticField(B.toExponential(4)); // Use scientific notation for small values
  };

  const resetForm = () => {
    setCurrent('');
    setDistance('');
    setMagneticField(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Magnetic Field of a Long Straight Wire</AlertTitle>
        <AlertDescription>
          Estimate the magnetic field (B) at a perpendicular distance (r) from a long, straight, current-carrying wire. Uses Ampere's Law.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter wire and distance parameters.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="mfCurrentWire">Current (I) - Amperes</Label>
              <Input id="mfCurrentWire" type="number" value={current} onChange={e => setCurrent(e.target.value)} placeholder="e.g., 10" />
            </div>
            <div>
              <Label htmlFor="mfDistanceWire">Distance from Wire (r) - meters</Label>
              <Input id="mfDistanceWire" type="number" value={distance} onChange={e => setDistance(e.target.value)} placeholder="e.g., 0.01" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateField}>Calculate Field (B)</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>
        {(magneticField || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Magnetic Field Strength (B)</CardDescription>
            </CardHeader>
            <CardContent>
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {magneticField && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Magnetic Field (B)</p>
                    <p className="text-2xl font-bold text-primary">{magneticField} Tesla (T)</p>
                  </div>
                  <CopyButton textToCopy={magneticField} />
                </div>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">Based on Ampere's Law: B = μ₀I / 2πr</p>
            </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: MagneticFieldWireCalculator.tsx ======
==================================================

// ====== START OF FILE: MarathonTrainingPaceCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.07 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Timer } from "lucide-react";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";

interface PaceZone {
  name: string;
  pacePerMile: string;
  pacePerKm: string;
}

export default function MarathonTrainingPaceCalculator() {
  const [targetHours, setTargetHours] = useState<string>('');
  const [targetMinutes, setTargetMinutes] = useState<string>('');
  const [targetSeconds, setTargetSeconds] = useState<string>('');

  const [paceZones, setPaceZones] = useState<PaceZone[]>([]);
  const [marathonPace, setMarathonPace] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  // VDOT based percentages (approximate) - simplified
  const paceZoneFactors = {
    easy: 1.20, // ~75-85% of Marathon Pace effort, pace will be slower
    marathon: 1.0,
    threshold: 0.92, // ~88-92% of 10k pace, or faster than MP
    interval: 0.85, // ~VO2 Max pace
    repetition: 0.78, // Faster than VO2 Max
  };

  const formatPace = (secondsPerUnit: number): string => {
    if (isNaN(secondsPerUnit) || !isFinite(secondsPerUnit) || secondsPerUnit <=0) return "N/A";
    const minutes = Math.floor(secondsPerUnit / 60);
    const seconds = Math.round(secondsPerUnit % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  const calculatePaces = () => {
    setError(null);
    setPaceZones([]);
    setMarathonPace(null);

    const hours = parseInt(targetHours) || 0;
    const minutes = parseInt(targetMinutes) || 0;
    const seconds = parseInt(targetSeconds) || 0;

    const totalSecondsMarathon = (hours * 3600) + (minutes * 60) + seconds;
    if (totalSecondsMarathon <= 0) {
      setError('Please enter a valid target marathon time.');
      return;
    }

    const marathonDistanceMiles = 26.21875;
    const marathonDistanceKm = 42.195;

    const secondsPerMileMarathon = totalSecondsMarathon / marathonDistanceMiles;
    const secondsPerKmMarathon = totalSecondsMarathon / marathonDistanceKm;
    
    setMarathonPace(`Race Pace: ${formatPace(secondsPerMileMarathon)}/mile | ${formatPace(secondsPerKmMarathon)}/km`);

    const zones: PaceZone[] = [
      { name: "Easy / Long Run", pacePerMile: formatPace(secondsPerMileMarathon * paceZoneFactors.easy), pacePerKm: formatPace(secondsPerKmMarathon * paceZoneFactors.easy) },
      { name: "Marathon Pace", pacePerMile: formatPace(secondsPerMileMarathon * paceZoneFactors.marathon), pacePerKm: formatPace(secondsPerKmMarathon * paceZoneFactors.marathon) },
      { name: "Threshold / Tempo Run", pacePerMile: formatPace(secondsPerMileMarathon * paceZoneFactors.threshold), pacePerKm: formatPace(secondsPerKmMarathon * paceZoneFactors.threshold) },
      { name: "Interval (VO2 Max)", pacePerMile: formatPace(secondsPerMileMarathon * paceZoneFactors.interval), pacePerKm: formatPace(secondsPerKmMarathon * paceZoneFactors.interval) },
      { name: "Repetition / Speed Work", pacePerMile: formatPace(secondsPerMileMarathon * paceZoneFactors.repetition), pacePerKm: formatPace(secondsPerKmMarathon * paceZoneFactors.repetition) },
    ];
    setPaceZones(zones);
  };
  
  const resetForm = () => {
    setTargetHours(''); setTargetMinutes(''); setTargetSeconds('');
    setPaceZones([]); setMarathonPace(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Marathon Training Paces</AlertTitle><AlertDescription>Estimate your training paces based on a target marathon finish time. These are general guidelines; individual paces may vary.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Enter your target marathon time.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <Label>Target Marathon Time</Label>
            <div className="grid grid-cols-3 gap-2">
              <Input type="number" value={targetHours} onChange={(e) => setTargetHours(e.target.value)} placeholder="HH" aria-label="Hours"/>
              <Input type="number" value={targetMinutes} onChange={(e) => setTargetMinutes(e.target.value)} placeholder="MM" aria-label="Minutes"/>
              <Input type="number" value={targetSeconds} onChange={(e) => setTargetSeconds(e.target.value)} placeholder="SS" aria-label="Seconds"/>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePaces}>Calculate Paces</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        <Card className="lg:col-span-2">
          <CardHeader><CardDescription>Recommended Training Paces</CardDescription></CardHeader>
          <CardContent>
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {marathonPace && <p className="font-semibold mb-4">{marathonPace}</p>}
            {paceZones.length > 0 && (
              <Table>
                <TableHeader><TableRow><TableHead>Zone</TableHead><TableHead>Pace/Mile</TableHead><TableHead>Pace/Km</TableHead></TableRow></TableHeader>
                <TableBody>
                  {paceZones.map(zone => (
                    <TableRow key={zone.name}>
                      <TableCell>{zone.name}</TableCell>
                      <TableCell>{zone.pacePerMile}</TableCell>
                      <TableCell>{zone.pacePerKm}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: MarathonTrainingPaceCalculator.tsx ======
==================================================

// ====== START OF FILE: MarginCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.5 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, BadgePercent } from "lucide-react";

export default function MarginCalculator() {
  const [cost, setCost] = useState<string>(''); // Cost of Goods Sold (COGS)
  const [revenue, setRevenue] = useState<string>(''); // Selling Price

  const [grossProfit, setGrossProfit] = useState<string | null>(null);
  const [grossMarginPercent, setGrossMarginPercent] = useState<string | null>(null);
  const [markupPercent, setMarkupPercent] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateMargin = () => {
    setError(null);
    setGrossProfit(null);
    setGrossMarginPercent(null);
    setMarkupPercent(null);

    const cogs = parseFloat(cost);
    const rev = parseFloat(revenue);

    if (isNaN(cogs) || cogs < 0 || isNaN(rev) || rev < 0) {
      setError('Please enter valid non-negative numbers for cost and revenue.');
      return;
    }
    if (rev < cogs && rev !==0) { // Revenue can be less than cost (loss)
        // Allow this, profit will be negative
    }
     if (rev === 0 && cogs > 0) {
        setError("Revenue cannot be zero if cost is positive for meaningful margin calculation.");
        return;
    }


    const profit = rev - cogs;
    setGrossProfit(profit.toFixed(2));

    if (rev > 0) {
      const margin = (profit / rev) * 100;
      setGrossMarginPercent(margin.toFixed(2));
    } else {
      setGrossMarginPercent(profit === 0 ? "0.00" : "N/A (Revenue is zero)");
    }
    
    if (cogs > 0) {
        const markup = (profit / cogs) * 100;
        setMarkupPercent(markup.toFixed(2));
    } else {
        setMarkupPercent(rev > 0 ? "Infinite" : "N/A (Cost is zero)");
    }

  };

  const resetForm = () => {
    setCost('');
    setRevenue('');
    setGrossProfit(null);
    setGrossMarginPercent(null);
    setMarkupPercent(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Profit Margin Calculator</AlertTitle>
        <AlertDescription>
          Calculate Gross Profit, Gross Profit Margin (%), and Markup (%) based on cost and revenue.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter cost and revenue figures.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="cost">Cost of Goods Sold (COGS) / Cost Price ($)</Label>
              <Input id="cost" type="number" value={cost} onChange={(e) => setCost(e.target.value)} placeholder="e.g., 50" />
            </div>
            <div>
              <Label htmlFor="revenue">Revenue / Selling Price ($)</Label>
              <Input id="revenue" type="number" value={revenue} onChange={(e) => setRevenue(e.target.value)} placeholder="e.g., 100" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateMargin}>Calculate Margin</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(grossProfit || error) && (
          <Card>
            <CardHeader><CardDescription>Margin Analysis</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {grossProfit && (
                <div className={`p-2 rounded-md ${parseFloat(grossProfit) >= 0 ? 'bg-green-500/10' : 'bg-red-500/10'}`}>
                  <p className={`text-sm ${parseFloat(grossProfit) >=0 ? 'text-green-700 dark:text-green-400' : 'text-red-700 dark:text-red-400'}`}>Gross Profit / Loss</p>
                  <div className="flex justify-between items-center"><p className={`font-semibold ${parseFloat(grossProfit) >=0 ? 'text-green-600 dark:text-green-500' : 'text-red-600 dark:text-red-500'}`}>${grossProfit}</p><CopyButton textToCopy={grossProfit} size="sm" variant="ghost"/></div>
                </div>
              )}
              {grossMarginPercent && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Gross Profit Margin</p>
                   <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{grossMarginPercent}%</p><CopyButton textToCopy={grossMarginPercent} size="sm" variant="ghost" className="text-primary"/></div>
                </div>
              )}
              {markupPercent && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Markup Percentage</p>
                   <div className="flex justify-between items-center"><p className="font-semibold">{markupPercent}%</p><CopyButton textToCopy={markupPercent} size="sm" variant="ghost"/></div>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: MarginCalculator.tsx ======
==================================================

// ====== START OF FILE: MarriageTaxCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.96 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Users } from "lucide-react";

// EXTREMELY SIMPLIFIED - Placeholder tax brackets
const singleBrackets = [
  { limit: 11000, rate: 0.10 },
  { limit: 44725, rate: 0.12 },
  { limit: Infinity, rate: 0.22 }, // Simplified
];
const marriedBrackets = [
  { limit: 22000, rate: 0.10 },
  { limit: 89450, rate: 0.12 },
  { limit: Infinity, rate: 0.22 }, // Simplified
];

export default function MarriageTaxCalculator() {
  const [income1, setIncome1] = useState<string>('');
  const [income2, setIncome2] = useState<string>('');

  const [taxAsSingle, setTaxAsSingle] = useState<string | null>(null);
  const [taxAsMarried, setTaxAsMarried] = useState<string | null>(null);
  const [difference, setDifference] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTax = (income: number, brackets: {limit: number, rate: number}[]) => {
    let tax = 0;
    let remainingIncome = income;
    let previousLimit = 0;
    for (const bracket of brackets) {
      if (remainingIncome <= 0) break;
      const taxableInBracket = Math.min(remainingIncome, bracket.limit - previousLimit);
      tax += taxableInBracket * bracket.rate;
      remainingIncome -= taxableInBracket;
      previousLimit = bracket.limit;
      if (bracket.limit === Infinity && remainingIncome > 0) {
          tax += remainingIncome * bracket.rate;
          break;
      }
    }
    return tax;
  };

  const calculateMarriageTaxEffect = () => {
    setError(null); setTaxAsSingle(null); setTaxAsMarried(null); setDifference(null);
    const inc1 = parseFloat(income1);
    const inc2 = parseFloat(income2);

    if ((income1 && isNaN(inc1)) || (income2 && isNaN(inc2)) || inc1 < 0 || inc2 < 0) {
      setError('Please enter valid non-negative incomes for both partners (can be 0).');
      return;
    }
    if(!income1 && !income2){
        setError('Please enter at least one income.');
        return;
    }


    const tax1Single = calculateTax(inc1 || 0, singleBrackets);
    const tax2Single = calculateTax(inc2 || 0, singleBrackets);
    const totalTaxSingle = tax1Single + tax2Single;
    setTaxAsSingle(totalTaxSingle.toFixed(2));

    const totalMarriedIncome = (inc1 || 0) + (inc2 || 0);
    const totalTaxMarried = calculateTax(totalMarriedIncome, marriedBrackets);
    setTaxAsMarried(totalTaxMarried.toFixed(2));

    const diff = totalTaxMarried - totalTaxSingle;
    setDifference(diff.toFixed(2));
  };
  
  const resetForm = () => {
    setIncome1(''); setIncome2('');
    setTaxAsSingle(null); setTaxAsMarried(null); setDifference(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Highly Simplified - For Illustration Only</AlertTitle>
        <AlertDescription>
          Tax laws are extremely complex. This calculator uses <strong className="font-semibold">placeholder tax brackets and ignores deductions, credits, state taxes, and other crucial factors.</strong> It is NOT for financial planning or tax advice. Consult a tax professional.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate potential "marriage penalty" or "bonus" (simplified).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="income1MTC">Partner 1 Annual Taxable Income ($)</Label><Input id="income1MTC" type="number" value={income1} onChange={(e) => setIncome1(e.target.value)} placeholder="e.g., 60000"/></div>
            <div><Label htmlFor="income2MTC">Partner 2 Annual Taxable Income ($)</Label><Input id="income2MTC" type="number" value={income2} onChange={(e) => setIncome2(e.target.value)} placeholder="e.g., 40000"/></div>
            <AlertDescription className="text-xs">Uses placeholder brackets for single & married filing jointly.</AlertDescription>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateMarriageTaxEffect}>Estimate Tax Effect</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(difference || error) && (
          <Card>
            <CardHeader><CardDescription>Tax Estimation (Simplified)</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {taxAsSingle && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Tax if Filing Separately (Est.)</p><p className="font-semibold">${taxAsSingle}</p></div>)}
              {taxAsMarried && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Tax if Filing Jointly (Est.)</p><p className="font-semibold">${taxAsMarried}</p></div>)}
              {difference && (
                <div className={`p-2 rounded-md ${parseFloat(difference) > 0 ? 'bg-red-500/10 text-red-700' : 'bg-green-500/10 text-green-700'}`}>
                  <p className="text-sm">Est. Marriage {parseFloat(difference) > 0 ? 'Penalty' : 'Bonus'}</p>
                  <div className="flex justify-between items-center"><p className={`text-xl font-bold`}>${Math.abs(parseFloat(difference)).toFixed(2)}</p><CopyButton textToCopy={difference} size="sm" variant="ghost"/></div>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: MarriageTaxCalculator.tsx ======
==================================================

// ====== START OF FILE: MassCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.54 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Scale } from "lucide-react";

// Similar to DensityCalculator, but solving for Mass. Mass = Density * Volume
type VolumeUnitMC = 'ml' | 'l' | 'cm3' | 'm3' | 'in3' | 'ft3';
type DensityUnitMC = 'g_ml' | 'kg_l' | 'kg_m3' | 'lb_ft3'; // Input density units
type TargetMassUnit = 'g' | 'kg' | 'lb' | 'oz';

export default function MassCalculator() {
  const [density, setDensity] = useState<string>('');
  const [volume, setVolume] = useState<string>('');
  
  const [densityUnit, setDensityUnit] = useState<DensityUnitMC>('g_ml');
  const [volumeUnit, setVolumeUnit] = useState<VolumeUnitMC>('ml');
  const [targetMassUnit, setTargetMassUnit] = useState<TargetMassUnit>('g');

  const [massResult, setMassResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Conversion factors to base (g/ml for density, ml for volume)
  const densityToBaseGPerMl: Record<DensityUnitMC, number> = {
    'g_ml': 1,
    'kg_l': 1, // 1 kg/L = 1000g/1000ml = 1 g/ml
    'kg_m3': 0.001, // 1 kg/m^3 = 1000g / 1,000,000ml = 0.001 g/ml
    'lb_ft3': 0.0160185, // 1 lb/ft^3 * (453.592g/lb) / (28316.8 ml/ft^3)
  };
  const volumeToBaseMl: Record<VolumeUnitMC, number> = { ml: 1, l: 1000, cm3: 1, m3: 1000000, in3: 16.3871, ft3: 28316.8 };
  const massFromBaseG: Record<TargetMassUnit, number> = { g: 1, kg: 0.001, lb: 0.00220462, oz: 0.035274 };


  const calculateMass = () => {
    setError(null);
    setMassResult(null);

    const densVal = parseFloat(density);
    const volVal = parseFloat(volume);

    if (isNaN(densVal) || densVal <= 0 || isNaN(volVal) || volVal <= 0) {
      setError('Please enter valid positive numbers for density and volume.');
      return;
    }

    const densityInGPerMl = densVal * densityToBaseGPerMl[densityUnit];
    const volumeInMl = volVal * volumeToBaseMl[volumeUnit];
    const massInGrams = densityInGPerMl * volumeInMl;
    const finalMass = massInGrams * massFromBaseG[targetMassUnit];

    setMassResult(`${finalMass.toFixed(3)} ${targetMassUnit}`);
  };
  
  const resetForm = () => {
    setDensity(''); setVolume('');
    setMassResult(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Mass Calculation (M = ρ × V)</AlertTitle><AlertDescription>Calculate mass given density and volume. Supports various units.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter density and volume.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="densityMC">Density</Label><Input id="densityMC" type="number" value={density} onChange={(e) => setDensity(e.target.value)} /></div>
              <div><Label htmlFor="densityUnitMC">Unit</Label><Select value={densityUnit} onValueChange={(v: DensityUnitMC) => setDensityUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="g_ml">g/mL (g/cm³)</SelectItem><SelectItem value="kg_l">kg/L</SelectItem><SelectItem value="kg_m3">kg/m³</SelectItem><SelectItem value="lb_ft3">lb/ft³</SelectItem></SelectContent></Select></div>
            </div>
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="volumeMC">Volume</Label><Input id="volumeMC" type="number" value={volume} onChange={(e) => setVolume(e.target.value)} /></div>
              <div><Label htmlFor="volumeUnitMC">Unit</Label><Select value={volumeUnit} onValueChange={(v: VolumeUnitMC) => setVolumeUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.keys(volumeToBaseMl).map(u=><SelectItem key={u} value={u}>{u}</SelectItem>)}</SelectContent></Select></div>
            </div>
            <div><Label htmlFor="targetMassUnit">Desired Mass Unit</Label><Select value={targetMassUnit} onValueChange={(v: TargetMassUnit) => setTargetMassUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.keys(massFromBaseG).map(u=><SelectItem key={u} value={u}>{u}</SelectItem>)}</SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateMass}>Calculate Mass</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(massResult || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Mass</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {massResult && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Mass</p><p className="text-2xl font-bold text-primary">{massResult}</p></div><CopyButton textToCopy={massResult} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: MassCalculator.tsx ======
==================================================

// ====== START OF FILE: MatrixAdditionMultiplicationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.28 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState, ChangeEvent } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Table2, GripVertical } from "lucide-react";

type Matrix = number[][];
type Operation = 'add' | 'subtract' | 'multiply';

const createMatrix = (rows: number, cols: number): Matrix => Array(rows).fill(null).map(() => Array(cols).fill(0));

export default function MatrixAdditionMultiplicationCalculator() {
  const [rowsA, setRowsA] = useState<number>(2);
  const [colsA, setColsA] = useState<number>(2);
  const [matrixA, setMatrixA] = useState<Matrix>(createMatrix(2,2));
  
  const [rowsB, setRowsB] = useState<number>(2);
  const [colsB, setColsB] = useState<number>(2);
  const [matrixB, setMatrixB] = useState<Matrix>(createMatrix(2,2));

  const [operation, setOperation] = useState<Operation>('add');
  const [resultMatrix, setResultMatrix] = useState<Matrix | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleMatrixChange = (matrixSetter: React.Dispatch<React.SetStateAction<Matrix>>, r: number, c: number, event: ChangeEvent<HTMLInputElement>) => {
    const value = parseFloat(event.target.value) || 0;
    matrixSetter(prev => prev.map((row, i) => i === r ? row.map((cell, j) => j === c ? value : cell) : row));
  };
  
  const handleDimensionChange = (dim: 'rowsA'|'colsA'|'rowsB'|'colsB', value: string) => {
    const val = parseInt(value) || 2; // Default to 2x2 if invalid
    const clampedVal = Math.max(1, Math.min(val, 5)); // Limit size for UI simplicity (1x1 to 5x5)
    if (dim === 'rowsA') { setRowsA(clampedVal); setMatrixA(createMatrix(clampedVal, colsA)); }
    if (dim === 'colsA') { setColsA(clampedVal); setMatrixA(createMatrix(rowsA, clampedVal)); }
    if (dim === 'rowsB') { setRowsB(clampedVal); setMatrixB(createMatrix(clampedVal, colsB)); }
    if (dim === 'colsB') { setColsB(clampedVal); setMatrixB(createMatrix(rowsB, clampedVal)); }
    setResultMatrix(null);
  };

  const performOperation = () => {
    setError(null);
    setResultMatrix(null);
    try {
      let result: Matrix;
      if (operation === 'add' || operation === 'subtract') {
        if (rowsA !== rowsB || colsA !== colsB) throw new Error("Matrices must have the same dimensions for addition/subtraction.");
        result = createMatrix(rowsA, colsA);
        for (let i = 0; i < rowsA; i++) {
          for (let j = 0; j < colsA; j++) {
            result[i][j] = operation === 'add' ? matrixA[i][j] + matrixB[i][j] : matrixA[i][j] - matrixB[i][j];
          }
        }
      } else { // Multiply
        if (colsA !== rowsB) throw new Error("For multiplication (A*B), columns of A must equal rows of B.");
        result = createMatrix(rowsA, colsB);
        for (let i = 0; i < rowsA; i++) {
          for (let j = 0; j < colsB; j++) {
            let sum = 0;
            for (let k = 0; k < colsA; k++) {
              sum += matrixA[i][k] * matrixB[k][j];
            }
            result[i][j] = sum;
          }
        }
      }
      setResultMatrix(result);
    } catch (e: any) { setError(e.message); }
  };
  
  const renderMatrixInputs = (matrix: Matrix, setter: React.Dispatch<React.SetStateAction<Matrix>>, label: string) => (
    <div className="space-y-1">
      {matrix.map((row, rIdx) => (
        <div key={`${label}-row-${rIdx}`} className="flex gap-1">
          {row.map((cell, cIdx) => (
            <Input key={`${label}-cell-${rIdx}-${cIdx}`} type="number" value={cell} onChange={(e) => handleMatrixChange(setter, rIdx, cIdx, e)} className="w-16 h-8 text-xs p-1 text-center"/>
          ))}
        </div>
      ))}
    </div>
  );

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Matrix Operations (Simplified)</AlertTitle><AlertDescription>Perform addition, subtraction, or multiplication on matrices up to 5x5. Ensure dimensions are compatible for the selected operation.</AlertDescription></Alert>
      <div className="grid grid-cols-1 xl:grid-cols-3 gap-4">
        <Card className="xl:col-span-2">
          <CardHeader><CardDescription>Enter matrix values and select operation.</CardDescription></CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 items-start">
              <div>
                <Label className="font-semibold block mb-1">Matrix A ({rowsA}x{colsA})</Label>
                <div className="flex gap-2 mb-2">
                  <Input type="number" value={rowsA} onChange={e=>handleDimensionChange('rowsA', e.target.value)} className="w-16 h-8 text-xs" placeholder="Rows"/>
                  <Input type="number" value={colsA} onChange={e=>handleDimensionChange('colsA', e.target.value)} className="w-16 h-8 text-xs" placeholder="Cols"/>
                </div>
                {renderMatrixInputs(matrixA, setMatrixA, 'A')}
              </div>
              <div>
                <Label className="font-semibold block mb-1">Matrix B ({rowsB}x{colsB})</Label>
                 <div className="flex gap-2 mb-2">
                  <Input type="number" value={rowsB} onChange={e=>handleDimensionChange('rowsB', e.target.value)} className="w-16 h-8 text-xs" placeholder="Rows"/>
                  <Input type="number" value={colsB} onChange={e=>handleDimensionChange('colsB', e.target.value)} className="w-16 h-8 text-xs" placeholder="Cols"/>
                </div>
                {renderMatrixInputs(matrixB, setMatrixB, 'B')}
              </div>
            </div>
             <div><Label htmlFor="matrixOperation">Operation</Label><Select value={operation} onValueChange={(v: Operation) => setOperation(v)}><SelectTrigger className="w-[180px]"><SelectValue /></SelectTrigger><SelectContent><SelectItem value="add">Add (A + B)</SelectItem><SelectItem value="subtract">Subtract (A - B)</SelectItem><SelectItem value="multiply">Multiply (A × B)</SelectItem></SelectContent></Select></div>
          </CardContent>
          <CardFooter><Button onClick={performOperation}>Calculate</Button></CardFooter>
        </Card>
        <Card className="xl:col-span-1">
          <CardHeader><CardDescription>Result Matrix</CardDescription></CardHeader>
          <CardContent>
            {error && (<Alert variant="destructive" className="mb-2"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {resultMatrix ? (
              <div className="space-y-1 bg-muted p-2 rounded-md">
                {resultMatrix.map((row, rIdx) => (
                  <div key={`res-row-${rIdx}`} className="flex gap-1">
                    {row.map((cell, cIdx) => (<Input key={`res-cell-${rIdx}-${cIdx}`} type="number" value={cell.toPrecision(4)} readOnly className="w-16 h-8 text-xs p-1 text-center bg-background"/>))}
                  </div>
                ))}
              </div>
            ) : !error && <p className="text-muted-foreground text-sm">Result will appear here.</p>}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: MatrixAdditionMultiplicationCalculator.tsx ======
==================================================

// ====== START OF FILE: MatrixCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.99 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState, ChangeEvent } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Table2, RotateCcw, Tally1 } from "lucide-react";

type Matrix = number[][];
type MatrixOperation = 'determinant' | 'inverse' | 'transpose';

const createMatrix = (size: number): Matrix => Array(size).fill(null).map(() => Array(size).fill(0));

export default function MatrixCalculator() {
  const [matrixSize, setMatrixSize] = useState<number>(2);
  const [matrix, setMatrix] = useState<Matrix>(createMatrix(2));
  const [operation, setOperation] = useState<MatrixOperation>('determinant');
  
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleSizeChange = (value: string) => {
    const size = parseInt(value);
    if (!isNaN(size) && size >= 2 && size <= 3) { // Limit to 2x2 and 3x3
      setMatrixSize(size);
      setMatrix(createMatrix(size));
      setResult(null);
      setError(null);
    }
  };

  const handleMatrixChange = (r: number, c: number, event: ChangeEvent<HTMLInputElement>) => {
    const value = parseFloat(event.target.value) || 0;
    setMatrix(prev => prev.map((row, i) => i === r ? row.map((cell, j) => j === c ? value : cell) : row));
  };
  
  const calculate = () => {
    setError(null);
    setResult(null);
    try {
      let calcResult: number | Matrix;
      let det = 0;

      // Determinant calculation
      if (matrixSize === 2) {
        det = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];
      } else { // 3x3
        det = matrix[0][0] * (matrix[1][1] * matrix[2][2] - matrix[1][2] * matrix[2][1]) -
              matrix[0][1] * (matrix[1][0] * matrix[2][2] - matrix[1][2] * matrix[2][0]) +
              matrix[0][2] * (matrix[1][0] * matrix[2][1] - matrix[1][1] * matrix[2][0]);
      }

      switch (operation) {
        case 'determinant':
          calcResult = det;
          setResult(calcResult.toFixed(4));
          break;
        case 'inverse':
          if (det === 0) throw new Error("Matrix is singular (determinant is 0), inverse does not exist.");
          const invDet = 1 / det;
          if (matrixSize === 2) {
            calcResult = [
              [matrix[1][1] * invDet, -matrix[0][1] * invDet],
              [-matrix[1][0] * invDet, matrix[0][0] * invDet]
            ];
          } else { // 3x3
            const m = matrix;
            calcResult = [
              [(m[1][1]*m[2][2] - m[1][2]*m[2][1])*invDet, (m[0][2]*m[2][1] - m[0][1]*m[2][2])*invDet, (m[0][1]*m[1][2] - m[0][2]*m[1][1])*invDet],
              [(m[1][2]*m[2][0] - m[1][0]*m[2][2])*invDet, (m[0][0]*m[2][2] - m[0][2]*m[2][0])*invDet, (m[0][2]*m[1][0] - m[0][0]*m[1][2])*invDet],
              [(m[1][0]*m[2][1] - m[1][1]*m[2][0])*invDet, (m[0][1]*m[2][0] - m[0][0]*m[2][1])*invDet, (m[0][0]*m[1][1] - m[0][1]*m[1][0])*invDet]
            ];
          }
          setResult(JSON.stringify(calcResult.map(row => row.map(cell => cell.toFixed(4)))));
          break;
        case 'transpose':
          calcResult = createMatrix(matrixSize);
          for (let i = 0; i < matrixSize; i++) {
            for (let j = 0; j < matrixSize; j++) {
              calcResult[j][i] = matrix[i][j];
            }
          }
          setResult(JSON.stringify(calcResult));
          break;
        default: throw new Error("Invalid operation.");
      }
    } catch(e: any) { setError(e.message); }
  };
  
  const resetForm = () => {
    handleSizeChange(matrixSize.toString());
  };
  
  const renderMatrixResult = (res: string) => {
    try {
      const mat = JSON.parse(res);
      if (!Array.isArray(mat)) return <p>{res}</p>;
      return (
        <div className="space-y-1 bg-muted p-2 rounded-md">
          {mat.map((row, rIdx) => (
            <div key={`res-row-${rIdx}`} className="flex gap-1 justify-center">
              {row.map((cell: number, cIdx: number) => (
                <Input key={`res-cell-${rIdx}-${cIdx}`} type="text" value={cell} readOnly className="w-20 h-8 text-xs p-1 text-center bg-background"/>
              ))}
            </div>
          ))}
        </div>
      );
    } catch {
      return <p className="font-semibold text-2xl">{res}</p>;
    }
  }

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Matrix Calculator (2x2 & 3x3)</AlertTitle><AlertDescription>Calculate the determinant, inverse, or transpose of a square matrix. Supports 2x2 and 3x3 matrices.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter matrix values and select an operation.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="flex gap-4">
              <div><Label htmlFor="matrixSize">Matrix Size</Label><Select value={matrixSize.toString()} onValueChange={handleSizeChange}><SelectTrigger className="w-[100px]"><SelectValue/></SelectTrigger><SelectContent><SelectItem value="2">2x2</SelectItem><SelectItem value="3">3x3</SelectItem></SelectContent></Select></div>
              <div><Label htmlFor="matrixOperation">Operation</Label><Select value={operation} onValueChange={(v: MatrixOperation) => setOperation(v)}><SelectTrigger className="w-[150px]"><SelectValue /></SelectTrigger><SelectContent><SelectItem value="determinant">Determinant</SelectItem><SelectItem value="inverse">Inverse</SelectItem><SelectItem value="transpose">Transpose</SelectItem></SelectContent></Select></div>
            </div>
            <div className="space-y-1">
              {matrix.map((row, rIdx) => (
                <div key={`row-${rIdx}`} className="flex gap-1">
                  {row.map((cell, cIdx) => (
                    <Input key={`cell-${rIdx}-${cIdx}`} type="number" value={cell} onChange={(e) => handleMatrixChange(rIdx, cIdx, e)} className="w-20 h-10 text-center"/>
                  ))}
                </div>
              ))}
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        <Card>
          <CardHeader><CardDescription>Result</CardDescription></CardHeader>
          <CardContent>
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {result && <div>{renderMatrixResult(result)}</div>}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: MatrixCalculator.tsx ======
==================================================

// ====== START OF FILE: MatrixInversionCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.47 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, RotateCcw, Table2 } from "lucide-react";

export default function MatrixInversionCalculator() {
  const [matrixInput, setMatrixInput] = useState<string>(''); // e.g., "1,2;3,4" for [[1,2],[3,4]]
  
  const [invertedMatrixOutput, setInvertedMatrixOutput] = useState<string | null>(null);
  const [determinantOutput, setDeterminantOutput] = useState<string | null>(null); // Often calculated during inversion
  const [error, setError] = useState<string | null>(null);

  const calculateInverse = () => {
    setError(null);
    setInvertedMatrixOutput(null);
    setDeterminantOutput(null);

    if (!matrixInput.trim()) {
      setError('Please enter matrix data. Example: "1,2;3,4" (Rows separated by semicolon, elements by comma).');
      return;
    }
    
    // Matrix parsing and inversion logic is complex.
    // This is a placeholder. For a 2x2 matrix [[a,b],[c,d]], det = ad-bc.
    // Inverse = (1/det) * [[d, -b], [-c, a]]
    
    const rows = matrixInput.split(';').map(rowStr => rowStr.split(',').map(el => parseFloat(el.trim())));
    if (rows.some(row => row.some(isNaN))) {
        setError("Invalid matrix format. Ensure all elements are numbers.");
        return;
    }
    const numRows = rows.length;
    const numCols = rows[0]?.length || 0;
    if (numRows !== numCols || numRows === 0) {
        setError("Matrix must be square (e.g., 2x2, 3x3) and non-empty for inversion.");
        return;
    }

    // Placeholder for 2x2 case for demonstration
    if (numRows === 2) {
        const a = rows[0][0]; const b = rows[0][1];
        const c = rows[1][0]; const d = rows[1][1];
        const det = a*d - b*c;
        setDeterminantOutput(det.toString());
        if (det === 0) {
            setError("Matrix is singular (determinant is 0), inverse does not exist.");
            setInvertedMatrixOutput("Singular Matrix - No Inverse");
            return;
        }
        const invDet = 1 / det;
        const invMatrix = [
            [d * invDet, -b * invDet],
            [-c * invDet, a * invDet]
        ];
        setInvertedMatrixOutput(invMatrix.map(row => row.map(el => el.toFixed(4)).join(', ')).join(';\n'));
    } else {
        setError(`Matrix inversion for ${numRows}x${numRows} matrices is complex and not fully implemented in this demo. This example supports 2x2 inversion only.`);
        setInvertedMatrixOutput("Calculation for this size not implemented.");
    }
  };
  
  const resetForm = () => {
    setMatrixInput('');
    setInvertedMatrixOutput(null);
    setDeterminantOutput(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Advanced Linear Algebra - Placeholder Logic</AlertTitle>
        <AlertDescription>
          Matrix inversion is a complex operation. This calculator provides a UI demonstration and basic 2x2 inversion. For larger or more complex matrices, specialized math libraries are required. <strong className="font-semibold">The full algorithm for general matrix inversion is not implemented here.</strong>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter matrix data to find its inverse.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="matrixInputInv">Matrix Input (Rows separated by ';', elements by ',')</Label>
              <Textarea 
                id="matrixInputInv" 
                value={matrixInput} 
                onChange={(e) => setMatrixInput(e.target.value)} 
                placeholder="e.g., 1,2;3,4 for a 2x2 matrix" 
                rows={4}
              />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateInverse}>Calculate Inverse</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(invertedMatrixOutput || error) && (
          <Card>
            <CardHeader><CardDescription>Matrix Inversion Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {determinantOutput && (<div className="p-2 bg-muted rounded-md mb-2 text-sm">Determinant: <strong className="font-semibold">{determinantOutput}</strong></div>)}
              {invertedMatrixOutput && (
                <div className="p-3 bg-muted rounded-md">
                  <Label className="text-sm font-semibold text-primary">Inverted Matrix (A<sup>-1</sup>):</Label>
                  <Textarea value={invertedMatrixOutput} readOnly rows={4} className="mt-1 font-mono text-xs bg-background/50"/>
                  <CopyButton textToCopy={invertedMatrixOutput} className="mt-2 w-full" buttonText="Copy Inverted Matrix"/>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: MatrixInversionCalculator.tsx ======
==================================================

// ====== START OF FILE: MatrixOperationsCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.27 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState, ChangeEvent } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Table2, GripVertical } from "lucide-react";

type Matrix = number[][];
type Operation = 'add' | 'subtract' | 'multiply';

const createMatrix = (rows: number, cols: number): Matrix => Array(rows).fill(null).map(() => Array(cols).fill(0));

export default function MatrixOperationsCalculator() {
  const [rowsA, setRowsA] = useState<number>(2);
  const [colsA, setColsA] = useState<number>(2);
  const [matrixA, setMatrixA] = useState<Matrix>(createMatrix(2,2));
  
  const [rowsB, setRowsB] = useState<number>(2);
  const [colsB, setColsB] = useState<number>(2);
  const [matrixB, setMatrixB] = useState<Matrix>(createMatrix(2,2));

  const [operation, setOperation] = useState<Operation>('add');
  const [resultMatrix, setResultMatrix] = useState<Matrix | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleMatrixChange = (matrixSetter: React.Dispatch<React.SetStateAction<Matrix>>, r: number, c: number, event: ChangeEvent<HTMLInputElement>) => {
    const value = parseFloat(event.target.value) || 0;
    matrixSetter(prev => prev.map((row, i) => i === r ? row.map((cell, j) => j === c ? value : cell) : row));
  };
  
  const handleDimensionChange = (dim: 'rowsA'|'colsA'|'rowsB'|'colsB', value: string) => {
    const val = parseInt(value) || 2; // Default to 2x2 if invalid
    const clampedVal = Math.max(1, Math.min(val, 5)); // Limit size for UI simplicity (1x1 to 5x5)
    if (dim === 'rowsA') { setRowsA(clampedVal); setMatrixA(createMatrix(clampedVal, colsA)); }
    if (dim === 'colsA') { setColsA(clampedVal); setMatrixA(createMatrix(rowsA, clampedVal)); }
    if (dim === 'rowsB') { setRowsB(clampedVal); setMatrixB(createMatrix(clampedVal, colsB)); }
    if (dim === 'colsB') { setColsB(clampedVal); setMatrixB(createMatrix(rowsB, clampedVal)); }
    setResultMatrix(null);
  };

  const performOperation = () => {
    setError(null);
    setResultMatrix(null);
    try {
      let result: Matrix;
      if (operation === 'add' || operation === 'subtract') {
        if (rowsA !== rowsB || colsA !== colsB) throw new Error("Matrices must have the same dimensions for addition/subtraction.");
        result = createMatrix(rowsA, colsA);
        for (let i = 0; i < rowsA; i++) {
          for (let j = 0; j < colsA; j++) {
            result[i][j] = operation === 'add' ? matrixA[i][j] + matrixB[i][j] : matrixA[i][j] - matrixB[i][j];
          }
        }
      } else { // Multiply
        if (colsA !== rowsB) throw new Error("For multiplication (A*B), columns of A must equal rows of B.");
        result = createMatrix(rowsA, colsB);
        for (let i = 0; i < rowsA; i++) {
          for (let j = 0; j < colsB; j++) {
            let sum = 0;
            for (let k = 0; k < colsA; k++) {
              sum += matrixA[i][k] * matrixB[k][j];
            }
            result[i][j] = sum;
          }
        }
      }
      setResultMatrix(result);
    } catch (e: any) { setError(e.message); }
  };
  
  const renderMatrixInputs = (matrix: Matrix, setter: React.Dispatch<React.SetStateAction<Matrix>>, label: string) => (
    <div className="space-y-1">
      {matrix.map((row, rIdx) => (
        <div key={`${label}-row-${rIdx}`} className="flex gap-1">
          {row.map((cell, cIdx) => (
            <Input key={`${label}-cell-${rIdx}-${cIdx}`} type="number" value={cell} onChange={(e) => handleMatrixChange(setter, rIdx, cIdx, e)} className="w-16 h-8 text-xs p-1 text-center"/>
          ))}
        </div>
      ))}
    </div>
  );

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Matrix Operations (Simplified)</AlertTitle><AlertDescription>Perform addition, subtraction, or multiplication on matrices up to 5x5. Ensure dimensions are compatible for the selected operation.</AlertDescription></Alert>
      <div className="grid grid-cols-1 xl:grid-cols-3 gap-4">
        <Card className="xl:col-span-2">
          <CardHeader><CardDescription>Enter matrix values and select operation.</CardDescription></CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 items-start">
              <div>
                <Label className="font-semibold block mb-1">Matrix A ({rowsA}x{colsA})</Label>
                <div className="flex gap-2 mb-2">
                  <Input type="number" value={rowsA} onChange={e=>handleDimensionChange('rowsA', e.target.value)} className="w-16 h-8 text-xs" placeholder="Rows"/>
                  <Input type="number" value={colsA} onChange={e=>handleDimensionChange('colsA', e.target.value)} className="w-16 h-8 text-xs" placeholder="Cols"/>
                </div>
                {renderMatrixInputs(matrixA, setMatrixA, 'A')}
              </div>
              <div>
                <Label className="font-semibold block mb-1">Matrix B ({rowsB}x{colsB})</Label>
                 <div className="flex gap-2 mb-2">
                  <Input type="number" value={rowsB} onChange={e=>handleDimensionChange('rowsB', e.target.value)} className="w-16 h-8 text-xs" placeholder="Rows"/>
                  <Input type="number" value={colsB} onChange={e=>handleDimensionChange('colsB', e.target.value)} className="w-16 h-8 text-xs" placeholder="Cols"/>
                </div>
                {renderMatrixInputs(matrixB, setMatrixB, 'B')}
              </div>
            </div>
             <div><Label htmlFor="matrixOperation">Operation</Label><Select value={operation} onValueChange={(v: Operation) => setOperation(v)}><SelectTrigger className="w-[180px]"><SelectValue /></SelectTrigger><SelectContent><SelectItem value="add">Add (A + B)</SelectItem><SelectItem value="subtract">Subtract (A - B)</SelectItem><SelectItem value="multiply">Multiply (A × B)</SelectItem></SelectContent></Select></div>
          </CardContent>
          <CardFooter><Button onClick={performOperation}>Calculate</Button></CardFooter>
        </Card>
        <Card className="xl:col-span-1">
          <CardHeader><CardDescription>Result Matrix</CardDescription></CardHeader>
          <CardContent>
            {error && (<Alert variant="destructive" className="mb-2"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {resultMatrix ? (
              <div className="space-y-1 bg-muted p-2 rounded-md">
                {resultMatrix.map((row, rIdx) => (
                  <div key={`res-row-${rIdx}`} className="flex gap-1">
                    {row.map((cell, cIdx) => (<Input key={`res-cell-${rIdx}-${cIdx}`} type="number" value={cell.toPrecision(4)} readOnly className="w-16 h-8 text-xs p-1 text-center bg-background"/>))}
                  </div>
                ))}
              </div>
            ) : !error && <p className="text-muted-foreground text-sm">Result will appear here.</p>}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: MatrixOperationsCalculator.tsx ======
==================================================

// ====== START OF FILE: MeanMedianModeRangeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.93 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, BarChartHorizontalBig } from "lucide-react";

interface StatsResults {
  mean: number;
  median: number;
  mode: number[] | string; // Can be multiple modes or N/A
  range: number;
  count: number;
  sum: number;
}

export default function MeanMedianModeRangeCalculator() {
  const [numbersInput, setNumbersInput] = useState<string>('');
  const [results, setResults] = useState<StatsResults | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateStats = () => {
    setError(null);
    setResults(null);

    const parsedNumbers = numbersInput
      .split(/[\s,]+/)
      .filter(n => n.trim() !== '')
      .map(n => parseFloat(n))
      .filter(n => !isNaN(n));

    if (parsedNumbers.length === 0) {
      setError('Please enter at least one valid number.');
      return;
    }

    parsedNumbers.sort((a, b) => a - b);
    const count = parsedNumbers.length;
    const sum = parsedNumbers.reduce((acc, curr) => acc + curr, 0);
    const mean = sum / count;
    const range = parsedNumbers[count - 1] - parsedNumbers[0];

    let median: number;
    if (count % 2 === 0) {
      median = (parsedNumbers[count / 2 - 1] + parsedNumbers[count / 2]) / 2;
    } else {
      median = parsedNumbers[Math.floor(count / 2)];
    }

    const frequencyMap = new Map<number, number>();
    parsedNumbers.forEach(num => frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1));
    let maxFrequency = 0;
    frequencyMap.forEach(freq => { if (freq > maxFrequency) maxFrequency = freq; });
    
    let mode: number[] | string = [];
    if (maxFrequency > 1) { // Only consider mode if a number appears more than once
      frequencyMap.forEach((freq, num) => { if (freq === maxFrequency) (mode as number[]).push(num); });
    }
    if ((mode as number[]).length === 0 || (mode as number[]).length === count && count > 1) { // No unique mode or all numbers are the mode
        mode = "N/A (no unique mode or all same)";
    }


    setResults({ mean, median, mode, range, count, sum });
  };
  
  const resetForm = () => {
    setNumbersInput('');
    setResults(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Calculate Mean, Median, Mode, and Range for a set of numbers.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="numbersStats">Enter Numbers (comma or space separated)</Label><Textarea id="numbersStats" value={numbersInput} onChange={(e) => setNumbersInput(e.target.value)} placeholder="e.g., 10, 25, 10, 30, 15" rows={4}/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateStats}>Calculate Stats</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {results || error ? (
          <Card>
            <CardHeader><CardDescription>Statistical Results</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {results && (
                <>
                  <div className="p-1 bg-muted rounded-md"><p className="text-xs text-muted-foreground">Count: <span className="font-semibold">{results.count}</span></p></div>
                  <div className="p-1 bg-muted rounded-md"><p className="text-xs text-muted-foreground">Sum: <span className="font-semibold">{results.sum.toFixed(2)}</span></p></div>
                  <div className="p-1 bg-muted rounded-md"><p className="text-xs text-muted-foreground">Mean (Average): <span className="font-semibold">{results.mean.toFixed(2)}</span></p></div>
                  <div className="p-1 bg-muted rounded-md"><p className="text-xs text-muted-foreground">Median: <span className="font-semibold">{results.median.toFixed(2)}</span></p></div>
                  <div className="p-1 bg-muted rounded-md"><p className="text-xs text-muted-foreground">Mode: <span className="font-semibold">{Array.isArray(results.mode) ? results.mode.join(', ') : results.mode}</span></p></div>
                  <div className="p-1 bg-muted rounded-md"><p className="text-xs text-muted-foreground">Range: <span className="font-semibold">{results.range.toFixed(2)}</span></p></div>
                </>
              )}
            </CardContent>
          </Card>
        ) : null}
      </div>
    </div>
  );
}


// ====== END OF FILE: MeanMedianModeRangeCalculator.tsx ======
==================================================

// ====== START OF FILE: MenstrualCycleInsightsCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.13 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { format, differenceInDays, isValid } from 'date-fns';
import { cn } from '@/lib/utils';
import { PlusCircle, Trash2, CalendarDays, BarChart, Info } from 'lucide-react';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal } from "lucide-react";

interface PeriodDateEntry {
  id: string;
  date: Date | undefined;
}

interface CycleInsight {
    averageLength: number;
    shortestCycle: number;
    longestCycle: number;
    variability: number;
    cycleLengths: number[];
}

export default function MenstrualCycleInsightsCalculator() {
  const [periodDates, setPeriodDates] = useState<PeriodDateEntry[]>([
    { id: crypto.randomUUID(), date: undefined },
    { id: crypto.randomUUID(), date: undefined },
    { id: crypto.randomUUID(), date: undefined },
  ]);
  const [insights, setInsights] = useState<CycleInsight | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleDateChange = (id: string, date: Date | undefined) => {
    setPeriodDates(prev => prev.map(entry => (entry.id === id ? { ...entry, date } : entry)));
  };

  const addDateField = () => {
    setPeriodDates(prev => [...prev, { id: crypto.randomUUID(), date: undefined }]);
  };

  const removeDateField = (id: string) => {
    if (periodDates.length > 2) {
      setPeriodDates(prev => prev.filter(entry => entry.id !== id));
    }
  };

  const calculateInsights = () => {
    setError(null); setInsights(null);
    const validDates = periodDates
      .map(entry => entry.date)
      .filter(date => date && isValid(date)) as Date[];

    if (validDates.length < 2) {
      setError('Please enter at least two valid period start dates to analyze cycles.');
      return;
    }

    validDates.sort((a, b) => a.getTime() - b.getTime());

    const cycleLengths: number[] = [];
    for (let i = 0; i < validDates.length - 1; i++) {
        const length = differenceInDays(validDates[i+1], validDates[i]);
        if (length <= 0) {
             setError(`Dates must be in chronological order with at least one day between them. Check entry for ${format(validDates[i+1], "PPP")}.`);
             return;
        }
        cycleLengths.push(length);
    }
    
    if (cycleLengths.length === 0) {
      setError("Cannot calculate insights. Need at least two consecutive period dates.");
      return;
    }

    const averageLength = cycleLengths.reduce((sum, len) => sum + len, 0) / cycleLengths.length;
    const shortestCycle = Math.min(...cycleLengths);
    const longestCycle = Math.max(...cycleLengths);
    const variability = longestCycle - shortestCycle;
    
    setInsights({ averageLength, shortestCycle, longestCycle, variability, cycleLengths });
  };

  const resetForm = () => {
    setPeriodDates([{ id: crypto.randomUUID(), date: undefined }, { id: crypto.randomUUID(), date: undefined },{ id: crypto.randomUUID(), date: undefined }]);
    setInsights(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Medical Disclaimer - For Informational Use Only</AlertTitle>
        <AlertDescription>
          This tool provides an analysis of menstrual cycle data for informational purposes. It is NOT a substitute for professional medical advice. Cycle variability is normal, but significant irregularities should be discussed with a healthcare provider.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardDescription>Enter the first day of your last few periods to analyze your cycle patterns.</CardDescription></CardHeader>
          <CardContent className="space-y-3 max-h-[500px] overflow-y-auto pr-2">
            {periodDates.map((entry, index) => (
              <div key={entry.id} className="flex items-center gap-2 p-2 border rounded-md">
                <Label htmlFor={`periodDate-${index}`} className="w-24 shrink-0">Period {index + 1} Start:</Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button id={`periodDate-${index}`} variant="outline" className={cn("w-full justify-start text-left font-normal", !entry.date && "text-muted-foreground")}>
                      <CalendarDays className="mr-2 h-4 w-4" />{entry.date ? format(entry.date, "PPP") : <span>Pick a date</span>}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={entry.date} onSelect={(d) => handleDateChange(entry.id, d)} initialFocus /></PopoverContent>
                </Popover>
                {periodDates.length > 2 && <Button variant="ghost" size="icon" onClick={() => removeDateField(entry.id)} className="shrink-0"><Trash2 className="h-4 w-4 text-destructive"/></Button>}
              </div>
            ))}
            <Button variant="outline" size="sm" onClick={addDateField}><PlusCircle className="mr-2 h-4 w-4"/> Add Period Date</Button>
          </CardContent>
           <CardFooter className="flex justify-between"><Button onClick={calculateInsights}>Analyze Cycles</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Cycle Insights</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {insights ? (
                <>
                <div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">Average Cycle Length</p><p className="font-semibold text-lg text-primary">{insights.averageLength.toFixed(1)} days</p></div>
                <div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Shortest Cycle</p><p className="font-semibold">{insights.shortestCycle} days</p></div>
                <div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Longest Cycle</p><p className="font-semibold">{insights.longestCycle} days</p></div>
                <div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Cycle Variability</p><p className="font-semibold">{insights.variability} days</p></div>
                <div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Individual Cycle Lengths</p><p className="font-semibold text-xs">{insights.cycleLengths.join(', ')}</p></div>
                </>
            ) : !error && <p className="text-muted-foreground text-sm">Results will appear here.</p>}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: MenstrualCycleInsightsCalculator.tsx ======
==================================================

// ====== START OF FILE: MenstrualCycleLengthCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.09 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { format, differenceInDays, isValid, addDays } from 'date-fns';
import { cn } from '@/lib/utils';
import { PlusCircle, Trash2, CalendarCheck2, CalendarDays } from 'lucide-react';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info } from "lucide-react";

interface PeriodDateEntry {
  id: string;
  date: Date | undefined;
}

export default function MenstrualCycleLengthCalculator() {
  const [periodDates, setPeriodDates] = useState<PeriodDateEntry[]>([
    { id: crypto.randomUUID(), date: undefined },
    { id: crypto.randomUUID(), date: undefined },
  ]);
  const [averageCycleLength, setAverageCycleLength] = useState<string | null>(null);
  const [nextPredictedPeriod, setNextPredictedPeriod] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleDateChange = (id: string, date: Date | undefined) => {
    setPeriodDates(prev => prev.map(entry => (entry.id === id ? { ...entry, date } : entry)));
  };

  const addDateField = () => {
    setPeriodDates(prev => [...prev, { id: crypto.randomUUID(), date: undefined }]);
  };

  const removeDateField = (id: string) => {
    if (periodDates.length > 2) {
      setPeriodDates(prev => prev.filter(entry => entry.id !== id));
    }
  };

  const calculateCycleLength = () => {
    setError(null); setAverageCycleLength(null); setNextPredictedPeriod(null);
    const validDates = periodDates
      .map(entry => entry.date)
      .filter(date => date && isValid(date)) as Date[];

    if (validDates.length < 2) {
      setError('Please enter at least two valid period start dates.');
      return;
    }

    validDates.sort((a, b) => a.getTime() - b.getTime()); // Sort dates chronologically

    const cycleLengths: number[] = [];
    for (let i = 0; i < validDates.length - 1; i++) {
      cycleLengths.push(differenceInDays(validDates[i+1], validDates[i]));
    }

    if (cycleLengths.length === 0) { // Should be caught by validDates.length < 2
        setError("Not enough data to calculate cycle length.");
        return;
    }

    const avgLength = cycleLengths.reduce((sum, len) => sum + len, 0) / cycleLengths.length;
    setAverageCycleLength(avgLength.toFixed(1));

    const lastDate = validDates[validDates.length - 1];
    const nextPeriod = addDays(lastDate, Math.round(avgLength));
    setNextPredictedPeriod(format(nextPeriod, "PPP, EEEE"));
  };

  const resetForm = () => {
    setPeriodDates([{ id: crypto.randomUUID(), date: undefined }, { id: crypto.randomUUID(), date: undefined }]);
    setAverageCycleLength(null); setNextPredictedPeriod(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Menstrual Cycle Length Calculator</AlertTitle><AlertDescription>Calculate your average menstrual cycle length by entering the start dates of several past periods. Also predicts your next period.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter the first day of your last few periods.</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {periodDates.map((entry, index) => (
              <div key={entry.id} className="flex items-center gap-2">
                <Label htmlFor={`periodDate-${index}`} className="w-24 shrink-0">Period {index + 1}:</Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button id={`periodDate-${index}`} variant="outline" className={cn("w-full justify-start text-left font-normal", !entry.date && "text-muted-foreground")}>
 <CalendarDays className="mr-2 h-4 w-4" />{entry.date ? format(entry.date, "PPP") : <span>Pick a date</span>}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={entry.date} onSelect={(d) => handleDateChange(entry.id, d)} initialFocus /></PopoverContent>
                </Popover>
                {periodDates.length > 2 && <Button variant="ghost" size="icon" onClick={() => removeDateField(entry.id)} className="shrink-0"><Trash2 className="h-4 w-4 text-destructive"/></Button>}
              </div>
            ))}
            <Button variant="outline" size="sm" onClick={addDateField}><PlusCircle className="mr-2 h-4 w-4"/> Add Another Period Date</Button>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateCycleLength}>Calculate Cycle</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(averageCycleLength || error) && (
          <Card>
            <CardHeader><CardDescription>Cycle Information</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {averageCycleLength && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Average Cycle Length</p><p className="font-semibold">{averageCycleLength} days</p></div>)}
              {nextPredictedPeriod && (<div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">Est. Next Period Start</p><div className="flex justify-between items-center"><p className="text-lg font-bold text-primary">{nextPredictedPeriod}</p><CopyButton textToCopy={nextPredictedPeriod} size="sm" variant="ghost"/></div></div>)}
              <AlertDescription className="text-xs pt-2">This is an estimate. Cycle lengths can vary.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}



// ====== END OF FILE: MenstrualCycleLengthCalculator.tsx ======
==================================================

// ====== START OF FILE: MentalWellnessPracticesChecklist.tsx ======
// File converted from TSX to TXT
// Original size: 5.49 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Card, CardContent, CardHeader, CardDescription, CardFooter } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { BrainCircuit, Info } from "lucide-react";

interface WellnessPractice {
  id: string;
  question: string;
  category: 'Mindfulness & Relaxation' | 'Physical Activity' | 'Social Connection' | 'Lifestyle Habits';
}

const wellnessPractices: WellnessPractice[] = [
  { id: 'w1', question: "Practiced mindfulness or meditation for at least 10 minutes.", category: "Mindfulness & Relaxation" },
  { id: 'w2', question: "Engaged in at least 30 minutes of moderate physical activity.", category: "Physical Activity" },
  { id: 'w3', question: "Spent quality time connecting with a friend or family member.", category: "Social Connection" },
  { id: 'w4', question: "Got 7-9 hours of quality sleep.", category: "Lifestyle Habits" },
  { id: 'w5', question: "Ate balanced, nutritious meals throughout the day.", category: "Lifestyle Habits" },
  { id: 'w6', question: "Spent time on a hobby or activity you genuinely enjoy.", category: "Mindfulness & Relaxation" },
  { id: 'w7', question: "Spent some time outdoors in nature.", category: "Lifestyle Habits" },
  { id: 'w8', question: "Limited screen time, especially before bed.", category: "Lifestyle Habits" },
];

type AnswersWellness = Record<string, boolean>;

export default function MentalWellnessPracticesChecklist() {
  const initialAnswers = wellnessPractices.reduce((acc, q) => ({...acc, [q.id]: false}), {} as AnswersWellness);
  const [answers, setAnswers] = useState<AnswersWellness>(initialAnswers);
  const [awarenessMessage, setAwarenessMessage] = useState<string | null>(null);

  const checkWellnessPractices = () => {
    const checkedCount = Object.values(answers).filter(Boolean).length;
    if (checkedCount === 0) {
      setAwarenessMessage("Even checking one box is a great start! Small steps can make a big difference.");
    } else if (checkedCount <= 2) {
      setAwarenessMessage(`Great job on incorporating ${checkedCount} healthy practice(s) into your day! Keep building on this foundation.`);
    } else if (checkedCount <= 5) {
      setAwarenessMessage(`Excellent! With ${checkedCount} practices checked, you're making a strong positive impact on your mental well-being.`);
    } else {
      setAwarenessMessage(`Fantastic! You've checked ${checkedCount} practices. This shows a wonderful commitment to your mental wellness.`);
    }
  };

  const resetChecklist = () => {
    setAnswers(initialAnswers);
    setAwarenessMessage(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle className="font-bold text-lg">MENTAL WELLNESS AWARENESS TOOL - NOT MEDICAL ADVICE</AlertTitle>
        <AlertDescription className="text-base">
          <p>This is a checklist of common positive mental wellness practices. It is for <strong className="font-semibold">self-reflection and awareness only</strong> and is NOT a diagnostic tool. It cannot assess or diagnose mental health conditions.</p>
          <p className="mt-2"><strong className="font-semibold">If you are struggling with your mental health, please seek help from a qualified healthcare professional, such as a therapist, counselor, or doctor.</strong> This tool is not a substitute for professional care.</p>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Check off any wellness practices you've engaged in recently for self-reflection.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-3 max-h-[500px] overflow-y-auto pr-2">
            {wellnessPractices.map(factor => (
              <div key={factor.id} className="flex items-start space-x-3 p-2.5 border rounded-md">
                <Checkbox id={factor.id} checked={answers[factor.id]} onCheckedChange={checked => setAnswers(prev => ({...prev, [factor.id]: !!checked}))} className="mt-1 shrink-0"/>
                <div className="grid gap-1.5 leading-none">
                  <Label htmlFor={factor.id} className="text-sm font-medium leading-snug">{factor.question}</Label>
                  <p className="text-xs text-muted-foreground">Category: {factor.category}</p>
                </div>
              </div>
            ))}
          </CardContent>
           <CardFooter className="flex justify-between">
            <Button onClick={checkWellnessPractices}>Get Reflection</Button>
            <Button variant="outline" onClick={resetChecklist}>Reset</Button>
          </CardFooter>
        </Card>
        
        {awarenessMessage && (
          <Card>
            <CardHeader>
              <CardDescription>Your Wellness Reflection</CardDescription>
            </CardHeader>
            <CardContent>
              <Alert className="mt-2">
                <BrainCircuit className="h-4 w-4"/>
                <AlertTitle>Note on Your Practices</AlertTitle>
                <AlertDescription>{awarenessMessage}</AlertDescription>
              </Alert>
              <p className="text-xs text-muted-foreground mt-4">Remember, consistency is more important than perfection. Be kind to yourself!</p>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: MentalWellnessPracticesChecklist.tsx ======
==================================================

// ====== START OF FILE: MetsCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.52 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Flame } from "lucide-react";

// Calories Burned = MET value * Body Weight (kg) * Time (hours)
// This calculator can solve for METs, Calories, Weight, or Time.

type MetsTarget = 'mets' | 'calories' | 'weight' | 'duration';
// Sample known activities (MET value can be an input too)
const activitiesMETs = [
  { name: "Sleeping", met: 0.9 },
  { name: "Sitting, light office work", met: 1.5 },
  { name: "Walking (3 mph, level)", met: 3.5 },
  { name: "Cycling (leisurely, <10 mph)", met: 4.0 },
  { name: "Jogging (general)", met: 7.0 },
  { name: "Custom Activity (Enter MET value below)", met: 0 }, // For custom MET
];

export default function MetsCalculator() {
  const [target, setTarget] = useState<MetsTarget>('calories');
  const [weightKgMETs, setWeightKgMETs] = useState<string>('');
  const [durationHoursMETs, setDurationHoursMETs] = useState<string>('');
  const [metsValue, setMetsValue] = useState<string>(activitiesMETs[2].met.toString()); // Default to walking
  const [caloriesBurnedMETs, setCaloriesBurnedMETs] = useState<string>('');
  const [selectedActivity, setSelectedActivity] = useState<string>(activitiesMETs[2].name);


  const [result, setResult] = useState<string | null>(null);
  const [resultLabel, setResultLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const handleActivityChange = (activityName: string) => {
    setSelectedActivity(activityName);
    const activity = activitiesMETs.find(a => a.name === activityName);
    if (activity && activity.met > 0) {
      setMetsValue(activity.met.toString());
    } else if (activityName === "Custom Activity (Enter MET value below)") {
      setMetsValue(''); // Clear for custom input
    }
  };

  const calculate = () => {
    setError(null); setResult(null); setResultLabel('');
    const W = parseFloat(weightKgMETs);
    const T = parseFloat(durationHoursMETs);
    const M = parseFloat(metsValue);
    const Cal = parseFloat(caloriesBurnedMETs);
    let calcResult: number;

    try {
      switch(target) {
        case 'calories':
          if(isNaN(W)||W<=0||isNaN(T)||T<=0||isNaN(M)||M<=0) throw new Error("Weight, Duration, and METs must be positive.");
          calcResult = M * W * T;
          setResultLabel("Calories Burned (kcal)");
          break;
        case 'mets':
          if(isNaN(W)||W<=0||isNaN(T)||T<=0||isNaN(Cal)||Cal<=0) throw new Error("Weight, Duration, and Calories must be positive.");
          if(W*T === 0) throw new Error("Product of Weight and Duration cannot be zero.");
          calcResult = Cal / (W * T);
          setResultLabel("MET Value");
          break;
        case 'weight':
          if(isNaN(M)||M<=0||isNaN(T)||T<=0||isNaN(Cal)||Cal<=0) throw new Error("METs, Duration, and Calories must be positive.");
          if(M*T === 0) throw new Error("Product of METs and Duration cannot be zero.");
          calcResult = Cal / (M * T);
          setResultLabel("Body Weight (kg)");
          break;
        case 'duration':
          if(isNaN(M)||M<=0||isNaN(W)||W<=0||isNaN(Cal)||Cal<=0) throw new Error("METs, Weight, and Calories must be positive.");
          if(M*W === 0) throw new Error("Product of METs and Weight cannot be zero.");
          calcResult = Cal / (M * W);
          setResultLabel("Duration (hours)");
          break;
        default: throw new Error("Invalid target.");
      }
      if(isNaN(calcResult) || !isFinite(calcResult)) throw new Error("Calculation resulted in an invalid number.");
      setResult(calcResult.toFixed(2));
    } catch(e:any) { setError(e.message); }
  };

  const resetForm = () => {
    setWeightKgMETs(''); setDurationHoursMETs(''); setMetsValue(activitiesMETs[2].met.toString()); setSelectedActivity(activitiesMETs[2].name); setCaloriesBurnedMETs('');
    setResult(null); setResultLabel(''); setError(null);
  };
  
  const renderInputs = () => (
    <>
      {target !== 'weight' && <div><Label htmlFor="weightMETs">Body Weight (kg)</Label><Input id="weightMETs" type="number" value={weightKgMETs} onChange={e=>setWeightKgMETs(e.target.value)}/></div>}
      {target !== 'duration' && <div><Label htmlFor="durationMETs">Duration of Activity (hours)</Label><Input id="durationMETs" type="number" value={durationHoursMETs} onChange={e=>setDurationHoursMETs(e.target.value)}/></div>}
      {target !== 'mets' && <div><Label htmlFor="activityMETs">Activity / MET Value</Label><Select value={selectedActivity} onValueChange={handleActivityChange}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{activitiesMETs.map(act=><SelectItem key={act.name} value={act.name}>{act.name} {act.met > 0 ? `(${act.met} METs)` : ''}</SelectItem>)}</SelectContent></Select>
      {selectedActivity === "Custom Activity (Enter MET value below)" && <Input type="number" value={metsValue} onChange={e=>setMetsValue(e.target.value)} placeholder="Enter MET value" className="mt-1"/>}</div>}
      {target !== 'calories' && <div><Label htmlFor="caloriesMETs">Calories Burned (kcal)</Label><Input id="caloriesMETs" type="number" value={caloriesBurnedMETs} onChange={e=>setCaloriesBurnedMETs(e.target.value)}/></div>}
    </>
  );

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>METs & Calorie Expenditure Calculator</AlertTitle><AlertDescription>Calculate calories burned, MET value, weight, or duration based on the formula: Calories = METs × Weight(kg) × Duration(hours). METs (Metabolic Equivalents) measure exercise intensity.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Solve for the unknown variable.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="targetMETs">Calculate:</Label><Select value={target} onValueChange={(v:MetsTarget)=>{setTarget(v);resetForm();}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="calories">Calories Burned</SelectItem><SelectItem value="mets">MET Value</SelectItem><SelectItem value="weight">Body Weight</SelectItem><SelectItem value="duration">Duration</SelectItem></SelectContent></Select></div>
            {renderInputs()}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">{resultLabel}</p><p className="text-2xl font-bold text-primary">{result}</p></div><CopyButton textToCopy={result}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: MetsCalculator.tsx ======
==================================================

// ====== START OF FILE: MetValueExplorerCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.65 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Flame } from "lucide-react";

// Calories Burned = MET value * Body Weight (kg) * Time (hours)
// MET values are approximations.

type MetsTarget = 'mets' | 'calories' | 'weight' | 'duration';
// Sample known activities (MET value can be an input too)
const activitiesMETs = [
  { name: "Sleeping", met: 0.9 },
  { name: "Sitting, light office work", met: 1.5 },
  { name: "Walking (3 mph, level)", met: 3.5 },
  { name: "Cycling (leisurely, <10 mph)", met: 4.0 },
  { name: "Jogging (general)", met: 7.0 },
  { name: "Running (6 mph, 10 min/mile)", met: 9.8 },
  { name: "Swimming (moderate)", met: 7.0 },
  { name: "Weightlifting (general)", met: 3.5 },
  { name: "Custom Activity (Enter MET value below)", met: 0 }, // For custom MET
];

export default function MetValueExplorerCalculator() {
  const [target, setTarget] = useState<MetsTarget>('calories');
  const [weightKgMETs, setWeightKgMETs] = useState<string>('');
  const [durationHoursMETs, setDurationHoursMETs] = useState<string>('');
  const [metsValue, setMetsValue] = useState<string>(activitiesMETs[2].met.toString()); // Default to walking
  const [caloriesBurnedMETs, setCaloriesBurnedMETs] = useState<string>('');
  const [selectedActivity, setSelectedActivity] = useState<string>(activitiesMETs[2].name);


  const [result, setResult] = useState<string | null>(null);
  const [resultLabel, setResultLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const handleActivityChange = (activityName: string) => {
    setSelectedActivity(activityName);
    const activity = activitiesMETs.find(a => a.name === activityName);
    if (activity && activity.met > 0) {
      setMetsValue(activity.met.toString());
    } else if (activityName === "Custom Activity (Enter MET value below)") {
      setMetsValue(''); // Clear for custom input
    }
  };

  const calculate = () => {
    setError(null); setResult(null); setResultLabel('');
    const W = parseFloat(weightKgMETs);
    const T = parseFloat(durationHoursMETs);
    const M = parseFloat(metsValue);
    const Cal = parseFloat(caloriesBurnedMETs);
    let calcResult: number;

    try {
      switch(target) {
        case 'calories':
          if(isNaN(W)||W<=0||isNaN(T)||T<=0||isNaN(M)||M<=0) throw new Error("Weight, Duration, and METs must be positive.");
          calcResult = M * W * T;
          setResultLabel("Calories Burned (kcal)");
          break;
        case 'mets':
          if(isNaN(W)||W<=0||isNaN(T)||T<=0||isNaN(Cal)||Cal<=0) throw new Error("Weight, Duration, and Calories must be positive.");
          if(W*T === 0) throw new Error("Product of Weight and Duration cannot be zero.");
          calcResult = Cal / (W * T);
          setResultLabel("MET Value");
          break;
        case 'weight':
          if(isNaN(M)||M<=0||isNaN(T)||T<=0||isNaN(Cal)||Cal<=0) throw new Error("METs, Duration, and Calories must be positive.");
          if(M*T === 0) throw new Error("Product of METs and Duration cannot be zero.");
          calcResult = Cal / (M * T);
          setResultLabel("Body Weight (kg)");
          break;
        case 'duration':
          if(isNaN(M)||M<=0||isNaN(W)||W<=0||isNaN(Cal)||Cal<=0) throw new Error("METs, Weight, and Calories must be positive.");
          if(M*W === 0) throw new Error("Product of METs and Weight cannot be zero.");
          calcResult = Cal / (M * W);
          setResultLabel("Duration (hours)");
          break;
        default: throw new Error("Invalid target.");
      }
      if(isNaN(calcResult) || !isFinite(calcResult)) throw new Error("Calculation resulted in an invalid number.");
      setResult(calcResult.toFixed(2));
    } catch(e:any) { setError(e.message); }
  };

  const resetForm = () => {
    setWeightKgMETs(''); setDurationHoursMETs(''); setMetsValue(activitiesMETs[2].met.toString()); setSelectedActivity(activitiesMETs[2].name); setCaloriesBurnedMETs('');
    setResult(null); setResultLabel(''); setError(null);
  };
  
  const renderInputs = () => (
    <>
      {target !== 'weight' && <div><Label htmlFor="weightMETs">Body Weight (kg)</Label><Input id="weightMETs" type="number" value={weightKgMETs} onChange={e=>setWeightKgMETs(e.target.value)}/></div>}
      {target !== 'duration' && <div><Label htmlFor="durationMETs">Duration of Activity (hours)</Label><Input id="durationMETs" type="number" value={durationHoursMETs} onChange={e=>setDurationHoursMETs(e.target.value)}/></div>}
      {target !== 'mets' && <div><Label htmlFor="activityMETs">Activity / MET Value</Label><Select value={selectedActivity} onValueChange={handleActivityChange}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{activitiesMETs.map(act=><SelectItem key={act.name} value={act.name}>{act.name} {act.met > 0 ? `(${act.met} METs)` : ''}</SelectItem>)}</SelectContent></Select>
      {selectedActivity === "Custom Activity (Enter MET value below)" && <Input type="number" value={metsValue} onChange={e=>setMetsValue(e.target.value)} placeholder="Enter MET value" className="mt-1"/>}</div>}
      {target !== 'calories' && <div><Label htmlFor="caloriesMETs">Calories Burned (kcal)</Label><Input id="caloriesMETs" type="number" value={caloriesBurnedMETs} onChange={e=>setCaloriesBurnedMETs(e.target.value)}/></div>}
    </>
  );

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>METs & Calorie Expenditure Calculator</AlertTitle><AlertDescription>Calculate calories burned, MET value, weight, or duration based on the formula: Calories = METs × Weight(kg) × Duration(hours). METs (Metabolic Equivalents) measure exercise intensity.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Solve for the unknown variable.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="targetMETs">Calculate:</Label><Select value={target} onValueChange={(v:MetsTarget)=>{setTarget(v);resetForm();}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="calories">Calories Burned</SelectItem><SelectItem value="mets">MET Value</SelectItem><SelectItem value="weight">Body Weight</SelectItem><SelectItem value="duration">Duration</SelectItem></SelectContent></Select></div>
            {renderInputs()}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">{resultLabel}</p><p className="text-2xl font-bold text-primary">{result}</p></div><CopyButton textToCopy={result}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: MetValueExplorerCalculator.tsx ======
==================================================

// ====== START OF FILE: MileageCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.23 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Fuel } from "lucide-react";

type DistanceUnitM = 'miles' | 'km';
type VolumeUnitM = 'gallons_us' | 'gallons_uk' | 'liters';
type ResultMileageUnit = 'mpg_us' | 'mpg_uk' | 'l_100km' | 'km_l';

export default function MileageCalculator() {
  const [distance, setDistance] = useState<string>('');
  const [fuelUsed, setFuelUsed] = useState<string>('');
  const [distanceUnit, setDistanceUnitM] = useState<DistanceUnitM>('miles');
  const [volumeUnit, setVolumeUnitM] = useState<VolumeUnitM>('gallons_us');
  const [resultUnit, setResultUnit] = useState<ResultMileageUnit>('mpg_us');

  const [mileageResult, setMileageResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const litersPerGallonUS = 3.78541;
  const litersPerGallonUK = 4.54609;
  const kmPerMile = 1.60934;

  const calculateMileage = () => {
    setError(null);
    setMileageResult(null);

    const distVal = parseFloat(distance);
    const fuelVal = parseFloat(fuelUsed);

    if (isNaN(distVal) || distVal <= 0 || isNaN(fuelVal) || fuelVal <= 0) {
      setError('Please enter valid positive numbers for distance and fuel used.');
      return;
    }

    // Convert all to base units: km and liters
    let distInKm = distVal;
    if (distanceUnit === 'miles') distInKm = distVal * kmPerMile;

    let fuelInLiters = fuelVal;
    if (volumeUnit === 'gallons_us') fuelInLiters = fuelVal * litersPerGallonUS;
    else if (volumeUnit === 'gallons_uk') fuelInLiters = fuelVal * litersPerGallonUK;

    let finalMileage: number;
    let unitLabel = '';

    switch (resultUnit) {
      case 'mpg_us':
        const distMilesUS = distInKm / kmPerMile;
        const fuelGallonsUS = fuelInLiters / litersPerGallonUS;
        finalMileage = distMilesUS / fuelGallonsUS;
        unitLabel = 'MPG (US)';
        break;
      case 'mpg_uk':
        const distMilesUK = distInKm / kmPerMile;
        const fuelGallonsUK = fuelInLiters / litersPerGallonUK;
        finalMileage = distMilesUK / fuelGallonsUK;
        unitLabel = 'MPG (UK)';
        break;
      case 'l_100km':
        finalMileage = (fuelInLiters / distInKm) * 100;
        unitLabel = 'L/100km';
        break;
      case 'km_l':
        finalMileage = distInKm / fuelInLiters;
        unitLabel = 'km/L';
        break;
      default:
        setError("Invalid result unit selected.");
        return;
    }
    
    if (isNaN(finalMileage) || !isFinite(finalMileage)) {
        setError("Could not calculate mileage. Check inputs.");
        return;
    }
    setMileageResult(`${finalMileage.toFixed(2)} ${unitLabel}`);
  };
  
  const resetForm = () => {
    setDistance(''); setFuelUsed('');
    setMileageResult(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Vehicle Mileage Calculator</AlertTitle><AlertDescription>Calculate your vehicle's fuel efficiency with various unit options.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter trip and fuel details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="distanceM">Distance Traveled</Label><Input id="distanceM" type="number" value={distance} onChange={(e) => setDistance(e.target.value)} /></div>
              <div><Label htmlFor="distUnitM">Unit</Label><Select value={distanceUnit} onValueChange={(v: DistanceUnitM) => setDistanceUnitM(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="miles">Miles</SelectItem><SelectItem value="km">Kilometers</SelectItem></SelectContent></Select></div>
            </div>
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="fuelUsedM">Fuel Used</Label><Input id="fuelUsedM" type="number" value={fuelUsed} onChange={(e) => setFuelUsed(e.target.value)} /></div>
              <div><Label htmlFor="volUnitM">Unit</Label><Select value={volumeUnit} onValueChange={(v: VolumeUnitM) => setVolumeUnitM(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="gallons_us">Gallons (US)</SelectItem><SelectItem value="gallons_uk">Gallons (UK)</SelectItem><SelectItem value="liters">Liters</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="resultUnitM">Desired Mileage Unit</Label><Select value={resultUnit} onValueChange={(v: ResultMileageUnit) => setResultUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="mpg_us">MPG (US)</SelectItem><SelectItem value="mpg_uk">MPG (UK)</SelectItem><SelectItem value="l_100km">L/100km</SelectItem><SelectItem value="km_l">km/L</SelectItem></SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateMileage}>Calculate Mileage</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(mileageResult || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Fuel Efficiency</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {mileageResult && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Fuel Efficiency</p><p className="text-2xl font-bold text-primary">{mileageResult}</p></div><CopyButton textToCopy={mileageResult} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: MileageCalculator.tsx ======
==================================================

// ====== START OF FILE: MolarityCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.15 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Beaker } from "lucide-react";

type TargetVariableMolarity = 'molarity' | 'moles' | 'volume';
type VolumeUnitMolarity = 'L' | 'mL';

export default function MolarityCalculator() {
  const [target, setTarget] = useState<TargetVariableMolarity>('molarity');
  const [molesSolute, setMolesSolute] = useState<string>('');
  const [volumeSolution, setVolumeSolution] = useState<string>('');
  const [molaritySolution, setMolaritySolution] = useState<string>('');

  const [volumeUnit, setVolumeUnit] = useState<VolumeUnitMolarity>('L');
  
  const [result, setResult] = useState<string | null>(null);
  const [resultUnitLabel, setResultUnitLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const calculate = () => {
    setError(null);
    setResult(null);
    setResultUnitLabel('');

    const moles = parseFloat(molesSolute);
    let volLiters = parseFloat(volumeSolution); // Assume liters initially
    const molarity = parseFloat(molaritySolution);

    try {
      if (target !== 'volume' && volumeUnit === 'mL' && !isNaN(volLiters)) {
        volLiters /= 1000; // Convert mL to L for calculation
      }
      
      let calculatedValue: number;
      switch (target) {
        case 'molarity':
          if (isNaN(moles) || moles < 0 || isNaN(volLiters) || volLiters <= 0) throw new Error("Moles (>=0) and Volume (>0) must be valid numbers.");
          calculatedValue = moles / volLiters;
          setResultUnitLabel('mol/L (M)');
          break;
        case 'moles':
          if (isNaN(molarity) || molarity < 0 || isNaN(volLiters) || volLiters <= 0) throw new Error("Molarity (>=0) and Volume (>0) must be valid numbers.");
          calculatedValue = molarity * volLiters;
          setResultUnitLabel('mol');
          break;
        case 'volume':
          if (isNaN(moles) || moles < 0 || isNaN(molarity) || molarity <= 0) throw new Error("Moles (>=0) and Molarity (>0) must be valid numbers.");
          calculatedValue = moles / molarity; // Result is in Liters
          if (volumeUnit === 'mL') calculatedValue *= 1000; // Convert to mL if user wants mL output
          setResultUnitLabel(volumeUnit);
          break;
        default: throw new Error("Invalid calculation target.");
      }
      if (isNaN(calculatedValue) || !isFinite(calculatedValue)) throw new Error("Calculation resulted in an invalid number.");
      setResult(calculatedValue.toPrecision(5));
    } catch (e: any) { setError(e.message); }
  };

  const resetForm = () => {
    setMolesSolute(''); setVolumeSolution(''); setMolaritySolution('');
    setResult(null); setError(null); setResultUnitLabel('');
  };

  const renderInputs = () => (
    <>
      {target !== 'moles' && <div><Label htmlFor="molesSolute">Moles of Solute (mol)</Label><Input id="molesSolute" type="number" value={molesSolute} onChange={(e) => setMolesSolute(e.target.value)} /></div>}
      {target !== 'volume' && <div className="grid grid-cols-[2fr_1fr] gap-2"><div><Label htmlFor="volumeSolution">Volume of Solution</Label><Input id="volumeSolution" type="number" value={volumeSolution} onChange={(e) => setVolumeSolution(e.target.value)} /></div><div><Label htmlFor="volumeUnitMol">Unit</Label><Select value={volumeUnit} onValueChange={(v: VolumeUnitMolarity) => setVolumeUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="L">Liters (L)</SelectItem><SelectItem value="mL">Milliliters (mL)</SelectItem></SelectContent></Select></div></div>}
      {target !== 'molarity' && <div><Label htmlFor="molaritySolution">Molarity of Solution (mol/L)</Label><Input id="molaritySolution" type="number" value={molaritySolution} onChange={(e) => setMolaritySolution(e.target.value)} /></div>}
    </>
  );

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Molarity Calculator (M = mol/L)</AlertTitle><AlertDescription>Calculate molarity, moles of solute, or volume of solution. Ensure units are consistent.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Solve for Molarity, Moles, or Volume.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="targetMolarity">Variable to Calculate</Label><Select value={target} onValueChange={(v: TargetVariableMolarity)=>{setTarget(v);setResult(null);setError(null);}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="molarity">Molarity (M)</SelectItem><SelectItem value="moles">Moles of Solute (mol)</SelectItem><SelectItem value="volume">Volume of Solution</SelectItem></SelectContent></Select></div>
            {renderInputs()}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Calculated {target}</p><p className="text-2xl font-bold text-primary">{result} <span className="text-lg">{resultUnitLabel}</span></p></div><CopyButton textToCopy={`${result} ${resultUnitLabel}`} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: MolarityCalculator.tsx ======
==================================================

// ====== START OF FILE: MolarMassCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.29 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, FlaskConical } from "lucide-react";

// Simplified atomic weights (g/mol) - Add more as needed
const atomicWeights: Record<string, number> = {
  H: 1.008, HE: 4.0026, LI: 6.94, BE: 9.0122, B: 10.81, C: 12.011, N: 14.007, O: 15.999, F: 18.998, NE: 20.180,
  NA: 22.990, MG: 24.305, AL: 26.982, SI: 28.085, P: 30.974, S: 32.06, CL: 35.45, AR: 39.948, K: 39.098, CA: 40.078,
  // ... and so on for other common elements
};

export default function MolarMassCalculator() {
  const [formula, setFormula] = useState<string>('');
  const [molarMass, setMolarMass] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const parseFormula = (chemFormula: string): Record<string, number> | null => {
    const elementCounts: Record<string, number> = {};
    // Regex to find elements and their counts (e.g., H2, O, C6H12O6)
    // This regex is simplified and may not handle all complex formulas (e.g. with parentheses or charges)
    const regex = /([A-Z][a-z]?)(\d*)/g;
    let match;
    let validFormula = false;

    while ((match = regex.exec(chemFormula)) !== null) {
      validFormula = true;
      const element = match[1];
      const count = parseInt(match[2] || '1'); // If no number, count is 1
      if (!atomicWeights[element.toUpperCase()]) { // Check against known elements (case-insensitive for symbol)
         setError(`Unknown element symbol: ${element}. This calculator has a limited list of elements.`);
         return null;
      }
      elementCounts[element.toUpperCase()] = (elementCounts[element.toUpperCase()] || 0) + count;
    }
    
    if (!validFormula && chemFormula.trim() !== '') { // If regex found nothing but input wasn't empty
        setError(`Invalid chemical formula format: ${chemFormula}. Please use standard notation (e.g., H2O, C6H12O6).`);
        return null;
    }
    if (Object.keys(elementCounts).length === 0 && chemFormula.trim() !== '') { // Handles cases like just numbers "123"
        setError(`No valid elements found in formula: ${chemFormula}.`);
        return null;
    }


    return Object.keys(elementCounts).length > 0 ? elementCounts : null;
  };

  const calculateMolarMass = () => {
    setError(null);
    setMolarMass(null);

    if (!formula.trim()) {
      setError('Please enter a chemical formula.');
      return;
    }

    const elements = parseFormula(formula);
    if (!elements) {
      // Error already set by parseFormula if it returns null due to unknown element or invalid format.
      if (!error) setError("Invalid formula format or unknown elements."); // Generic fallback if parseFormula didn't set specific error
      return;
    }

    let totalMass = 0;
    for (const [element, count] of Object.entries(elements)) {
      if (atomicWeights[element]) {
        totalMass += atomicWeights[element] * count;
      } else {
        setError(`Atomic weight for element ${element} not found.`);
        return;
      }
    }
    setMolarMass(totalMass.toFixed(3));
  };
  
  const resetForm = () => {
    setFormula('');
    setMolarMass(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Molar Mass Calculator (Simplified)</AlertTitle>
        <AlertDescription>
          Calculate the molar mass of a chemical compound. Enter the formula using standard notation (e.g., H2O, C6H12O6). Case sensitive for element symbols. This tool has a limited list of atomic weights.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter chemical formula.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="chemicalFormula">Chemical Formula</Label><Input id="chemicalFormula" value={formula} onChange={(e) => setFormula(e.target.value)} placeholder="e.g., H2O or C6H12O6" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateMolarMass}>Calculate Molar Mass</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(molarMass || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Molar Mass</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {molarMass && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Molar Mass</p><p className="text-2xl font-bold text-primary">{molarMass} g/mol</p></div><CopyButton textToCopy={molarMass} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: MolarMassCalculator.tsx ======
==================================================

// ====== START OF FILE: MolecularWeightCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.83 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, SigmaSquare } from "lucide-react"; // Reusing SigmaSquare as a generic sum/formula icon

// Functionally very similar to MolarMassCalculator, but uses the term "Molecular Weight"
// Simplified atomic weights (amu or g/mol contextually)
const atomicWeightsMW: Record<string, number> = {
  H: 1.008, HE: 4.0026, LI: 6.94, BE: 9.0122, B: 10.81, C: 12.011, N: 14.007, O: 15.999, F: 18.998, NE: 20.180,
  NA: 22.990, MG: 24.305, AL: 26.982, SI: 28.085, P: 30.974, S: 32.06, CL: 35.45, AR: 39.948, K: 39.098, CA: 40.078,
};

export default function MolecularWeightCalculator() {
  const [formulaMW, setFormulaMW] = useState<string>('');
  const [molecularWeight, setMolecularWeight] = useState<string | null>(null);
  const [errorMW, setErrorMW] = useState<string | null>(null);

  const parseFormulaMW = (chemFormula: string): Record<string, number> | null => {
    const elementCounts: Record<string, number> = {};
    const regex = /([A-Z][a-z]?)(\d*)/g;
    let match;
    let validFormula = false;

    while ((match = regex.exec(chemFormula)) !== null) {
      validFormula = true;
      const element = match[1];
      const count = parseInt(match[2] || '1');
      if (!atomicWeightsMW[element.toUpperCase()]) {
         setErrorMW(`Unknown element: ${element}. Limited element list.`);
         return null;
      }
      elementCounts[element.toUpperCase()] = (elementCounts[element.toUpperCase()] || 0) + count;
    }
    if (!validFormula && chemFormula.trim() !== '') {
        setErrorMW(`Invalid formula: ${chemFormula}. Use e.g., H2O.`);
        return null;
    }
     if (Object.keys(elementCounts).length === 0 && chemFormula.trim() !== '') {
        setErrorMW(`No valid elements found in formula: ${chemFormula}.`);
        return null;
    }
    return Object.keys(elementCounts).length > 0 ? elementCounts : null;
  };

  const calculateMolecularWeight = () => {
    setErrorMW(null);
    setMolecularWeight(null);

    if (!formulaMW.trim()) {
      setErrorMW('Please enter a chemical formula.');
      return;
    }

    const elements = parseFormulaMW(formulaMW);
    if (!elements) {
      if (!errorMW) setErrorMW("Invalid formula or unknown elements.");
      return;
    }

    let totalWeight = 0;
    for (const [element, count] of Object.entries(elements)) {
      if (atomicWeightsMW[element]) {
        totalWeight += atomicWeightsMW[element] * count;
      } else {
        setErrorMW(`Atomic weight for ${element} not found.`); // Should be caught by parseFormula
        return;
      }
    }
    setMolecularWeight(totalWeight.toFixed(3));
  };
  
  const resetForm = () => {
    setFormulaMW('');
    setMolecularWeight(null);
    setErrorMW(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Molecular Weight Calculator (Simplified)</AlertTitle>
        <AlertDescription>
          Calculate the molecular weight (or molar mass) of a chemical compound. Enter formula (e.g., H2O, C6H12O6). Uses a limited list of elements.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter chemical formula.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="formulaMW">Chemical Formula</Label><Input id="formulaMW" value={formulaMW} onChange={(e) => setFormulaMW(e.target.value)} placeholder="e.g., NaCl or CO2" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateMolecularWeight}>Calculate MW</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(molecularWeight || errorMW) && (
          <Card>
            <CardHeader><CardDescription>Calculated Molecular Weight</CardDescription></CardHeader>
            <CardContent>
              {errorMW && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{errorMW}</AlertDescription></Alert>)}
              {molecularWeight && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Molecular Weight</p><p className="text-2xl font-bold text-primary">{molecularWeight} amu (or g/mol)</p></div><CopyButton textToCopy={molecularWeight} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: MolecularWeightCalculator.tsx ======
==================================================

// ====== START OF FILE: MonthlyBudgetCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.85 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, PlusCircle, Trash2 } from "lucide-react";

interface BudgetItem {
  id: string;
  name: string;
  amount: number;
}

export default function MonthlyBudgetCalculator() {
  const [incomeItems, setIncomeItems] = useState<BudgetItem[]>([{ id: crypto.randomUUID(), name: 'Salary', amount: 0 }]);
  const [expenseItems, setExpenseItems] = useState<BudgetItem[]>([{ id: crypto.randomUUID(), name: 'Rent/Mortgage', amount: 0 }]);
  
  const [totalIncome, setTotalIncome] = useState<number>(0);
  const [totalExpenses, setTotalExpenses] = useState<number>(0);
  const [netBalance, setNetBalance] = useState<number>(0);
  const [isCalculated, setIsCalculated] = useState<boolean>(false);

  const handleItemChange = (type: 'income' | 'expense', id: string, field: 'name' | 'amount', value: string) => {
    const setItems = type === 'income' ? setIncomeItems : setExpenseItems;
    setItems(prevItems => 
      prevItems.map(item => 
        item.id === id ? { ...item, [field]: field === 'amount' ? parseFloat(value) || 0 : value } : item
      )
    );
    setIsCalculated(false);
  };

  const addItem = (type: 'income' | 'expense') => {
    const setItems = type === 'income' ? setIncomeItems : setExpenseItems;
    setItems(prevItems => [...prevItems, { id: crypto.randomUUID(), name: '', amount: 0 }]);
    setIsCalculated(false);
  };

  const removeItem = (type: 'income' | 'expense', id: string) => {
    const setItems = type === 'income' ? setIncomeItems : setExpenseItems;
    if (items.length > 1) {
        setItems(prevItems => prevItems.filter(item => item.id !== id));
        setIsCalculated(false);
    }
  };

  const calculateBudget = () => {
    const currentTotalIncome = incomeItems.reduce((sum, item) => sum + item.amount, 0);
    const currentTotalExpenses = expenseItems.reduce((sum, item) => sum + item.amount, 0);
    setTotalIncome(currentTotalIncome);
    setTotalExpenses(currentTotalExpenses);
    setNetBalance(currentTotalIncome - currentTotalExpenses);
    setIsCalculated(true);
  };

  const resetBudget = () => {
    setIncomeItems([{ id: crypto.randomUUID(), name: 'Salary', amount: 0 }]);
    setExpenseItems([{ id: crypto.randomUUID(), name: 'Rent/Mortgage', amount: 0 }]);
    setTotalIncome(0);
    setTotalExpenses(0);
    setNetBalance(0);
    setIsCalculated(false);
  }

  const renderBudgetItems = (type: 'income' | 'expense', items: BudgetItem[]) => (
    <div className="space-y-3">
      {items.map((item, index) => (
        <div key={item.id} className="grid grid-cols-[1fr_auto_auto] gap-2 items-center">
          <Input 
            type="text" 
            placeholder={type === 'income' ? `Income Source ${index + 1}` : `Expense ${index + 1}`}
            value={item.name} 
            onChange={(e) => handleItemChange(type, item.id, 'name', e.target.value)}
            className="h-9"
          />
          <Input 
            type="number" 
            placeholder="Amount"
            value={item.amount === 0 && item.name === '' ? '' : item.amount.toString()}
            onChange={(e) => handleItemChange(type, item.id, 'amount', e.target.value)}
            className="h-9 w-28"
          />
          <Button variant="ghost" size="icon" onClick={() => removeItem(type, item.id)} disabled={items.length === 1} className="h-9 w-9">
            <Trash2 className="h-4 w-4 text-destructive" />
          </Button>
        </div>
      ))}
      <Button variant="outline" size="sm" onClick={() => addItem(type)} className="mt-2">
        <PlusCircle className="mr-2 h-4 w-4" /> Add {type === 'income' ? 'Income Source' : 'Expense'}
      </Button>
    </div>
  );

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          <Card>
            <CardHeader><CardTitle className="font-headline">Monthly Income Sources</CardTitle></CardHeader>
            <CardContent>{renderBudgetItems('income', incomeItems)}</CardContent>
          </Card>
          <Card>
            <CardHeader><CardTitle className="font-headline">Monthly Expenses</CardTitle></CardHeader>
            <CardContent>{renderBudgetItems('expense', expenseItems)}</CardContent>
          </Card>
           <div className="flex flex-col sm:flex-row gap-2 mt-4">
             <Button onClick={calculateBudget} className="flex-1">Calculate Monthly Budget</Button>
             <Button variant="outline" onClick={resetBudget} className="flex-1">Reset Budget</Button>
           </div>
        </div>

        <Card className="lg:col-span-1">
          <CardHeader><CardTitle className="font-headline">Monthly Budget Summary</CardTitle></CardHeader>
          <CardContent className="space-y-4">
            {!isCalculated && <Alert><AlertDescription>Click "Calculate Monthly Budget" to see your summary.</AlertDescription></Alert>}
            {isCalculated && (
              <>
                <div className="p-3 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Total Monthly Income</p>
                  <p className="text-xl font-semibold text-green-600">${totalIncome.toFixed(2)}</p>
                </div>
                <div className="p-3 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Total Monthly Expenses</p>
                  <p className="text-xl font-semibold text-red-600">${totalExpenses.toFixed(2)}</p>
                </div>
                <div className={`flex justify-between items-center p-3 rounded-md ${netBalance >= 0 ? 'bg-primary/10' : 'bg-destructive/10'}`}>
                  <div>
                    <p className="text-sm text-muted-foreground">Net Balance (Surplus/Deficit)</p>
                    <p className={`text-2xl font-bold ${netBalance >= 0 ? 'text-primary' : 'text-destructive'}`}>${netBalance.toFixed(2)}</p>
                  </div>
                  <CopyButton textToCopy={netBalance.toFixed(2)} />
                </div>
                <Alert variant={netBalance >=0 ? "default" : "destructive"}>
                    <AlertTitle>{netBalance >=0 ? "Looking Good!" : "Attention Needed!"}</AlertTitle>
                    <AlertDescription>
                        {netBalance >= 0 ? `You have a surplus of $${netBalance.toFixed(2)}.` : `You have a deficit of $${Math.abs(netBalance).toFixed(2)}. Consider reducing expenses or increasing income.`}
                    </AlertDescription>
                </Alert>
              </>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: MonthlyBudgetCalculator.tsx ======
==================================================

// ====== START OF FILE: MortgageAmortizationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8.31 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Terminal, ListOrdered, Info } from "lucide-react";

interface AmortizationEntry {
  month: number;
  payment: number;
  principal: number;
  interest: number;
  balance: number;
}

export default function MortgageAmortizationCalculator() {
  const [loanAmount, setLoanAmount] = useState<string>('');
  const [interestRate, setInterestRate] = useState<string>(''); // Annual %
  const [loanTermYears, setLoanTermYears] = useState<string>('');
  
  const [monthlyPayment, setMonthlyPayment] = useState<string | null>(null);
  const [totalInterestPaid, setTotalInterestPaid] = useState<string | null>(null);
  const [totalRepayment, setTotalRepayment] = useState<string | null>(null);
  const [schedule, setSchedule] = useState<AmortizationEntry[]>([]);
  const [error, setError] = useState<string | null>(null);

  const calculateAmortization = () => {
    setError(null);
    setMonthlyPayment(null);
    setTotalInterestPaid(null);
    setTotalRepayment(null);
    setSchedule([]);

    const P = parseFloat(loanAmount);
    const annualRate = parseFloat(interestRate) / 100;
    const termYears = parseInt(loanTermYears);

    if (isNaN(P) || P <= 0 || isNaN(annualRate) || annualRate < 0 || isNaN(termYears) || termYears <= 0) {
      setError('Please enter valid positive numbers for loan amount, interest rate, and term (years).');
      return;
    }

    const monthlyRate = annualRate / 12;
    const numberOfPayments = termYears * 12;

    let M; // Monthly Payment
    if (monthlyRate === 0) {
        M = P / numberOfPayments;
    } else {
        M = P * (monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments)) / (Math.pow(1 + monthlyRate, numberOfPayments) - 1);
    }
    
    if (isNaN(M) || !isFinite(M)) {
        setError('Could not calculate monthly payment. Check inputs.');
        return;
    }
    setMonthlyPayment(M.toFixed(2));

    let balance = P;
    let currentTotalInterest = 0;
    const newSchedule: AmortizationEntry[] = [];

    for (let i = 1; i <= numberOfPayments; i++) {
      const interestPayment = balance * monthlyRate;
      const principalPayment = M - interestPayment;
      balance -= principalPayment;
      currentTotalInterest += interestPayment;
      
      newSchedule.push({
        month: i,
        payment: M,
        principal: principalPayment,
        interest: interestPayment,
        balance: balance < 0.005 ? 0 : balance, // Handle floating point precision for final balance
      });
      if (balance <= 0.005 && i < numberOfPayments) break; 
    }
    
    setSchedule(newSchedule);
    setTotalInterestPaid(currentTotalInterest.toFixed(2));
    // Use the sum of actual payments if schedule was cut short, or M * numberOfPayments if full term
    const actualTotalPaid = newSchedule.reduce((sum, entry) => sum + entry.payment, 0);
    // If the loop finished early due to balance reaching zero, total repayment might be slightly different than M * numberOfPayments
    // For simplicity here we use M * numberOfPayments but adjust if schedule is shorter
    const finalTotalRepayment = (newSchedule.length < numberOfPayments && balance <= 0.005) ? (P + currentTotalInterest) : (M * numberOfPayments);
    setTotalRepayment(finalTotalRepayment.toFixed(2));
  };
  
  const resetForm = () => {
    setLoanAmount(''); setInterestRate(''); setLoanTermYears('');
    setMonthlyPayment(null); setTotalInterestPaid(null); setTotalRepayment(null);
    setSchedule([]); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Mortgage Amortization Schedule</AlertTitle><AlertDescription>See how your mortgage is paid down over time, with a breakdown of principal and interest payments.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Enter Mortgage Details</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="loanAmountMA">Loan Amount ($)</Label><Input id="loanAmountMA" type="number" value={loanAmount} onChange={(e) => setLoanAmount(e.target.value)} placeholder="e.g., 250000" /></div>
            <div><Label htmlFor="interestRateMA">Annual Interest Rate (%)</Label><Input id="interestRateMA" type="number" value={interestRate} onChange={(e) => setInterestRate(e.target.value)} placeholder="e.g., 6.5" /></div>
            <div><Label htmlFor="loanTermYearsMA">Loan Term (Years)</Label><Input id="loanTermYearsMA" type="number" value={loanTermYears} onChange={(e) => setLoanTermYears(e.target.value)} placeholder="e.g., 30" /></div>
          </CardContent>
          <CardFooter className="flex flex-col sm:flex-row justify-between gap-2"><Button onClick={calculateAmortization} className="w-full sm:w-auto">Generate Schedule</Button><Button variant="outline" onClick={resetForm} className="w-full sm:w-auto">Reset</Button></CardFooter>
        </Card>

        <Card className="lg:col-span-2">
            <CardHeader><CardTitle className="font-headline">Loan Summary & Schedule</CardTitle></CardHeader>
            <CardContent className="space-y-4">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {(monthlyPayment || totalInterestPaid || totalRepayment) && (
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6">
                    <div className="p-3 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Monthly Payment (P&I)</p><div className="flex justify-between items-center"><p className="text-xl font-semibold">${monthlyPayment}</p>{monthlyPayment && <CopyButton textToCopy={monthlyPayment} size="icon" variant="ghost"/>}</div></div>
                    <div className="p-3 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Principal Paid</p><p className="text-xl font-semibold">${parseFloat(loanAmount).toFixed(2)}</p></div>
                    <div className="p-3 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Interest Paid</p><div className="flex justify-between items-center"><p className="text-xl font-semibold">${totalInterestPaid}</p>{totalInterestPaid && <CopyButton textToCopy={totalInterestPaid} size="icon" variant="ghost"/>}</div></div>
                </div>
              )}
              {schedule.length > 0 && (
                <>
                  <div className="flex items-center gap-2"><ListOrdered className="h-5 w-5 text-primary"/><h3 className="font-semibold">Amortization Schedule</h3></div>
                  <ScrollArea className="h-[400px] w-full border rounded-md">
                    <Table>
                      <TableHeader className="sticky top-0 bg-muted/80 backdrop-blur-sm"><TableRow><TableHead className="w-[80px]">Month</TableHead><TableHead>Payment</TableHead><TableHead>Principal</TableHead><TableHead>Interest</TableHead><TableHead className="text-right">Balance</TableHead></TableRow></TableHeader>
                      <TableBody>
                        {schedule.map((entry) => (
                          <TableRow key={entry.month}>
                            <TableCell>{entry.month}</TableCell>
                            <TableCell>${entry.payment.toFixed(2)}</TableCell>
                            <TableCell>${entry.principal.toFixed(2)}</TableCell>
                            <TableCell>${entry.interest.toFixed(2)}</TableCell>
                            <TableCell className="text-right">${entry.balance.toFixed(2)}</TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </ScrollArea>
                </>
              )}
            </CardContent>
          </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: MortgageAmortizationCalculator.tsx ======
==================================================

// ====== START OF FILE: MortgageCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.12 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Home } from "lucide-react";

export default function MortgageCalculator() {
  const [homePrice, setHomePrice] = useState<string>('');
  const [downPayment, setDownPayment] = useState<string>('0');
  const [interestRate, setInterestRate] = useState<string>(''); // Annual %
  const [loanTermYears, setLoanTermYears] = useState<string>('30');
  const [propertyTaxes, setPropertyTaxes] = useState<string>('0'); // Annual
  const [homeInsurance, setHomeInsurance] = useState<string>('0'); // Annual
  const [pmi, setPmi] = useState<string>('0'); // Monthly Private Mortgage Insurance

  const [loanAmount, setLoanAmount] = useState<string | null>(null);
  const [monthlyPandI, setMonthlyPandI] = useState<string | null>(null); // Principal & Interest
  const [totalMonthlyPayment, setTotalMonthlyPayment] = useState<string | null>(null); // PITI + PMI
  const [error, setError] = useState<string | null>(null);

  const calculateMortgage = () => {
    setError(null);
    setLoanAmount(null);
    setMonthlyPandI(null);
    setTotalMonthlyPayment(null);

    const price = parseFloat(homePrice);
    const dp = parseFloat(downPayment);
    const annualRate = parseFloat(interestRate) / 100;
    const termYrs = parseInt(loanTermYears);
    const taxAnnual = parseFloat(propertyTaxes);
    const insuranceAnnual = parseFloat(homeInsurance);
    const pmiMonthly = parseFloat(pmi);

    if (isNaN(price) || price <= 0 || isNaN(dp) || dp < 0 || isNaN(annualRate) || annualRate < 0 || isNaN(termYrs) || termYrs <= 0) {
      setError('Enter valid home price, down payment, interest rate, and loan term.');
      return;
    }
    if (isNaN(taxAnnual) || taxAnnual < 0 || isNaN(insuranceAnnual) || insuranceAnnual < 0 || isNaN(pmiMonthly) || pmiMonthly < 0) {
        setError('Taxes, insurance, and PMI must be non-negative values.');
        return;
    }
    if (dp >= price) {
        setError('Down payment cannot be equal to or greater than the home price.');
        return;
    }

    const P = price - dp; // Principal Loan Amount
    setLoanAmount(P.toFixed(2));

    const monthlyRate = annualRate / 12;
    const N = termYrs * 12; // Total number of payments

    let M_PandI; // Monthly Principal & Interest
    if (P === 0) { // If fully paid with downpayment
        M_PandI = 0;
    } else if (monthlyRate === 0) {
        M_PandI = P / N;
    } else {
        M_PandI = P * (monthlyRate * Math.pow(1 + monthlyRate, N)) / (Math.pow(1 + monthlyRate, N) - 1);
    }
    
    if (isNaN(M_PandI) || !isFinite(M_PandI)) {
      setError('Could not calculate P&I payment. Check inputs.');
      return;
    }
    setMonthlyPandI(M_PandI.toFixed(2));

    const monthlyTaxes = taxAnnual / 12;
    const monthlyInsurance = insuranceAnnual / 12;
    const totalPITI_PMI = M_PandI + monthlyTaxes + monthlyInsurance + pmiMonthly;
    setTotalMonthlyPayment(totalPITI_PMI.toFixed(2));
  };
  
  const resetForm = () => {
    setHomePrice(''); setDownPayment('0'); setInterestRate(''); setLoanTermYears('30');
    setPropertyTaxes('0'); setHomeInsurance('0'); setPmi('0');
    setLoanAmount(null); setMonthlyPandI(null); setTotalMonthlyPayment(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Mortgage Payment Estimator</AlertTitle><AlertDescription>Estimate your monthly mortgage payment, including principal, interest, taxes, insurance (PITI), and PMI.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter loan and property details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="homePriceMort">Home Price ($)</Label><Input id="homePriceMort" type="number" value={homePrice} onChange={(e) => setHomePrice(e.target.value)} placeholder="e.g., 300000" /></div>
            <div><Label htmlFor="downPaymentMort">Down Payment ($)</Label><Input id="downPaymentMort" type="number" value={downPayment} onChange={(e) => setDownPayment(e.target.value)} placeholder="e.g., 60000"/></div>
            <div><Label htmlFor="interestRateMort">Interest Rate (Annual %)</Label><Input id="interestRateMort" type="number" value={interestRate} onChange={(e) => setInterestRate(e.target.value)} placeholder="e.g., 6.5" /></div>
            <div><Label htmlFor="loanTermYearsMort">Loan Term (Years)</Label><Input id="loanTermYearsMort" type="number" value={loanTermYears} onChange={(e) => setLoanTermYears(e.target.value)} placeholder="e.g., 30" /></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="propertyTaxesMort">Annual Property Taxes ($)</Label><Input id="propertyTaxesMort" type="number" value={propertyTaxes} onChange={(e) => setPropertyTaxes(e.target.value)} placeholder="e.g., 3600"/></div>
              <div><Label htmlFor="homeInsuranceMort">Annual Home Insurance ($)</Label><Input id="homeInsuranceMort" type="number" value={homeInsurance} onChange={(e) => setHomeInsurance(e.target.value)} placeholder="e.g., 1200"/></div>
            </div>
            <div><Label htmlFor="pmiMort">Monthly PMI ($) (Optional)</Label><Input id="pmiMort" type="number" value={pmi} onChange={(e) => setPmi(e.target.value)} placeholder="e.g., 100"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateMortgage}>Calculate Payment</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(totalMonthlyPayment || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Mortgage Payments</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {loanAmount && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Loan Amount</p><p className="font-semibold">${loanAmount}</p></div>)}
              {monthlyPandI && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Monthly Principal & Interest (P&I)</p><p className="font-semibold">${monthlyPandI}</p></div>)}
              {totalMonthlyPayment && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Total Estimated Monthly Payment</p><p className="text-2xl font-bold text-primary">${totalMonthlyPayment}</p></div>
                  <CopyButton textToCopy={totalMonthlyPayment} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: MortgageCalculator.tsx ======
==================================================

// ====== START OF FILE: MortgageCalculatorUk.tsx ======
// File converted from TSX to TXT
// Original size: 6.06 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Home } from "lucide-react";

// Simplified UK mortgage calculator.
// Differences can include stamp duty, specific lender criteria. This primarily focuses on P&I.
// Many UK mortgages are interest-only or have different term structures. This is a basic repayment model.

export default function MortgageCalculatorUk() {
  const [propertyPrice, setPropertyPrice] = useState<string>(''); // Pounds (£)
  const [depositAmount, setDepositAmount] = useState<string>(''); // Pounds (£)
  const [interestRateUk, setInterestRateUk] = useState<string>(''); // Annual %
  const [mortgageTermYears, setMortgageTermYears] = useState<string>('25');
  
  // For simplicity, not including Stamp Duty Land Tax (SDLT) calculation here, as it's complex.
  // Also not including other fees (arrangement, valuation etc.)

  const [loanAmountUk, setLoanAmountUk] = useState<string | null>(null);
  const [monthlyPaymentUk, setMonthlyPaymentUk] = useState<string | null>(null); // Principal & Interest
  const [errorUk, setErrorUk] = useState<string | null>(null);

  const calculateUkMortgage = () => {
    setErrorUk(null);
    setLoanAmountUk(null);
    setMonthlyPaymentUk(null);

    const price = parseFloat(propertyPrice);
    const deposit = parseFloat(depositAmount);
    const annualRate = parseFloat(interestRateUk) / 100;
    const termYrs = parseInt(mortgageTermYears);

    if (isNaN(price) || price <= 0 || isNaN(deposit) || deposit < 0 || isNaN(annualRate) || annualRate < 0 || isNaN(termYrs) || termYrs <= 0) {
      setErrorUk('Enter valid property price, deposit, interest rate, and term.');
      return;
    }
    if (deposit >= price) {
        setErrorUk('Deposit cannot be equal to or greater than the property price.');
        return;
    }

    const P = price - deposit; // Principal Loan Amount
    setLoanAmountUk(P.toFixed(2));

    const monthlyRate = annualRate / 12; // UK mortgages often quote annual rates, compounded monthly or annually depending on product
    const N = termYrs * 12; // Total number of payments

    let M_PandI; // Monthly Principal & Interest
    if (P === 0) {
        M_PandI = 0;
    } else if (monthlyRate === 0) {
        M_PandI = P / N;
    } else {
        M_PandI = P * (monthlyRate * Math.pow(1 + monthlyRate, N)) / (Math.pow(1 + monthlyRate, N) - 1);
    }
    
    if (isNaN(M_PandI) || !isFinite(M_PandI)) {
      setErrorUk('Could not calculate P&I payment. Check inputs.');
      return;
    }
    setMonthlyPaymentUk(M_PandI.toFixed(2));
  };
  
  const resetFormUk = () => {
    setPropertyPrice(''); setDepositAmount(''); setInterestRateUk(''); setMortgageTermYears('25');
    setLoanAmountUk(null); setMonthlyPaymentUk(null); setErrorUk(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>UK Mortgage Payment Estimator (Simplified)</AlertTitle><AlertDescription>Estimate your monthly repayment mortgage payment for a UK property. This is a simplified calculation and does not include Stamp Duty Land Tax (SDLT), lender fees, or other costs associated with buying a home in the UK.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter UK property and loan details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="propertyPriceUk">Property Price (£)</Label><Input id="propertyPriceUk" type="number" value={propertyPrice} onChange={(e) => setPropertyPrice(e.target.value)} placeholder="e.g., 250000" /></div>
            <div><Label htmlFor="depositAmountUk">Deposit Amount (£)</Label><Input id="depositAmountUk" type="number" value={depositAmount} onChange={(e) => setDepositAmount(e.target.value)} placeholder="e.g., 25000"/></div>
            <div><Label htmlFor="interestRateUk">Interest Rate (Annual %)</Label><Input id="interestRateUk" type="number" value={interestRateUk} onChange={(e) => setInterestRateUk(e.target.value)} placeholder="e.g., 4.5" /></div>
            <div><Label htmlFor="mortgageTermYearsUk">Mortgage Term (Years)</Label><Input id="mortgageTermYearsUk" type="number" value={mortgageTermYears} onChange={(e) => setMortgageTermYears(e.target.value)} placeholder="e.g., 25" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateUkMortgage}>Calculate Payment</Button><Button variant="outline" onClick={resetFormUk}>Reset</Button></CardFooter>
        </Card>

        {(monthlyPaymentUk || errorUk) && (
          <Card>
            <CardHeader><CardDescription>Estimated UK Mortgage Payment</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {errorUk && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{errorUk}</AlertDescription></Alert>)}
              {loanAmountUk && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Loan Amount</p><p className="font-semibold">£{loanAmountUk}</p></div>)}
              {monthlyPaymentUk && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Est. Monthly Repayment (P&I)</p><p className="text-2xl font-bold text-primary">£{monthlyPaymentUk}</p></div>
                  <CopyButton textToCopy={monthlyPaymentUk} />
                </div>
              )}
            </CardContent>
             <CardFooter><p className="text-xs text-muted-foreground">Does not include SDLT or other fees. Consult a UK mortgage advisor.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: MortgageCalculatorUk.tsx ======
==================================================

// ====== START OF FILE: MortgagePayoffCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.52 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CalendarCheck, TrendingDown } from "lucide-react";

export default function MortgagePayoffCalculator() {
  const [originalBalance, setOriginalBalance] = useState<string>('');
  const [interestRate, setInterestRate] = useState<string>(''); // Annual %
  const [originalMonthlyPayment, setOriginalMonthlyPayment] = useState<string>('');
  const [extraMonthlyPayment, setExtraMonthlyPayment] = useState<string>('0');

  const [originalYears, setOriginalYears] = useState<string | null>(null);
  const [newYears, setNewYears] = useState<string | null>(null);
  const [interestSaved, setInterestSaved] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePayoffTime = (balance: number, rate: number, payment: number): { months: number, totalInterest: number } | null => {
    if (payment <= 0) return null;
    const monthlyRate = rate / 12;
    if (monthlyRate > 0 && payment <= balance * monthlyRate) return { months: Infinity, totalInterest: Infinity }; // Won't pay off

    let numMonths;
    if (monthlyRate === 0) {
        numMonths = balance / payment;
    } else {
        numMonths = -(Math.log(1 - (balance * monthlyRate) / payment)) / Math.log(1 + monthlyRate);
    }
    if (isNaN(numMonths) || !isFinite(numMonths) || numMonths <= 0) return null;
    
    const totalPaid = payment * numMonths; // Precise total paid
    const totalInt = totalPaid - balance;
    return { months: Math.ceil(numMonths), totalInterest: totalInt };
  };

  const formatYearsMonths = (totalMonths: number): string => {
    if (totalMonths === Infinity) return "Never (payment too low)";
    const years = Math.floor(totalMonths / 12);
    const months = totalMonths % 12;
    return `${years} years, ${months} months`;
  };

  const calculate = () => {
    setError(null);
    setOriginalYears(null);
    setNewYears(null);
    setInterestSaved(null);

    const bal = parseFloat(originalBalance);
    const rateAnnual = parseFloat(interestRate) / 100;
    const pmtOrig = parseFloat(originalMonthlyPayment);
    const pmtExtra = parseFloat(extraMonthlyPayment) || 0;

    if (isNaN(bal) || bal <=0 || isNaN(rateAnnual) || rateAnnual < 0 || isNaN(pmtOrig) || pmtOrig <= 0) {
      setError('Valid balance, rate, and original payment required.');
      return;
    }
    if (isNaN(pmtExtra) || pmtExtra < 0) {
        setError('Extra payment must be zero or positive.');
        return;
    }

    const originalPayoff = calculatePayoffTime(bal, rateAnnual, pmtOrig);
    if (!originalPayoff) { setError("Could not calculate original payoff."); return; }
    setOriginalYears(formatYearsMonths(originalPayoff.months));

    const newTotalPayment = pmtOrig + pmtExtra;
    const newPayoff = calculatePayoffTime(bal, rateAnnual, newTotalPayment);
    if (!newPayoff) { setError("Could not calculate new payoff with extra payment."); return; }
    setNewYears(formatYearsMonths(newPayoff.months));
    
    if (originalPayoff.months !== Infinity && newPayoff.months !== Infinity) {
        const saved = originalPayoff.totalInterest - newPayoff.totalInterest;
        setInterestSaved(saved.toFixed(2));
    }
  };

  const resetForm = () => {
    setOriginalBalance(''); setInterestRate(''); setOriginalMonthlyPayment(''); setExtraMonthlyPayment('0');
    setOriginalYears(null); setNewYears(null); setInterestSaved(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Mortgage Payoff Accelerator</AlertTitle><AlertDescription>See how much faster you can pay off your mortgage and how much interest you could save by making extra monthly payments.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your current mortgage and payment details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="origBalMP">Original Loan Balance ($)</Label><Input id="origBalMP" type="number" value={originalBalance} onChange={e => setOriginalBalance(e.target.value)} placeholder="e.g., 200000"/></div>
            <div><Label htmlFor="intRateMP">Interest Rate (Annual %)</Label><Input id="intRateMP" type="number" value={interestRate} onChange={e => setInterestRate(e.target.value)} placeholder="e.g., 6.0"/></div>
            <div><Label htmlFor="origPmtMP">Current Monthly P&I Payment ($)</Label><Input id="origPmtMP" type="number" value={originalMonthlyPayment} onChange={e => setOriginalMonthlyPayment(e.target.value)} placeholder="e.g., 1200"/></div>
            <div><Label htmlFor="extraPmtMP">Extra Monthly Payment ($) (Optional)</Label><Input id="extraPmtMP" type="number" value={extraMonthlyPayment} onChange={e => setExtraMonthlyPayment(e.target.value)} placeholder="e.g., 200"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate}>Calculate Payoff</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(originalYears || newYears || interestSaved || error) && (
          <Card>
            <CardHeader><CardDescription>Payoff Acceleration Summary</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {originalYears && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Original Payoff Time</p><p className="font-semibold">{originalYears}</p></div>)}
              {newYears && (<div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">New Payoff Time (with extra)</p><p className="text-xl font-bold text-primary">{newYears}</p></div>)}
              {interestSaved && parseFloat(interestSaved) > 0 && (<div className="p-2 bg-green-500/10 text-green-700 rounded-md"><p className="text-sm">Estimated Interest Saved</p><p className="font-semibold">${interestSaved}</p></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: MortgagePayoffCalculator.tsx ======
==================================================

// ====== START OF FILE: MortgageRecastCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.35 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, RefreshCw } from "lucide-react";

export default function MortgageRecastCalculator() {
  const [currentBalance, setCurrentBalance] = useState<string>('');
  const [interestRate, setInterestRate] = useState<string>(''); // Annual %
  const [remainingTermMonths, setRemainingTermMonths] = useState<string>('');
  const [lumpSumPayment, setLumpSumPayment] = useState<string>('');

  const [currentMonthlyPI, setCurrentMonthlyPI] = useState<string | null>(null);
  const [newMonthlyPI, setNewMonthlyPI] = useState<string | null>(null);
  const [monthlySavings, setMonthlySavings] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePayment = (balance: number, ratePercent: number, termMonths: number): number | null => {
    if (balance <= 0 || ratePercent < 0 || termMonths <= 0) return 0; // If balance is 0, payment is 0
    const monthlyRate = ratePercent / 100 / 12;
    if (monthlyRate === 0) return balance / termMonths;
    const payment = balance * (monthlyRate * Math.pow(1 + monthlyRate, termMonths)) / (Math.pow(1 + monthlyRate, termMonths) - 1);
    return isNaN(payment) || !isFinite(payment) ? null : payment;
  };

  const calculateRecast = () => {
    setError(null); setCurrentMonthlyPI(null); setNewMonthlyPI(null); setMonthlySavings(null);
    const bal = parseFloat(currentBalance);
    const rate = parseFloat(interestRate);
    const termM = parseInt(remainingTermMonths);
    const lumpSum = parseFloat(lumpSumPayment);

    if (isNaN(bal) || bal <=0 || isNaN(rate) || rate <0 || isNaN(termM) || termM <=0 || isNaN(lumpSum) || lumpSum <0) {
      setError("Current Balance, Rate, Term must be positive. Lump sum must be non-negative."); return;
    }
    if (lumpSum >= bal) {
      setError("Lump sum payment is enough to pay off the mortgage. Recasting not applicable.");
      setCurrentMonthlyPI(calculatePayment(bal, rate, termM)?.toFixed(2) || "N/A");
      setNewMonthlyPI("0.00 (Paid Off)");
      setMonthlySavings(currentMonthlyPayment); // Saving the entire current payment
      return;
    }

    const currentPmt = calculatePayment(bal, rate, termM);
    if (currentPmt === null) { setError("Could not calculate current monthly P&I."); return; }
    setCurrentMonthlyPI(currentPmt.toFixed(2));

    const newBalanceAfterLumpSum = bal - lumpSum;
    // Recasting usually keeps the remaining term the same and recalculates payment.
    const newPmt = calculatePayment(newBalanceAfterLumpSum, rate, termM);
    if (newPmt === null) { setError("Could not calculate new monthly P&I after recast."); return; }
    setNewMonthlyPI(newPmt.toFixed(2));
    setMonthlySavings((currentPmt - newPmt).toFixed(2));
  };

  const resetForm = () => {
    setCurrentBalance(''); setInterestRate(''); setRemainingTermMonths(''); setLumpSumPayment('');
    setCurrentMonthlyPI(null); setNewMonthlyPI(null); setMonthlySavings(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Mortgage Recast Calculator (Simplified)</AlertTitle><AlertDescription>Estimate how a lump-sum payment could reduce your monthly mortgage payment through recasting (re-amortization). Assumes lender allows recasting and keeps term/rate same.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter current loan and lump sum details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="currBalRecast">Current Mortgage Balance ($)</Label><Input id="currBalRecast" type="number" value={currentBalance} onChange={e=>setCurrentBalance(e.target.value)} placeholder="e.g., 200000"/></div>
            <div className="grid grid-cols-2 gap-4">
                <div><Label htmlFor="currRateRecast">Interest Rate (%)</Label><Input id="currRateRecast" type="number" value={interestRate} onChange={e=>setInterestRate(e.target.value)} placeholder="e.g., 6.5"/></div>
                <div><Label htmlFor="currTermRecast">Remaining Term (Months)</Label><Input id="currTermRecast" type="number" value={remainingTermMonths} onChange={e=>setRemainingTermMonths(e.target.value)} placeholder="e.g., 300"/></div>
            </div>
            <div><Label htmlFor="lumpSumRecast">Lump Sum Payment ($)</Label><Input id="lumpSumRecast" type="number" value={lumpSumPayment} onChange={e=>setLumpSumPayment(e.target.value)} placeholder="e.g., 20000"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateRecast}>Calculate Recast</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(newMonthlyPI || error) && (
          <Card>
            <CardHeader><CardDescription>Recasting Impact (P&I Only)</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {currentMonthlyPI && (<div className="p-2 bg-muted rounded-md text-sm">Current Monthly P&I: <strong className="font-semibold">${currentMonthlyPI}</strong></div>)}
              {newMonthlyPI && (<div className="p-2 bg-primary/10 rounded-md text-sm">New Est. Monthly P&I: <strong className="font-semibold text-primary">${newMonthlyPI}</strong></div>)}
              {monthlySavings && (<div className={`p-2 rounded-md ${parseFloat(monthlySavings) >= 0 ? 'bg-green-500/10 text-green-700' : 'bg-red-500/10 text-red-700'}`}><p className="text-sm">Est. Monthly P&I Savings:</p><p className="text-xl font-bold">${monthlySavings}</p></div>)}
              <AlertDescription className="text-xs pt-2">Recasting typically involves a fee. This calculator doesn't include taxes, insurance, or fees. Not all lenders offer recasting.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
    

// ====== END OF FILE: MortgageRecastCalculator.tsx ======
==================================================

// ====== START OF FILE: MulchCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.42 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Leaf } from "lucide-react";

type AreaUnitMulch = 'sqft' | 'sqm';
type DepthUnitMulch = 'in' | 'cm';
type VolumeResultUnit = 'cubic_yards' | 'cubic_meters' | 'bags_2cuft' | 'bags_3cuft';

export default function MulchCalculator() {
  const [length, setLength] = useState<string>('');
  const [width, setWidth] = useState<string>('');
  const [depth, setDepth] = useState<string>('');
  const [areaUnit, setAreaUnitMulch] = useState<AreaUnitMulch>('sqft');
  const [depthUnit, setDepthUnitMulch] = useState<DepthUnitMulch>('in');
  const [resultFormat, setResultFormat] = useState<VolumeResultUnit>('cubic_yards');

  const [mulchNeeded, setMulchNeeded] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateMulch = () => {
    setError(null);
    setMulchNeeded(null);

    const L = parseFloat(length);
    const W = parseFloat(width);
    const D = parseFloat(depth);

    if (isNaN(L) || L <= 0 || isNaN(W) || W <= 0 || isNaN(D) || D <= 0) {
      setError('Please enter valid positive dimensions for length, width, and depth.');
      return;
    }

    let areaBaseUnit: number; // sq ft or sq m
    if (areaUnit === 'sqft') areaBaseUnit = L * W;
    else areaBaseUnit = L * W; // if sqm, L & W are meters

    let depthBaseUnit: number; // ft or m
    if (depthUnit === 'in') depthBaseUnit = D / 12; // inches to feet
    else depthBaseUnit = D / 100; // cm to meters

    // Ensure units align for volume calculation (e.g. all feet, or all meters)
    let volumeCubic: number;
    if (areaUnit === 'sqft' && depthUnit === 'in') { // L,W in ft; D in ft
        volumeCubic = areaBaseUnit * depthBaseUnit; // Cubic feet
    } else if (areaUnit === 'sqm' && depthUnit === 'cm') { // L,W in m; D in m
        volumeCubic = areaBaseUnit * depthBaseUnit; // Cubic meters
    } else {
        setError("Unit mismatch. Ensure Length/Width units align with Depth unit system (Imperial ft/in or Metric m/cm).");
        return;
    }
    
    let finalAmount: number;
    let unitLabel = '';

    switch(resultFormat) {
        case 'cubic_yards':
            if (areaUnit !== 'sqft') { setError("Cubic yards result best with Imperial inputs."); return; }
            finalAmount = volumeCubic / 27; // Cubic feet to cubic yards
            unitLabel = 'cubic yards';
            break;
        case 'cubic_meters':
            if (areaUnit !== 'sqm') { setError("Cubic meters result best with Metric inputs."); return; }
            finalAmount = volumeCubic;
            unitLabel = 'cubic meters';
            break;
        case 'bags_2cuft':
            if (areaUnit !== 'sqft') { setError("Bag calculation (cu ft) best with Imperial inputs."); return; }
            finalAmount = volumeCubic / 2; // Assuming 2 cubic feet bags
            unitLabel = 'bags (2 cu ft)';
            break;
        case 'bags_3cuft':
            if (areaUnit !== 'sqft') { setError("Bag calculation (cu ft) best with Imperial inputs."); return; }
            finalAmount = volumeCubic / 3; // Assuming 3 cubic feet bags
            unitLabel = 'bags (3 cu ft)';
            break;
        default: setError("Invalid result format."); return;
    }

    setMulchNeeded(`${Math.ceil(finalAmount)} ${unitLabel}`); // Round up for bags/volume
  };
  
  const resetForm = () => {
    setLength(''); setWidth(''); setDepth('');
    setMulchNeeded(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Mulch Calculator</AlertTitle><AlertDescription>Estimate the amount of mulch needed for your garden bed or landscaping area.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter area dimensions and desired depth.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="areaLength">Length of Area</Label><Input id="areaLength" type="number" value={length} onChange={(e) => setLength(e.target.value)} /></div>
              <div><Label htmlFor="areaUnitMulch">Unit</Label><Select value={areaUnit} onValueChange={(v:AreaUnitMulch) => setAreaUnitMulch(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="sqft">Feet</SelectItem><SelectItem value="sqm">Meters</SelectItem></SelectContent></Select></div>
            </div>
             <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="areaWidth">Width of Area</Label><Input id="areaWidth" type="number" value={width} onChange={(e) => setWidth(e.target.value)} /></div>
              <div className="self-end text-sm text-muted-foreground">({areaUnit === 'sqft' ? 'Feet' : 'Meters'})</div>
            </div>
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="mulchDepth">Desired Mulch Depth</Label><Input id="mulchDepth" type="number" value={depth} onChange={(e) => setDepth(e.target.value)} /></div>
              <div><Label htmlFor="depthUnitMulch">Unit</Label><Select value={depthUnit} onValueChange={(v:DepthUnitMulch) => setDepthUnitMulch(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="in">Inches</SelectItem><SelectItem value="cm">CM</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="resultFormatMulch">Result Format</Label><Select value={resultFormat} onValueChange={(v:VolumeResultUnit)=>setResultFormat(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="cubic_yards">Cubic Yards</SelectItem><SelectItem value="cubic_meters">Cubic Meters</SelectItem><SelectItem value="bags_2cuft">Bags (2 cu ft)</SelectItem><SelectItem value="bags_3cuft">Bags (3 cu ft)</SelectItem></SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateMulch}>Calculate Mulch</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(mulchNeeded || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Mulch Needed</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {mulchNeeded && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Mulch Needed</p><p className="text-2xl font-bold text-primary">{mulchNeeded}</p></div><CopyButton textToCopy={mulchNeeded} /></div>)}
              <AlertDescription className="text-xs pt-2 mt-2">Consider adding 5-10% for wastage or uneven ground. One cubic yard covers approx 108 sq ft at 3 inches deep.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: MulchCalculator.tsx ======
==================================================

// ====== START OF FILE: NetWorthCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.28 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { PlusCircle, Trash2 } from 'lucide-react';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, PiggyBank } from "lucide-react";

interface FinancialItem {
  id: string;
  name: string;
  amount: number;
}

export default function NetWorthCalculator() {
  const [assets, setAssets] = useState<FinancialItem[]>([{ id: crypto.randomUUID(), name: 'Cash & Savings', amount: 0 }]);
  const [liabilities, setLiabilities] = useState<FinancialItem[]>([{ id: crypto.randomUUID(), name: 'Credit Card Debt', amount: 0 }]);
  
  const [totalAssets, setTotalAssets] = useState<number | null>(null);
  const [totalLiabilities, setTotalLiabilities] = useState<number | null>(null);
  const [netWorth, setNetWorth] = useState<number | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleItemChange = (type: 'assets' | 'liabilities', id: string, field: 'name' | 'amount', value: string) => {
    const setItems = type === 'assets' ? setAssets : setLiabilities;
    setItems(prev => prev.map(item => item.id === id ? { ...item, [field]: field === 'amount' ? parseFloat(value) || 0 : value } : item));
  };

  const addItem = (type: 'assets' | 'liabilities') => {
    const setItems = type === 'assets' ? setAssets : setLiabilities;
    const placeholderName = type === 'assets' ? `Asset ${assets.length + 1}` : `Liability ${liabilities.length + 1}`;
    setItems(prev => [...prev, { id: crypto.randomUUID(), name: placeholderName, amount: 0 }]);
  };

  const removeItem = (type: 'assets' | 'liabilities', id: string) => {
    const items = type === 'assets' ? assets : liabilities;
    const setItems = type === 'assets' ? setAssets : setLiabilities;
    if (items.length > 1) setItems(prev => prev.filter(item => item.id !== id));
  };

  const calculateNetWorth = () => {
    setError(null);
    const currentTotalAssets = assets.reduce((sum, item) => sum + item.amount, 0);
    const currentTotalLiabilities = liabilities.reduce((sum, item) => sum + item.amount, 0);

    if (isNaN(currentTotalAssets) || isNaN(currentTotalLiabilities)) {
        setError("Please ensure all asset and liability amounts are valid numbers.");
        return;
    }

    setTotalAssets(currentTotalAssets);
    setTotalLiabilities(currentTotalLiabilities);
    setNetWorth(currentTotalAssets - currentTotalLiabilities);
  };

  const resetForm = () => {
    setAssets([{ id: crypto.randomUUID(), name: 'Cash & Savings', amount: 0 }]);
    setLiabilities([{ id: crypto.randomUUID(), name: 'Credit Card Debt', amount: 0 }]);
    setTotalAssets(null); setTotalLiabilities(null); setNetWorth(null); setError(null);
  };
  
  const renderFinancialItems = (type: 'assets' | 'liabilities', items: FinancialItem[]) => (
    <div className="space-y-2">
      {items.map((item, index) => (
        <div key={item.id} className="grid grid-cols-[1fr_auto_auto] gap-2 items-center">
          <Input type="text" placeholder={`${type === 'assets' ? 'Asset' : 'Liability'} Name ${index + 1}`} value={item.name} onChange={e => handleItemChange(type, item.id, 'name', e.target.value)} className="h-9"/>
          <Input type="number" placeholder="Amount ($)" value={item.amount || ''} onChange={e => handleItemChange(type, item.id, 'amount', e.target.value)} className="h-9 w-32"/>
          <Button variant="ghost" size="icon" onClick={() => removeItem(type, item.id)} disabled={items.length === 1} className="h-9 w-9"><Trash2 className="h-4 w-4 text-destructive"/></Button>
        </div>
      ))}
      <Button variant="outline" size="sm" onClick={() => addItem(type)} className="mt-2"><PlusCircle className="mr-2 h-4 w-4"/> Add {type === 'assets' ? 'Asset' : 'Liability'}</Button>
    </div>
  );

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Net Worth Calculator</AlertTitle><AlertDescription>Calculate your net worth by summing your assets and subtracting your liabilities. A key indicator of financial health.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          <Card><CardHeader><CardTitle className="font-headline">Assets (What You Own)</CardTitle></CardHeader><CardContent>{renderFinancialItems('assets', assets)}</CardContent></Card>
          <Card><CardHeader><CardTitle className="font-headline">Liabilities (What You Owe)</CardTitle></CardHeader><CardContent>{renderFinancialItems('liabilities', liabilities)}</CardContent></Card>
          <div className="flex flex-col sm:flex-row gap-2 mt-4">
            <Button onClick={calculateNetWorth} className="flex-1">Calculate Net Worth</Button>
            <Button variant="outline" onClick={resetForm} className="flex-1">Reset</Button>
          </div>
        </div>
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Your Financial Snapshot</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {totalAssets !== null && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Assets</p><p className="font-semibold">${totalAssets.toFixed(2)}</p></div>)}
            {totalLiabilities !== null && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Liabilities</p><p className="font-semibold">${totalLiabilities.toFixed(2)}</p></div>)}
            {netWorth !== null && (<div className={`flex justify-between items-center p-3 rounded-md ${netWorth >= 0 ? 'bg-primary/10' : 'bg-red-500/10'}`}><div><p className="text-sm text-muted-foreground">Net Worth</p><p className={`text-2xl font-bold ${netWorth >=0 ? 'text-primary' : 'text-red-600'}`}>${netWorth.toFixed(2)}</p></div><CopyButton textToCopy={netWorth.toFixed(2)}/></div>)}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

    

// ====== END OF FILE: NetWorthCalculator.tsx ======
==================================================

// ====== START OF FILE: NewtonsSecondLawCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.95 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Move } from "lucide-react";

type TargetVariableFMA = 'force' | 'mass' | 'acceleration';

export default function NewtonsSecondLawCalculator() {
  const [target, setTarget] = useState<TargetVariableFMA>('force');
  const [forceVal, setForceVal] = useState<string>(''); // Newtons (N)
  const [massVal, setMassVal] = useState<string>('');   // Kilograms (kg)
  const [accelVal, setAccelVal] = useState<string>(''); // Meters per second squared (m/s²)

  const [result, setResult] = useState<string | null>(null);
  const [resultUnit, setResultUnit] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const calculate = () => {
    setError(null);
    setResult(null);
    setResultUnit('');

    const F = parseFloat(forceVal);
    const m = parseFloat(massVal);
    const a = parseFloat(accelVal);
    let calculatedValue: number;

    try {
      switch (target) {
        case 'force':
          if (isNaN(m) || m <= 0 || isNaN(a)) throw new Error("Mass (>0) and Acceleration must be valid numbers.");
          calculatedValue = m * a;
          setResultUnit('N (Newtons)');
          break;
        case 'mass':
          if (isNaN(F) || isNaN(a) || a === 0) throw new Error("Force and Acceleration (non-zero) must be valid numbers.");
          calculatedValue = F / a;
          setResultUnit('kg (Kilograms)');
          break;
        case 'acceleration':
          if (isNaN(F) || isNaN(m) || m === 0) throw new Error("Force and Mass (non-zero) must be valid numbers.");
          calculatedValue = F / m;
          setResultUnit('m/s²');
          break;
        default: throw new Error("Invalid selection.");
      }
      if (isNaN(calculatedValue) || !isFinite(calculatedValue)) throw new Error("Calculation resulted in an invalid or infinite number.");
      setResult(calculatedValue.toPrecision(5));
    } catch (e: any) { setError(e.message); }
  };

  const resetForm = () => {
    setForceVal(''); setMassVal(''); setAccelVal('');
    setResult(null); setError(null); setResultUnit('');
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Newton's Second Law (F=ma)</AlertTitle><AlertDescription>Calculate Force (N), Mass (kg), or Acceleration (m/s²) using F = ma. Ensure units are consistent.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Solve for the unknown variable.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="targetFMA">Calculate:</Label><Select value={target} onValueChange={(v: TargetVariableFMA) => {setTarget(v);setResult(null);setError(null);}}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent><SelectItem value="force">Force (F)</SelectItem><SelectItem value="mass">Mass (m)</SelectItem><SelectItem value="acceleration">Acceleration (a)</SelectItem></SelectContent></Select></div>
            {target !== 'force' && <div><Label htmlFor="forceFMA">Force (Newtons)</Label><Input id="forceFMA" type="number" value={forceVal} onChange={e=>setForceVal(e.target.value)} /></div>}
            {target !== 'mass' && <div><Label htmlFor="massFMA">Mass (kg)</Label><Input id="massFMA" type="number" value={massVal} onChange={e=>setMassVal(e.target.value)} /></div>}
            {target !== 'acceleration' && <div><Label htmlFor="accelFMA">Acceleration (m/s²)</Label><Input id="accelFMA" type="number" value={accelVal} onChange={e=>setAccelVal(e.target.value)} /></div>}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Calculated {target}</p><p className="text-2xl font-bold text-primary">{result} {resultUnit}</p></div><CopyButton textToCopy={`${result} ${resultUnit}`} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: NewtonsSecondLawCalculator.tsx ======
==================================================

// ====== START OF FILE: NoiCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.7 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, ClipboardList } from "lucide-react";

export default function NoiCalculator() {
  const [grossOperatingIncome, setGrossOperatingIncome] = useState<string>('');
  const [operatingExpenses, setOperatingExpenses] = useState<string>('');

  const [netOperatingIncome, setNetOperatingIncome] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateNoi = () => {
    setError(null); setNetOperatingIncome(null);
    const goi = parseFloat(grossOperatingIncome);
    const opEx = parseFloat(operatingExpenses);

    if (isNaN(goi) || isNaN(opEx) || opEx < 0) { // GOI can be 0 or negative if property is vacant/loss-making initially
      setError('Gross Operating Income and Operating Expenses (>=0) must be valid numbers.');
      return;
    }

    const noi = goi - opEx;
    setNetOperatingIncome(noi.toFixed(2));
  };

  const resetForm = () => {
    setGrossOperatingIncome(''); setOperatingExpenses('');
    setNetOperatingIncome(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Net Operating Income (NOI) Calculator</AlertTitle><AlertDescription>Calculate Net Operating Income for a real estate property. NOI = Gross Operating Income - Operating Expenses. It excludes financing costs and income taxes.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter property income and expense details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="grossOpIncomeNOI">Gross Operating Income (Annual) ($)</Label><Input id="grossOpIncomeNOI" type="number" value={grossOperatingIncome} onChange={e=>setGrossOperatingIncome(e.target.value)} placeholder="e.g., 50000 (Total rent + other income)"/></div>
            <div><Label htmlFor="opExpensesNOI">Operating Expenses (Annual) ($)</Label><Input id="opExpensesNOI" type="number" value={operatingExpenses} onChange={e=>setOperatingExpenses(e.target.value)} placeholder="e.g., 20000 (Taxes, insurance, repairs, mgmt)"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateNoi}>Calculate NOI</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(netOperatingIncome || error) && (
          <Card>
            <CardHeader><CardDescription>Net Operating Income (NOI)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {netOperatingIncome && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Net Operating Income (Annual)</p><p className="text-2xl font-bold text-primary">${netOperatingIncome}</p></div><CopyButton textToCopy={netOperatingIncome}/></div>)}
              <AlertDescription className="text-xs pt-2 mt-2">NOI is a key metric for valuing income-producing properties and determining cash flow before debt service.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
    

// ====== END OF FILE: NoiCalculator.tsx ======
==================================================

// ====== START OF FILE: NpvCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.45 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, TrendingDown } from "lucide-react";

export default function NpvCalculator() {
  const [initialInvestmentNPV, setInitialInvestmentNPV] = useState<string>('');
  const [cashFlowsNPV, setCashFlowsNPV] = useState<string>(''); // Comma-separated: 300,300,350,400
  const [discountRateNPV, setDiscountRateNPV] = useState<string>(''); // Percentage

  const [npvResult, setNpvResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateNpv = () => {
    setError(null); setNpvResult(null);
    const initialInv = parseFloat(initialInvestmentNPV);
    const rate = parseFloat(discountRateNPV) / 100;
    
    if (isNaN(initialInv) || initialInv < 0 || isNaN(rate) || rate < 0) {
      setError('Initial Investment (>=0) and Discount Rate (>=0) must be valid numbers.'); return;
    }
    if (!cashFlowsNPV.trim()) {
      setError('Please enter cash flows for each period.'); return;
    }

    const flows = cashFlowsNPV.split(',').map(cf => parseFloat(cf.trim()));
    if (flows.some(isNaN)) {
      setError('Invalid cash flow values. Ensure all are numbers separated by commas.'); return;
    }

    let npv = -initialInv; // Initial investment is an outflow at time 0
    for (let i = 0; i < flows.length; i++) {
      npv += flows[i] / Math.pow(1 + rate, i + 1); // Discount each cash flow
    }
    setNpvResult(npv.toFixed(2));
  };

  const resetForm = () => {
    setInitialInvestmentNPV(''); setCashFlowsNPV(''); setDiscountRateNPV('');
    setNpvResult(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Net Present Value (NPV) Calculator</AlertTitle><AlertDescription>Calculate the Net Present Value of an investment by providing initial investment, future cash flows, and a discount rate. Assumes cash flows occur at end of each period.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter investment details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="initialInvestmentNPV">Initial Investment ($)</Label><Input id="initialInvestmentNPV" type="number" value={initialInvestmentNPV} onChange={e=>setInitialInvestmentNPV(e.target.value)} placeholder="e.g., 10000"/></div>
            <div><Label htmlFor="cashFlowsNPV">Future Cash Flows ($, comma-separated per period)</Label><Textarea id="cashFlowsNPV" value={cashFlowsNPV} onChange={e=>setCashFlowsNPV(e.target.value)} placeholder="e.g., 3000,3500,4000" rows={3}/></div>
            <div><Label htmlFor="discountRateNPV">Discount Rate (Annual %)</Label><Input id="discountRateNPV" type="number" value={discountRateNPV} onChange={e=>setDiscountRateNPV(e.target.value)} placeholder="e.g., 10"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateNpv}>Calculate NPV</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(npvResult || error) && (
          <Card>
            <CardHeader><CardDescription>Net Present Value (NPV)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {npvResult && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Net Present Value</p><p className="text-2xl font-bold text-primary">${npvResult}</p></div><CopyButton textToCopy={npvResult}/></div>)}
              <AlertDescription className="text-xs pt-2 mt-2">A positive NPV generally indicates a worthwhile investment. A negative NPV suggests the investment may result in a net loss over time, considering the time value of money.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
    

// ====== END OF FILE: NpvCalculator.tsx ======
==================================================

// ====== START OF FILE: NthRootCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.46 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, FunctionSquare } from "lucide-react";

export default function NthRootCalculator() {
  const [numberInput, setNumberInput] = useState<string>('');
  const [nthRootValue, setNthRootValue] = useState<string>('2'); // The 'n' in nth root

  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateRoot = () => {
    setError(null);
    setResult(null);

    const num = parseFloat(numberInput);
    const nRoot = parseInt(nthRootValue);

    if (isNaN(num)) {
      setError('Please enter a valid number to find the root of.');
      return;
    }
    if (isNaN(nRoot) || nRoot === 0) {
      setError('The root degree (n) must be a non-zero integer.');
      return;
    }
    if (num < 0 && nRoot % 2 === 0) {
      setError('Cannot calculate a real even root of a negative number.');
      return;
    }

    const calculatedRoot = Math.pow(num, 1 / nRoot);

    if (isNaN(calculatedRoot) || !isFinite(calculatedRoot)) {
      setError('Calculation resulted in an invalid number.');
      return;
    }
    setResult(calculatedRoot.toPrecision(10));
  };

  const resetForm = () => {
    setNumberInput('');
    setNthRootValue('2');
    setResult(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Nth Root Calculator</AlertTitle><AlertDescription>Calculate any root (ⁿ√x) of a number.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter the number and the root degree (n).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="numberRoot">Number (x)</Label><Input id="numberRoot" type="number" value={numberInput} onChange={e=>setNumberInput(e.target.value)} placeholder="e.g., 81"/></div>
            <div><Label htmlFor="nthRootValue">Root Degree (n)</Label><Input id="nthRootValue" type="number" value={nthRootValue} onChange={e=>setNthRootValue(e.target.value)} placeholder="e.g., 4 for 4th root"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateRoot}>Calculate Root</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Root</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">{nthRootValue}th Root of {numberInput}</p><p className="text-2xl font-bold text-primary break-all">{result}</p></div><CopyButton textToCopy={result} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: NthRootCalculator.tsx ======
==================================================

// ====== START OF FILE: NumberSequenceCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.72 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, ListPlus } from "lucide-react";

type SequenceType = 'arithmetic' | 'geometric';

export default function NumberSequenceCalculator() {
  const [sequenceType, setSequenceType] = useState<SequenceType>('arithmetic');
  const [firstTerm, setFirstTerm] = useState<string>(''); // a1
  const [commonValue, setCommonValue] = useState<string>(''); // d for arithmetic, r for geometric
  const [numTerms, setNumTerms] = useState<string>('10'); // Number of terms to generate

  const [sequenceOutput, setSequenceOutput] = useState<string | null>(null);
  const [nthTermValue, setNthTermValue] = useState<string | null>(null);
  const [sumOfTerms, setSumOfTerms] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateSequence = () => {
    setError(null);
    setSequenceOutput(null);
    setNthTermValue(null);
    setSumOfTerms(null);

    const a1 = parseFloat(firstTerm);
    const val = parseFloat(commonValue);
    const n = parseInt(numTerms);

    if (isNaN(a1) || isNaN(val) || isNaN(n) || n <= 0) {
      setError('Please enter valid numbers: First Term, Common Difference/Ratio, and Number of Terms (>0).');
      return;
    }
    if (sequenceType === 'geometric' && val === 0) {
        setError("Common ratio (r) cannot be zero for a standard geometric sequence if first term is non-zero.");
        // if a1 is 0, then sequence is 0,0,0... which is fine
        if(a1 !== 0) return;
    }
     if (sequenceType === 'geometric' && a1 === 0 && val === 0) {
        setError("If first term and common ratio are both zero, sequence is undefined or all zeros depending on interpretation.");
        setSequenceOutput("0, 0, 0, ...");
        setNthTermValue("0");
        setSumOfTerms("0");
        return;
    }


    const sequenceArray: number[] = [];
    let currentTerm = a1;
    let calculatedSum = 0;

    for (let i = 0; i < n; i++) {
      sequenceArray.push(parseFloat(currentTerm.toPrecision(10))); // Store with precision
      calculatedSum += currentTerm;
      if (sequenceType === 'arithmetic') {
        currentTerm += val; // Add common difference
      } else { // Geometric
        currentTerm *= val; // Multiply by common ratio
      }
    }
    setSequenceOutput(sequenceArray.map(t => t.toString()).join(', '));

    let nthTerm: number;
    if (sequenceType === 'arithmetic') {
      nthTerm = a1 + (n - 1) * val;
    } else { // Geometric
      nthTerm = a1 * Math.pow(val, n - 1);
    }
    setNthTermValue(nthTerm.toPrecision(10).toString());

    // Sum of terms
    // For arithmetic: Sn = n/2 * (2a1 + (n-1)d)
    // For geometric: Sn = a1 * (1 - r^n) / (1 - r)  (if r != 1)
    // Sn = n * a1 (if r == 1)
    let finalSum: number;
    if (sequenceType === 'arithmetic') {
        finalSum = (n / 2) * (2 * a1 + (n - 1) * val);
    } else { // Geometric
        if (val === 1) {
            finalSum = n * a1;
        } else {
            finalSum = a1 * (1 - Math.pow(val, n)) / (1 - val);
        }
    }
    setSumOfTerms(finalSum.toPrecision(10).toString());
  };
  
  const resetForm = () => {
    setFirstTerm(''); setCommonValue(''); setNumTerms('10');
    setSequenceOutput(null); setNthTermValue(null); setSumOfTerms(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Number Sequence Calculator</AlertTitle><AlertDescription>Generate terms, find the Nth term, and sum of an arithmetic or geometric sequence.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Define your sequence.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="sequenceType">Type of Sequence</Label><Select value={sequenceType} onValueChange={(v: SequenceType) => setSequenceType(v)}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent><SelectItem value="arithmetic">Arithmetic</SelectItem><SelectItem value="geometric">Geometric</SelectItem></SelectContent></Select></div>
            <div><Label htmlFor="firstTerm">First Term (a₁)</Label><Input id="firstTerm" type="number" value={firstTerm} onChange={e => setFirstTerm(e.target.value)} placeholder="e.g., 2"/></div>
            <div><Label htmlFor="commonValue">{sequenceType === 'arithmetic' ? 'Common Difference (d)' : 'Common Ratio (r)'}</Label><Input id="commonValue" type="number" value={commonValue} onChange={e => setCommonValue(e.target.value)} placeholder={sequenceType === 'arithmetic' ? "e.g., 3" : "e.g., 2"}/></div>
            <div><Label htmlFor="numTerms">Number of Terms to Calculate (N)</Label><Input id="numTerms" type="number" value={numTerms} onChange={e => setNumTerms(e.target.value)} placeholder="e.g., 10"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateSequence}>Generate Sequence</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(sequenceOutput || error) && (
          <Card>
            <CardHeader><CardDescription>Sequence Details</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {sequenceOutput && (<div className="p-2 bg-muted rounded-md"><Label className="text-xs text-muted-foreground">First {numTerms} Terms</Label><Textarea value={sequenceOutput} readOnly rows={3} className="font-mono text-xs mt-1"/></div>)}
              {nthTermValue && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">{numTerms}th Term Value</p><p className="font-semibold">{nthTermValue}</p></div>)}
              {sumOfTerms && (<div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">Sum of First {numTerms} Terms</p><div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{sumOfTerms}</p><CopyButton textToCopy={sumOfTerms} size="sm" variant="ghost"/></div></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: NumberSequenceCalculator.tsx ======
==================================================

// ====== START OF FILE: NutritionalDeficiencyRiskCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.92 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Info, AlertTriangle } from "lucide-react";

interface RiskFactor {
  id: string;
  question: string;
  category: string; // e.g., Diet, Lifestyle, Medical Condition
  points: number; // Arbitrary points for this illustrative model
}

const deficiencyRiskFactors: RiskFactor[] = [
  { id: 'q1', question: "Do you follow a restrictive diet (e.g., vegan without supplementation, very low calorie)?", category: "Diet", points: 3 },
  { id: 'q2', question: "Is your diet low in fresh fruits and vegetables (less than 5 servings daily)?", category: "Diet", points: 2 },
  { id: 'q3', question: "Do you frequently consume processed foods, sugary drinks, or fast food?", category: "Diet", points: 2 },
  { id: 'q4', question: "Do you have limited sun exposure and don't supplement Vitamin D?", category: "Lifestyle", points: 2 },
  { id: 'q5', question: "Do you have a diagnosed malabsorption condition (e.g., Celiac, Crohn's)?", category: "Medical", points: 4 },
  { id: 'q6', question: "Are you pregnant, breastfeeding, or an older adult (65+)?", category: "Life Stage", points: 2 },
  { id: 'q7', question: "Do you experience chronic fatigue, weakness, or unexplained symptoms?", category: "Symptoms", points: 1 },
];

type AnswersNDR = Record<string, boolean>;

export default function NutritionalDeficiencyRiskCalculator() {
  const initialAnswers = deficiencyRiskFactors.reduce((acc, q) => ({...acc, [q.id]: false}), {} as AnswersNDR);
  const [answers, setAnswers] = useState<AnswersNDR>(initialAnswers);
  
  const [riskScore, setRiskScore] = useState<number | null>(null);
  const [riskLevelMessage, setRiskLevelMessage] = useState<string | null>(null);

  const assessRisk = () => {
    let score = 0;
    deficiencyRiskFactors.forEach(factor => {
      if (answers[factor.id]) score += factor.points;
    });
    setRiskScore(score);

    if (score === 0) setRiskLevelMessage("Low potential risk indicated by these general questions. Maintain a balanced diet.");
    else if (score <= 4) setRiskLevelMessage("Some factors present; consider reviewing diet and lifestyle for potential improvements.");
    else if (score <= 8) setRiskLevelMessage("Moderate number of factors; good idea to discuss dietary habits and any concerns with a healthcare professional or dietitian.");
    else setRiskLevelMessage("Multiple factors suggest a higher potential risk. Strongly recommend consulting a healthcare professional or dietitian for a comprehensive assessment.");
  };

  const resetForm = () => {
    setAnswers(initialAnswers); setRiskScore(null); setRiskLevelMessage(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle className="font-bold text-lg">MEDICAL DISCLAIMER - ILLUSTRATIVE TOOL ONLY</AlertTitle>
        <AlertDescription className="text-base">
          <p>This Nutritional Deficiency Risk Calculator is a <strong className="font-semibold">highly simplified, illustrative questionnaire and CANNOT diagnose any medical condition or nutritional deficiency.</strong> Actual nutritional status requires comprehensive assessment by a healthcare professional, including blood tests and dietary analysis.</p>
          <p className="mt-2"><strong className="font-semibold">DO NOT use this tool for self-diagnosis or to make changes to your diet or treatment without consulting your doctor or a registered dietitian.</strong> This tool is for educational and conceptual purposes only.</p>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Answer these general questions to get an illustrative risk idea. READ DISCLAIMER.</CardDescription></CardHeader>
          <CardContent className="space-y-3 max-h-[500px] overflow-y-auto pr-2">
            {deficiencyRiskFactors.map(factor => (
              <div key={factor.id} className="flex items-start space-x-3 p-2.5 border rounded-md">
                <Checkbox id={factor.id} checked={answers[factor.id]} onCheckedChange={checked => setAnswers(prev => ({...prev, [factor.id]: !!checked}))} className="mt-1 shrink-0"/>
                <div className="grid gap-1.5 leading-none">
                  <Label htmlFor={factor.id} className="text-sm font-medium leading-snug">{factor.question}</Label>
                  <p className="text-xs text-muted-foreground">Category: {factor.category} (Illustrative Points: {factor.points})</p>
                </div>
              </div>
            ))}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={assessRisk}>Assess Risk (Illustrative)</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(riskLevelMessage) && (
          <Card>
            <CardHeader><CardDescription>Illustrative Risk Profile</CardDescription></CardHeader>
            <CardContent>
              {riskScore !== null && (<div className="p-2 bg-muted rounded-md text-sm mb-3">Illustrative Score: <strong className="font-semibold">{riskScore}</strong> (based on placeholder scoring)</div>)}
              <Alert className="mt-2">
                <AlertTriangle className="h-4 w-4"/>
                <AlertTitle>Illustrative Interpretation</AlertTitle>
                <AlertDescription>{riskLevelMessage}</AlertDescription>
              </Alert>
              <p className="text-xs text-muted-foreground mt-3">Remember, this is NOT a diagnosis. Consult a healthcare professional for any health or dietary concerns.</p>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: NutritionalDeficiencyRiskCalculator.tsx ======
==================================================

// ====== START OF FILE: NutritionalDeficiencyRiskFactorsAwareness.tsx ======
// File converted from TSX to TXT
// Original size: 5.83 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Card, CardContent, CardHeader, CardDescription, CardFooter } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Info, AlertTriangle } from "lucide-react";

interface RiskFactor {
  id: string;
  question: string;
  category: string;
  points: number;
}

const deficiencyRiskFactors: RiskFactor[] = [
  { id: 'q1', question: "Do you follow a restrictive diet (e.g., vegan without supplementation, very low calorie)?", category: "Diet", points: 3 },
  { id: 'q2', question: "Is your diet low in fresh fruits and vegetables (less than 5 servings daily)?", category: "Diet", points: 2 },
  { id: 'q3', question: "Do you frequently consume processed foods, sugary drinks, or fast food?", category: "Diet", points: 2 },
  { id: 'q4', question: "Do you have limited sun exposure and don't supplement Vitamin D?", category: "Lifestyle", points: 2 },
  { id: 'q5', question: "Do you have a diagnosed malabsorption condition (e.g., Celiac, Crohn's)?", category: "Medical", points: 4 },
  { id: 'q6', question: "Are you pregnant, breastfeeding, or an older adult (65+)?", category: "Life Stage", points: 2 },
  { id: 'q7', question: "Do you experience chronic fatigue, weakness, or unexplained symptoms?", category: "Symptoms", points: 1 },
];

type AnswersNDR = Record<string, boolean>;

export default function NutritionalDeficiencyRiskFactorsAwareness() {
  const initialAnswers = deficiencyRiskFactors.reduce((acc, q) => ({...acc, [q.id]: false}), {} as AnswersNDR);
  const [answers, setAnswers] = useState<AnswersNDR>(initialAnswers);
  
  const [riskScore, setRiskScore] = useState<number | null>(null);
  const [riskLevelMessage, setRiskLevelMessage] = useState<string | null>(null);

  const assessRisk = () => {
    let score = 0;
    deficiencyRiskFactors.forEach(factor => {
      if (answers[factor.id]) score += factor.points;
    });
    setRiskScore(score);

    if (score === 0) setRiskLevelMessage("Low potential risk indicated by these general questions. Maintain a balanced diet.");
    else if (score <= 4) setRiskLevelMessage("Some factors present; consider reviewing diet and lifestyle for potential improvements.");
    else if (score <= 8) setRiskLevelMessage("Moderate number of factors; good idea to discuss dietary habits and any concerns with a healthcare professional or dietitian.");
    else setRiskLevelMessage("Multiple factors suggest a higher potential risk. Strongly recommend consulting a healthcare professional or dietitian for a comprehensive assessment.");
  };

  const resetForm = () => {
    setAnswers(initialAnswers); setRiskScore(null); setRiskLevelMessage(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle className="font-bold text-lg">MEDICAL DISCLAIMER - ILLUSTRATIVE TOOL ONLY</AlertTitle>
        <AlertDescription className="text-base">
          <p>This Nutritional Deficiency Risk Calculator is a <strong className="font-semibold">highly simplified, illustrative questionnaire and CANNOT diagnose any medical condition or nutritional deficiency.</strong> Actual nutritional status requires comprehensive assessment by a healthcare professional, including blood tests and dietary analysis.</p>
          <p className="mt-2"><strong className="font-semibold">DO NOT use this tool for self-diagnosis or to make changes to your diet or treatment without consulting your doctor or a registered dietitian.</strong> This tool is for educational and conceptual purposes only.</p>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Answer these general questions to get an illustrative risk idea. READ DISCLAIMER.</CardDescription></CardHeader>
          <CardContent className="space-y-3 max-h-[500px] overflow-y-auto pr-2">
            {deficiencyRiskFactors.map(factor => (
              <div key={factor.id} className="flex items-start space-x-3 p-2.5 border rounded-md">
                <Checkbox id={factor.id} checked={answers[factor.id]} onCheckedChange={checked => setAnswers(prev => ({...prev, [factor.id]: !!checked}))} className="mt-1 shrink-0"/>
                <div className="grid gap-1.5 leading-none">
                  <Label htmlFor={factor.id} className="text-sm font-medium leading-snug">{factor.question}</Label>
                  <p className="text-xs text-muted-foreground">Category: {factor.category} (Illustrative Points: {factor.points})</p>
                </div>
              </div>
            ))}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={assessRisk}>Assess Risk (Illustrative)</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(riskLevelMessage) && (
          <Card>
            <CardHeader><CardDescription>Illustrative Risk Profile</CardDescription></CardHeader>
            <CardContent>
              {riskScore !== null && (<div className="p-2 bg-muted rounded-md text-sm mb-3">Illustrative Score: <strong className="font-semibold">{riskScore}</strong> (based on placeholder scoring)</div>)}
              <Alert className="mt-2">
                <AlertTriangle className="h-4 w-4"/>
                <AlertTitle>Illustrative Interpretation</AlertTitle>
                <AlertDescription>{riskLevelMessage}</AlertDescription>
              </Alert>
              <p className="text-xs text-muted-foreground mt-3">Remember, this is NOT a diagnosis. Consult a healthcare professional for any health or dietary concerns.</p>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: NutritionalDeficiencyRiskFactorsAwareness.tsx ======
==================================================

// ====== START OF FILE: OhmsLawCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.04 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Zap } from "lucide-react"; // Zap for electricity

type TargetVariableOhm = 'voltage' | 'current' | 'resistance';

export default function OhmsLawCalculator() {
  const [target, setTarget] = useState<TargetVariableOhm>('voltage');
  const [voltage, setVoltage] = useState<string>(''); // Volts (V)
  const [current, setCurrent] = useState<string>('');   // Amperes (A)
  const [resistance, setResistance] = useState<string>(''); // Ohms (Ω)

  const [result, setResult] = useState<string | null>(null);
  const [resultUnit, setResultUnit] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const calculateOhm = () => {
    setError(null);
    setResult(null);
    setResultUnit('');

    const V = parseFloat(voltage);
    const I = parseFloat(current);
    const R = parseFloat(resistance);
    let calculatedValue: number;

    try {
      switch (target) {
        case 'voltage': // V = I * R
          if (isNaN(I) || isNaN(R)) throw new Error("Current and Resistance must be valid numbers.");
          calculatedValue = I * R;
          setResultUnit('Volts (V)');
          break;
        case 'current': // I = V / R
          if (isNaN(V) || isNaN(R) || R === 0) throw new Error("Voltage and Resistance (non-zero) must be valid numbers.");
          calculatedValue = V / R;
          setResultUnit('Amperes (A)');
          break;
        case 'resistance': // R = V / I
          if (isNaN(V) || isNaN(I) || I === 0) throw new Error("Voltage and Current (non-zero) must be valid numbers.");
          calculatedValue = V / I;
          setResultUnit('Ohms (Ω)');
          break;
        default: throw new Error("Invalid selection.");
      }
      if (isNaN(calculatedValue) || !isFinite(calculatedValue)) throw new Error("Calculation resulted in an invalid or infinite number.");
      setResult(calculatedValue.toPrecision(5));
    } catch (e: any) { setError(e.message); }
  };

  const resetForm = () => {
    setVoltage(''); setCurrent(''); setResistance('');
    setResult(null); setError(null); setResultUnit('');
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Ohm's Law Calculator (V=IR)</AlertTitle><AlertDescription>Calculate Voltage (V), Current (I), or Resistance (R) using Ohm's Law. Ensure units are Volts, Amperes, and Ohms.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Solve for the unknown electrical property.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="targetOhm">Calculate:</Label><Select value={target} onValueChange={(v: TargetVariableOhm) => {setTarget(v);setResult(null);setError(null);}}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent><SelectItem value="voltage">Voltage (V)</SelectItem><SelectItem value="current">Current (I)</SelectItem><SelectItem value="resistance">Resistance (R)</SelectItem></SelectContent></Select></div>
            {target !== 'voltage' && <div><Label htmlFor="voltageOhm">Voltage (Volts)</Label><Input id="voltageOhm" type="number" value={voltage} onChange={e=>setVoltage(e.target.value)} /></div>}
            {target !== 'current' && <div><Label htmlFor="currentOhm">Current (Amperes)</Label><Input id="currentOhm" type="number" value={current} onChange={e=>setCurrent(e.target.value)} /></div>}
            {target !== 'resistance' && <div><Label htmlFor="resistanceOhm">Resistance (Ohms)</Label><Input id="resistanceOhm" type="number" value={resistance} onChange={e=>setResistance(e.target.value)} /></div>}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateOhm}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Calculated {target}</p><p className="text-2xl font-bold text-primary">{result} {resultUnit}</p></div><CopyButton textToCopy={`${result} ${resultUnit}`} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: OhmsLawCalculator.tsx ======
==================================================

// ====== START OF FILE: OneRepMaxCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.21 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Dumbbell } from "lucide-react";

// Common 1RM formulas. Epley is widely used.
// Epley: 1RM = Weight * (1 + Reps / 30)
// Brzycki: 1RM = Weight / (1.0278 - (0.0278 * Reps))  (for Reps > 1)
// Lombardi: 1RM = Weight * Reps^0.10
// McGlothin: 1RM = (100 * Weight) / (101.3 - 2.67123 * Reps) (for Reps < 12 usually)
// O'Conner et al.: 1RM = Weight * (1 + 0.025 * Reps)

type OneRmFormula = 'epley' | 'brzycki' | 'lombardi' | 'mcglothin' | 'oconner';

export default function OneRepMaxCalculator() {
  const [weightLifted, setWeightLifted] = useState<string>('');
  const [repsPerformed, setRepsPerformed] = useState<string>('');
  const [formula, setFormula] = useState<OneRmFormula>('epley');
  const [weightUnit, setWeightUnit] = useState<'kg' | 'lbs'>('kg');

  const [oneRepMax, setOneRepMax] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculate1RM = () => {
    setError(null);
    setOneRepMax(null);

    const weight = parseFloat(weightLifted);
    const reps = parseInt(repsPerformed);

    if (isNaN(weight) || weight <= 0 || isNaN(reps) || reps <= 0) {
      setError('Please enter valid positive numbers for weight lifted and repetitions performed.');
      return;
    }
    if (reps === 1) { // If 1 rep, then 1RM is the weight lifted
        setOneRepMax(`${weight.toFixed(1)} ${weightUnit}`);
        return;
    }
     if (reps > 15 && (formula === 'brzycki' || formula === 'mcglothin')) {
        setError(`The ${formula} formula is less accurate for high repetitions ( > 10-15). Consider fewer reps for better estimation.`);
        // Allow calculation but with a warning, or stop it. For now, proceed.
    }


    let calculated1RM: number;
    switch (formula) {
      case 'epley':
        calculated1RM = weight * (1 + reps / 30);
        break;
      case 'brzycki':
        if (reps === 1) calculated1RM = weight; // Avoid division by zero or issues if formula not meant for 1 rep
        else calculated1RM = weight / (1.0278 - (0.0278 * reps));
        break;
      case 'lombardi':
        calculated1RM = weight * Math.pow(reps, 0.10);
        break;
      case 'mcglothin':
         if (reps === 1) calculated1RM = weight;
         else calculated1RM = (100 * weight) / (101.3 - 2.67123 * reps);
        break;
      case 'oconner':
        calculated1RM = weight * (1 + 0.025 * reps);
        break;
      default:
        setError("Invalid formula selected.");
        return;
    }
    
    if (isNaN(calculated1RM) || !isFinite(calculated1RM) || calculated1RM < weight) {
        setError(`Could not reliably estimate 1RM with the ${formula} formula for these inputs. Result was invalid or less than weight lifted for >1 rep.`);
        return;
    }

    setOneRepMax(`${calculated1RM.toFixed(1)} ${weightUnit}`);
  };

  const resetForm = () => {
    setWeightLifted(''); setRepsPerformed(''); setFormula('epley');
    setOneRepMax(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>One-Rep Max (1RM) Estimator</AlertTitle><AlertDescription>Estimate your one-repetition maximum for an exercise based on weight lifted and reps performed. Accuracy varies by formula and individual.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your lifting details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="weightLifted">Weight Lifted</Label><Input id="weightLifted" type="number" value={weightLifted} onChange={e => setWeightLifted(e.target.value)} placeholder="e.g., 100"/></div>
              <div><Label htmlFor="weightUnit1RM">Unit</Label><Select value={weightUnit} onValueChange={(v: 'kg'|'lbs')=>setWeightUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="kg">kg</SelectItem><SelectItem value="lbs">lbs</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="repsPerformed">Repetitions Performed</Label><Input id="repsPerformed" type="number" value={repsPerformed} onChange={e => setRepsPerformed(e.target.value)} placeholder="e.g., 5 (typically 2-12 for best est.)"/></div>
            <div><Label htmlFor="formula1RM">1RM Formula</Label><Select value={formula} onValueChange={(v: OneRmFormula) => setFormula(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                <SelectItem value="epley">Epley</SelectItem><SelectItem value="brzycki">Brzycki</SelectItem><SelectItem value="lombardi">Lombardi</SelectItem><SelectItem value="mcglothin">McGlothin</SelectItem><SelectItem value="oconner">O'Conner et al.</SelectItem>
            </SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate1RM}>Estimate 1RM</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(oneRepMax || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated One-Rep Max</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {oneRepMax && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Est. 1RM ({formula})</p><p className="text-2xl font-bold text-primary">{oneRepMax}</p></div><CopyButton textToCopy={oneRepMax} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: OneRepMaxCalculator.tsx ======
==================================================

// ====== START OF FILE: OpportunityCostCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.88 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, GitCompareArrows } from "lucide-react";

interface OptionResult {
  finalValue: string;
}

export default function OpportunityCostCalculator() {
  // Option A States
  const [initialInvestmentA, setInitialInvestmentA] = useState<string>('');
  const [returnRateA, setReturnRateA] = useState<string>('');
  
  // Option B States
  const [initialInvestmentB, setInitialInvestmentB] = useState<string>('');
  const [returnRateB, setReturnRateB] = useState<string>('');

  // Shared state
  const [termYears, setTermYears] = useState<string>('');
  
  // Results
  const [resultA, setResultA] = useState<OptionResult | null>(null);
  const [resultB, setResultB] = useState<OptionResult | null>(null);
  const [opportunityCost, setOpportunityCost] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateFutureValue = (pv: number, rate: number, term: number): number => {
    return pv * Math.pow(1 + rate, term);
  };

  const calculateComparison = () => {
    setError(null); setResultA(null); setResultB(null); setOpportunityCost(null);

    const pvA = parseFloat(initialInvestmentA);
    const rateA = parseFloat(returnRateA) / 100;
    const pvB = parseFloat(initialInvestmentB);
    const rateB = parseFloat(returnRateB) / 100;
    const term = parseFloat(termYears);

    if (isNaN(pvA) || pvA < 0 || isNaN(rateA) || rateA < -1 || isNaN(pvB) || pvB < 0 || isNaN(rateB) || rateB < -1 || isNaN(term) || term <= 0) {
      setError('Please enter valid, non-negative numbers for all fields. Term must be positive.');
      return;
    }

    const fvA = calculateFutureValue(pvA, rateA, term);
    const fvB = calculateFutureValue(pvB, rateB, term);
    
    setResultA({ finalValue: fvA.toFixed(2) });
    setResultB({ finalValue: fvB.toFixed(2) });

    const opportunity = fvA - fvB; // The value of Option A forgone by choosing Option B
    setOpportunityCost(opportunity.toFixed(2));
  };
  
  const resetForm = () => {
    setInitialInvestmentA(''); setReturnRateA('');
    setInitialInvestmentB(''); setReturnRateB('');
    setTermYears('');
    setResultA(null); setResultB(null); setOpportunityCost(null); setError(null);
  };

  const renderOptionCard = (
    title: string, setPV: Function, setRate: Function, pv: string, rate: string, result: OptionResult | null
  ) => (
    <fieldset className="border p-4 rounded-md space-y-3">
      <legend className="text-sm font-medium px-1">{title}</legend>
      <div><Label>Initial Investment ($)</Label><Input type="number" value={pv} onChange={e => setPV(e.target.value)} /></div>
      <div><Label>Expected Annual Return (%)</Label><Input type="number" value={rate} onChange={e => setRate(e.target.value)} /></div>
      {result && (
        <div className="mt-2 pt-2 border-t text-sm">
          <p>Future Value: <strong className="text-primary">${result.finalValue}</strong></p>
        </div>
      )}
    </fieldset>
  );

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Opportunity Cost Calculator</AlertTitle><AlertDescription>Compare the potential outcomes of two different financial choices to understand the opportunity cost—the value of the road not taken.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardDescription>Enter details for two choices over the same time period.</CardDescription></CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {renderOptionCard("Choice A (The one you're considering giving up)", setInitialInvestmentA, setReturnRateA, initialInvestmentA, returnRateA, resultA)}
              {renderOptionCard("Choice B (The one you're considering choosing)", setInitialInvestmentB, setReturnRateB, initialInvestmentB, returnRateB, resultB)}
            </div>
            <div><Label htmlFor="termYearsOC">Comparison Period (Years)</Label><Input id="termYearsOC" type="number" value={termYears} onChange={e => setTermYears(e.target.value)} placeholder="e.g., 10"/></div>
          </CardContent>
          <CardFooter><Button onClick={calculateComparison} className="w-full md:w-auto">Calculate Opportunity Cost</Button></CardFooter>
        </Card>
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Comparison Summary</CardDescription></CardHeader>
          <CardContent>
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {opportunityCost !== null && (
              <div className={`p-3 rounded-md ${parseFloat(opportunityCost) >= 0 ? 'bg-amber-500/10' : 'bg-green-500/10'}`}>
                <p className="text-sm text-muted-foreground">Opportunity Cost of Choosing B</p>
                <p className="text-lg font-bold">${opportunityCost}</p>
                <p className="text-xs mt-1">
                  {parseFloat(opportunityCost) >= 0 
                    ? `By choosing B, you potentially miss out on $${opportunityCost} of additional value from A.`
                    : `By choosing B, you potentially gain $${Math.abs(parseFloat(opportunityCost)).toFixed(2)} more than you would have with A.`
                  }
                </p>
              </div>
            )}
          </CardContent>
          <CardFooter><Button variant="outline" onClick={resetForm} className="w-full">Reset</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: OpportunityCostCalculator.tsx ======
==================================================

// ====== START OF FILE: OvertimePayCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.86 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, AlarmClockPlus } from "lucide-react";

export default function OvertimePayCalculator() {
  const [regularRate, setRegularRate] = useState<string>('');
  const [overtimeMultiplier, setOvertimeMultiplier] = useState<string>('1.5');
  const [regularHours, setRegularHours] = useState<string>('');
  const [overtimeHours, setOvertimeHours] = useState<string>('0');

  const [regularPay, setRegularPay] = useState<string | null>(null);
  const [overtimePay, setOvertimePay] = useState<string | null>(null);
  const [totalPay, setTotalPay] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateOvertimePay = () => {
    setError(null); setRegularPay(null); setOvertimePay(null); setTotalPay(null);
    const rate = parseFloat(regularRate);
    const multi = parseFloat(overtimeMultiplier);
    const regHrs = parseFloat(regularHours);
    const otHrs = parseFloat(overtimeHours);

    if (isNaN(rate) || rate < 0 || isNaN(multi) || multi < 1 || isNaN(regHrs) || regHrs < 0 || isNaN(otHrs) || otHrs < 0) {
      setError('Please enter valid non-negative numbers for rates and hours. Multiplier must be >= 1.');
      return;
    }

    const calcRegularPay = rate * regHrs;
    const calcOvertimePay = rate * multi * otHrs;
    const calcTotalPay = calcRegularPay + calcOvertimePay;

    setRegularPay(calcRegularPay.toFixed(2));
    setOvertimePay(calcOvertimePay.toFixed(2));
    setTotalPay(calcTotalPay.toFixed(2));
  };

  const resetForm = () => {
    setRegularRate(''); setOvertimeMultiplier('1.5'); setRegularHours(''); setOvertimeHours('0');
    setRegularPay(null); setOvertimePay(null); setTotalPay(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Overtime Pay Calculator</AlertTitle><AlertDescription>Calculate regular pay, overtime pay, and total gross pay based on hourly rates and hours worked.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter pay rates and hours.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="regularRateOT">Regular Hourly Rate ($)</Label><Input id="regularRateOT" type="number" value={regularRate} onChange={e=>setRegularRate(e.target.value)} placeholder="e.g., 15.00"/></div>
            <div><Label htmlFor="overtimeMultiplierOT">Overtime Multiplier</Label><Input id="overtimeMultiplierOT" type="number" value={overtimeMultiplier} onChange={e=>setOvertimeMultiplier(e.target.value)} placeholder="e.g., 1.5 (for time and a half)"/></div>
            <div className="grid grid-cols-2 gap-4">
                <div><Label htmlFor="regularHoursOT">Regular Hours Worked</Label><Input id="regularHoursOT" type="number" value={regularHours} onChange={e=>setRegularHours(e.target.value)} placeholder="e.g., 40"/></div>
                <div><Label htmlFor="overtimeHoursOT">Overtime Hours Worked</Label><Input id="overtimeHoursOT" type="number" value={overtimeHours} onChange={e=>setOvertimeHours(e.target.value)} placeholder="e.g., 5"/></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateOvertimePay}>Calculate Pay</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(totalPay || error) && (
          <Card>
            <CardHeader><CardDescription>Gross Pay Breakdown</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {regularPay && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Regular Pay</p><p className="font-semibold">${regularPay}</p></div>)}
              {overtimePay && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Overtime Pay</p><p className="font-semibold">${overtimePay}</p></div>)}
              {totalPay && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Total Gross Pay</p><p className="text-2xl font-bold text-primary">${totalPay}</p></div><CopyButton textToCopy={totalPay}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: OvertimePayCalculator.tsx ======
==================================================

// ====== START OF FILE: OvulationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.08 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { format, addDays, subDays, isValid } from 'date-fns';
import { cn } from '@/lib/utils';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CalendarHeart, CalendarCheck2 } from "lucide-react";

export default function OvulationCalculator() {
  const [lastMenstrualPeriod, setLastMenstrualPeriod] = useState<Date | undefined>(undefined);
  const [cycleLength, setCycleLength] = useState<string>('28');
  
  const [estimatedOvulationDate, setEstimatedOvulationDate] = useState<string | null>(null);
  const [fertileWindowStart, setFertileWindowStart] = useState<string | null>(null);
  const [fertileWindowEnd, setFertileWindowEnd] = useState<string | null>(null);
  const [nextPeriodDate, setNextPeriodDate] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateOvulationDates = () => {
    setError(null);
    setEstimatedOvulationDate(null);
    setFertileWindowStart(null);
    setFertileWindowEnd(null);
    setNextPeriodDate(null);

    if (!lastMenstrualPeriod || !isValid(lastMenstrualPeriod)) {
      setError('Please select a valid date for the first day of your last menstrual period.');
      return;
    }
    const cLength = parseInt(cycleLength);
    if (isNaN(cLength) || cLength < 20 || cLength > 45) {
      setError('Please enter a typical cycle length (usually between 20 and 45 days).');
      return;
    }

    const ovulationDayOffset = cLength - 14; // Ovulation is ~14 days BEFORE next period
    const ovulationDate = addDays(lastMenstrualPeriod, ovulationDayOffset);
    setEstimatedOvulationDate(format(ovulationDate, "PPP, EEEE"));

    setFertileWindowStart(format(subDays(ovulationDate, 5), "PPP"));
    setFertileWindowEnd(format(addDays(ovulationDate,1), "PPP")); // Sperm can live up to 5 days, egg for ~1 day.

    const nextLMP = addDays(lastMenstrualPeriod, cLength);
    setNextPeriodDate(format(nextLMP, "PPP, EEEE"));
  };
  
  const resetForm = () => {
    setLastMenstrualPeriod(undefined);
    setCycleLength('28');
    setEstimatedOvulationDate(null);
    setFertileWindowStart(null);
    setFertileWindowEnd(null);
    setNextPeriodDate(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Medical Disclaimer - Estimation Only</AlertTitle>
        <AlertDescription>
          This calculator provides estimates based on typical cycle patterns and is <strong className="font-semibold">not a substitute for medical advice or precise fertility tracking methods</strong>. Cycle lengths and ovulation can vary. If trying to conceive or avoid pregnancy, consult a healthcare professional.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate your fertile window and ovulation date.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="lmpDateOv">First Day of Last Menstrual Period (LMP)</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button id="lmpDateOv" variant={"outline"} className={cn("w-full justify-start text-left font-normal", !lastMenstrualPeriod && "text-muted-foreground")}>
                    <CalendarCheck2 className="mr-2 h-4 w-4" />
                    {lastMenstrualPeriod ? format(lastMenstrualPeriod, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={lastMenstrualPeriod} onSelect={setLastMenstrualPeriod} initialFocus /></PopoverContent>
              </Popover>
            </div>
            <div><Label htmlFor="cycleLengthOv">Average Cycle Length (days)</Label><Input id="cycleLengthOv" type="number" value={cycleLength} onChange={(e) => setCycleLength(e.target.value)} placeholder="e.g., 28" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateOvulationDates}>Calculate Dates</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(estimatedOvulationDate || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Fertility Dates</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {estimatedOvulationDate && (<div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">Estimated Ovulation Date</p><div className="flex justify-between items-center"><p className="text-lg font-bold text-primary">{estimatedOvulationDate}</p><CopyButton textToCopy={estimatedOvulationDate} size="sm" variant="ghost"/></div></div>)}
              {fertileWindowStart && fertileWindowEnd && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Fertile Window</p><p className="font-semibold">{fertileWindowStart} - {fertileWindowEnd}</p></div>)}
              {nextPeriodDate && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Next Period Start</p><p className="font-semibold">{nextPeriodDate}</p></div>)}
            </CardContent>
            <CardFooter><p className="text-xs text-muted-foreground">These dates are estimates. Ovulation can vary.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: OvulationCalculator.tsx ======
==================================================

// ====== START OF FILE: OvulationDateEstimator.tsx ======
// File converted from TSX to TXT
// Original size: 5.62 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { format, addDays, subDays, isValid } from 'date-fns';
import { cn } from '@/lib/utils';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CalendarHeart, CalendarCheck2 } from "lucide-react";

export default function OvulationDateEstimator() {
  const [lastMenstrualPeriod, setLastMenstrualPeriod] = useState<Date | undefined>(undefined);
  const [cycleLength, setCycleLength] = useState<string>('28');
  
  const [estimatedOvulationDate, setEstimatedOvulationDate] = useState<string | null>(null);
  const [fertileWindowStart, setFertileWindowStart] = useState<string | null>(null);
  const [fertileWindowEnd, setFertileWindowEnd] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateFertilityDates = () => {
    setError(null);
    setEstimatedOvulationDate(null);
    setFertileWindowStart(null);
    setFertileWindowEnd(null);

    if (!lastMenstrualPeriod || !isValid(lastMenstrualPeriod)) {
      setError('Please select a valid date for the first day of your last menstrual period.');
      return;
    }
    const cLength = parseInt(cycleLength);
    if (isNaN(cLength) || cLength < 20 || cLength > 45) {
      setError('Please enter a typical cycle length (usually between 20 and 45 days).');
      return;
    }

    const ovulationDayOffset = cLength - 14;
    const ovulationDate = addDays(lastMenstrualPeriod, ovulationDayOffset);
    setEstimatedOvulationDate(format(ovulationDate, "PPP, EEEE"));

    // Fertile window: 5 days before ovulation + ovulation day + 1 day after
    setFertileWindowStart(format(subDays(ovulationDate, 5), "PPP"));
    setFertileWindowEnd(format(addDays(ovulationDate, 1), "PPP"));
  };
  
  const resetForm = () => {
    setLastMenstrualPeriod(undefined);
    setCycleLength('28');
    setEstimatedOvulationDate(null);
    setFertileWindowStart(null);
    setFertileWindowEnd(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Medical Disclaimer - Estimation Only</AlertTitle>
        <AlertDescription>
          This calculator provides estimates based on typical cycle patterns and is <strong className="font-semibold">not a substitute for medical advice or precise fertility tracking methods</strong>. Cycle lengths and ovulation can vary. Consult a healthcare professional.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate your fertile window and ovulation date.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="lmpDateOv">First Day of Last Menstrual Period (LMP)</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button id="lmpDateOv" variant={"outline"} className={cn("w-full justify-start text-left font-normal", !lastMenstrualPeriod && "text-muted-foreground")}>
                    <CalendarCheck2 className="mr-2 h-4 w-4" />
                    {lastMenstrualPeriod ? format(lastMenstrualPeriod, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={lastMenstrualPeriod} onSelect={setLastMenstrualPeriod} initialFocus /></PopoverContent>
              </Popover>
            </div>
            <div><Label htmlFor="cycleLengthOv">Average Cycle Length (days)</Label><Input id="cycleLengthOv" type="number" value={cycleLength} onChange={(e) => setCycleLength(e.target.value)} placeholder="e.g., 28" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateFertilityDates}>Calculate Dates</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(estimatedOvulationDate || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Fertility Dates</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {estimatedOvulationDate && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Ovulation Date</p><p className="font-semibold">{estimatedOvulationDate}</p></div>)}
              {fertileWindowStart && fertileWindowEnd && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md mt-2"><div><p className="text-sm text-muted-foreground">Estimated Fertile Window</p><p className="text-lg font-bold text-primary">{fertileWindowStart} - {fertileWindowEnd}</p></div><CopyButton textToCopy={`${fertileWindowStart} - ${fertileWindowEnd}`} size="sm" variant="ghost"/></div>)}
            </CardContent>
            <CardFooter><p className="text-xs text-muted-foreground">Sperm can survive up to 5 days; an egg is viable for about 24 hours.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: OvulationDateEstimator.tsx ======
==================================================

// ====== START OF FILE: PaceBandGenerator.tsx ======
// File converted from TSX to TXT
// Original size: 8.04 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { ScrollArea } from "@/components/ui/scroll-area";
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, ListOrdered, Timer } from "lucide-react";

type DistanceUnitPBG = 'km' | 'miles';
interface Split {
  distance: string;
  time: string;
}

export default function PaceBandGenerator() {
  const [raceDistance, setRaceDistance] = useState<string>('marathon'); // Could be '5k', '10k', 'half', 'marathon' or custom
  const [customDistance, setCustomDistance] = useState<string>('');
  const [distanceUnit, setDistanceUnit] = useState<DistanceUnitPBG>('km');
  
  const [targetHoursPBG, setTargetHoursPBG] = useState<string>('');
  const [targetMinutesPBG, setTargetMinutesPBG] = useState<string>('');
  const [targetSecondsPBG, setTargetSecondsPBG] = useState<string>('');
  
  const [splitInterval, setSplitInterval] = useState<string>('1'); // e.g., every 1 km or 1 mile

  const [paceBand, setPaceBand] = useState<Split[]>([]);
  const [overallPace, setOverallPace] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const raceDistancesKm: Record<string, number> = {
    '5k': 5, '10k': 10, 'half': 21.0975, 'marathon': 42.195, 'custom': 0
  };
  const raceDistancesMiles: Record<string, number> = {
    '5k': 3.10686, '10k': 6.21371, 'half': 13.1094, 'marathon': 26.21875, 'custom': 0
  };
  
  const formatTimePBG = (totalSeconds: number): string => {
    const h = Math.floor(totalSeconds / 3600);
    const m = Math.floor((totalSeconds % 3600) / 60);
    const s = Math.round(totalSeconds % 60);
    return `${String(h).padStart(2,'0')}:${String(m).padStart(2,'0')}:${String(s).padStart(2,'0')}`;
  };
  
  const formatPacePBG = (secondsPerUnit: number): string => {
    const minutes = Math.floor(secondsPerUnit / 60);
    const seconds = Math.round(secondsPerUnit % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };


  const generatePaceBand = () => {
    setError(null); setPaceBand([]); setOverallPace(null);
    const hours = parseInt(targetHoursPBG) || 0;
    const minutes = parseInt(targetMinutesPBG) || 0;
    const seconds = parseInt(targetSecondsPBG) || 0;
    const totalTargetSeconds = hours * 3600 + minutes * 60 + seconds;

    let actualRaceDistance = raceDistance === 'custom' ? parseFloat(customDistance) : (distanceUnit === 'km' ? raceDistancesKm[raceDistance] : raceDistancesMiles[raceDistance]);
    const splitDist = parseFloat(splitInterval);

    if (totalTargetSeconds <=0 || actualRaceDistance <=0 || isNaN(actualRaceDistance) || isNaN(splitDist) || splitDist <=0) {
      setError('Valid target time, race distance (>0), and split interval (>0) required.');
      return;
    }

    const secondsPerUnitDistance = totalTargetSeconds / actualRaceDistance;
    setOverallPace(`${formatPacePBG(secondsPerUnitDistance)} per ${distanceUnit}`);
    
    const splits: Split[] = [];
    for (let d = splitDist; d <= actualRaceDistance + (splitDist*0.1); d += splitDist) { // Add small tolerance for last split
        const currentDist = Math.min(d, actualRaceDistance); // Cap at race distance
        const timeForSplit = currentDist * secondsPerUnitDistance;
        splits.push({ distance: `${currentDist.toFixed(2)} ${distanceUnit}`, time: formatTimePBG(timeForSplit) });
        if (currentDist >= actualRaceDistance) break;
    }
    setPaceBand(splits);
  };

  const resetForm = () => {
    setRaceDistance('marathon'); setCustomDistance(''); setDistanceUnit('km');
    setTargetHoursPBG(''); setTargetMinutesPBG(''); setTargetSecondsPBG(''); setSplitInterval('1');
    setPaceBand([]); setOverallPace(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Pace Band Generator</AlertTitle><AlertDescription>Create a pace band for your race based on target time and distance. Helps maintain consistent effort.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardDescription>Enter race details and target finish time.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
              <div><Label htmlFor="raceDistancePBG">Race Distance</Label><Select value={raceDistance} onValueChange={(v) => setRaceDistance(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                  <SelectItem value="5k">5K</SelectItem><SelectItem value="10k">10K</SelectItem>
                  <SelectItem value="half">Half Marathon</SelectItem><SelectItem value="marathon">Marathon</SelectItem>
                  <SelectItem value="custom">Custom</SelectItem>
              </SelectContent></Select></div>
              {raceDistance === 'custom' && <div><Label htmlFor="customDistancePBG">Custom Distance</Label><Input id="customDistancePBG" type="number" value={customDistance} onChange={e=>setCustomDistance(e.target.value)}/></div>}
              <div><Label htmlFor="distUnitPBG">Unit</Label><Select value={distanceUnit} onValueChange={(v:DistanceUnitPBG)=>setDistanceUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="km">Kilometers</SelectItem><SelectItem value="miles">Miles</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label>Target Finish Time (HH:MM:SS)</Label><div className="grid grid-cols-3 gap-2"><Input type="number" value={targetHoursPBG} onChange={e=>setTargetHoursPBG(e.target.value)} placeholder="HH"/><Input type="number" value={targetMinutesPBG} onChange={e=>setTargetMinutesPBG(e.target.value)} placeholder="MM"/><Input type="number" value={targetSecondsPBG} onChange={e=>setTargetSecondsPBG(e.target.value)} placeholder="SS"/></div></div>
            <div><Label htmlFor="splitIntervalPBG">Split Interval ({distanceUnit})</Label><Input id="splitIntervalPBG" type="number" value={splitInterval} onChange={e=>setSplitInterval(e.target.value)} placeholder="e.g., 1 or 5"/></div>
          </CardContent>
          <CardFooter><Button onClick={generatePaceBand} className="w-full md:w-auto">Generate Pace Band</Button></CardFooter>
        </Card>
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Your Pace Band</CardDescription></CardHeader>
          <CardContent className="space-y-2">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {overallPace && (<div className="p-2 bg-muted rounded-md text-sm">Overall Target Pace: <strong className="font-semibold">{overallPace}</strong></div>)}
            {paceBand.length > 0 && (
              <ScrollArea className="h-[280px] border rounded-md mt-2">
                <Table className="text-xs">
                  <TableHeader><TableRow><TableHead>Distance</TableHead><TableHead className="text-right">Cumulative Time</TableHead></TableRow></TableHeader>
                  <TableBody>{paceBand.map(split => (<TableRow key={split.distance}><TableCell>{split.distance}</TableCell><TableCell className="text-right font-mono">{split.time}</TableCell></TableRow>))}</TableBody>
                </Table>
              </ScrollArea>
            )}
            {!error && paceBand.length === 0 && <p className="text-muted-foreground text-sm">Pace band will appear here.</p>}
          </CardContent>
          <CardFooter><Button variant="outline" onClick={resetForm} className="w-full">Reset</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: PaceBandGenerator.tsx ======
==================================================

// ====== START OF FILE: PaceCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.31 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Clock3 } from "lucide-react";

type DistanceUnitPace = 'km' | 'miles';
type TargetVariablePace = 'pace' | 'time' | 'distance';

export default function PaceCalculator() {
  const [target, setTarget] = useState<TargetVariablePace>('pace');
  const [distance, setDistance] = useState<string>('');
  const [timeHours, setTimeHours] = useState<string>('');
  const [timeMinutes, setTimeMinutes] = useState<string>('');
  const [timeSeconds, setTimeSeconds] = useState<string>('');
  const [paceMinutes, setPaceMinutes] = useState<string>('');
  const [paceSeconds, setPaceSeconds] = useState<string>('');
  
  const [distanceUnit, setDistanceUnit] = useState<DistanceUnitPace>('km');
  
  const [result, setResult] = useState<string | null>(null);
  const [resultLabel, setResultLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const formatTime = (totalSeconds: number): string => {
    const h = Math.floor(totalSeconds / 3600);
    const m = Math.floor((totalSeconds % 3600) / 60);
    const s = Math.round(totalSeconds % 60);
    return `${h > 0 ? `${h}h ` : ''}${m}m ${s}s`;
  };

  const calculate = () => {
    setError(null);
    setResult(null);
    setResultLabel('');

    const distVal = parseFloat(distance);
    const tH = parseFloat(timeHours) || 0;
    const tM = parseFloat(timeMinutes) || 0;
    const tS = parseFloat(timeSeconds) || 0;
    const pM = parseFloat(paceMinutes) || 0;
    const pS = parseFloat(paceSeconds) || 0;

    try {
      let calcResultVal: number;
      let calcResultString: string;

      if (target === 'pace') {
        if (isNaN(distVal) || distVal <= 0 || (tH === 0 && tM === 0 && tS === 0)) throw new Error("Distance and Time must be positive.");
        const totalTimeInSeconds = tH * 3600 + tM * 60 + tS;
        if (totalTimeInSeconds <=0) throw new Error("Total time must be positive.");
        const secondsPerUnitDist = totalTimeInSeconds / distVal;
        calcResultString = `${formatPace(secondsPerUnitDist)} per ${distanceUnit}`;
        setResultLabel(`Pace per ${distanceUnit}`);
      } else if (target === 'time') {
        if (isNaN(distVal) || distVal <= 0 || (pM === 0 && pS === 0)) throw new Error("Distance and Pace must be positive.");
        const paceTotalSeconds = pM * 60 + pS;
        if (paceTotalSeconds <=0) throw new Error("Total pace time must be positive.");
        calcResultVal = distVal * paceTotalSeconds;
        calcResultString = formatTime(calcResultVal);
        setResultLabel('Total Time');
      } else { // distance
        if ((tH === 0 && tM === 0 && tS === 0) || (pM === 0 && pS === 0)) throw new Error("Time and Pace must be positive.");
        const totalTimeInSeconds = tH * 3600 + tM * 60 + tS;
        const paceTotalSeconds = pM * 60 + pS;
        if (totalTimeInSeconds <=0 || paceTotalSeconds <=0) throw new Error("Total time and pace time must be positive.");
        calcResultVal = totalTimeInSeconds / paceTotalSeconds;
        calcResultString = `${calcResultVal.toFixed(2)} ${distanceUnit}`;
        setResultLabel(`Total Distance (${distanceUnit})`);
      }
      setResult(calcResultString);
    } catch (e: any) { setError(e.message); }
  };
  
  const formatPace = (secondsPerUnit: number): string => {
    const minutes = Math.floor(secondsPerUnit / 60);
    const seconds = Math.round(secondsPerUnit % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };
  
  const resetForm = () => {
    setDistance(''); setTimeHours(''); setTimeMinutes(''); setTimeSeconds('');
    setPaceMinutes(''); setPaceSeconds('');
    setResult(null); setError(null); setResultLabel('');
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Pace Calculator</AlertTitle><AlertDescription>Calculate running/walking pace, time, or distance. Ensure units are consistent for calculation.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Solve for Pace, Time, or Distance.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="targetPaceCalc">Calculate:</Label><Select value={target} onValueChange={(v: TargetVariablePace) => {setTarget(v);setResult(null);setError(null);}}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent><SelectItem value="pace">Pace</SelectItem><SelectItem value="time">Time</SelectItem><SelectItem value="distance">Distance</SelectItem></SelectContent></Select></div>
            
            {target !== 'distance' && (<div className="grid grid-cols-[2fr_1fr] gap-2"><div><Label htmlFor="distancePace">Distance</Label><Input id="distancePace" type="number" value={distance} onChange={e => setDistance(e.target.value)} /></div><div><Label htmlFor="distUnitPace">Unit</Label><Select value={distanceUnit} onValueChange={(v: DistanceUnitPace) => setDistanceUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="km">km</SelectItem><SelectItem value="miles">miles</SelectItem></SelectContent></Select></div></div>)}
            
            {target !== 'time' && (<div className="space-y-1"> <Label>Total Time (HH:MM:SS)</Label><div className="grid grid-cols-3 gap-2"><Input type="number" value={timeHours} onChange={e => setTimeHours(e.target.value)} placeholder="H" /><Input type="number" value={timeMinutes} onChange={e => setTimeMinutes(e.target.value)} placeholder="M" /><Input type="number" value={timeSeconds} onChange={e => setTimeSeconds(e.target.value)} placeholder="S" /></div></div>)}
            
            {target !== 'pace' && (<div className="space-y-1"><Label>Pace (MM:SS per {distanceUnit})</Label><div className="grid grid-cols-2 gap-2"><Input type="number" value={paceMinutes} onChange={e => setPaceMinutes(e.target.value)} placeholder="Min" /><Input type="number" value={paceSeconds} onChange={e => setPaceSeconds(e.target.value)} placeholder="Sec" /></div></div>)}
          
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">{resultLabel}</p><p className="text-2xl font-bold text-primary">{result}</p></div><CopyButton textToCopy={result} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PaceCalculator.tsx ======
==================================================

// ====== START OF FILE: PaintCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.35 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Paintbrush } from "lucide-react";

type AreaUnitPaint = 'sqft' | 'sqm';
const COVERAGE_PER_GALLON_SQFT = 350; // Average coverage
const COVERAGE_PER_LITER_SQM = 10;    // Average coverage

export default function PaintCalculator() {
  const [totalArea, setTotalArea] = useState<string>('');
  const [coats, setCoats] = useState<string>('2');
  const [unit, setUnit] = useState<AreaUnitPaint>('sqft');
  
  const [paintNeeded, setPaintNeeded] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePaint = () => {
    setError(null);
    setPaintNeeded(null);

    const area = parseFloat(totalArea);
    const numCoats = parseInt(coats);

    if (isNaN(area) || area <= 0 || isNaN(numCoats) || numCoats <= 0) {
      setError('Please enter valid positive numbers for total area and number of coats.');
      return;
    }

    let totalPaint: number;
    let paintUnitLabel = '';

    if (unit === 'sqft') {
      totalPaint = (area * numCoats) / COVERAGE_PER_GALLON_SQFT;
      paintUnitLabel = 'gallons (US)';
    } else { // sqm
      totalPaint = (area * numCoats) / COVERAGE_PER_LITER_SQM;
      paintUnitLabel = 'liters';
    }
    
    setPaintNeeded(`${totalPaint.toFixed(2)} ${paintUnitLabel}`);
  };
  
  const resetForm = () => {
    setTotalArea('');
    setCoats('2');
    setPaintNeeded(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Paint Estimation</AlertTitle><AlertDescription>Estimate the amount of paint needed for your project. Coverage can vary by paint type and surface porosity.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your project details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="totalAreaPaint">Total Area to Paint</Label><Input id="totalAreaPaint" type="number" value={totalArea} onChange={(e) => setTotalArea(e.target.value)} placeholder="e.g., 400"/></div>
              <div><Label htmlFor="areaUnitPaint">Unit</Label><Select value={unit} onValueChange={(v: AreaUnitPaint) => setUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="sqft">Square Feet (sq ft)</SelectItem><SelectItem value="sqm">Square Meters (sq m)</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="coatsPaint">Number of Coats</Label><Input id="coatsPaint" type="number" value={coats} onChange={(e) => setCoats(e.target.value)} placeholder="e.g., 2"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePaint}>Calculate Paint</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(paintNeeded || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Paint Required</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {paintNeeded && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Total Paint Needed</p><p className="text-2xl font-bold text-primary">{paintNeeded}</p></div><CopyButton textToCopy={paintNeeded} /></div>)}
              <AlertDescription className="text-xs pt-2 mt-2">Average coverage: {COVERAGE_PER_GALLON_SQFT} sq ft/gallon or {COVERAGE_PER_LITER_SQM} sq m/liter. Always buy slightly more for touch-ups.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PaintCalculator.tsx ======
==================================================

// ====== START OF FILE: PaintCoverageCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.52 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, PaintRoller } from "lucide-react";

type AreaUnitPaintCov = 'sqft' | 'sqm';
type CanSizeUnit = 'gallon' | 'liter' | 'quart';

export default function PaintCoverageCalculator() {
  const [areaToPaint, setAreaToPaint] = useState<string>('');
  const [areaUnit, setAreaUnit] = useState<AreaUnitPaintCov>('sqft');
  const [coats, setCoats] = useState<string>('2');
  const [coveragePerCan, setCoveragePerCan] = useState<string>(areaUnit === 'sqft' ? '350' : '35'); // e.g. 350 sqft/gallon or 35 sqm/3.78L can
  const [canSizeValue, setCanSizeValue] = useState<string>(areaUnit === 'sqft' ? '1' : '3.78'); // e.g. 1 gallon or 3.78 liters
  const [canSizeUnit, setCanSizeUnit] = useState<CanSizeUnit>(areaUnit === 'sqft' ? 'gallon' : 'liter');


  const [numCans, setNumCans] = useState<string | null>(null);
  const [totalPaintVolume, setTotalPaintVolume] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePaintNeeded = () => {
    setError(null); setNumCans(null); setTotalPaintVolume(null);
    const area = parseFloat(areaToPaint);
    const numCoats = parseInt(coats);
    const coveragePC = parseFloat(coveragePerCan); // Area covered by one can
    
    if (isNaN(area) || area <= 0 || isNaN(numCoats) || numCoats <= 0 || isNaN(coveragePC) || coveragePC <=0) {
      setError('Area, coats, and coverage per can must be positive numbers.'); return;
    }

    const totalAreaToCoverWithCoats = area * numCoats;
    const cansNeededRaw = totalAreaToCoverWithCoats / coveragePC;
    setNumCans(Math.ceil(cansNeededRaw).toString());

    // Calculate total paint volume based on selected can size for reference
    const canVol = parseFloat(canSizeValue);
    if(!isNaN(canVol) && canVol > 0){
        const totalVolume = Math.ceil(cansNeededRaw) * canVol;
        setTotalPaintVolume(`${totalVolume.toFixed(2)} ${canSizeUnit}(s)`);
    }
  };

  const resetForm = () => {
    setAreaToPaint(''); setCoats('2'); 
    setCoveragePerCan(areaUnit === 'sqft' ? '350' : '35');
    setCanSizeValue(areaUnit === 'sqft' ? '1' : '3.78');
    setCanSizeUnit(areaUnit === 'sqft' ? 'gallon' : 'liter');
    setNumCans(null); setTotalPaintVolume(null); setError(null);
  };
  
  React.useEffect(() => { // Update defaults when area unit changes
    setCoveragePerCan(areaUnit === 'sqft' ? '350' : '35');
    setCanSizeValue(areaUnit === 'sqft' ? '1' : '3.78');
    setCanSizeUnit(areaUnit === 'sqft' ? 'gallon' : 'liter');
  }, [areaUnit]);


  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Paint Can Estimator</AlertTitle><AlertDescription>Estimate how many cans of paint you need based on area, coats, and paint coverage per can.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter project details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="areaPaintCov">Total Area to Paint</Label><Input id="areaPaintCov" type="number" value={areaToPaint} onChange={e=>setAreaToPaint(e.target.value)}/></div>
              <div><Label htmlFor="areaUnitPaintCov">Unit</Label><Select value={areaUnit} onValueChange={(v:AreaUnitPaintCov)=>setAreaUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="sqft">sq ft</SelectItem><SelectItem value="sqm">sq m</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="coatsPaintCov">Number of Coats</Label><Input id="coatsPaintCov" type="number" value={coats} onChange={e=>setCoats(e.target.value)} placeholder="e.g., 2"/></div>
            <div><Label htmlFor="coveragePerCan">Paint Coverage per Can ({areaUnit})</Label><Input id="coveragePerCan" type="number" value={coveragePerCan} onChange={e=>setCoveragePerCan(e.target.value)} placeholder={areaUnit === 'sqft' ? 'e.g., 350 (sq ft per gallon)' : 'e.g., 35 (sq m per 3.78L can)'}/></div>
            <div className="grid grid-cols-[1fr_auto_1fr] gap-2 items-end">
                <Label htmlFor="canSizeValue">Reference Can Size</Label>
                <Input id="canSizeValue" type="number" value={canSizeValue} onChange={e=>setCanSizeValue(e.target.value)} />
                <Select value={canSizeUnit} onValueChange={(v:CanSizeUnit)=>setCanSizeUnit(v)}>
                    <SelectTrigger><SelectValue/></SelectTrigger>
                    <SelectContent>
                        <SelectItem value="gallon">Gallon(s)</SelectItem><SelectItem value="liter">Liter(s)</SelectItem><SelectItem value="quart">Quart(s)</SelectItem>
                    </SelectContent>
                </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePaintNeeded}>Estimate Cans</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(numCans || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Paint Needed</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {numCans && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Number of Cans ({canSizeValue}{canSizeUnit} each)</p><p className="text-2xl font-bold text-primary">{numCans} cans</p></div><CopyButton textToCopy={numCans}/></div>)}
              {totalPaintVolume && (<div className="p-2 bg-muted rounded-md text-sm">Total Paint Volume: <strong className="font-semibold">{totalPaintVolume}</strong></div>)}
              <AlertDescription className="text-xs pt-2">Coverage varies by paint type, surface, and application method. Always round up.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
    

// ====== END OF FILE: PaintCoverageCalculator.tsx ======
==================================================

// ====== START OF FILE: PaintNeededCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.49 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Paintbrush } from "lucide-react";

type AreaUnitPaint = 'sqft' | 'sqm';
const COVERAGE_PER_GALLON_SQFT = 350; // Average coverage
const COVERAGE_PER_LITER_SQM = 10;    // Average coverage

export default function PaintNeededCalculator() {
  const [totalArea, setTotalArea] = useState<string>('');
  const [coats, setCoats] = useState<string>('2');
  const [unit, setUnit] = useState<AreaUnitPaint>('sqft');
  
  const [paintNeeded, setPaintNeeded] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePaint = () => {
    setError(null);
    setPaintNeeded(null);

    const area = parseFloat(totalArea);
    const numCoats = parseInt(coats);
    const wastageFactor = 1.10; // 10% wastage

    if (isNaN(area) || area <= 0 || isNaN(numCoats) || numCoats <= 0) {
      setError('Please enter valid positive numbers for total area and number of coats.');
      return;
    }

    let totalPaint: number;
    let paintUnitLabel = '';

    const totalAreaToPaint = area * numCoats * wastageFactor;

    if (unit === 'sqft') {
      totalPaint = totalAreaToPaint / COVERAGE_PER_GALLON_SQFT;
      paintUnitLabel = 'gallons (US)';
    } else { // sqm
      totalPaint = totalAreaToPaint / COVERAGE_PER_LITER_SQM;
      paintUnitLabel = 'liters';
    }
    
    setPaintNeeded(`${totalPaint.toFixed(2)} ${paintUnitLabel}`);
  };
  
  const resetForm = () => {
    setTotalArea('');
    setCoats('2');
    setPaintNeeded(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Paint Estimation</AlertTitle><AlertDescription>Estimate the amount of paint needed for your project. Coverage can vary by paint type and surface porosity. A 10% wastage factor is included.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your project details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="totalAreaPaintNeeded">Total Area to Paint</Label><Input id="totalAreaPaintNeeded" type="number" value={totalArea} onChange={(e) => setTotalArea(e.target.value)} placeholder="e.g., 400"/></div>
              <div><Label htmlFor="areaUnitPaintNeeded">Unit</Label><Select value={unit} onValueChange={(v: AreaUnitPaint) => setUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="sqft">Square Feet (sq ft)</SelectItem><SelectItem value="sqm">Square Meters (sq m)</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="coatsPaintNeeded">Number of Coats</Label><Input id="coatsPaintNeeded" type="number" value={coats} onChange={(e) => setCoats(e.target.value)} placeholder="e.g., 2"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePaint}>Calculate Paint Needed</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(paintNeeded || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Paint Required</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {paintNeeded && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Total Paint Needed</p><p className="text-2xl font-bold text-primary">{paintNeeded}</p></div><CopyButton textToCopy={paintNeeded} /></div>)}
              <AlertDescription className="text-xs pt-2 mt-2">Average coverage: ~350 sq ft/gallon or ~10 sq m/liter. Always buy slightly more for touch-ups.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PaintNeededCalculator.tsx ======
==================================================

// ====== START OF FILE: PaperWeightCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.01 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, FileText } from "lucide-react";

type UnitSystemPaper = 'imperial' | 'metric'; // imperial: inches, metric: cm
const commonGsmValues: Record<string, string> = {
  "75": "Standard Office/Copy Paper (75 gsm)",
  "90": "Letterhead Paper (90 gsm)",
  "120": "Flyer / Brochure Paper (120 gsm)",
  "170": "Poster Paper (170 gsm)",
  "250": "Light Cardstock (250 gsm)",
  "300": "Heavy Cardstock (300 gsm)",
  "custom": "Custom GSM Value"
};

export default function PaperWeightCalculator() {
  const [units, setUnits] = useState<UnitSystemPaper>('imperial');
  const [sheetWidth, setSheetWidth] = useState<string>(units === 'imperial' ? '8.5' : '21');
  const [sheetLength, setSheetLength] = useState<string>(units === 'imperial' ? '11' : '29.7');
  const [gsmValue, setGsmValue] = useState<string>('75');
  const [numSheets, setNumSheets] = useState<string>('500'); // A ream
  const [customGsm, setCustomGsm] = useState<string>('');

  const [totalWeight, setTotalWeight] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateWeight = () => {
    setError(null);
    setTotalWeight(null);
    const width = parseFloat(sheetWidth);
    const length = parseFloat(sheetLength);
    const gsm = gsmValue === 'custom' ? parseFloat(customGsm) : parseFloat(gsmValue);
    const count = parseInt(numSheets);

    if (isNaN(width) || width <= 0 || isNaN(length) || length <= 0 || isNaN(gsm) || gsm <= 0 || isNaN(count) || count <= 0) {
      setError('All dimensions, GSM, and sheet count must be positive numbers.');
      return;
    }

    let areaSqMeters: number;
    if (units === 'imperial') { // width/length in inches
      areaSqMeters = (width * 2.54 / 100) * (length * 2.54 / 100);
    } else { // width/length in cm
      areaSqMeters = (width / 100) * (length / 100);
    }
    
    const weightOfOneSheetGrams = areaSqMeters * gsm;
    const totalWeightGrams = weightOfOneSheetGrams * count;

    const weightInKg = totalWeightGrams / 1000;
    const weightInLbs = totalWeightGrams * 0.00220462;
    
    setTotalWeight(`${totalWeightGrams.toFixed(2)} g / ${weightInKg.toFixed(2)} kg / ${weightInLbs.toFixed(2)} lbs`);
  };

  const resetForm = () => {
    setUnits('imperial');
    setSheetWidth('8.5');
    setSheetLength('11');
    setGsmValue('75');
    setNumSheets('500');
    setCustomGsm('');
    setTotalWeight(null);
    setError(null);
  };
  
  useState(() => {
     if(units === 'imperial') {
         setSheetWidth('8.5'); setSheetLength('11');
     } else {
         setSheetWidth('21'); setSheetLength('29.7'); // A4 size
     }
  }, [units]);

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Paper Weight Calculator</AlertTitle><AlertDescription>Estimate the total weight of a stack of paper based on sheet size, paper weight (GSM), and quantity.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter paper specifications.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="unitSystemPaper">Unit System for Dimensions</Label><Select value={units} onValueChange={(v:UnitSystemPaper)=>setUnits(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Imperial (Inches)</SelectItem><SelectItem value="metric">Metric (CM)</SelectItem></SelectContent></Select></div>
            <div className="grid grid-cols-2 gap-2">
                <div><Label htmlFor="sheetWidthPaper">Sheet Width ({units})</Label><Input id="sheetWidthPaper" type="number" value={sheetWidth} onChange={e=>setSheetWidth(e.target.value)}/></div>
                <div><Label htmlFor="sheetLengthPaper">Sheet Length ({units})</Label><Input id="sheetLengthPaper" type="number" value={sheetLength} onChange={e=>setSheetLength(e.target.value)}/></div>
            </div>
            <div><Label htmlFor="gsmPaper">Paper Weight (GSM - g/m²)</Label><Select value={gsmValue} onValueChange={setGsmValue}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.entries(commonGsmValues).map(([key, label])=><SelectItem key={key} value={key}>{label}</SelectItem>)}</SelectContent></Select></div>
            {gsmValue === 'custom' && <Input type="number" value={customGsm} onChange={e=>setCustomGsm(e.target.value)} placeholder="Enter custom GSM"/>}
            <div><Label htmlFor="numSheetsPaper">Number of Sheets</Label><Input id="numSheetsPaper" type="number" value={numSheets} onChange={e=>setNumSheets(e.target.value)} placeholder="e.g., 500 (a ream)"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateWeight}>Calculate Weight</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(totalWeight || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Total Weight</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalWeight && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Total Weight</p><p className="text-xl font-bold text-primary">{totalWeight}</p></div><CopyButton textToCopy={totalWeight}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PaperWeightCalculator.tsx ======
==================================================

// ====== START OF FILE: ParabolaCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.84 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, FunctionSquare } from "lucide-react";

type EquationForm = 'standard_y' | 'standard_x' | 'vertex_y' | 'vertex_x'; 
// y = ax^2 + bx + c OR x = ay^2 + by + c
// y = a(x-h)^2 + k OR x = a(y-k)^2 + h

interface ParabolaResults {
  vertex: string;
  focus: string;
  directrix: string;
  axisOfSymmetry: string;
  opens: string;
  focalLengthP: string;
}

export default function ParabolaCalculator() {
  const [form, setForm] = useState<EquationForm>('standard_y');
  const [coeffA, setCoeffA] = useState<string>('');
  const [coeffB, setCoeffB] = useState<string>(''); // b or h
  const [coeffC, setCoeffC] = useState<string>(''); // c or k

  const [results, setResults] = useState<ParabolaResults | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateParabola = () => {
    setError(null); setResults(null);
    const a = parseFloat(coeffA);
    const b_or_h = parseFloat(coeffB);
    const c_or_k = parseFloat(coeffC);

    if (isNaN(a) || a === 0) { setError("'a' coefficient cannot be zero for a parabola."); return; }
    if (isNaN(b_or_h) || isNaN(c_or_k)) { setError("All required coefficients must be valid numbers."); return; }

    let h_vertex: number, k_vertex: number, p_focal_length: number;
    let opensDir: string, axisSym: string, focusStr: string, directrixStr: string;

    if (form === 'standard_y') { // y = ax^2 + bx + c
      h_vertex = -b_or_h / (2*a);
      k_vertex = a*h_vertex*h_vertex + b_or_h*h_vertex + c_or_k;
      p_focal_length = 1 / (4*a);
      opensDir = a > 0 ? "Upwards" : "Downwards";
      axisSym = `x = ${h_vertex.toFixed(3)}`;
      focusStr = `(${h_vertex.toFixed(3)}, ${(k_vertex + p_focal_length).toFixed(3)})`;
      directrixStr = `y = ${(k_vertex - p_focal_length).toFixed(3)}`;
    } else if (form === 'vertex_y') { // y = a(x-h)^2 + k
      h_vertex = b_or_h; // Input b is h
      k_vertex = c_or_k; // Input c is k
      p_focal_length = 1 / (4*a);
      opensDir = a > 0 ? "Upwards" : "Downwards";
      axisSym = `x = ${h_vertex.toFixed(3)}`;
      focusStr = `(${h_vertex.toFixed(3)}, ${(k_vertex + p_focal_length).toFixed(3)})`;
      directrixStr = `y = ${(k_vertex - p_focal_length).toFixed(3)}`;
    } else if (form === 'standard_x') { // x = ay^2 + by + c
        k_vertex = -b_or_h / (2*a); // Here 'b' is coeff of y, 'c' is constant, so k is like h_vertex
        h_vertex = a*k_vertex*k_vertex + b_or_h*k_vertex + c_or_k; // and h is like k_vertex
        p_focal_length = 1 / (4*a);
        opensDir = a > 0 ? "Rightwards" : "Leftwards";
        axisSym = `y = ${k_vertex.toFixed(3)}`;
        focusStr = `(${(h_vertex + p_focal_length).toFixed(3)}, ${k_vertex.toFixed(3)})`;
        directrixStr = `x = ${(h_vertex - p_focal_length).toFixed(3)}`;
    } else { // vertex_x: x = a(y-k)^2 + h
        k_vertex = b_or_h; // Input b is k
        h_vertex = c_or_k; // Input c is h
        p_focal_length = 1 / (4*a);
        opensDir = a > 0 ? "Rightwards" : "Leftwards";
        axisSym = `y = ${k_vertex.toFixed(3)}`;
        focusStr = `(${(h_vertex + p_focal_length).toFixed(3)}, ${k_vertex.toFixed(3)})`;
        directrixStr = `x = ${(h_vertex - p_focal_length).toFixed(3)}`;
    }
    
    if(isNaN(h_vertex) || isNaN(k_vertex) || isNaN(p_focal_length)){
        setError("Calculation resulted in invalid numbers. Check coefficients."); return;
    }

    setResults({
      vertex: `(${h_vertex.toFixed(3)}, ${k_vertex.toFixed(3)})`,
      focus: focusStr,
      directrix: directrixStr,
      axisOfSymmetry: axisSym,
      opens: opensDir,
      focalLengthP: p_focal_length.toFixed(4)
    });
  };

  const resetForm = () => {
    setCoeffA(''); setCoeffB(''); setCoeffC('');
    setResults(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Parabola Properties Calculator</AlertTitle><AlertDescription>Calculate vertex, focus, directrix, and axis of symmetry for a parabola given its equation.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter parabola equation coefficients.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="parabolaForm">Equation Form</Label><Select value={form} onValueChange={(v:EquationForm)=>{setForm(v);resetForm();}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                <SelectItem value="standard_y">y = ax² + bx + c</SelectItem><SelectItem value="vertex_y">y = a(x-h)² + k</SelectItem>
                <SelectItem value="standard_x">x = ay² + by + c</SelectItem><SelectItem value="vertex_x">x = a(y-k)² + h</SelectItem>
            </SelectContent></Select></div>
            <div><Label htmlFor="coeffAParabola">Coefficient 'a'</Label><Input id="coeffAParabola" type="number" value={coeffA} onChange={e=>setCoeffA(e.target.value)} placeholder="e.g., 1"/></div>
            <div><Label htmlFor="coeffBParabola">{form.includes('vertex') ? (form==='vertex_y'?'h':'k') : 'b'}</Label><Input id="coeffBParabola" type="number" value={coeffB} onChange={e=>setCoeffB(e.target.value)} placeholder="e.g., -2"/></div>
            <div><Label htmlFor="coeffCParabola">{form.includes('vertex') ? (form==='vertex_y'?'k':'h') : 'c'}</Label><Input id="coeffCParabola" type="number" value={coeffC} onChange={e=>setCoeffC(e.target.value)} placeholder="e.g., 3"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateParabola}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {results || error ? (
          <Card>
            <CardHeader><CardDescription>Parabola Properties</CardDescription></CardHeader>
            <CardContent className="space-y-1 text-sm">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {results && Object.entries(results).map(([key, val]) => (
                <div key={key} className="flex justify-between p-1 bg-muted/50 rounded-sm"><span className="capitalize">{key.replace(/([A-Z])/g, ' $1').trim()}:</span><span className="font-semibold">{val}</span></div>
              ))}
            </CardContent>
          </Card>
        ) : null}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: ParabolaCalculator.tsx ======
==================================================

// ====== START OF FILE: PartialFractionDecompositionCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 2.69 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { Card, CardContent, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Split, Info, ExternalLink } from "lucide-react";
import Link from 'next/link';

export default function PartialFractionDecompositionCalculator() {
  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle className="font-bold text-lg">For Informational Purposes Only - Advanced Algebra</AlertTitle>
        <AlertDescription className="text-base">
          <p>Partial Fraction Decomposition is an algebraic technique used to break down a complex rational expression into a sum of simpler fractions. This process is crucial in calculus for integrating rational functions.</p>
          <p className="mt-2"><strong className="font-semibold">This tool is a conceptual placeholder.</strong> Performing the decomposition requires a symbolic math engine to factor polynomials and solve systems of equations.</p>
          <p className="mt-2">For solving partial fractions, we recommend a dedicated tool like <Link href="https://www.wolframalpha.com/calculators/partial-fraction-decomposition-calculator/" target="_blank" rel="noopener noreferrer" className="font-semibold underline">WolframAlpha's Partial Fraction Calculator <ExternalLink className="inline h-3 w-3 ml-1"/></Link>.</p>
        </AlertDescription>
      </Alert>
      
      <Card>
        <CardHeader>
          <CardTitle className="font-headline flex items-center"><Split className="mr-2 h-6 w-6 text-primary"/>Understanding Partial Fraction Decomposition</CardTitle>
          <CardDescription>This technique rewrites a fraction as a sum of simpler fractions whose denominators are the factors of the original denominator.</CardDescription>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground mb-4">
            A functional calculator would require the numerator and denominator polynomials.
          </p>
          <h4 className="font-semibold mb-2">Example:</h4>
          <p className="text-sm">To decompose the fraction:</p>
          <div className="font-mono bg-muted p-2 rounded my-2 text-center">
            (3x + 1) / (x² - x - 6)
          </div>
          <p className="text-sm">First, factor the denominator: x² - x - 6 = (x - 3)(x + 2). Then, set up the form:</p>
           <div className="font-mono bg-muted p-2 rounded my-2 text-center">
            A / (x - 3) + B / (x + 2)
          </div>
          <p className="text-sm">A full calculator would solve for the unknown coefficients, A and B.</p>
        </CardContent>
      </Card>
    </div>
  );
}


// ====== END OF FILE: PartialFractionDecompositionCalculator.tsx ======
==================================================

// ====== START OF FILE: PartialFractionDecompositionSimple.tsx ======
// File converted from TSX to TXT
// Original size: 4.15 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Split } from "lucide-react";

export default function PartialFractionDecompositionSimple() {
  const [numerator, setNumerator] = useState<string>(''); // e.g., "3*x - 1"
  const [denominatorFactors, setDenominatorFactors] = useState<string>(''); // e.g., "(x-1)*(x+2)"

  const [decompositionResult, setDecompositionResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const decomposeFraction = () => {
    setError(null);
    setDecompositionResult(null);

    if (!numerator.trim() || !denominatorFactors.trim()) {
      setError('Please enter both numerator and denominator factors.');
      return;
    }

    // Full symbolic partial fraction decomposition is very complex.
    // This is a placeholder.
    const placeholderMessage = `Symbolic partial fraction decomposition for N(x)=${numerator} / D(x)=${denominatorFactors} requires an advanced math engine not implemented in this demo.
    Example: For (3x-1)/((x-1)(x+2)), the form is A/(x-1) + B/(x+2). A real calculator would solve for A and B.`;
    setError(placeholderMessage);
    setDecompositionResult("Symbolic calculation placeholder.");
  };

  const resetForm = () => {
    setNumerator('');
    setDenominatorFactors('');
    setDecompositionResult(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Symbolic Math - Placeholder Logic</AlertTitle>
        <AlertDescription>
          Decomposing rational functions into partial fractions requires symbolic algebra capabilities. This calculator is a UI demonstration and <strong className="font-semibold">does not implement the full decomposition algorithm</strong>.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter numerator and denominator factors.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="numeratorPFD">Numerator Polynomial N(x)</Label><Input id="numeratorPFD" value={numerator} onChange={e=>setNumerator(e.target.value)} placeholder="e.g., 2*x + 1 or x^2 - 3"/></div>
            <div><Label htmlFor="denominatorPFD">Denominator Factors D(x)</Label><Input id="denominatorPFD" value={denominatorFactors} onChange={e=>setDenominatorFactors(e.target.value)} placeholder="e.g., (x-1)*(x+2) or x*(x^2+1)"/>
            <p className="text-xs text-muted-foreground mt-1">Enter denominator as a product of its factors.</p></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={decomposeFraction}>Decompose</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(decompositionResult || error) && (
          <Card>
            <CardHeader><CardDescription>Decomposition Result (Placeholder)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {decompositionResult && (
                <div className="p-3 bg-muted rounded-md">
                  <Label className="text-sm font-semibold text-primary">Result:</Label>
                  <Textarea value={decompositionResult} readOnly rows={4} className="mt-1 font-mono text-xs bg-background/50"/>
                  <CopyButton textToCopy={decompositionResult} className="mt-2 w-full" buttonText="Copy Result"/>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PartialFractionDecompositionSimple.tsx ======
==================================================

// ====== START OF FILE: PasswordEntropyCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.4 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, LockKeyhole } from "lucide-react";

const charPools = {
  lowercase: 26,
  uppercase: 26,
  numbers: 10,
  symbols: 32, // Based on common keyboard symbols
};

export default function PasswordEntropyCalculator() {
  const [password, setPassword] = useState<string>('');
  const [hasLowercase, setHasLowercase] = useState<boolean>(true);
  const [hasUppercase, setHasUppercase] = useState<boolean>(true);
  const [hasNumbers, setHasNumbers] = useState<boolean>(true);
  const [hasSymbols, setHasSymbols] = useState<boolean>(true);

  const [entropy, setEntropy] = useState<string | null>(null);
  const [strength, setStrength] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateEntropy = () => {
    setError(null); setEntropy(null); setStrength(null);
    if (!password) { setError("Please enter a password to calculate its entropy."); return; }

    let poolSize = 0;
    if (hasLowercase) poolSize += charPools.lowercase;
    if (hasUppercase) poolSize += charPools.uppercase;
    if (hasNumbers) poolSize += charPools.numbers;
    if (hasSymbols) poolSize += charPools.symbols;

    if (poolSize === 0) { setError("Please select at least one character set for the entropy calculation."); return; }

    const passLength = password.length;
    const calculatedEntropy = passLength * (Math.log(poolSize) / Math.log(2)); // log base 2 of poolSize
    setEntropy(calculatedEntropy.toFixed(2));

    if (calculatedEntropy < 28) setStrength("Very Weak");
    else if (calculatedEntropy < 36) setStrength("Weak");
    else if (calculatedEntropy < 60) setStrength("Moderate");
    else if (calculatedEntropy < 128) setStrength("Strong");
    else setStrength("Very Strong");
  };

  const resetForm = () => {
    setPassword(''); setHasLowercase(true); setHasUppercase(true); setHasNumbers(true); setHasSymbols(true);
    setEntropy(null); setStrength(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Password Entropy Calculator</AlertTitle><AlertDescription>Estimate the strength of a password in bits of entropy. Assumes characters are chosen randomly from the specified character pools.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter password and character set used.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="passwordInputEntropy">Password</Label><Input id="passwordInputEntropy" type="text" value={password} onChange={e=>setPassword(e.target.value)}/></div>
            <p className="text-sm font-medium">Character Pool Used in Password:</p>
            <div className="space-y-2">
              <div className="flex items-center space-x-2"><Checkbox id="entLower" checked={hasLowercase} onCheckedChange={(c)=>setHasLowercase(!!c)}/><Label htmlFor="entLower">Lowercase (a-z)</Label></div>
              <div className="flex items-center space-x-2"><Checkbox id="entUpper" checked={hasUppercase} onCheckedChange={(c)=>setHasUppercase(!!c)}/><Label htmlFor="entUpper">Uppercase (A-Z)</Label></div>
              <div className="flex items-center space-x-2"><Checkbox id="entNums" checked={hasNumbers} onCheckedChange={(c)=>setHasNumbers(!!c)}/><Label htmlFor="entNums">Numbers (0-9)</Label></div>
              <div className="flex items-center space-x-2"><Checkbox id="entSyms" checked={hasSymbols} onCheckedChange={(c)=>setHasSymbols(!!c)}/><Label htmlFor="entSyms">Symbols (!@#...)</Label></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateEntropy}>Calculate Entropy</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(entropy || error) && (
          <Card>
            <CardHeader><CardDescription>Password Strength Analysis</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {strength && (<Alert className={`bg-${strength.toLowerCase().includes('strong') ? 'green' : strength.includes('Moderate') ? 'yellow' : 'red'}-500/10`}><Info className="h-4 w-4"/><AlertTitle>Password Strength</AlertTitle><AlertDescription>{strength}</AlertDescription></Alert>)}
              {entropy && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Entropy</p><p className="text-2xl font-bold text-primary">{entropy} bits</p></div><CopyButton textToCopy={entropy}/></div>)}
              <AlertDescription className="text-xs pt-2">Higher entropy means a password is harder to guess or brute-force.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PasswordEntropyCalculator.tsx ======
==================================================

// ====== START OF FILE: PasswordGenerator.tsx ======
// File converted from TSX to TXT
// Original size: 5.22 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Slider } from "@/components/ui/slider";
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, LockKeyhole, RefreshCw } from "lucide-react";

const uppercaseChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const lowercaseChars = "abcdefghijklmnopqrstuvwxyz";
const numberChars = "0123456789";
const symbolChars = "!@#$%^&*()_+-=[]{};':\",./<>?";

export default function PasswordGenerator() {
  const [passwordLength, setPasswordLength] = useState<number>(16);
  const [includeUppercase, setIncludeUppercase] = useState<boolean>(true);
  const [includeLowercase, setIncludeLowercase] = useState<boolean>(true);
  const [includeNumbers, setIncludeNumbers] = useState<boolean>(true);
  const [includeSymbols, setIncludeSymbols] = useState<boolean>(true);
  
  const [generatedPassword, setGeneratedPassword] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const generatePassword = () => {
    setError(null);
    setGeneratedPassword(null);

    let charSet = "";
    if (includeUppercase) charSet += uppercaseChars;
    if (includeLowercase) charSet += lowercaseChars;
    if (includeNumbers) charSet += numberChars;
    if (includeSymbols) charSet += symbolChars;

    if (charSet === "") {
      setError("Please select at least one character type to include.");
      return;
    }
    if (passwordLength < 4 || passwordLength > 128) {
        setError("Password length must be between 4 and 128 characters.");
        return;
    }

    let newPassword = "";
    for (let i = 0; i < passwordLength; i++) {
      newPassword += charSet.charAt(Math.floor(Math.random() * charSet.length));
    }
    setGeneratedPassword(newPassword);
  };
  
  // Generate on initial load or when options change if desired
  // useEffect(() => { generatePassword(); }, [passwordLength, includeUppercase, includeLowercase, includeNumbers, includeSymbols]);


  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Strong Password Generator</AlertTitle><AlertDescription>Create secure, random passwords based on your criteria. Longer passwords with varied character types are generally stronger.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Customize your password options.</CardDescription></CardHeader>
          <CardContent className="space-y-6">
            <div>
              <Label htmlFor="passwordLengthSlider">Password Length: {passwordLength}</Label>
              <Slider id="passwordLengthSlider" defaultValue={[passwordLength]} value={[passwordLength]} min={4} max={64} step={1} onValueChange={(val) => setPasswordLength(val[0])} />
            </div>
            <div className="space-y-2">
              <div className="flex items-center space-x-2"><Checkbox id="incUpper" checked={includeUppercase} onCheckedChange={(checked) => setIncludeUppercase(!!checked)} /><Label htmlFor="incUpper">Include Uppercase Letters (A-Z)</Label></div>
              <div className="flex items-center space-x-2"><Checkbox id="incLower" checked={includeLowercase} onCheckedChange={(checked) => setIncludeLowercase(!!checked)} /><Label htmlFor="incLower">Include Lowercase Letters (a-z)</Label></div>
              <div className="flex items-center space-x-2"><Checkbox id="incNums" checked={includeNumbers} onCheckedChange={(checked) => setIncludeNumbers(!!checked)} /><Label htmlFor="incNums">Include Numbers (0-9)</Label></div>
              <div className="flex items-center space-x-2"><Checkbox id="incSyms" checked={includeSymbols} onCheckedChange={(checked) => setIncludeSymbols(!!checked)} /><Label htmlFor="incSyms">Include Symbols (!@#$...)</Label></div>
            </div>
          </CardContent>
          <CardFooter><Button onClick={generatePassword} className="w-full"><RefreshCw className="mr-2 h-4 w-4"/>Generate Password</Button></CardFooter>
        </Card>

        <Card>
            <CardHeader><CardDescription>Your Generated Password</CardDescription></CardHeader>
            <CardContent>
                {error && (<Alert variant="destructive" className="mb-4"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
                {generatedPassword ? (
                    <div className="flex items-center space-x-2 p-3 bg-primary/10 rounded-md">
                        <Input type="text" value={generatedPassword} readOnly className="font-mono text-lg flex-grow bg-transparent border-0 focus-visible:ring-0"/>
                        <CopyButton textToCopy={generatedPassword} />
                    </div>
                ) : !error && (
                    <p className="text-muted-foreground">Click "Generate Password" to create one.</p>
                )}
            </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: PasswordGenerator.tsx ======
==================================================

// ====== START OF FILE: PaybackPeriodCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.54 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, History } from "lucide-react";

export default function PaybackPeriodCalculator() {
  const [initialInvestment, setInitialInvestment] = useState<string>('');
  const [annualCashFlows, setAnnualCashFlows] = useState<string>(''); // Comma-separated for multiple years if non-uniform

  const [paybackPeriod, setPaybackPeriod] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePayback = () => {
    setError(null);
    setPaybackPeriod(null);

    const investment = parseFloat(initialInvestment);
    if (isNaN(investment) || investment <= 0) {
      setError('Initial investment must be a positive number.');
      return;
    }

    const flowsStr = annualCashFlows.split(',').map(s => s.trim());
    const flows = flowsStr.map(f => parseFloat(f));

    if (flows.some(isNaN) || flows.some(f => f <= 0) || flows.length === 0) {
      setError('Please enter at least one valid positive annual cash flow, separated by commas if multiple.');
      return;
    }

    let cumulativeCashFlow = 0;
    let years = 0;

    for (let i = 0; i < flows.length; i++) {
      cumulativeCashFlow += flows[i];
      years++;
      if (cumulativeCashFlow >= investment) {
        const fractionOfYear = (investment - (cumulativeCashFlow - flows[i])) / flows[i];
        const totalYears = years - 1 + fractionOfYear;
        setPaybackPeriod(`${totalYears.toFixed(2)} years`);
        return;
      }
    }
    
    // If loop finishes and investment not recovered
    setError('Payback period exceeds the provided cash flow years or cash flows are insufficient.');
    setPaybackPeriod('Not recovered within given flows');
  };

  const resetForm = () => {
    setInitialInvestment('');
    setAnnualCashFlows('');
    setPaybackPeriod(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Payback Period Calculator</AlertTitle><AlertDescription>Estimate the time it takes for an investment to generate cash flows equal to its initial cost. Assumes cash flows occur at end of year.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter investment details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="initialInvestmentPB">Initial Investment ($)</Label><Input id="initialInvestmentPB" type="number" value={initialInvestment} onChange={(e) => setInitialInvestment(e.target.value)} placeholder="e.g., 10000"/></div>
            <div>
                <Label htmlFor="annualCashFlowsPB">Annual Cash Inflows ($, comma-separated for multiple years)</Label>
                <Textarea id="annualCashFlowsPB" value={annualCashFlows} onChange={(e) => setAnnualCashFlows(e.target.value)} placeholder="e.g., 3000 or 2000,3000,4000,5000" rows={3}/>
                <p className="text-xs text-muted-foreground mt-1">If uniform, enter one value. For non-uniform, list year by year.</p>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePayback}>Calculate Payback</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(paybackPeriod || error) && (
          <Card>
            <CardHeader><CardDescription>Payback Period Estimation</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {paybackPeriod && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Payback Period</p><p className="text-2xl font-bold text-primary">{paybackPeriod}</p></div>
                  <CopyButton textToCopy={paybackPeriod} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PaybackPeriodCalculator.tsx ======
==================================================

// ====== START OF FILE: PaymentCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.07 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, WalletCards } from "lucide-react";

export default function PaymentCalculator() {
  const [loanAmount, setLoanAmount] = useState<string>('');
  const [interestRate, setInterestRate] = useState<string>(''); // Annual %
  const [loanTermMonths, setLoanTermMonths] = useState<string>('');
  
  const [monthlyPayment, setMonthlyPayment] = useState<string | null>(null);
  const [totalRepayment, setTotalRepayment] = useState<string | null>(null);
  const [totalInterest, setTotalInterest] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePayment = () => {
    setError(null);
    setMonthlyPayment(null);
    setTotalRepayment(null);
    setTotalInterest(null);

    const P = parseFloat(loanAmount);
    const annualRate = parseFloat(interestRate) / 100;
    const N = parseInt(loanTermMonths);

    if (isNaN(P) || P <= 0 || isNaN(annualRate) || annualRate < 0 || isNaN(N) || N <= 0) {
      setError('Please enter valid positive numbers for loan amount, interest rate, and term (months).');
      return;
    }

    const monthlyRate = annualRate / 12;
    let M; // Monthly Payment

    if (monthlyRate === 0) { // 0% interest
        M = P / N;
    } else {
        // Standard loan payment formula: M = P * [r(1+r)^N] / [(1+r)^N-1]
        M = P * (monthlyRate * Math.pow(1 + monthlyRate, N)) / (Math.pow(1 + monthlyRate, N) - 1);
    }
    
    if (isNaN(M) || !isFinite(M)) {
        setError('Could not calculate monthly payment. Check your inputs, especially for very long terms or high rates.');
        return;
    }

    const calculatedTotalRepayment = M * N;
    const calculatedTotalInterest = calculatedTotalRepayment - P;

    setMonthlyPayment(M.toFixed(2));
    setTotalRepayment(calculatedTotalRepayment.toFixed(2));
    setTotalInterest(calculatedTotalInterest.toFixed(2));
  };
  
  const resetForm = () => {
    setLoanAmount('');
    setInterestRate('');
    setLoanTermMonths('');
    setMonthlyPayment(null);
    setTotalRepayment(null);
    setTotalInterest(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Loan Payment Calculator</AlertTitle><AlertDescription>Estimate monthly payments for any type of loan (e.g., personal, auto, mortgage P&I only).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter loan details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="loanAmountPayCalc">Loan Amount ($)</Label><Input id="loanAmountPayCalc" type="number" value={loanAmount} onChange={(e) => setLoanAmount(e.target.value)} placeholder="e.g., 20000"/></div>
            <div><Label htmlFor="interestRatePayCalc">Annual Interest Rate (%)</Label><Input id="interestRatePayCalc" type="number" value={interestRate} onChange={(e) => setInterestRate(e.target.value)} placeholder="e.g., 5.5"/></div>
            <div><Label htmlFor="loanTermMonthsPayCalc">Loan Term (Months)</Label><Input id="loanTermMonthsPayCalc" type="number" value={loanTermMonths} onChange={(e) => setLoanTermMonths(e.target.value)} placeholder="e.g., 60"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePayment}>Calculate Payment</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(monthlyPayment || error) && (
          <Card>
            <CardHeader><CardDescription>Loan Payment Estimates</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {monthlyPayment && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Monthly Payment</p><p className="text-2xl font-bold text-primary">${monthlyPayment}</p></div>
                  <CopyButton textToCopy={monthlyPayment} />
                </div>
              )}
              {totalRepayment && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Repayment</p><p className="font-semibold">${totalRepayment}</p></div>)}
              {totalInterest && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Interest Paid</p><p className="font-semibold">${totalInterest}</p></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PaymentCalculator.tsx ======
==================================================

// ====== START OF FILE: PayRaiseCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.9 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, TrendingUp } from "lucide-react";

const placeholderTaxBrackets = [
  { limit: 11000, rate: 0.10 },
  { limit: 44725, rate: 0.12 },
  { limit: 95375, rate: 0.22 },
  { limit: 182100, rate: 0.24 },
  { limit: 231250, rate: 0.32 },
  { limit: Infinity, rate: 0.35 },
];

export default function PayRaiseCalculator() {
  const [currentSalary, setCurrentSalary] = useState<string>('');
  const [newSalary, setNewSalary] = useState<string>('');
  const [payFrequency, setPayFrequency] = useState<string>('26'); // Bi-weekly

  const [results, setResults] = useState<any | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTax = (income: number) => {
    let tax = 0;
    let remainingIncome = income;
    let lastLimit = 0;
    for (const bracket of placeholderTaxBrackets) {
      if (remainingIncome <= 0) break;
      const taxableInBracket = Math.min(remainingIncome, bracket.limit - lastLimit);
      tax += taxableInBracket * bracket.rate;
      remainingIncome -= taxableInBracket;
      lastLimit = bracket.limit;
    }
    const ssTax = Math.min(income, 168600) * 0.062; // 2024 SS wage base
    const medTax = income * 0.0145;
    return tax + ssTax + medTax;
  };

  const calculateRaise = () => {
    setError(null);
    setResults(null);
    const current = parseFloat(currentSalary);
    const newSal = parseFloat(newSalary);
    const periods = parseInt(payFrequency);

    if (isNaN(current) || current < 0 || isNaN(newSal) || newSal <= current || isNaN(periods) || periods <= 0) {
      setError('Please enter a valid current salary (>=0), a new salary (> current), and a valid number of pay periods (>0).');
      return;
    }

    const currentTax = calculateTax(current);
    const newTax = calculateTax(newSal);

    const currentNet = current - currentTax;
    const newNet = newSal - newTax;
    
    setResults({
      grossIncreaseAnnual: (newSal - current).toFixed(2),
      netIncreaseAnnual: (newNet - currentNet).toFixed(2),
      grossIncreasePerPaycheck: ((newSal - current) / periods).toFixed(2),
      netIncreasePerPaycheck: ((newNet - currentNet) / periods).toFixed(2),
      currentNetPaycheck: (currentNet / periods).toFixed(2),
      newNetPaycheck: (newNet / periods).toFixed(2),
    });
  };

  const resetForm = () => {
    setCurrentSalary(''); setNewSalary(''); setPayFrequency('26');
    setResults(null); setError(null);
  };

  return (
    <div className="space-y-6">
       <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Simplified Tax Estimation</AlertTitle>
        <AlertDescription>
          This calculator uses a <strong className="font-semibold">simplified, progressive federal tax bracket and FICA model</strong> to estimate net pay. It does NOT account for state/local taxes, deductions, credits, or filing status. It is for illustrative purposes only.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>See the real impact of your pay raise.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="currentSalaryPR">Current Annual Salary ($)</Label><Input id="currentSalaryPR" type="number" value={currentSalary} onChange={e => setCurrentSalary(e.target.value)} /></div>
            <div><Label htmlFor="newSalaryPR">New Annual Salary ($)</Label><Input id="newSalaryPR" type="number" value={newSalary} onChange={e => setNewSalary(e.target.value)} /></div>
            <div><Label htmlFor="payFrequencyPR">Paychecks per Year</Label><Input id="payFrequencyPR" type="number" value={payFrequency} onChange={e => setPayFrequency(e.target.value)} placeholder="e.g., 26 for bi-weekly" /></div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateRaise}>Calculate Raise Impact</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>
        
        {results && !error ? (
          <Card>
            <CardHeader><CardDescription>Pay Raise Breakdown</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              <div className="p-2 bg-primary/10 rounded-md">
                <p className="text-sm text-muted-foreground">Net Increase per Paycheck</p>
                <p className="text-xl font-bold text-primary">${results.netIncreasePerPaycheck}</p>
              </div>
              <div className="p-2 bg-muted rounded-md text-sm">
                <p>New Net Paycheck: <strong className="font-semibold">${results.newNetPaycheck}</strong></p>
                <p className="text-xs text-muted-foreground">(vs. old net of ${results.currentNetPaycheck})</p>
              </div>
               <div className="p-2 bg-muted rounded-md text-sm">
                <p>Annual Gross Increase: <strong className="font-semibold">${results.grossIncreaseAnnual}</strong></p>
              </div>
              <div className="p-2 bg-muted rounded-md text-sm">
                <p>Annual Net Increase (after est. taxes): <strong className="font-semibold">${results.netIncreaseAnnual}</strong></p>
              </div>
            </CardContent>
          </Card>
        ) : error ? (
            <Card>
                <CardHeader><CardDescription>Error</CardDescription></CardHeader>
                <CardContent><Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertDescription>{error}</AlertDescription></Alert></CardContent>
            </Card>
        ) : null}
      </div>
    </div>
  );
}


// ====== END OF FILE: PayRaiseCalculator.tsx ======
==================================================

// ====== START OF FILE: PayrollTaxCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.66 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, FileText } from "lucide-react";

// HIGHLY SIMPLIFIED - Placeholder rates. Real payroll taxes are complex.
const SS_RATE_EMPLOYEE = 0.062; // Social Security (up to wage base)
const MEDICARE_RATE_EMPLOYEE = 0.0145; // Medicare (no wage base for employee portion typically)
// Note: Does not include employer portion of FICA, federal/state income tax withholding, SUI, SDI, etc.

export default function PayrollTaxCalculator() {
  const [grossPayPeriod, setGrossPayPeriod] = useState<string>('');
  const [ssWageBase, setSsWageBase] = useState<string>('168600'); // 2024 example
  const [yearToDateGross, setYearToDateGross] = useState<string>('0'); // To check against SS wage base

  const [socialSecurityTax, setSocialSecurityTax] = useState<string | null>(null);
  const [medicareTax, setMedicareTax] = useState<string | null>(null);
  const [totalFicaTax, setTotalFicaTax] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePayrollTaxes = () => {
    setError(null); setSocialSecurityTax(null); setMedicareTax(null); setTotalFicaTax(null);
    const gross = parseFloat(grossPayPeriod);
    const wageBase = parseFloat(ssWageBase);
    const ytdGross = parseFloat(yearToDateGross);

    if (isNaN(gross) || gross < 0 || isNaN(wageBase) || wageBase <=0 || isNaN(ytdGross) || ytdGross < 0) {
      setError('Gross Pay (>=0), SS Wage Base (>0), and YTD Gross (>=0) must be valid numbers.'); return;
    }

    let ssTaxable = gross;
    if (ytdGross >= wageBase) { // Already met SS wage base for the year
      ssTaxable = 0;
    } else if (ytdGross + gross > wageBase) { // Will cross SS wage base this period
      ssTaxable = wageBase - ytdGross;
    }
    
    const ssTax = ssTaxable * SS_RATE_EMPLOYEE;
    const medTax = gross * MEDICARE_RATE_EMPLOYEE; // Medicare has no wage base for employee part for this simplified calc
    const totalFica = ssTax + medTax;

    setSocialSecurityTax(ssTax.toFixed(2));
    setMedicareTax(medTax.toFixed(2));
    setTotalFicaTax(totalFica.toFixed(2));
  };

  const resetForm = () => {
    setGrossPayPeriod(''); setSsWageBase('168600'); setYearToDateGross('0');
    setSocialSecurityTax(null); setMedicareTax(null); setTotalFicaTax(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive"><Info className="h-4 w-4"/><AlertTitle>Extremely Simplified Payroll Tax (FICA) Estimator</AlertTitle><AlertDescription>This calculator provides a <strong className="font-semibold">very basic estimate of employee-paid FICA taxes (Social Security & Medicare) ONLY</strong>. It uses fixed rates and does NOT include federal/state/local income tax withholding, SUTA, SDI, pre-tax deductions, or employer taxes. <strong className="font-semibold">NOT for actual payroll or tax planning. Consult a payroll specialist or tax advisor.</strong></AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate FICA taxes (employee portion).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="grossPayPT">Gross Pay for this Period ($)</Label><Input id="grossPayPT" type="number" value={grossPayPeriod} onChange={e=>setGrossPayPeriod(e.target.value)}/></div>
            <div><Label htmlFor="ytdGrossPT">Year-to-Date Gross Pay ($) (Before this period)</Label><Input id="ytdGrossPT" type="number" value={yearToDateGross} onChange={e=>setYearToDateGross(e.target.value)}/></div>
            <div><Label htmlFor="ssWageBasePT">Social Security Wage Base ($ for current year)</Label><Input id="ssWageBasePT" type="number" value={ssWageBase} onChange={e=>setSsWageBase(e.target.value)} placeholder="e.g., 168600 for 2024"/></div>
            <AlertDescription className="text-xs">Assumes SS rate: {(SS_RATE_EMPLOYEE*100).toFixed(1)}%, Medicare rate: {(MEDICARE_RATE_EMPLOYEE*100).toFixed(2)}%.</AlertDescription>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePayrollTaxes}>Estimate FICA</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(totalFicaTax || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated FICA Taxes (Employee Share)</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {socialSecurityTax && (<div className="p-1 bg-muted rounded-md text-sm">Social Security Tax: <strong className="font-semibold">${socialSecurityTax}</strong></div>)}
              {medicareTax && (<div className="p-1 bg-muted rounded-md text-sm">Medicare Tax: <strong className="font-semibold">${medicareTax}</strong></div>)}
              {totalFicaTax && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Total Estimated FICA Tax</p><p className="text-xl font-bold text-primary">${totalFicaTax}</p></div><CopyButton textToCopy={totalFicaTax}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
    

// ====== END OF FILE: PayrollTaxCalculator.tsx ======
==================================================

// ====== START OF FILE: PayrollTaxCalculatorSimplifiedUsStyle.tsx ======
// File converted from TSX to TXT
// Original size: 7.5 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, FileText } from "lucide-react";

// HIGHLY SIMPLIFIED - Placeholder rates. Real payroll taxes are complex.
const SS_RATE_EMPLOYEE = 0.062; // Social Security (up to wage base)
const MEDICARE_RATE_EMPLOYEE = 0.0145; // Medicare (no wage base for employee portion typically)
// Note: Does not include employer portion of FICA, federal/state income tax withholding, SUI, SDI, etc.

export default function PayrollTaxCalculatorSimplifiedUsStyle() {
  const [grossPayPeriod, setGrossPayPeriod] = useState<string>('');
  const [ssWageBase, setSsWageBase] = useState<string>('168600'); // 2024 example
  const [yearToDateGross, setYearToDateGross] = useState<string>('0'); // To check against SS wage base

  // Simplified deductions - these are placeholders and not accurate for real tax situations
  const [federalTaxRate, setFederalTaxRate] = useState<string>('15'); // Example flat %
  const [stateTaxRate, setStateTaxRate] = useState<string>('5');    // Example flat %
  const [otherDeductions, setOtherDeductions] = useState<string>('0'); // Fixed amount per pay period

  const [netPay, setNetPay] = useState<string | null>(null);
  const [totalDeductionsAmount, setTotalDeductionsAmount] = useState<string | null>(null);
  const [socialSecurityTax, setSocialSecurityTax] = useState<string | null>(null);
  const [medicareTax, setMedicareTax] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePayrollTaxes = () => {
    setError(null); setSocialSecurityTax(null); setMedicareTax(null); setTotalDeductionsAmount(null); setNetPay(null);
    
    const gross = parseFloat(grossPayPeriod);
    const wageBase = parseFloat(ssWageBase);
    const ytdGross = parseFloat(yearToDateGross);
    const fedRate = parseFloat(federalTaxRate) / 100;
    const stateRate = parseFloat(stateTaxRate) / 100;
    const otherDed = parseFloat(otherDeductions);

    if (isNaN(gross) || gross < 0 || isNaN(wageBase) || wageBase <=0 || isNaN(ytdGross) || ytdGross < 0 || isNaN(fedRate) || fedRate < 0 || isNaN(stateRate) || stateRate < 0 || isNaN(otherDed) || otherDed < 0) {
      setError('Please enter valid non-negative numbers for all fields. SS Wage Base must be positive.'); 
      return;
    }

    let ssTaxable = gross;
    if (ytdGross >= wageBase) {
      ssTaxable = 0;
    } else if (ytdGross + gross > wageBase) {
      ssTaxable = wageBase - ytdGross;
    }
    
    const ssTax = ssTaxable * SS_RATE_EMPLOYEE;
    const medTax = gross * MEDICARE_RATE_EMPLOYEE;
    const fedTaxAmount = gross * fedRate;
    const stateTaxAmount = gross * stateRate;
    
    const totalDed = ssTax + medTax + fedTaxAmount + stateTaxAmount + otherDed;
    const calculatedNetPay = gross - totalDed;

    setSocialSecurityTax(ssTax.toFixed(2));
    setMedicareTax(medTax.toFixed(2));
    setTotalDeductionsAmount(totalDed.toFixed(2));
    setNetPay(calculatedNetPay.toFixed(2));
  };

  const resetForm = () => {
    setGrossPayPeriod(''); setSsWageBase('168600'); setYearToDateGross('0');
    setFederalTaxRate('15'); setStateTaxRate('5'); setOtherDeductions('0');
    setSocialSecurityTax(null); setMedicareTax(null); setTotalDeductionsAmount(null); setNetPay(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4"/>
        <AlertTitle>Highly Simplified Estimator - For Illustration Only</AlertTitle>
        <AlertDescription>
          This calculator uses <strong className="font-semibold">placeholder flat tax rates for income tax and simplified FICA</strong>. It does NOT account for tax brackets, filing status, pre-tax deductions (401k, health insurance), or other complex payroll factors. <strong className="font-semibold">NOT for actual payroll or tax planning. Consult a payroll specialist or tax advisor.</strong>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate take-home pay (employee share).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="grossPaySTHP">Gross Pay for this Period ($)</Label><Input id="grossPaySTHP" type="number" value={grossPayPeriod} onChange={e=>setGrossPayPeriod(e.target.value)}/></div>
            <div><Label htmlFor="ytdGrossSTHP">Year-to-Date Gross Pay ($) (Before this period)</Label><Input id="ytdGrossSTHP" type="number" value={yearToDateGross} onChange={e=>setYearToDateGross(e.target.value)}/></div>
            <div><Label htmlFor="ssWageBaseSTHP">Social Security Wage Base ($)</Label><Input id="ssWageBaseSTHP" type="number" value={ssWageBase} onChange={e=>setSsWageBase(e.target.value)} placeholder="e.g., 168600 for 2024"/></div>
            <p className="text-sm font-medium text-muted-foreground pt-2 border-t">Placeholder Deductions:</p>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="fedTaxSTHP">Federal Tax Rate (%)</Label><Input id="fedTaxSTHP" type="number" value={federalTaxRate} onChange={e=>setFederalTaxRate(e.target.value)} /></div>
              <div><Label htmlFor="stateTaxSTHP">State Tax Rate (%)</Label><Input id="stateTaxSTHP" type="number" value={stateTaxRate} onChange={e=>setStateTaxRate(e.target.value)} /></div>
            </div>
            <div><Label htmlFor="otherDedSTHP">Other Deductions ($ per period)</Label><Input id="otherDedSTHP" type="number" value={otherDeductions} onChange={e=>setOtherDeductions(e.target.value)} placeholder="e.g., Health, 401k post-tax"/></div>
             <AlertDescription className="text-xs">Assumes FICA at 7.65% (SS 6.2% + Medicare 1.45%) for this demo.</AlertDescription>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePayrollTaxes}>Estimate Pay</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(netPay || error) && (
          <Card>
            <CardHeader><CardDescription>Paycheck Estimation (Simplified)</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {socialSecurityTax && (<div className="p-1 bg-muted rounded-md text-sm">Social Security Tax: <strong className="font-semibold">${socialSecurityTax}</strong></div>)}
              {medicareTax && (<div className="p-1 bg-muted rounded-md text-sm">Medicare Tax: <strong className="font-semibold">${medicareTax}</strong></div>)}
              {totalDeductionsAmount && (<div className="p-1 bg-muted rounded-md text-sm">Total Deductions: <strong className="font-semibold">${totalDeductionsAmount}</strong></div>)}
              {netPay && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Estimated Net Pay</p><p className="text-2xl font-bold text-primary">${netPay}</p></div><CopyButton textToCopy={netPay}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PayrollTaxCalculatorSimplifiedUsStyle.tsx ======
==================================================

// ====== START OF FILE: PensionCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.63 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Landmark } from "lucide-react";

// Highly simplified pension projection
// FV = P * ((1 + r)^t - 1) / r  (Future value of an ordinary annuity)
// Then, annual payout = FV_at_retirement * withdrawal_rate
// Or, it could be a defined benefit simulation (Final Salary * Accrual Rate * Years of Service) - this is too complex for simplified

export default function PensionCalculator() {
  const [currentAge, setCurrentAge] = useState<string>('');
  const [retirementAge, setRetirementAge] = useState<string>('');
  const [annualContribution, setAnnualContribution] = useState<string>('');
  const [expectedReturnRate, setExpectedReturnRate] = useState<string>(''); // %
  const [currentPensionPot, setCurrentPensionPot] = useState<string>('0');

  const [projectedPot, setProjectedPot] = useState<string | null>(null);
  const [estimatedAnnualIncome, setEstimatedAnnualIncome] = useState<string | null>(null); // Assuming a withdrawal rate
  const [error, setError] = useState<string | null>(null);

  const calculatePension = () => {
    setError(null);
    setProjectedPot(null);
    setEstimatedAnnualIncome(null);

    const age = parseInt(currentAge);
    const retAge = parseInt(retirementAge);
    const contrib = parseFloat(annualContribution);
    const rate = parseFloat(expectedReturnRate) / 100;
    const pot = parseFloat(currentPensionPot);

    if (isNaN(age) || age <=0 || isNaN(retAge) || retAge <= age || isNaN(contrib) || contrib < 0 || isNaN(rate) || rate < 0 || isNaN(pot) || pot < 0) {
      setError('Please enter valid numbers for ages, contributions, rate, and current pot.');
      return;
    }

    const yearsToRetirement = retAge - age;
    
    // FV of current pot
    const fvCurrentPot = pot * Math.pow(1 + rate, yearsToRetirement);
    
    // FV of annual contributions (ordinary annuity)
    let fvContributions;
    if (rate === 0) {
        fvContributions = contrib * yearsToRetirement;
    } else {
        fvContributions = contrib * ((Math.pow(1 + rate, yearsToRetirement) - 1) / rate);
    }
    
    const totalProjectedPot = fvCurrentPot + fvContributions;
    setProjectedPot(totalProjectedPot.toFixed(2));

    // Simplified annual income assuming a 4% withdrawal rate (common rule of thumb)
    const annualWithdrawal = totalProjectedPot * 0.04;
    setEstimatedAnnualIncome(annualWithdrawal.toFixed(2));
  };

  const resetForm = () => {
    setCurrentAge(''); setRetirementAge(''); setAnnualContribution('');
    setExpectedReturnRate(''); setCurrentPensionPot('0');
    setProjectedPot(null); setEstimatedAnnualIncome(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Simplified Pension Estimator - For Illustration Only</AlertTitle>
        <AlertDescription>
          Pension calculations are complex and depend on many factors (investment types, fees, inflation, annuity rates, tax laws, specific scheme rules). This calculator provides a <strong className="font-semibold">very basic projection</strong> and should NOT be used for financial planning. Consult a qualified financial advisor.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate your potential pension pot and income.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="currentAgePension">Current Age</Label><Input id="currentAgePension" type="number" value={currentAge} onChange={(e) => setCurrentAge(e.target.value)} placeholder="e.g., 30"/></div>
              <div><Label htmlFor="retirementAgePension">Retirement Age</Label><Input id="retirementAgePension" type="number" value={retirementAge} onChange={(e) => setRetirementAge(e.target.value)} placeholder="e.g., 67"/></div>
            </div>
            <div><Label htmlFor="currentPensionPot">Current Pension Pot ($)</Label><Input id="currentPensionPot" type="number" value={currentPensionPot} onChange={(e) => setCurrentPensionPot(e.target.value)} placeholder="e.g., 25000"/></div>
            <div><Label htmlFor="annualContributionPension">Annual Contribution ($)</Label><Input id="annualContributionPension" type="number" value={annualContribution} onChange={(e) => setAnnualContribution(e.target.value)} placeholder="e.g., 5000"/></div>
            <div><Label htmlFor="expectedReturnRatePension">Avg. Annual Investment Return (%)</Label><Input id="expectedReturnRatePension" type="number" value={expectedReturnRate} onChange={(e) => setExpectedReturnRate(e.target.value)} placeholder="e.g., 5 (net of fees)"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePension}>Estimate Pension</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(projectedPot || error) && (
          <Card>
            <CardHeader><CardDescription>Pension Projection (Simplified)</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {projectedPot && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Projected Pension Pot at Retirement</p>
                  <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">${projectedPot}</p><CopyButton textToCopy={projectedPot} size="sm" variant="ghost"/></div>
                </div>
              )}
              {estimatedAnnualIncome && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Est. Annual Income in Retirement (4% withdrawal)</p><p className="font-semibold">${estimatedAnnualIncome} / year</p></div>)}
               <AlertDescription className="text-xs pt-2">This estimate assumes end-of-year contributions and annual compounding. It does not account for inflation, taxes, or fees.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PensionCalculator.tsx ======
==================================================

// ====== START OF FILE: PensionPotEstimatorDc.tsx ======
// File converted from TSX to TXT
// Original size: 6.35 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Landmark } from "lucide-react";

export default function PensionPotEstimatorDc() {
  const [currentAge, setCurrentAge] = useState<string>('');
  const [retirementAge, setRetirementAge] = useState<string>('');
  const [annualContribution, setAnnualContribution] = useState<string>('');
  const [expectedReturnRate, setExpectedReturnRate] = useState<string>(''); // %
  const [currentPensionPot, setCurrentPensionPot] = useState<string>('0');

  const [projectedPot, setProjectedPot] = useState<string | null>(null);
  const [estimatedAnnualIncome, setEstimatedAnnualIncome] = useState<string | null>(null); // Assuming a withdrawal rate
  const [error, setError] = useState<string | null>(null);

  const calculatePension = () => {
    setError(null);
    setProjectedPot(null);
    setEstimatedAnnualIncome(null);

    const age = parseInt(currentAge);
    const retAge = parseInt(retirementAge);
    const contrib = parseFloat(annualContribution);
    const rate = parseFloat(expectedReturnRate) / 100;
    const pot = parseFloat(currentPensionPot);

    if (isNaN(age) || age <=0 || isNaN(retAge) || retAge <= age || isNaN(contrib) || contrib < 0 || isNaN(rate) || rate < 0 || isNaN(pot) || pot < 0) {
      setError('Please enter valid numbers for ages, contributions, rate, and current pot.');
      return;
    }

    const yearsToRetirement = retAge - age;
    
    // FV of current pot
    const fvCurrentPot = pot * Math.pow(1 + rate, yearsToRetirement);
    
    // FV of annual contributions (ordinary annuity)
    let fvContributions;
    if (rate === 0) {
        fvContributions = contrib * yearsToRetirement;
    } else {
        fvContributions = contrib * ((Math.pow(1 + rate, yearsToRetirement) - 1) / rate);
    }
    
    const totalProjectedPot = fvCurrentPot + fvContributions;
    setProjectedPot(totalProjectedPot.toFixed(2));

    // Simplified annual income assuming a 4% withdrawal rate (common rule of thumb)
    const annualWithdrawal = totalProjectedPot * 0.04;
    setEstimatedAnnualIncome(annualWithdrawal.toFixed(2));
  };

  const resetForm = () => {
    setCurrentAge(''); setRetirementAge(''); setAnnualContribution('');
    setExpectedReturnRate(''); setCurrentPensionPot('0');
    setProjectedPot(null); setEstimatedAnnualIncome(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Simplified Pension Estimator - For Illustration Only</AlertTitle>
        <AlertDescription>
          Pension calculations are complex and depend on many factors (investment types, fees, inflation, annuity rates, tax laws, specific scheme rules). This calculator provides a <strong className="font-semibold">very basic projection</strong> and should NOT be used for financial planning. Consult a qualified financial advisor.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate your potential pension pot and income.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="currentAgePensionDc">Current Age</Label><Input id="currentAgePensionDc" type="number" value={currentAge} onChange={(e) => setCurrentAge(e.target.value)} placeholder="e.g., 30"/></div>
              <div><Label htmlFor="retirementAgePensionDc">Retirement Age</Label><Input id="retirementAgePensionDc" type="number" value={retirementAge} onChange={(e) => setRetirementAge(e.target.value)} placeholder="e.g., 67"/></div>
            </div>
            <div><Label htmlFor="currentPensionPotDc">Current Pension Pot ($)</Label><Input id="currentPensionPotDc" type="number" value={currentPensionPot} onChange={(e) => setCurrentPensionPot(e.target.value)} placeholder="e.g., 25000"/></div>
            <div><Label htmlFor="annualContributionPensionDc">Annual Contribution ($)</Label><Input id="annualContributionPensionDc" type="number" value={annualContribution} onChange={(e) => setAnnualContribution(e.target.value)} placeholder="e.g., 5000"/></div>
            <div><Label htmlFor="expectedReturnRatePensionDc">Avg. Annual Investment Return (%)</Label><Input id="expectedReturnRatePensionDc" type="number" value={expectedReturnRate} onChange={(e) => setExpectedReturnRate(e.target.value)} placeholder="e.g., 5 (net of fees)"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePension}>Estimate Pension</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(projectedPot || error) && (
          <Card>
            <CardHeader><CardDescription>Pension Projection (Simplified)</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {projectedPot && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Projected Pension Pot at Retirement</p>
                  <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">${projectedPot}</p><CopyButton textToCopy={projectedPot} size="sm" variant="ghost"/></div>
                </div>
              )}
              {estimatedAnnualIncome && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Est. Annual Income in Retirement (4% withdrawal)</p><p className="font-semibold">${estimatedAnnualIncome} / year</p></div>)}
               <AlertDescription className="text-xs pt-2">This estimate assumes end-of-year contributions and annual compounding. It does not account for inflation, taxes, or fees.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PensionPotEstimatorDc.tsx ======
==================================================

// ====== START OF FILE: PercentageCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.17 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Percent } from "lucide-react";

type PercentageOperation = 'percentOf' | 'isWhatPercentOf' | 'percentChange';

export default function PercentageCalculator() {
  const [operation, setOperation] = useState<PercentageOperation>('percentOf');
  const [value1, setValue1] = useState<string>('');
  const [value2, setValue2] = useState<string>('');
  
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePercentage = () => {
    setError(null);
    setResult(null);

    const v1 = parseFloat(value1);
    const v2 = parseFloat(value2);

    if (isNaN(v1) || (operation !== 'percentOf' && isNaN(v2))) {
      setError('Please enter valid numbers for the selected operation.');
      return;
    }

    let calculatedResult: number;
    let resultSuffix = '%';

    switch (operation) {
      case 'percentOf': // What is X% of Y? v1=X, v2=Y
        if (isNaN(v2)) { setError('Second value (Y) is required for "X% of Y".'); return; }
        calculatedResult = (v1 / 100) * v2;
        resultSuffix = ''; // Result is a value, not percentage
        break;
      case 'isWhatPercentOf': // X is what % of Y? v1=X, v2=Y
        if (isNaN(v2) || v2 === 0) { setError('Second value (Y) must be a non-zero number for "X is what % of Y".'); return; }
        calculatedResult = (v1 / v2) * 100;
        break;
      case 'percentChange': // % change from X to Y. v1=X (old), v2=Y (new)
        if (isNaN(v2) || v1 === 0) { setError('Initial value (X) must be non-zero for percentage change.'); return; }
        calculatedResult = ((v2 - v1) / v1) * 100;
        break;
      default:
        setError("Invalid operation selected.");
        return;
    }
    if (isNaN(calculatedResult) || !isFinite(calculatedResult)){
        setError("Calculation resulted in an invalid number.");
        return;
    }
    setResult(`${calculatedResult.toFixed(2)}${resultSuffix}`);
  };
  
  const resetForm = () => {
    setValue1('');
    setValue2('');
    setResult(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Percentage Calculator</AlertTitle><AlertDescription>Perform various percentage calculations like finding a percentage of a number, what percentage one number is of another, or percentage change.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Select operation and enter values.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="percentageOperation">Operation</Label>
              <Select value={operation} onValueChange={(v: PercentageOperation) => setOperation(v)}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="percentOf">What is X % of Y?</SelectItem>
                  <SelectItem value="isWhatPercentOf">X is what % of Y?</SelectItem>
                  <SelectItem value="percentChange">% Change from X to Y</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="value1Percent">{operation === 'percentOf' ? 'Percentage (X)' : 'Value X / Initial Value'}</Label><Input id="value1Percent" type="number" value={value1} onChange={(e) => setValue1(e.target.value)} placeholder="e.g., 20"/></div>
              <div><Label htmlFor="value2Percent">{operation === 'percentChange' ? 'Value Y / Final Value' : 'Value Y'}</Label><Input id="value2Percent" type="number" value={value2} onChange={(e) => setValue2(e.target.value)} placeholder="e.g., 50"/></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePercentage}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Result</p><p className="text-2xl font-bold text-primary">{result}</p></div><CopyButton textToCopy={result} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PercentageCalculator.tsx ======
==================================================

// ====== START OF FILE: PercentOffCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.65 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, BadgePercent } from "lucide-react";

export default function PercentOffCalculator() {
  const [originalPrice, setOriginalPrice] = useState<string>('');
  const [percentOff, setPercentOff] = useState<string>('');
  
  const [finalPrice, setFinalPrice] = useState<string | null>(null);
  const [amountSaved, setAmountSaved] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateDiscount = () => {
    setError(null);
    setFinalPrice(null);
    setAmountSaved(null);

    const price = parseFloat(originalPrice);
    const discount = parseFloat(percentOff);

    if (isNaN(price) || price < 0 || isNaN(discount) || discount < 0 || discount > 100) {
      setError('Please enter a valid original price (>=0) and percent off (0-100).');
      return;
    }

    const saved = (price * discount) / 100;
    const final = price - saved;

    setAmountSaved(saved.toFixed(2));
    setFinalPrice(final.toFixed(2));
  };

  const resetForm = () => {
    setOriginalPrice('');
    setPercentOff('');
    setFinalPrice(null);
    setAmountSaved(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Percent Off Calculator</AlertTitle><AlertDescription>Calculate the final price after a percentage discount and see the amount saved.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter price and discount.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="originalPricePO">Original Price ($)</Label><Input id="originalPricePO" type="number" value={originalPrice} onChange={(e) => setOriginalPrice(e.target.value)} placeholder="e.g., 80"/></div>
            <div><Label htmlFor="percentOffPO">Percent Off (%)</Label><Input id="percentOffPO" type="number" value={percentOff} onChange={(e) => setPercentOff(e.target.value)} placeholder="e.g., 25"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateDiscount}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(finalPrice || error) && (
          <Card>
            <CardHeader><CardDescription>Discount Calculation</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {amountSaved && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">You Save</p><p className="font-semibold text-green-600">${amountSaved}</p></div>)}
              {finalPrice && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Final Price</p><p className="text-2xl font-bold text-primary">${finalPrice}</p></div>
                  <CopyButton textToCopy={finalPrice} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PercentOffCalculator.tsx ======
==================================================

// ====== START OF FILE: PeriodAndFrequencyCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.37 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState, ChangeEvent } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Info, Repeat } from "lucide-react";

export default function PeriodAndFrequencyCalculator() {
  const [period, setPeriod] = useState<string>(''); // in seconds (s)
  const [frequency, setFrequency] = useState<string>(''); // in Hertz (Hz)
  const [error, setError] = useState<string | null>(null);

  const handlePeriodChange = (e: ChangeEvent<HTMLInputElement>) => {
    const T = e.target.value;
    setPeriod(T);
    setError(null);
    if (T === '' || T === '-') {
      setFrequency('');
      return;
    }
    const numT = parseFloat(T);
    if (!isNaN(numT) && numT > 0) {
      const f = 1 / numT;
      setFrequency(f.toPrecision(5));
    } else if (numT === 0) {
      setFrequency('Infinity');
    } else {
      setFrequency('');
    }
  };

  const handleFrequencyChange = (e: ChangeEvent<HTMLInputElement>) => {
    const f = e.target.value;
    setFrequency(f);
    setError(null);
    if (f === '' || f === '-') {
      setPeriod('');
      return;
    }
    const numF = parseFloat(f);
    if (!isNaN(numF) && numF > 0) {
      const T = 1 / numF;
      setPeriod(T.toPrecision(5));
    } else if (numF === 0) {
        setPeriod('Infinity');
    } else {
      setPeriod('');
    }
  };

  const resetConverter = () => {
    setPeriod('');
    setFrequency('');
    setError(null);
  };

  return (
    <div className="space-y-6">
       <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Period and Frequency Calculator</AlertTitle>
        <AlertDescription>
          Calculate the period or frequency of a wave or oscillation. The period (T) is the time for one cycle (in seconds), and frequency (f) is the number of cycles per second (in Hertz). They are reciprocals: f = 1/T.
        </AlertDescription>
      </Alert>
      <Card className="w-full max-w-md mx-auto">
        <CardHeader>
          <CardDescription>Enter a value in either field to convert to the other.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Repeat className="h-5 w-5 text-muted-foreground" />
            <Label htmlFor="frequency" className="w-24">Frequency (f) [Hz]</Label>
            <Input 
              id="frequency" 
              type="number" 
              value={frequency}
              onChange={handleFrequencyChange}
              placeholder="e.g., 50"
            />
          </div>
          <div className="flex items-center space-x-2">
            <Repeat className="h-5 w-5 text-muted-foreground" />
            <Label htmlFor="period" className="w-24">Period (T) [s]</Label>
            <Input 
              id="period" 
              type="number" 
              value={period}
              onChange={handlePeriodChange}
              placeholder="e.g., 0.02"
            />
          </div>
        </CardContent>
        <CardFooter>
          <Button variant="outline" onClick={resetConverter} className="w-full">
            Reset
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
}


// ====== END OF FILE: PeriodAndFrequencyCalculator.tsx ======
==================================================

// ====== START OF FILE: PeriodCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { format, addDays, isValid } from 'date-fns';
import { cn } from '@/lib/utils';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CalendarHeart, CalendarDays } from "lucide-react";

export default function PeriodCalculator() {
  const [lastPeriodDate, setLastPeriodDate] = useState<Date | undefined>(undefined);
  const [averageCycleLength, setAverageCycleLength] = useState<string>('28');
  
  const [nextPeriodStartDate, setNextPeriodStartDate] = useState<string | null>(null);
  const [estimatedOvulation, setEstimatedOvulation] = useState<string | null>(null); // Similar to OvulationCalc
  const [fertileWindow, setFertileWindow] = useState<string | null>(null);         // Similar to OvulationCalc
  const [error, setError] = useState<string | null>(null);

  const calculatePeriodDates = () => {
    setError(null);
    setNextPeriodStartDate(null);
    setEstimatedOvulation(null);
    setFertileWindow(null);

    if (!lastPeriodDate || !isValid(lastPeriodDate)) {
      setError('Please select a valid date for the first day of your last period.');
      return;
    }
    const cycleLen = parseInt(averageCycleLength);
    if (isNaN(cycleLen) || cycleLen < 20 || cycleLen > 45) {
      setError('Please enter a typical average cycle length (usually between 20 and 45 days).');
      return;
    }

    const nextPeriod = addDays(lastPeriodDate, cycleLen);
    setNextPeriodStartDate(format(nextPeriod, "PPP, EEEE"));

    // Ovulation is typically 14 days BEFORE the next period.
    const ovulationDateEst = addDays(nextPeriod, -14); // or lastPeriodDate + (cycleLen - 14)
    setEstimatedOvulation(format(ovulationDateEst, "PPP, EEEE"));

    // Fertile window: 5 days before ovulation + ovulation day + 1 day after
    const fertileStart = addDays(ovulationDateEst, -5);
    const fertileEnd = addDays(ovulationDateEst, 1);
    setFertileWindow(`${format(fertileStart, "PPP")} - ${format(fertileEnd, "PPP")}`);
  };
  
  const resetForm = () => {
    setLastPeriodDate(undefined);
    setAverageCycleLength('28');
    setNextPeriodStartDate(null);
    setEstimatedOvulation(null);
    setFertileWindow(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Medical Disclaimer - Estimation Only</AlertTitle>
        <AlertDescription>
          This calculator estimates period dates based on typical cycle patterns. It is <strong className="font-semibold">not a substitute for medical advice or precise fertility/cycle tracking methods</strong>. Cycle lengths and ovulation can vary. Consult a healthcare professional for health concerns.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate your next period and fertile window.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="lastPeriodDate">First Day of Last Period</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button id="lastPeriodDate" variant={"outline"} className={cn("w-full justify-start text-left font-normal", !lastPeriodDate && "text-muted-foreground")}>
                    <CalendarCheck2 className="mr-2 h-4 w-4" />
                    {lastPeriodDate ? format(lastPeriodDate, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={lastPeriodDate} onSelect={setLastPeriodDate} initialFocus /></PopoverContent>
              </Popover>
            </div>
            <div><Label htmlFor="averageCycleLength">Average Cycle Length (days)</Label><Input id="averageCycleLength" type="number" value={averageCycleLength} onChange={(e) => setAverageCycleLength(e.target.value)} placeholder="e.g., 28" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePeriodDates}>Calculate Dates</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(nextPeriodStartDate || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Cycle Dates</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {nextPeriodStartDate && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Next Period Start</p><p className="font-semibold">{nextPeriodStartDate}</p></div>)}
              {estimatedOvulation && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Ovulation Date</p><p className="font-semibold">{estimatedOvulation}</p></div>)}
              {fertileWindow && (<div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">Estimated Fertile Window</p><div className="flex justify-between items-center"><p className="text-lg font-bold text-primary">{fertileWindow}</p><CopyButton textToCopy={fertileWindow} size="sm" variant="ghost"/></div></div>)}
            </CardContent>
            <CardFooter><p className="text-xs text-muted-foreground">Individual cycles vary. For precise tracking, consider other methods.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PeriodCalculator.tsx ======
==================================================

// ====== START OF FILE: PermutationsCombinationsCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.28 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Checkbox } from "@/components/ui/checkbox"
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Shuffle } from "lucide-react";

type CalculationType = 'permutations' | 'combinations';

export default function PermutationsCombinationsCalculator() {
  const [calcType, setCalcType] = useState<CalculationType>('combinations');
  const [totalItemsN, setTotalItemsN] = useState<string>('');
  const [itemsToChooseR, setItemsToChooseR] = useState<string>('');
  const [allowRepetition, setAllowRepetition] = useState<boolean>(false);

  const [result, setResult] = useState<string | null>(null);
  const [formulaUsed, setFormulaUsed] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const factorial = (n: number): number => {
    if (n < 0) return NaN; // Factorial not defined for negative numbers
    if (n === 0) return 1;
    let res = 1;
    for (let i = 2; i <= n; i++) res *= i;
    return res;
  };

  const calculate = () => {
    setError(null); setResult(null); setFormulaUsed(null);
    const n = parseInt(totalItemsN);
    const r = parseInt(itemsToChooseR);

    if (isNaN(n) || n < 0 || isNaN(r) || r < 0) { setError("Total items (n) and items to choose (r) must be non-negative integers."); return; }
    if (r > n && !allowRepetition && calcType === 'combinations') { setError("Items to choose (r) cannot exceed total items (n) for combinations without repetition."); return; }
     if (r > n && !allowRepetition && calcType === 'permutations') { setError("Items to choose (r) cannot exceed total items (n) for permutations without repetition."); return; }


    let calculatedValue: number;
    let formulaStr = '';

    if (calcType === 'permutations') {
      if (allowRepetition) { // P(n,r) with repetition = n^r
        calculatedValue = Math.pow(n, r);
        formulaStr = `P(n,r) with repetition = n^r = ${n}^${r}`;
      } else { // P(n,r) without repetition = n! / (n-r)!
        if (r > n) { calculatedValue = 0; /* Or error */ } else { calculatedValue = factorial(n) / factorial(n - r); }
        formulaStr = `P(n,r) = n! / (n-r)! = ${n}! / (${n}-${r})!`;
      }
    } else { // Combinations
      if (allowRepetition) { // C(n,r) with repetition = (n+r-1)! / (r! * (n-1)!)
        calculatedValue = factorial(n + r - 1) / (factorial(r) * factorial(n - 1));
        formulaStr = `C(n,r) with repetition = (n+r-1)! / (r!(n-1)!) = (${n}+${r}-1)! / (${r}!(${n}-1)!)`;
      } else { // C(n,r) without repetition = n! / (r! * (n-r)!)
         if (r > n) { calculatedValue = 0; /* Or error */ } else { calculatedValue = factorial(n) / (factorial(r) * factorial(n - r)); }
        formulaStr = `C(n,r) = n! / (r!(n-r)!) = ${n}! / (${r}!(${n}-${r})!)`;
      }
    }
    
    if(isNaN(calculatedValue) || !isFinite(calculatedValue)) { setError("Calculation resulted in an invalid number (e.g., too large or factorial of negative)."); return; }
    setResult(calculatedValue.toLocaleString());
    setFormulaUsed(formulaStr);
  };

  const resetForm = () => {
    setTotalItemsN(''); setItemsToChooseR(''); setAllowRepetition(false);
    setResult(null); setFormulaUsed(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Permutations & Combinations</AlertTitle><AlertDescription>Calculate the number of permutations (order matters) or combinations (order doesn't matter) for selecting 'r' items from a set of 'n' items.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter values and options.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label>Calculation Type</Label><RadioGroup defaultValue="combinations" value={calcType} onValueChange={(v:CalculationType)=>setCalcType(v)} className="flex gap-4 mt-1"><div className="flex items-center space-x-2"><RadioGroupItem value="combinations" id="cRadio"/><Label htmlFor="cRadio">Combinations C(n,r)</Label></div><div className="flex items-center space-x-2"><RadioGroupItem value="permutations" id="pRadio"/><Label htmlFor="pRadio">Permutations P(n,r)</Label></div></RadioGroup></div>
            <div><Label htmlFor="totalItemsN">Total Number of Items (n)</Label><Input id="totalItemsN" type="number" value={totalItemsN} onChange={e=>setTotalItemsN(e.target.value)} placeholder="e.g., 10"/></div>
            <div><Label htmlFor="itemsToChooseR">Number of Items to Choose (r)</Label><Input id="itemsToChooseR" type="number" value={itemsToChooseR} onChange={e=>setItemsToChooseR(e.target.value)} placeholder="e.g., 3"/></div>
            <div className="flex items-center space-x-2"><Checkbox id="allowRepetitionPC" checked={allowRepetition} onCheckedChange={(c)=>setAllowRepetition(!!c)}/><Label htmlFor="allowRepetitionPC">Allow Repetition?</Label></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Results</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {formulaUsed && (<div className="p-1 bg-muted rounded-md text-xs">Formula: {formulaUsed}</div>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Number of {calcType}</p><p className="text-2xl font-bold text-primary">{result}</p></div><CopyButton textToCopy={result}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: PermutationsCombinationsCalculator.tsx ======
==================================================

// ====== START OF FILE: PersonalLoanCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.14 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, HandCoins } from "lucide-react";

export default function PersonalLoanCalculator() {
  const [loanAmount, setLoanAmount] = useState<string>('');
  const [interestRate, setInterestRate] = useState<string>(''); // Annual %
  const [loanTermYears, setLoanTermYears] = useState<string>('');
  
  const [monthlyPayment, setMonthlyPayment] = useState<string | null>(null);
  const [totalRepayment, setTotalRepayment] = useState<string | null>(null);
  const [totalInterest, setTotalInterest] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateLoan = () => {
    setError(null);
    setMonthlyPayment(null);
    setTotalRepayment(null);
    setTotalInterest(null);

    const P = parseFloat(loanAmount);
    const annualRate = parseFloat(interestRate) / 100;
    const N_years = parseInt(loanTermYears);

    if (isNaN(P) || P <= 0 || isNaN(annualRate) || annualRate < 0 || isNaN(N_years) || N_years <= 0) {
      setError('Please enter valid positive numbers for loan amount, interest rate, and term (years).');
      return;
    }

    const N_months = N_years * 12;
    const monthlyRate = annualRate / 12;
    let M; // Monthly Payment

    if (monthlyRate === 0) { 
        M = P / N_months;
    } else {
        M = P * (monthlyRate * Math.pow(1 + monthlyRate, N_months)) / (Math.pow(1 + monthlyRate, N_months) - 1);
    }
    
    if (isNaN(M) || !isFinite(M)) {
        setError('Could not calculate monthly payment. Check inputs.');
        return;
    }

    const calculatedTotalRepayment = M * N_months;
    const calculatedTotalInterest = calculatedTotalRepayment - P;

    setMonthlyPayment(M.toFixed(2));
    setTotalRepayment(calculatedTotalRepayment.toFixed(2));
    setTotalInterest(calculatedTotalInterest.toFixed(2));
  };
  
  const resetForm = () => {
    setLoanAmount('');
    setInterestRate('');
    setLoanTermYears('');
    setMonthlyPayment(null);
    setTotalRepayment(null);
    setTotalInterest(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Personal Loan Estimator</AlertTitle><AlertDescription>Estimate monthly payments, total repayment, and total interest for a personal loan. Does not include origination fees or other charges.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your loan details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="loanAmountPL">Loan Amount ($)</Label><Input id="loanAmountPL" type="number" value={loanAmount} onChange={(e) => setLoanAmount(e.target.value)} placeholder="e.g., 10000"/></div>
            <div><Label htmlFor="interestRatePL">Annual Interest Rate (%)</Label><Input id="interestRatePL" type="number" value={interestRate} onChange={(e) => setInterestRate(e.target.value)} placeholder="e.g., 8.99"/></div>
            <div><Label htmlFor="loanTermYearsPL">Loan Term (Years)</Label><Input id="loanTermYearsPL" type="number" value={loanTermYears} onChange={(e) => setLoanTermYears(e.target.value)} placeholder="e.g., 5"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateLoan}>Calculate Loan</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(monthlyPayment || error) && (
          <Card>
            <CardHeader><CardDescription>Loan Estimates</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {monthlyPayment && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Monthly Payment</p><p className="text-2xl font-bold text-primary">${monthlyPayment}</p></div>
                  <CopyButton textToCopy={monthlyPayment} />
                </div>
              )}
              {totalRepayment && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Repayment</p><p className="font-semibold">${totalRepayment}</p></div>)}
              {totalInterest && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Interest Paid</p><p className="font-semibold">${totalInterest}</p></div>)}
            </CardContent>
             <CardFooter><p className="text-xs text-muted-foreground">Actual loan offers may vary. Check with lenders.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PersonalLoanCalculator.tsx ======
==================================================

// ====== START OF FILE: PhCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.26 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, FlaskConical } from "lucide-react";

type CalculationTargetPH = 'pH' | 'pOH' | 'H_concentration' | 'OH_concentration';

export default function PhCalculator() {
  const [target, setTarget] = useState<CalculationTargetPH>('pH');
  const [inputValue, setInputValue] = useState<string>('');

  const [resultPH, setResultPH] = useState<string | null>(null);
  const [resultPOH, setResultPOH] = useState<string | null>(null);
  const [resultHConcentration, setResultHConcentration] = useState<string | null>(null);
  const [resultOHConcentration, setResultOHConcentration] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const Kw = 1.0e-14; // Ion product of water at 25°C

  const calculate = () => {
    setError(null);
    setResultPH(null);
    setResultPOH(null);
    setResultHConcentration(null);
    setResultOHConcentration(null);
    
    const val = parseFloat(inputValue);
    if (isNaN(val)) {
      setError('Please enter a valid numeric input value.');
      return;
    }

    let pH_val: number | undefined, pOH_val: number | undefined, H_conc: number | undefined, OH_conc: number | undefined;

    try {
      switch (target) {
        case 'pH':
          if (val < 0 || val > 14) { setError("Typical pH values are between 0 and 14."); /* Allow calculation anyway */ }
          pH_val = val;
          pOH_val = 14 - pH_val;
          H_conc = Math.pow(10, -pH_val);
          OH_conc = Kw / H_conc;
          break;
        case 'pOH':
          if (val < 0 || val > 14) { setError("Typical pOH values are between 0 and 14."); /* Allow calculation */ }
          pOH_val = val;
          pH_val = 14 - pOH_val;
          OH_conc = Math.pow(10, -pOH_val);
          H_conc = Kw / OH_conc;
          break;
        case 'H_concentration':
          if (val <= 0) throw new Error("[H+] concentration must be positive.");
          H_conc = val;
          pH_val = -Math.log10(H_conc);
          pOH_val = 14 - pH_val;
          OH_conc = Kw / H_conc;
          break;
        case 'OH_concentration':
          if (val <= 0) throw new Error("[OH-] concentration must be positive.");
          OH_conc = val;
          pOH_val = -Math.log10(OH_conc);
          pH_val = 14 - pOH_val;
          H_conc = Kw / OH_conc;
          break;
        default: throw new Error("Invalid calculation target.");
      }

      if (pH_val !== undefined) setResultPH(pH_val.toPrecision(4));
      if (pOH_val !== undefined) setResultPOH(pOH_val.toPrecision(4));
      if (H_conc !== undefined) setResultHConcentration(H_conc.toExponential(3));
      if (OH_conc !== undefined) setResultOHConcentration(OH_conc.toExponential(3));

    } catch (e: any) { setError(e.message); }
  };
  
  const resetForm = () => {
    setInputValue('');
    setResultPH(null); setResultPOH(null); setResultHConcentration(null); setResultOHConcentration(null);
    setError(null);
  };

  const getInputLabel = () => {
    if (target === 'pH') return "Enter pH Value";
    if (target === 'pOH') return "Enter pOH Value";
    if (target === 'H_concentration') return "Enter [H⁺] Concentration (mol/L)";
    if (target === 'OH_concentration') return "Enter [OH⁻] Concentration (mol/L)";
    return "Enter Value";
  }

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>pH & pOH Calculator</AlertTitle><AlertDescription>Calculate pH, pOH, [H⁺], or [OH⁻] given one value. Assumes 25°C (Kw = 1.0 x 10⁻¹⁴). For strong acids/bases or dilute solutions.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Select what to calculate and enter the known value.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="targetPHCalc">Calculate:</Label><Select value={target} onValueChange={(v: CalculationTargetPH) => {setTarget(v); setInputValue(''); setResultPH(null);setError(null);}}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent><SelectItem value="pH">pH</SelectItem><SelectItem value="pOH">pOH</SelectItem><SelectItem value="H_concentration">[H⁺] Concentration</SelectItem><SelectItem value="OH_concentration">[OH⁻] Concentration</SelectItem></SelectContent></Select></div>
            <div><Label htmlFor="inputValuePH">{getInputLabel()}</Label><Input id="inputValuePH" type="number" value={inputValue} onChange={e=>setInputValue(e.target.value)} placeholder="e.g., 7 or 1e-7"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(resultPH || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Results</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {resultPH && (<div className="p-1 bg-muted rounded-md"><p className="text-xs text-muted-foreground">pH:</p><p className="font-semibold">{resultPH}</p></div>)}
              {resultPOH && (<div className="p-1 bg-muted rounded-md"><p className="text-xs text-muted-foreground">pOH:</p><p className="font-semibold">{resultPOH}</p></div>)}
              {resultHConcentration && (<div className="p-1 bg-muted rounded-md"><p className="text-xs text-muted-foreground">[H⁺] Concentration:</p><p className="font-semibold">{resultHConcentration} mol/L</p></div>)}
              {resultOHConcentration && (<div className="p-1 bg-muted rounded-md"><p className="text-xs text-muted-foreground">[OH⁻] Concentration:</p><p className="font-semibold">{resultOHConcentration} mol/L</p></div>)}
              {resultPH && parseFloat(resultPH) < 7 && <Alert variant="default" className="bg-orange-500/10 border-orange-500/50 text-orange-700 dark:text-orange-400 [&gt;svg]:text-orange-600 mt-2"><Info className="h-4 w-4"/><AlertDescription>Solution is Acidic (pH &lt; 7)</AlertDescription></Alert>}
              {resultPH && parseFloat(resultPH) > 7 && <Alert variant="default" className="bg-blue-500/10 border-blue-500/50 text-blue-700 dark:text-blue-400 [&gt;svg]:text-blue-600 mt-2"><Info className="h-4 w-4"/><AlertDescription>Solution is Basic/Alkaline (pH &gt; 7)</AlertDescription></Alert>}
              {resultPH && parseFloat(resultPH) === 7 && <Alert variant="default" className="bg-green-500/10 border-green-500/50 text-green-700 dark:text-green-400 [&gt;svg]:text-green-600 mt-2"><Info className="h-4 w-4"/><AlertDescription>Solution is Neutral (pH = 7)</AlertDescription></Alert>}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PhCalculator.tsx ======
==================================================

// ====== START OF FILE: PhysicsProjectileMotionCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, MoveUpRight } from "lucide-react";

const GRAVITY = 9.81; // m/s²

export default function PhysicsProjectileMotionCalculator() {
  const [initialVelocity, setInitialVelocity] = useState<string>(''); // m/s
  const [launchAngle, setLaunchAngle] = useState<string>(''); // degrees
  const [initialHeight, setInitialHeight] = useState<string>('0'); // meters

  const [maxHeight, setMaxHeight] = useState<string | null>(null);
  const [horizontalRange, setHorizontalRange] = useState<string | null>(null);
  const [timeOfFlight, setTimeOfFlight] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const toRadians = (degrees: number) => degrees * (Math.PI / 180);

  const calculateMotion = () => {
    setError(null); setMaxHeight(null); setHorizontalRange(null); setTimeOfFlight(null);
    const v0 = parseFloat(initialVelocity);
    const angleDeg = parseFloat(launchAngle);
    const h0 = parseFloat(initialHeight);

    if (isNaN(v0) || v0 < 0 || isNaN(angleDeg) || angleDeg < 0 || angleDeg > 90 || isNaN(h0) || h0 < 0) {
      setError('Valid inputs: Velocity (>=0 m/s), Angle (0-90°), Initial Height (>=0 m).');
      return;
    }

    const angleRad = toRadians(angleDeg);
    const v0x = v0 * Math.cos(angleRad); // Horizontal velocity component
    const v0y = v0 * Math.sin(angleRad); // Vertical velocity component

    // Time to reach max height (from h0 if v0y > 0)
    // v_y = v0y - gt  => t_peak = v0y / g
    // Max height from launch point: H = v0y^2 / (2g). Max height from ground = h0 + H
    const t_to_peak_from_h0 = v0y / GRAVITY;
    const h_peak_from_launch = (v0y * v0y) / (2 * GRAVITY);
    const calculatedMaxHeight = h0 + h_peak_from_launch;
    setMaxHeight(calculatedMaxHeight.toFixed(2));

    // Time of flight: Solve quadratic equation for t when y(t) = 0: h0 + v0y*t - 0.5*g*t^2 = 0
    // -0.5gt^2 + v0y*t + h0 = 0  => 0.5gt^2 - v0y*t - h0 = 0
    // t = [ -(-v0y) +/- sqrt( (-v0y)^2 - 4*(0.5g)*(-h0) ) ] / (2 * 0.5g)
    // t = [ v0y +/- sqrt( v0y^2 + 2gh0 ) ] / g
    const discriminant = v0y*v0y + 2*GRAVITY*h0;
    if (discriminant < 0) { // Should not happen if h0 >= 0
        setError("Cannot calculate time of flight with these parameters (negative discriminant).");
        return;
    }
    const t_flight_positive_root = (v0y + Math.sqrt(discriminant)) / GRAVITY;
    // const t_flight_negative_root = (v0y - Math.sqrt(discriminant)) / GRAVITY; // Usually not physical if starting above ground
    
    // If launched downwards from a height or angle is 0 and h0 > 0
    // If v0y is 0 (launched horizontally from height h0): t_flight = sqrt(2*h0/g)
    // If v0y < 0 (launched downwards): Use positive root or ensure logic handles it.
    // For this simplified version, we use the positive root which generally gives the time to hit ground y=0.
    const calculatedTimeOfFlight = t_flight_positive_root;
    setTimeOfFlight(calculatedTimeOfFlight.toFixed(2));
    
    // Horizontal Range: R = v0x * t_flight
    const calculatedRange = v0x * calculatedTimeOfFlight;
    setHorizontalRange(calculatedRange.toFixed(2));
  };

  const resetForm = () => {
    setInitialVelocity(''); setLaunchAngle(''); setInitialHeight('0');
    setError(null); setMaxHeight(null); setHorizontalRange(null); setTimeOfFlight(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Projectile Motion Calculator</AlertTitle><AlertDescription>Calculate max height, range, and time of flight for a projectile. Ignores air resistance. Uses g = {GRAVITY} m/s².</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter initial conditions.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="initVel">Initial Velocity (m/s)</Label><Input id="initVel" type="number" value={initialVelocity} onChange={e=>setInitialVelocity(e.target.value)} placeholder="e.g., 50"/></div>
            <div><Label htmlFor="launchAngle">Launch Angle (degrees from horizontal)</Label><Input id="launchAngle" type="number" value={launchAngle} onChange={e=>setLaunchAngle(e.target.value)} placeholder="e.g., 45"/></div>
            <div><Label htmlFor="initHeight">Initial Height (m)</Label><Input id="initHeight" type="number" value={initialHeight} onChange={e=>setInitialHeight(e.target.value)} placeholder="Default: 0 (ground level)"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateMotion}>Calculate Motion</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(maxHeight || error) && (
          <Card>
            <CardHeader><CardDescription>Projectile Motion Results</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {maxHeight && (<div className="p-1.5 bg-muted rounded-md text-sm">Max Height: <strong className="font-semibold">{maxHeight} m</strong></div>)}
              {horizontalRange && (<div className="p-1.5 bg-muted rounded-md text-sm">Horizontal Range: <strong className="font-semibold">{horizontalRange} m</strong></div>)}
              {timeOfFlight && (<div className="p-1.5 bg-primary/10 rounded-md text-sm">Time of Flight: <strong className="font-semibold text-primary">{timeOfFlight} s</strong></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: PhysicsProjectileMotionCalculator.tsx ======
==================================================

// ====== START OF FILE: PipeFlowRateCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.41 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Waves } from "lucide-react";

// Hazen-Williams formula (for water, common for civil engineering)
// V = k * C * R^0.63 * S^0.54
// Q = V * A
// k = 0.849 (for SI units) or 1.318 (for Imperial units)
// C = Roughness coefficient
// R = Hydraulic radius (D/4 for full pipe)
// S = Slope (head loss / pipe length)

const roughnessCoefficients: Record<string, number> = {
  "150": "PVC, New Steel",
  "140": "Cement-lined Ductile Iron, HDPE",
  "130": "Asbestos Cement, Ductile Iron",
  "100": "Cast Iron (average), Concrete",
  "90": "Old Cast Iron",
  "60": "Corrugated Steel",
};

export default function PipeFlowRateCalculator() {
  const [pipeDiameter, setPipeDiameter] = useState<string>('');
  const [pipeLength, setPipeLength] = useState<string>('');
  const [headLoss, setHeadLoss] = useState<string>(''); // Also elevation drop
  const [cFactor, setCFactor] = useState<string>('150');
  const [units, setUnits] = useState<'imperial' | 'metric'>('imperial');

  const [flowRate, setFlowRate] = useState<string | null>(null);
  const [velocity, setVelocity] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateFlowRate = () => {
    setError(null);
    setFlowRate(null);
    setVelocity(null);

    let D = parseFloat(pipeDiameter);
    let L = parseFloat(pipeLength);
    let hL = parseFloat(headLoss);
    const C = parseInt(cFactor);

    if (isNaN(D) || D <= 0 || isNaN(L) || L <= 0 || isNaN(hL) || hL < 0 || isNaN(C)) {
      setError('Please enter valid, positive numbers for all dimensions. Head loss can be zero.');
      return;
    }
    
    // Convert to base units for the formulas (feet for imperial, meters for metric)
    let k, R, S, A;
    if (units === 'imperial') { // D in inches, L & hL in feet
        k = 1.318;
        D = D / 12; // Convert diameter to feet
        R = D / 4; // Hydraulic Radius in feet
        S = hL / L; // Slope
        A = Math.PI * (D/2) * (D/2); // Area in sq ft
    } else { // Metric: D in mm, L & hL in meters
        k = 0.849;
        D = D / 1000; // Convert diameter to meters
        R = D / 4; // Hydraulic Radius in meters
        S = hL / L; // Slope
        A = Math.PI * (D/2) * (D/2); // Area in sq m
    }

    const V = k * C * Math.pow(R, 0.63) * Math.pow(S, 0.54); // Velocity
    const Q = V * A; // Flow Rate in base units (ft³/s or m³/s)

    setVelocity(`${V.toFixed(2)} ${units === 'imperial' ? 'ft/s' : 'm/s'}`);
    
    if (units === 'imperial') {
        setFlowRate(`${(Q * 448.831).toFixed(2)} GPM (US)`); // ft³/s to GPM
    } else {
        setFlowRate(`${(Q * 1000).toFixed(2)} L/s`); // m³/s to L/s
    }
  };

  const resetForm = () => {
    setPipeDiameter(''); setPipeLength(''); setHeadLoss(''); setCFactor('150');
    setFlowRate(null); setVelocity(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Pipe Flow Rate Calculator (Hazen-Williams)</AlertTitle><AlertDescription>Estimate water flow rate in a full pipe using the Hazen-Williams equation. Common for municipal water systems.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter pipe and flow details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="unitsHazen">Unit System</Label><Select value={units} onValueChange={(v:'imperial'|'metric')=>setUnits(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Imperial (Inches, Feet)</SelectItem><SelectItem value="metric">Metric (mm, Meters)</SelectItem></SelectContent></Select></div>
            <div><Label htmlFor="diameterHazen">Pipe Inner Diameter ({units==='imperial'?'in':'mm'})</Label><Input id="diameterHazen" type="number" value={pipeDiameter} onChange={e=>setPipeDiameter(e.target.value)}/></div>
            <div><Label htmlFor="lengthHazen">Pipe Length ({units==='imperial'?'ft':'m'})</Label><Input id="lengthHazen" type="number" value={pipeLength} onChange={e=>setPipeLength(e.target.value)}/></div>
            <div><Label htmlFor="headLossHazen">Head Loss / Elevation Drop ({units==='imperial'?'ft':'m'})</Label><Input id="headLossHazen" type="number" value={headLoss} onChange={e=>setHeadLoss(e.target.value)}/></div>
            <div><Label htmlFor="cHazen">Hazen-Williams C-Factor</Label><Select value={cFactor} onValueChange={setCFactor}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.entries(roughnessCoefficients).map(([c, desc])=><SelectItem key={c} value={c}>{desc} (C={c})</SelectItem>)}</SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateFlowRate}>Calculate Flow Rate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(flowRate || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Flow Results</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {velocity && (<div className="p-2 bg-muted rounded-md mb-2"><p className="text-sm text-muted-foreground">Flow Velocity</p><p className="font-semibold">{velocity}</p></div>)}
              {flowRate && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Flow Rate (Q)</p><p className="text-2xl font-bold text-primary">{flowRate}</p></div><CopyButton textToCopy={flowRate}/></div>)}
              <AlertDescription className="text-xs pt-2">This formula is for water in full pipes under turbulent flow. Accuracy depends on the C-factor.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PipeFlowRateCalculator.tsx ======
==================================================

// ====== START OF FILE: PipeFlowRateCalculatorQav.tsx ======
// File converted from TSX to TXT
// Original size: 6.48 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Waves } from "lucide-react";

type DiameterUnit = 'in' | 'cm';
type VelocityUnit = 'm_s' | 'ft_s';
type FlowRateUnit = 'l_s' | 'gpm_us'; // Liters per second, Gallons (US) per minute

export default function PipeFlowRateCalculatorQav() {
  const [diameter, setDiameter] = useState<string>('');
  const [velocity, setVelocity] = useState<string>('');
  const [diameterUnit, setDiameterUnit] = useState<DiameterUnit>('in');
  const [velocityUnit, setVelocityUnit] = useState<VelocityUnit>('ft_s');
  const [flowRateUnit, setFlowRateUnit] = useState<FlowRateUnit>('gpm_us');

  const [flowRate, setFlowRate] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateFlowRate = () => {
    setError(null);
    setFlowRate(null);

    const d = parseFloat(diameter);
    const v = parseFloat(velocity);

    if (isNaN(d) || d <= 0 || isNaN(v) || v <= 0) {
      setError('Pipe diameter and fluid velocity must be positive numbers.');
      return;
    }
    
    // Convert everything to base metric units (meters, seconds) for calculation
    let diameterMeters = d;
    if (diameterUnit === 'in') diameterMeters = d * 0.0254;
    else if (diameterUnit === 'cm') diameterMeters = d / 100;
    
    let velocityMs = v;
    if (velocityUnit === 'ft_s') velocityMs = v * 0.3048;

    const radiusMeters = diameterMeters / 2;
    const areaSqMeters = Math.PI * radiusMeters * radiusMeters;
    
    // Flow rate Q in m³/s
    const flowRateM3s = areaSqMeters * velocityMs;
    
    let result: number;
    let resultLabel = '';

    if (flowRateUnit === 'l_s') {
      result = flowRateM3s * 1000; // 1 m³ = 1000 L
      resultLabel = 'L/s';
    } else { // gpm_us
      result = flowRateM3s * 15850.3; // 1 m³/s ≈ 15850.3 US GPM
      resultLabel = 'GPM (US)';
    }

    if (isNaN(result) || !isFinite(result)) {
        setError("Calculation resulted in an invalid number.");
        return;
    }
    
    setFlowRate(`${result.toFixed(2)} ${resultLabel}`);
  };

  const resetForm = () => {
    setDiameter('');
    setVelocity('');
    setFlowRate(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Pipe Flow Rate Calculator (Q=AV)</AlertTitle>
        <AlertDescription>
          Estimate the flow rate of a fluid through a pipe using the Continuity Equation (Q = Area × Velocity). This simplified model assumes the pipe is full and the flow is steady.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter pipe and flow details.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
                <div><Label htmlFor="pipeDiameter">Pipe Inner Diameter</Label><Input id="pipeDiameter" type="number" value={diameter} onChange={e=>setDiameter(e.target.value)}/></div>
                <div><Label htmlFor="diameterUnit">Unit</Label><Select value={diameterUnit} onValueChange={(v:DiameterUnit)=>setDiameterUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="in">Inches</SelectItem><SelectItem value="cm">CM</SelectItem></SelectContent></Select></div>
            </div>
            <div className="grid grid-cols-[2fr_1fr] gap-2">
                <div><Label htmlFor="fluidVelocity">Fluid Velocity</Label><Input id="fluidVelocity" type="number" value={velocity} onChange={e=>setVelocity(e.target.value)}/></div>
                <div><Label htmlFor="velocityUnit">Unit</Label><Select value={velocityUnit} onValueChange={(v:VelocityUnit)=>setVelocityUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="m_s">m/s</SelectItem><SelectItem value="ft_s">ft/s</SelectItem></SelectContent></Select></div>
            </div>
             <div>
                <Label htmlFor="flowRateUnit">Desired Flow Rate Unit</Label>
                <Select value={flowRateUnit} onValueChange={(v:FlowRateUnit)=>setFlowRateUnit(v)}>
                    <SelectTrigger><SelectValue/></SelectTrigger>
                    <SelectContent>
                        <SelectItem value="l_s">Liters per Second (L/s)</SelectItem>
                        <SelectItem value="gpm_us">Gallons per Minute (US GPM)</SelectItem>
                    </SelectContent>
                </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateFlowRate}>Calculate Flow Rate</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>
        {(flowRate || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Estimated Flow Rate</CardDescription>
            </CardHeader>
            <CardContent>
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {flowRate && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Flow Rate (Q)</p>
                    <p className="text-2xl font-bold text-primary">{flowRate}</p>
                  </div>
                  <CopyButton textToCopy={flowRate} />
                </div>
              )}
               <AlertDescription className="text-xs pt-2 mt-2">
                This is a theoretical calculation. Real-world flow rates can be affected by pressure, viscosity, and friction losses (use Hazen-Williams or Darcy-Weisbach calculators for more detail).
              </AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PipeFlowRateCalculatorQav.tsx ======
==================================================

// ====== START OF FILE: PixelDensityCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.57 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Monitor } from "lucide-react";

export default function PixelDensityCalculator() {
  const [widthPixels, setWidthPixels] = useState<string>('');
  const [heightPixels, setHeightPixels] = useState<string>('');
  const [diagonalInches, setDiagonalInches] = useState<string>('');

  const [ppi, setPpi] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePpi = () => {
    setError(null); setPpi(null);
    const w = parseInt(widthPixels);
    const h = parseInt(heightPixels);
    const diag = parseFloat(diagonalInches);

    if (isNaN(w) || w <= 0 || isNaN(h) || h <= 0 || isNaN(diag) || diag <= 0) {
      setError('Width, height (in pixels), and diagonal (in inches) must be positive numbers.');
      return;
    }

    const diagonalPixels = Math.sqrt(w * w + h * h);
    const calculatedPpi = diagonalPixels / diag;
    setPpi(calculatedPpi.toFixed(2));
  };

  const resetForm = () => {
    setWidthPixels(''); setHeightPixels(''); setDiagonalInches('');
    setPpi(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Pixel Density (PPI) Calculator</AlertTitle><AlertDescription>Calculate the pixel density (Pixels Per Inch) of a display based on its resolution and diagonal size.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter screen specifications.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="widthPixels">Width (pixels)</Label><Input id="widthPixels" type="number" value={widthPixels} onChange={e=>setWidthPixels(e.target.value)} placeholder="e.g., 1920"/></div>
              <div><Label htmlFor="heightPixels">Height (pixels)</Label><Input id="heightPixels" type="number" value={heightPixels} onChange={e=>setHeightPixels(e.target.value)} placeholder="e.g., 1080"/></div>
            </div>
            <div><Label htmlFor="diagonalInches">Diagonal Size (inches)</Label><Input id="diagonalInches" type="number" value={diagonalInches} onChange={e=>setDiagonalInches(e.target.value)} placeholder="e.g., 24"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePpi}>Calculate PPI</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(ppi || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Pixel Density</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {ppi && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Pixel Density</p><p className="text-2xl font-bold text-primary">{ppi} PPI</p></div><CopyButton textToCopy={ppi}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PixelDensityCalculator.tsx ======
==================================================

// ====== START OF FILE: PixelDensityPpiCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.57 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Monitor } from "lucide-react";

export default function PixelDensityPpiCalculator() {
  const [widthPixels, setWidthPixels] = useState<string>('');
  const [heightPixels, setHeightPixels] = useState<string>('');
  const [diagonalInches, setDiagonalInches] = useState<string>('');

  const [ppi, setPpi] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePpi = () => {
    setError(null); setPpi(null);
    const w = parseInt(widthPixels);
    const h = parseInt(heightPixels);
    const diag = parseFloat(diagonalInches);

    if (isNaN(w) || w <= 0 || isNaN(h) || h <= 0 || isNaN(diag) || diag <= 0) {
      setError('Width, height (in pixels), and diagonal (in inches) must be positive numbers.');
      return;
    }

    const diagonalPixels = Math.sqrt(w * w + h * h);
    const calculatedPpi = diagonalPixels / diag;
    setPpi(calculatedPpi.toFixed(2));
  };

  const resetForm = () => {
    setWidthPixels(''); setHeightPixels(''); setDiagonalInches('');
    setPpi(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Pixel Density (PPI) Calculator</AlertTitle><AlertDescription>Calculate the pixel density (Pixels Per Inch) of a display based on its resolution and diagonal size.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter screen specifications.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="widthPixels">Width (pixels)</Label><Input id="widthPixels" type="number" value={widthPixels} onChange={e=>setWidthPixels(e.target.value)} placeholder="e.g., 1920"/></div>
              <div><Label htmlFor="heightPixels">Height (pixels)</Label><Input id="heightPixels" type="number" value={heightPixels} onChange={e=>setHeightPixels(e.target.value)} placeholder="e.g., 1080"/></div>
            </div>
            <div><Label htmlFor="diagonalInches">Diagonal Size (inches)</Label><Input id="diagonalInches" type="number" value={diagonalInches} onChange={e=>setDiagonalInches(e.target.value)} placeholder="e.g., 24"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePpi}>Calculate PPI</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(ppi || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Pixel Density</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {ppi && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Pixel Density</p><p className="text-2xl font-bold text-primary">{ppi} PPI</p></div><CopyButton textToCopy={ppi}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PixelDensityPpiCalculator.tsx ======
==================================================

// ====== START OF FILE: PizzaValueCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.85 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { PlusCircle, Trash2, Trophy } from 'lucide-react';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info } from "lucide-react";
import { cn } from '@/lib/utils';

interface Pizza {
  id: string;
  name: string;
  price: string;
  diameter: string;
}

interface Result {
  name: string;
  pricePerSqInch: number;
  totalArea: number;
}

export default function PizzaValueCalculator() {
  const [pizzas, setPizzas] = useState<Pizza[]>([
    { id: crypto.randomUUID(), name: 'Pizza A', price: '', diameter: '' },
    { id: crypto.randomUUID(), name: 'Pizza B', price: '', diameter: '' },
  ]);
  const [results, setResults] = useState<Result[] | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handlePizzaChange = (id: string, field: 'name' | 'price' | 'diameter', value: string) => {
    setPizzas(prev => prev.map(p => p.id === id ? { ...p, [field]: value } : p));
  };
  
  const addPizza = () => {
    setPizzas(prev => [...prev, { id: crypto.randomUUID(), name: `Pizza ${String.fromCharCode(65 + prev.length)}`, price: '', diameter: '' }]);
  };

  const removePizza = (id: string) => {
    if (pizzas.length > 2) {
      setPizzas(prev => prev.filter(p => p.id !== id));
    }
  };

  const calculateValue = () => {
    setError(null);
    setResults(null);

    const calculatedResults: Result[] = [];
    for (const pizza of pizzas) {
      const price = parseFloat(pizza.price);
      const diameter = parseFloat(pizza.diameter);
      if (isNaN(price) || price < 0 || isNaN(diameter) || diameter <= 0 || !pizza.name.trim()) {
        setError(`Invalid input for ${pizza.name || 'Unnamed Pizza'}. Price must be non-negative and diameter must be positive.`);
        return;
      }
      const radius = diameter / 2;
      const area = Math.PI * radius * radius;
      const pricePerArea = price / area;
      calculatedResults.push({ name: pizza.name, unitPrice: pricePerArea, totalArea: area });
    }

    calculatedResults.sort((a, b) => a.unitPrice - b.unitPrice); // Sort by best value (lowest price per area)
    setResults(calculatedResults);
  };
  
  const resetForm = () => {
    setPizzas([
      { id: crypto.randomUUID(), name: 'Pizza A', price: '', diameter: '' },
      { id: crypto.randomUUID(), name: 'Pizza B', price: '', diameter: '' },
    ]);
    setResults(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Pizza Value Calculator</AlertTitle><AlertDescription>Compare multiple pizzas to find out which one gives you the most pizza for your money (best price per square inch).</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardDescription>Enter details for each pizza to compare.</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {pizzas.map((pizza, index) => (
              <div key={pizza.id} className="grid grid-cols-[1fr_auto_auto_auto] gap-2 items-center p-2 border rounded-md">
                <Input type="text" placeholder={`Pizza Name ${index+1}`} value={pizza.name} onChange={e=>handlePizzaChange(pizza.id, 'name', e.target.value)} className="h-9"/>
                <Input type="number" placeholder="Price ($)" value={pizza.price} onChange={e=>handlePizzaChange(pizza.id, 'price', e.target.value)} className="h-9 w-24"/>
                <Input type="number" placeholder="Diameter (in)" value={pizza.diameter} onChange={e=>handlePizzaChange(pizza.id, 'diameter', e.target.value)} className="h-9 w-24"/>
                <Button variant="ghost" size="icon" onClick={() => removePizza(pizza.id)} disabled={pizzas.length <= 2} className="h-9 w-9 shrink-0"><Trash2 className="h-4 w-4 text-destructive"/></Button>
              </div>
            ))}
             <Button variant="outline" size="sm" onClick={addPizza}><PlusCircle className="mr-2 h-4 w-4"/> Add Pizza</Button>
          </CardContent>
          <CardFooter><Button onClick={calculateValue} className="w-full md:w-auto">Find Best Value</Button></CardFooter>
        </Card>
        
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Value Ranking</CardDescription></CardHeader>
          <CardContent className="space-y-3">
             {error && <Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>}
             {results && results.length > 0 ? (
                 results.map((res, index) => (
                    <Card key={index} className={cn("p-3", index === 0 ? "bg-green-500/10 border-green-500/50" : "bg-muted")}>
                        <div className="flex justify-between items-center">
                            <p className="font-semibold">{index + 1}. {res.name}</p>
                            {index === 0 && <Trophy className="h-5 w-5 text-yellow-500" />}
                        </div>
                        <p className="text-sm">
                            <span className="font-bold text-primary">${res.unitPrice.toFixed(3)}</span> per sq. inch
                        </p>
                         <p className="text-xs text-muted-foreground">({res.totalArea.toFixed(1)} sq. in. total)</p>
                    </Card>
                 ))
             ) : !error && <p className="text-sm text-muted-foreground">Results will appear here.</p>}
          </CardContent>
          <CardFooter><Button variant="outline" onClick={resetForm} className="w-full">Reset</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: PizzaValueCalculator.tsx ======
==================================================

// ====== START OF FILE: PowerAndEnergyCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.46 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Zap } from "lucide-react";

type TargetVariable = 'power' | 'energy' | 'time';
type PowerUnit = 'W' | 'kW';
type EnergyUnit = 'J' | 'Wh' | 'kWh';
type TimeUnit = 's' | 'min' | 'hr';

// Conversion factors to base units (Watts, Joules, Seconds)
const powerToBase: Record<PowerUnit, number> = { 'W': 1, 'kW': 1000 };
const energyToBase: Record<EnergyUnit, number> = { 'J': 1, 'Wh': 3600, 'kWh': 3600000 };
const timeToBase: Record<TimeUnit, number> = { 's': 1, 'min': 60, 'hr': 3600 };

// Conversion factors from base units
const powerFromBase: Record<PowerUnit, number> = { 'W': 1, 'kW': 0.001 };
const energyFromBase: Record<EnergyUnit, number> = { 'J': 1, 'Wh': 1/3600, 'kWh': 1/3600000 };
const timeFromBase: Record<TimeUnit, number> = { 's': 1, 'min': 1/60, 'hr': 1/3600 };

export default function PowerAndEnergyCalculator() {
  const [target, setTarget] = useState<TargetVariable>('energy');
  const [power, setPower] = useState<string>('');
  const [energy, setEnergy] = useState<string>('');
  const [time, setTime] = useState<string>('');
  
  const [powerUnit, setPowerUnit] = useState<PowerUnit>('W');
  const [energyUnit, setEnergyUnit] = useState<EnergyUnit>('J');
  const [timeUnit, setTimeUnit] = useState<TimeUnit>('s');

  const [result, setResult] = useState<string | null>(null);
  const [resultUnitLabel, setResultUnitLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const calculate = () => {
    setError(null); setResult(null); setResultUnitLabel('');
    const P_val = parseFloat(power);
    const E_val = parseFloat(energy);
    const T_val = parseFloat(time);
    let calculatedValue: number;

    try {
      let powerW: number, energyJ: number, timeS: number;
      
      switch (target) {
        case 'energy': // E = P * T
          if (isNaN(P_val) || P_val < 0 || isNaN(T_val) || T_val < 0) throw new Error("Power and Time must be non-negative.");
          powerW = P_val * powerToBase[powerUnit];
          timeS = T_val * timeToBase[timeUnit];
          calculatedValue = powerW * timeS; // Result in Joules
          calculatedValue *= energyFromBase[energyUnit]; // Convert to selected output unit
          setResultUnitLabel(energyUnit);
          break;
        case 'power': // P = E / T
          if (isNaN(E_val) || E_val < 0 || isNaN(T_val) || T_val <= 0) throw new Error("Energy (>=0) and Time (>0) must be valid numbers.");
          energyJ = E_val * energyToBase[energyUnit];
          timeS = T_val * timeToBase[timeUnit];
          calculatedValue = energyJ / timeS; // Result in Watts
          calculatedValue *= powerFromBase[powerUnit];
          setResultUnitLabel(powerUnit);
          break;
        case 'time': // T = E / P
          if (isNaN(E_val) || E_val < 0 || isNaN(P_val) || P_val <= 0) throw new Error("Energy (>=0) and Power (>0) must be valid numbers.");
          energyJ = E_val * energyToBase[energyUnit];
          powerW = P_val * powerToBase[powerUnit];
          calculatedValue = energyJ / powerW; // Result in Seconds
          calculatedValue *= timeFromBase[timeUnit];
          setResultUnitLabel(timeUnit);
          break;
        default: throw new Error("Invalid selection.");
      }
      if (isNaN(calculatedValue) || !isFinite(calculatedValue)) throw new Error("Calculation failed. Check for division by zero or invalid inputs.");
      setResult(calculatedValue.toPrecision(5));
    } catch (e: any) { setError(e.message); }
  };

  const resetForm = () => {
    setPower(''); setEnergy(''); setTime('');
    setResult(null); setError(null); setResultUnitLabel('');
  };

  const renderInputs = () => (
    <>
      {target !== 'power' && <div className="grid grid-cols-[2fr_1fr] gap-2"><div><Label htmlFor="powerPEC">Power</Label><Input id="powerPEC" type="number" value={power} onChange={e=>setPower(e.target.value)}/></div><div><Label htmlFor="powerUnitPEC">Unit</Label><Select value={powerUnit} onValueChange={(v:PowerUnit)=>setPowerUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.keys(powerToBase).map(u=><SelectItem key={u} value={u}>{u}</SelectItem>)}</SelectContent></Select></div></div>}
      {target !== 'energy' && <div className="grid grid-cols-[2fr_1fr] gap-2"><div><Label htmlFor="energyPEC">Energy</Label><Input id="energyPEC" type="number" value={energy} onChange={e=>setEnergy(e.target.value)}/></div><div><Label htmlFor="energyUnitPEC">Unit</Label><Select value={energyUnit} onValueChange={(v:EnergyUnit)=>setEnergyUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.keys(energyToBase).map(u=><SelectItem key={u} value={u}>{u}</SelectItem>)}</SelectContent></Select></div></div>}
      {target !== 'time' && <div className="grid grid-cols-[2fr_1fr] gap-2"><div><Label htmlFor="timePEC">Time</Label><Input id="timePEC" type="number" value={time} onChange={e=>setTime(e.target.value)}/></div><div><Label htmlFor="timeUnitPEC">Unit</Label><Select value={timeUnit} onValueChange={(v:TimeUnit)=>setTimeUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.keys(timeToBase).map(u=><SelectItem key={u} value={u}>{u}</SelectItem>)}</SelectContent></Select></div></div>}
    </>
  );

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Power &amp; Energy Calculator</AlertTitle><AlertDescription>Calculate Power, Energy, or Time based on the formula Energy = Power × Time. Supports various units.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Solve for the unknown variable.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="targetPEC">Calculate:</Label><Select value={target} onValueChange={(v:TargetVariable)=>{setTarget(v);resetForm()}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="energy">Energy</SelectItem><SelectItem value="power">Power</SelectItem><SelectItem value="time">Time</SelectItem></SelectContent></Select></div>
            {renderInputs()}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Calculated {target}</p><p className="text-2xl font-bold text-primary">{result} {resultUnitLabel}</p></div><CopyButton textToCopy={`${result} ${resultUnitLabel}`}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PowerAndEnergyCalculator.tsx ======
==================================================

// ====== START OF FILE: PowerConsumptionCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.37 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Bolt } from "lucide-react";

export default function PowerConsumptionCalculator() {
  const [powerRatingWatts, setPowerRatingWatts] = useState<string>('');
  const [usageHoursPerDay, setUsageHoursPerDay] = useState<string>('');
  const [daysPerMonth, setDaysPerMonth] = useState<string>('30'); 
  const [electricityCostKwh, setElectricityCostKwh] = useState<string>('0.15'); // Default example cost

  const [monthlyKwh, setMonthlyKwh] = useState<string | null>(null);
  const [monthlyCost, setMonthlyCost] = useState<string | null>(null);
  const [dailyKwh, setDailyKwh] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateConsumption = () => {
    setError(null);
    setMonthlyKwh(null);
    setMonthlyCost(null);
    setDailyKwh(null);

    const powerW = parseFloat(powerRatingWatts);
    const hoursDay = parseFloat(usageHoursPerDay);
    const daysMonth = parseInt(daysPerMonth);
    const costPerKwhVal = parseFloat(electricityCostKwh);

    if (isNaN(powerW) || powerW <= 0 || isNaN(hoursDay) || hoursDay < 0 || isNaN(daysMonth) || daysMonth <= 0 || isNaN(costPerKwhVal) || costPerKwhVal < 0) {
      setError('Please enter valid positive numbers for power, usage hours, days. Cost can be zero.');
      return;
    }
    if (hoursDay > 24) {
        setError('Hours used per day cannot exceed 24.');
        return;
    }
    if (daysMonth > 31) {
        setError('Days per month cannot exceed 31 (for typical months).');
        return;
    }


    const powerKw = powerW / 1000;
    const calculatedDailyKwh = powerKw * hoursDay;
    const calculatedMonthlyKwh = calculatedDailyKwh * daysMonth;
    const calculatedMonthlyCost = calculatedMonthlyKwh * costPerKwhVal;

    setDailyKwh(calculatedDailyKwh.toFixed(2));
    setMonthlyKwh(calculatedMonthlyKwh.toFixed(2));
    setMonthlyCost(calculatedMonthlyCost.toFixed(2));
  };

  const resetForm = () => {
    setPowerRatingWatts(''); setUsageHoursPerDay(''); setDaysPerMonth('30'); setElectricityCostKwh('0.15');
    setMonthlyKwh(null); setMonthlyCost(null); setDailyKwh(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Power Consumption &amp; Cost Estimator</AlertTitle><AlertDescription>Estimate an appliance's power consumption (kWh) and its monthly electricity cost.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter appliance details and usage.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="powerWattsPC">Appliance Power Rating (Watts)</Label><Input id="powerWattsPC" type="number" value={powerRatingWatts} onChange={(e) => setPowerRatingWatts(e.target.value)} placeholder="e.g., 1500 (for a heater)"/></div>
            <div><Label htmlFor="hoursUsedPC">Hours Used Per Day</Label><Input id="hoursUsedPC" type="number" value={usageHoursPerDay} onChange={(e) => setUsageHoursPerDay(e.target.value)} placeholder="e.g., 3"/></div>
            <div><Label htmlFor="daysUsedPC">Days Used Per Month</Label><Input id="daysUsedPC" type="number" value={daysPerMonth} onChange={(e) => setDaysPerMonth(e.target.value)} placeholder="Default: 30"/></div>
            <div><Label htmlFor="costPerKwhPC">Electricity Cost Per kWh ($)</Label><Input id="costPerKwhPC" type="number" step="0.01" value={electricityCostKwh} onChange={(e) => setElectricityCostKwh(e.target.value)} placeholder="e.g., 0.15"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateConsumption}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(monthlyKwh || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Consumption &amp; Cost</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {dailyKwh && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Daily Consumption</p><p className="font-semibold">{dailyKwh} kWh</p></div>)}
              {monthlyKwh && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Monthly Consumption</p><p className="font-semibold">{monthlyKwh} kWh</p></div>)}
              {monthlyCost && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Monthly Cost</p><p className="text-2xl font-bold text-primary">${monthlyCost}</p></div>
                  <CopyButton textToCopy={monthlyCost} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PowerConsumptionCalculator.tsx ======
==================================================

// ====== START OF FILE: PregnancyCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.3 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { format, addDays, differenceInDays, isValid } from 'date-fns';
import { cn } from '@/lib/utils';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Baby, CalendarCheck2 } from "lucide-react";

// This can be similar to DueDateCalculator but perhaps framed as a general pregnancy tracker
// It will include Due Date, Current Gestational Age, and maybe trimester info.

export default function PregnancyCalculator() {
  const [lmpDate, setLmpDate] = useState<Date | undefined>(undefined); // Last Menstrual Period
  const [cycleLengthPreg, setCycleLengthPreg] = useState<string>('28');

  const [estimatedDueDatePreg, setEstimatedDueDatePreg] = useState<string | null>(null);
  const [gestationalAgePreg, setGestationalAgePreg] = useState<string | null>(null);
  const [currentTrimester, setCurrentTrimester] = useState<string | null>(null);
  const [errorPreg, setErrorPreg] = useState<string | null>(null);

  const calculatePregnancyDetails = () => {
    setErrorPreg(null);
    setEstimatedDueDatePreg(null);
    setGestationalAgePreg(null);
    setCurrentTrimester(null);

    if (!lmpDate || !isValid(lmpDate)) {
      setErrorPreg('Please select a valid date for the first day of your last menstrual period.');
      return;
    }
    const cycleLen = parseInt(cycleLengthPreg);
    if (isNaN(cycleLen) || cycleLen < 20 || cycleLen > 45) {
      setErrorPreg('Please enter a typical average cycle length (20-45 days).');
      return;
    }

    // Calculate due date (Naegele's Rule adjusted for cycle length)
    const dueDate = addDays(lmpDate, 280 + (cycleLen - 28));
    setEstimatedDueDatePreg(format(dueDate, "PPP, EEEE ('Day' DDD 'of year' yyyy)"));

    // Calculate current gestational age
    const today = new Date();
    if (today < lmpDate) {
      setGestationalAgePreg("Pregnancy has not started yet based on LMP.");
      setCurrentTrimester("Not yet started");
    } else {
      const diffDays = differenceInDays(today, lmpDate);
      const weeks = Math.floor(diffDays / 7);
      const days = diffDays % 7;
      setGestationalAgePreg(`${weeks} weeks, ${days} days`);

      // Determine trimester
      if (weeks < 14) setCurrentTrimester("First Trimester (Weeks 1-13)");
      else if (weeks < 28) setCurrentTrimester("Second Trimester (Weeks 14-27)");
      else if (weeks <= 42) setCurrentTrimester("Third Trimester (Weeks 28+)"); // Max typically 42
      else setCurrentTrimester("Beyond typical term");
    }
  };
  
  const resetFormPreg = () => {
    setLmpDate(undefined);
    setCycleLengthPreg('28');
    setEstimatedDueDatePreg(null);
    setGestationalAgePreg(null);
    setCurrentTrimester(null);
    setErrorPreg(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Medical Disclaimer - Estimation Only</AlertTitle>
        <AlertDescription>
          This calculator provides estimates for due date and gestational age. It is <strong className="font-semibold">not a substitute for professional medical advice</strong>. Consult your healthcare provider for accurate pregnancy tracking and care.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate your pregnancy timeline.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="lmpDatePreg">First Day of Last Menstrual Period (LMP)</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button id="lmpDatePreg" variant={"outline"} className={cn("w-full justify-start text-left font-normal", !lmpDate && "text-muted-foreground")}>
                    <CalendarCheck2 className="mr-2 h-4 w-4" />
                    {lmpDate ? format(lmpDate, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={lmpDate} onSelect={setLmpDate} initialFocus /></PopoverContent>
              </Popover>
            </div>
            <div><Label htmlFor="cycleLengthPregCalc">Average Cycle Length (days)</Label><Input id="cycleLengthPregCalc" type="number" value={cycleLengthPreg} onChange={(e) => setCycleLengthPreg(e.target.value)} placeholder="e.g., 28" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePregnancyDetails}>Calculate Timeline</Button><Button variant="outline" onClick={resetFormPreg}>Reset</Button></CardFooter>
        </Card>

        {(estimatedDueDatePreg || errorPreg) && (
          <Card>
            <CardHeader><CardDescription>Pregnancy Estimations</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {errorPreg && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{errorPreg}</AlertDescription></Alert>)}
              {estimatedDueDatePreg && (<div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">Estimated Due Date (EDD)</p><div className="flex justify-between items-center"><p className="text-lg font-bold text-primary">{estimatedDueDatePreg}</p><CopyButton textToCopy={estimatedDueDatePreg} size="sm" variant="ghost"/></div></div>)}
              {gestationalAgePreg && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Current Estimated Gestational Age</p><p className="font-semibold">{gestationalAgePreg}</p></div>)}
              {currentTrimester && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Current Trimester</p><p className="font-semibold">{currentTrimester}</p></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PregnancyCalculator.tsx ======
==================================================

// ====== START OF FILE: PregnancyConceptionCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.59 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { format, addDays, subDays, isValid } from 'date-fns';
import { cn } from '@/lib/utils';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CalendarHeart, CalendarCheck2 } from "lucide-react";

// This is functionally very similar to ConceptionCalculator/OvulationCalculator
// It focuses on determining a due date FROM a conception date, or vice-versa.

type ConceptionCalcMode = 'dueDateFromConception' | 'conceptionFromDueDate';

export default function PregnancyConceptionCalculator() {
  const [calcMode, setCalcMode] = useState<ConceptionCalcMode>('dueDateFromConception');
  const [inputDate, setInputDate] = useState<Date | undefined>(undefined);

  const [resultDateOutput, setResultDateOutput] = useState<string | null>(null);
  const [resultLabel, setResultLabel] = useState<string>('');
  const [errorPCC, setErrorPCC] = useState<string | null>(null);

  const calculateDates = () => {
    setErrorPCC(null);
    setResultDateOutput(null);
    setResultLabel('');

    if (!inputDate || !isValid(inputDate)) {
      setErrorPCC('Please select a valid date.');
      return;
    }

    let calculatedDate: Date;
    let label = '';

    if (calcMode === 'dueDateFromConception') {
      // Due date = Conception Date + 266 days (38 weeks gestation from conception)
      calculatedDate = addDays(inputDate, 266);
      label = "Estimated Due Date (from Conception)";
    } else { // conceptionFromDueDate
      // Conception Date = Due Date - 266 days
      calculatedDate = subDays(inputDate, 266);
      label = "Estimated Conception Date (from Due Date)";
    }
    
    setResultDateOutput(format(calculatedDate, "PPP, EEEE"));
    setResultLabel(label);
  };
  
  const resetForm = () => {
    setInputDate(undefined);
    setResultDateOutput(null);
    setResultLabel('');
    setErrorPCC(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Medical Disclaimer - Estimation Only</AlertTitle>
        <AlertDescription>
          These calculations are estimates based on average gestational periods. Actual dates can vary. This tool is <strong className="font-semibold">not a substitute for professional medical advice</strong>. Consult your healthcare provider for accurate information.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate due date from conception or vice-versa.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="calcModePCC">I want to calculate:</Label>
              <Select value={calcMode} onValueChange={(v: ConceptionCalcMode) => setCalcMode(v)}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="dueDateFromConception">Due Date (from Conception Date)</SelectItem>
                  <SelectItem value="conceptionFromDueDate">Conception Date (from Due Date)</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="inputDatePCC">{calcMode === 'dueDateFromConception' ? 'Date of Conception' : 'Estimated Due Date'}</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button id="inputDatePCC" variant={"outline"} className={cn("w-full justify-start text-left font-normal", !inputDate && "text-muted-foreground")}>
                    <CalendarCheck2 className="mr-2 h-4 w-4" />
                    {inputDate ? format(inputDate, "PPP") : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0"><Calendar mode="single" selected={inputDate} onSelect={setInputDate} initialFocus /></PopoverContent>
              </Popover>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateDates}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(resultDateOutput || errorPCC) && (
          <Card>
            <CardHeader><CardDescription>Estimated Date</CardDescription></CardHeader>
            <CardContent>
              {errorPCC && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{errorPCC}</AlertDescription></Alert>)}
              {resultDateOutput && resultLabel && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">{resultLabel}</p><p className="text-xl font-bold text-primary">{resultDateOutput}</p></div>
                  <CopyButton textToCopy={resultDateOutput} />
                </div>
              )}
            </CardContent>
             <CardFooter><p className="text-xs text-muted-foreground">Based on an average gestation of 266 days (38 weeks) from conception.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PregnancyConceptionCalculator.tsx ======
==================================================

// ====== START OF FILE: PregnancyWeightGainCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.57 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Weight } from "lucide-react";

// Based on IOM (Institute of Medicine) guidelines, which depend on pre-pregnancy BMI.
// Pre-pregnancy BMI categories:
// Underweight: < 18.5
// Normal weight: 18.5 - 24.9
// Overweight: 25.0 - 29.9
// Obese: >= 30.0
// Recommended gain (single pregnancy):
// Underweight: 28-40 lbs (12.5-18 kg)
// Normal weight: 25-35 lbs (11.5-16 kg)
// Overweight: 15-25 lbs (7-11.5 kg)
// Obese: 11-20 lbs (5-9 kg)

type BmiCategory = 'underweight' | 'normal' | 'overweight' | 'obese' | 'unknown';

export default function PregnancyWeightGainCalculator() {
  const [prePregnancyWeight, setPrePregnancyWeight] = useState<string>('');
  const [heightFeet, setHeightFeet] = useState<string>('');
  const [heightInches, setHeightInches] = useState<string>('');
  const [unitSystem, setUnitSystem] = useState<'imperial' | 'metric'>('imperial'); // For height/weight input
  const [prePregnancyWeightKg, setPrePregnancyWeightKg] = useState<string>(''); // Metric input
  const [heightCm, setHeightCm] = useState<string>(''); // Metric input


  const [recommendedGain, setRecommendedGain] = useState<string | null>(null);
  const [bmiCategoryResult, setBmiCategoryResult] = useState<BmiCategory | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateWeightGain = () => {
    setError(null);
    setRecommendedGain(null);
    setBmiCategoryResult(null);

    let weight_kg: number;
    let height_m: number;

    if (unitSystem === 'imperial') {
      const weight_lbs = parseFloat(prePregnancyWeight);
      const h_ft = parseInt(heightFeet);
      const h_in = parseInt(heightInches);
      if (isNaN(weight_lbs) || weight_lbs <=0 || isNaN(h_ft) || h_ft <=0 || isNaN(h_in) || h_in < 0 || h_in >=12) {
        setError('Please enter valid imperial weight (lbs) and height (ft, in).');
        return;
      }
      weight_kg = weight_lbs * 0.453592;
      height_m = ((h_ft * 12) + h_in) * 0.0254;
    } else { // Metric
      weight_kg = parseFloat(prePregnancyWeightKg);
      const h_cm = parseFloat(heightCm);
      if (isNaN(weight_kg) || weight_kg <=0 || isNaN(h_cm) || h_cm <=0) {
        setError('Please enter valid metric weight (kg) and height (cm).');
        return;
      }
      height_m = h_cm / 100;
    }

    if (height_m === 0) { setError('Height cannot be zero.'); return; }
    const bmi = weight_kg / (height_m * height_m);
    let category: BmiCategory = 'unknown';
    let gainLbs = '';
    let gainKg = '';

    if (bmi < 18.5) { category = 'underweight'; gainLbs = '28-40 lbs'; gainKg = '12.5-18 kg'; }
    else if (bmi < 25) { category = 'normal'; gainLbs = '25-35 lbs'; gainKg = '11.5-16 kg'; }
    else if (bmi < 30) { category = 'overweight'; gainLbs = '15-25 lbs'; gainKg = '7-11.5 kg'; }
    else { category = 'obese'; gainLbs = '11-20 lbs'; gainKg = '5-9 kg'; }

    setBmiCategoryResult(category);
    setRecommendedGain(`${gainLbs}  (${gainKg})`);
  };

  const resetForm = () => {
    setPrePregnancyWeight(''); setHeightFeet(''); setHeightInches('');
    setPrePregnancyWeightKg(''); setHeightCm('');
    setRecommendedGain(null); setBmiCategoryResult(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Medical Disclaimer - Guidelines Only</AlertTitle>
        <AlertDescription>
          This calculator provides general pregnancy weight gain recommendations based on IOM guidelines and pre-pregnancy BMI. <strong className="font-semibold">These are not substitutes for personalized medical advice.</strong> Every pregnancy is unique. Consult your healthcare provider for guidance on appropriate weight gain during your pregnancy.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate recommended weight gain during pregnancy.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="unitSystemPWG">Unit System for Input</Label><Select value={unitSystem} onValueChange={(v: 'imperial'|'metric')=>setUnitSystem(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Imperial (lbs, ft, in)</SelectItem><SelectItem value="metric">Metric (kg, cm)</SelectItem></SelectContent></Select></div>
            {unitSystem === 'imperial' ? (
              <>
                <div><Label htmlFor="prePregWeightLbs">Pre-pregnancy Weight (lbs)</Label><Input id="prePregWeightLbs" type="number" value={prePregnancyWeight} onChange={(e) => setPrePregnancyWeight(e.target.value)} placeholder="e.g., 135"/></div>
                <Label>Height</Label>
                <div className="grid grid-cols-2 gap-2">
                  <Input type="number" value={heightFeet} onChange={(e) => setHeightFeet(e.target.value)} placeholder="Feet (e.g., 5)"/>
                  <Input type="number" value={heightInches} onChange={(e) => setHeightInches(e.target.value)} placeholder="Inches (e.g., 4)"/>
                </div>
              </>
            ) : (
              <>
                <div><Label htmlFor="prePregWeightKg">Pre-pregnancy Weight (kg)</Label><Input id="prePregWeightKg" type="number" value={prePregnancyWeightKg} onChange={(e) => setPrePregnancyWeightKg(e.target.value)} placeholder="e.g., 60"/></div>
                <div><Label htmlFor="heightCmPWG">Height (cm)</Label><Input id="heightCmPWG" type="number" value={heightCm} onChange={(e) => setHeightCm(e.target.value)} placeholder="e.g., 163"/></div>
              </>
            )}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateWeightGain}>Calculate Gain</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(recommendedGain || error) && (
          <Card>
            <CardHeader><CardDescription>Recommended Weight Gain (Single Pregnancy)</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {bmiCategoryResult && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Your Pre-pregnancy BMI Category:</p><p className="font-semibold capitalize">{bmiCategoryResult}</p></div>)}
              {recommendedGain && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Recommended Total Weight Gain</p><p className="text-xl font-bold text-primary">{recommendedGain}</p></div>
                  <CopyButton textToCopy={recommendedGain} />
                </div>
              )}
              <AlertDescription className="text-xs pt-2">Guidelines from the Institute of Medicine (IOM). Consult your doctor for personalized advice. These ranges are for a single pregnancy.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PregnancyWeightGainCalculator.tsx ======
==================================================

// ====== START OF FILE: PresentValueCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.96 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, TrendingDown } from "lucide-react";

// Present Value (PV) of a single future sum: PV = FV / (1 + r/n)^(nt)
// FV = Future Value, r = annual discount rate, n = compounding periods per year, t = years

export default function PresentValueCalculator() {
  const [futureValuePV, setFutureValuePV] = useState<string>('');
  const [discountRatePV, setDiscountRatePV] = useState<string>(''); // Annual %
  const [yearsPV, setYearsPV] = useState<string>('');
  const [compoundingFrequencyPV, setCompoundingFrequencyPV] = useState<string>('1'); // Annually default

  const [presentValueResult, setPresentValueResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePresentValue = () => {
    setError(null);
    setPresentValueResult(null);

    const FV = parseFloat(futureValuePV);
    const r = parseFloat(discountRatePV) / 100; // Annual rate as decimal
    const t = parseFloat(yearsPV);
    const n = parseInt(compoundingFrequencyPV);

    if (isNaN(FV) || FV < 0 || isNaN(r) || r < 0 || isNaN(t) || t <= 0 || isNaN(n) || n <= 0) {
      setError('Please enter valid numbers: Future Value (>=0), Discount Rate (>=0), Years (>0), Compounding Freq (>0).');
      return;
    }

    const PV = FV / Math.pow(1 + (r / n), n * t);

    if (isNaN(PV) || !isFinite(PV)) {
        setError("Could not calculate Present Value. Check inputs.");
        return;
    }
    setPresentValueResult(PV.toFixed(2));
  };

  const resetForm = () => {
    setFutureValuePV(''); setDiscountRatePV(''); setYearsPV(''); setCompoundingFrequencyPV('1');
    setPresentValueResult(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Present Value Calculator (Single Sum)</AlertTitle><AlertDescription>Calculate the present value of a single future amount of money, discounted back to today.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter future value and discount details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="futureValuePV">Future Value ($)</Label><Input id="futureValuePV" type="number" value={futureValuePV} onChange={(e) => setFutureValuePV(e.target.value)} placeholder="e.g., 10000"/></div>
            <div><Label htmlFor="discountRatePV">Annual Discount Rate (%)</Label><Input id="discountRatePV" type="number" value={discountRatePV} onChange={(e) => setDiscountRatePV(e.target.value)} placeholder="e.g., 5"/></div>
            <div><Label htmlFor="yearsPVCalc">Number of Years</Label><Input id="yearsPVCalc" type="number" value={yearsPV} onChange={(e) => setYearsPV(e.target.value)} placeholder="e.g., 10"/></div>
            <div>
              <Label htmlFor="compoundingFrequencyPV">Compounding Frequency</Label>
              <Select value={compoundingFrequencyPV} onValueChange={setCompoundingFrequencyPV}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="1">Annually</SelectItem>
                  <SelectItem value="2">Semi-Annually</SelectItem>
                  <SelectItem value="4">Quarterly</SelectItem>
                  <SelectItem value="12">Monthly</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePresentValue}>Calculate PV</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(presentValueResult || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Present Value</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {presentValueResult && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Present Value (Today's Value)</p><p className="text-2xl font-bold text-primary">${presentValueResult}</p></div>
                  <CopyButton textToCopy={presentValueResult} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PresentValueCalculator.tsx ======
==================================================

// ====== START OF FILE: PrimeFactorizationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.47 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Binary } from "lucide-react"; // Using Binary as a decomposition visual

export default function PrimeFactorizationCalculator() {
  const [numberToFactor, setNumberToFactor] = useState<string>('');
  
  const [primeFactorsResult, setPrimeFactorsResult] = useState<string | null>(null);
  const [isInputPrime, setIsInputPrime] = useState<boolean | null>(null);
  const [error, setError] = useState<string | null>(null);

  const getPrimeFactorsList = (n: number): number[] => {
    const factors: number[] = [];
    let divisor = 2;
    let num = n;

    while (num >= 2 && divisor * divisor <= num) {
      if (num % divisor === 0) {
        factors.push(divisor);
        num /= divisor;
      } else {
        divisor++;
      }
    }
    if (num > 1) { // Remaining num is prime
      factors.push(num);
    }
    return factors;
  };
  
  const checkPrimeNum = (n: number): boolean => {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 === 0 || n % 3 === 0) return false;
    for (let i = 5; i * i <= n; i = i + 6) {
        if (n % i === 0 || n % (i + 2) === 0) return false;
    }
    return true;
  };

  const calculatePrimeFactorization = () => {
    setError(null);
    setPrimeFactorsResult(null);
    setIsInputPrime(null);

    const num = parseInt(numberToFactor);

    if (isNaN(num) || num <= 1) {
      setError('Please enter an integer greater than 1.');
      return;
    }
    if (num > 10000000) { // Performance limit for simple trial division
        setError('Number too large for quick prime factorization with this tool (max 10,000,000).');
        return;
    }

    const factors = getPrimeFactorsList(num);
    setPrimeFactorsResult(factors.join(' × '));
    setIsInputPrime(factors.length === 1 && factors[0] === num);
  };
  
  const resetForm = () => {
    setNumberToFactor('');
    setPrimeFactorsResult(null);
    setIsInputPrime(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Prime Factorization Calculator</AlertTitle><AlertDescription>Find the prime factorization of any positive integer greater than 1.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter an integer to factorize.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="numberToFactor">Integer (&gt;1)</Label><Input id="numberToFactor" type="number" value={numberToFactor} onChange={(e) => setNumberToFactor(e.target.value)} placeholder="e.g., 360"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePrimeFactorization}>Factorize</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(primeFactorsResult || error) && (
          <Card>
            <CardHeader><CardDescription>Prime Factorization</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {isInputPrime !== null && (
                <Alert variant={isInputPrime ? "default" : "info"} className={isInputPrime ? "bg-green-500/10 border-green-500/50" : "bg-blue-500/10 border-blue-500/50"}>
                  <AlertDescription>{numberToFactor} is {isInputPrime ? 'a Prime Number.' : 'a Composite Number.'}</AlertDescription>
                </Alert>
              )}
              {primeFactorsResult && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Prime Factors of {numberToFactor}</p><p className="text-xl font-bold text-primary">{primeFactorsResult}</p></div>
                  <CopyButton textToCopy={primeFactorsResult} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PrimeFactorizationCalculator.tsx ======
==================================================

// ====== START OF FILE: PrimeNumberGenerator.tsx ======
// File converted from TSX to TXT
// Original size: 4.16 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Binary as PrimeIcon } from "lucide-react";
import { ScrollArea } from '@/components/ui/scroll-area';

export default function PrimeNumberGenerator() {
  const [upperLimit, setUpperLimit] = useState<string>('100');
  const [primes, setPrimes] = useState<number[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  const generatePrimes = () => {
    setIsLoading(true);
    setError(null);
    setPrimes([]);

    // Use a timeout to allow the UI to update to the loading state before the potentially blocking calculation
    setTimeout(() => {
      const limit = parseInt(upperLimit);
      if (isNaN(limit) || limit < 2) {
        setError('Please enter an integer greater than or equal to 2.');
        setIsLoading(false);
        return;
      }
      if (limit > 1000000) { // Safety limit to prevent browser from freezing
        setError('Limit is too high for this browser-based tool. Please enter a number up to 1,000,000.');
        setIsLoading(false);
        return;
      }
      
      // Sieve of Eratosthenes algorithm
      const isPrime = new Array(limit + 1).fill(true);
      isPrime[0] = isPrime[1] = false;
      for (let p = 2; p * p <= limit; p++) {
        if (isPrime[p]) {
          for (let i = p * p; i <= limit; i += p) {
            isPrime[i] = false;
          }
        }
      }

      const primeNumbers: number[] = [];
      for (let p = 2; p <= limit; p++) {
        if (isPrime[p]) {
          primeNumbers.push(p);
        }
      }
      setPrimes(primeNumbers);
      setIsLoading(false);
    }, 50); 
  };
  
  const resetForm = () => {
    setUpperLimit('100');
    setPrimes([]);
    setError(null);
    setIsLoading(false);
  }

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Prime Number Generator</AlertTitle><AlertDescription>Generate a list of all prime numbers up to a specified limit using the Sieve of Eratosthenes algorithm.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter an upper limit.</CardDescription></CardHeader>
          <CardContent>
            <Label htmlFor="upperLimit">Generate primes up to:</Label>
            <Input id="upperLimit" type="number" value={upperLimit} onChange={(e) => setUpperLimit(e.target.value)} placeholder="e.g., 1000"/>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={generatePrimes} disabled={isLoading}>{isLoading ? "Generating..." : "Generate Primes"}</Button>
            <Button variant="outline" onClick={resetForm} disabled={isLoading}>Reset</Button>
          </CardFooter>
        </Card>

        <Card>
            <CardHeader><CardDescription>Generated Prime Numbers ({primes.length})</CardDescription></CardHeader>
            <CardContent>
                 {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
                 {primes.length > 0 ? (
                    <div>
                        <ScrollArea className="h-48 border rounded-md p-2">
                             <p className="font-mono text-sm leading-relaxed">{primes.join(', ')}</p>
                        </ScrollArea>
                        <CopyButton buttonText="Copy List" textToCopy={primes.join(', ')} className="w-full mt-2"/>
                    </div>
                 ) : !error && (
                     <p className="text-muted-foreground text-sm">Results will appear here.</p>
                 )}
            </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: PrimeNumberGenerator.tsx ======
==================================================

// ====== START OF FILE: ProbabilityCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.25 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Dice5, Percent } from "lucide-react";

type ProbabilityType = 'single_event' | 'A_or_B' | 'A_and_B_independent' | 'A_and_B_dependent';
// More complex types like binomial, Poisson, normal distribution are out of scope for simplified version.

export default function ProbabilityCalculator() {
  const [probType, setProbType] = useState<ProbabilityType>('single_event');
  const [probA, setProbA] = useState<string>(''); // Probability of event A (0-1 or 0-100%)
  const [probB, setProbB] = useState<string>(''); // Probability of event B
  const [probBGivenA, setProbBGivenA] = useState<string>(''); // P(B|A) for dependent events

  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const parseProb = (valStr: string): number | null => {
    let val = parseFloat(valStr);
    if (isNaN(val)) return null;
    if (valStr.includes('%')) val /= 100; // Allow input as percentage
    if (val < 0 || val > 1) return null; // Probability must be between 0 and 1
    return val;
  };

  const calculateProbability = () => {
    setError(null);
    setResult(null);
    const pA = parseProb(probA);
    const pB = parseProb(probB);
    const pB_A = parseProb(probBGivenA);

    try {
      let calculatedProb: number | null = null;
      if (probType === 'single_event') {
        if (pA === null) throw new Error("P(A) must be a valid probability (0-1 or 0-100%).");
        calculatedProb = pA; // Just displaying P(A)
      } else if (probType === 'A_or_B') { // P(A or B) = P(A) + P(B) - P(A and B). Assuming independent if P(A and B) not given.
        if (pA === null || pB === null) throw new Error("P(A) and P(B) must be valid probabilities.");
        // Simplified: P(A or B) = P(A) + P(B) for mutually exclusive, or P(A) + P(B) - P(A)*P(B) for independent
        calculatedProb = pA + pB - (pA * pB); // Assuming independent for "or"
      } else if (probType === 'A_and_B_independent') {
        if (pA === null || pB === null) throw new Error("P(A) and P(B) must be valid probabilities.");
        calculatedProb = pA * pB;
      } else if (probType === 'A_and_B_dependent') {
        if (pA === null || pB_A === null) throw new Error("P(A) and P(B|A) must be valid probabilities.");
        calculatedProb = pA * pB_A; // P(A and B) = P(A) * P(B|A)
      } else {
        throw new Error("Invalid probability type selected.");
      }

      if (calculatedProb !== null && calculatedProb >= 0 && calculatedProb <= 1) {
        setResult(`${(calculatedProb * 100).toFixed(2)}%`);
      } else if (calculatedProb !== null) {
        throw new Error("Calculated probability is outside the valid range [0, 1]. Check inputs.");
      } else {
        throw new Error("Could not calculate probability.");
      }
    } catch (e: any) { setError(e.message); }
  };
  
  const resetForm = () => {
    setProbA(''); setProbB(''); setProbBGivenA('');
    setResult(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Probability Calculator (Simplified)</AlertTitle><AlertDescription>Calculate basic probabilities for single or multiple events. Enter probabilities as decimals (e.g., 0.5) or percentages (e.g., 50%).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Select probability type and enter values.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="probType">Type of Probability</Label><Select value={probType} onValueChange={(v: ProbabilityType)=>{setProbType(v);setResult(null);setError(null);}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="single_event">P(A) - Single Event</SelectItem><SelectItem value="A_or_B">P(A or B) (Independent)</SelectItem><SelectItem value="A_and_B_independent">P(A and B) (Independent)</SelectItem><SelectItem value="A_and_B_dependent">P(A and B) (Dependent)</SelectItem></SelectContent></Select></div>
            <div><Label htmlFor="probAVal">P(A)</Label><Input id="probAVal" value={probA} onChange={e=>setProbA(e.target.value)} placeholder="e.g., 0.5 or 50%"/></div>
            {(probType === 'A_or_B' || probType === 'A_and_B_independent') && (<div><Label htmlFor="probBVal">P(B)</Label><Input id="probBVal" value={probB} onChange={e=>setProbB(e.target.value)} placeholder="e.g., 0.25 or 25%"/></div>)}
            {probType === 'A_and_B_dependent' && (<div><Label htmlFor="probBGivenAVal">P(B|A) (Prob of B given A)</Label><Input id="probBGivenAVal" value={probBGivenA} onChange={e=>setProbBGivenA(e.target.value)} placeholder="e.g., 0.4 or 40%"/></div>)}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateProbability}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Probability Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Calculated Probability</p><p className="text-2xl font-bold text-primary">{result}</p></div><CopyButton textToCopy={result} /></div>)}
              {probType === 'A_or_B' && <AlertDescription className="text-xs mt-2">Assumes P(A or B) = P(A) + P(B) - P(A)*P(B) for independent events.</AlertDescription>}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ProbabilityCalculator.tsx ======
==================================================

// ====== START OF FILE: ProfitAndLossCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.96 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, DollarSign, LineChart } from "lucide-react";

export default function ProfitAndLossCalculator() {
  const [revenue, setRevenue] = useState<string>('');
  const [cogs, setCogs] = useState<string>(''); // Cost of Goods Sold
  const [operatingExpenses, setOperatingExpenses] = useState<string>('');

  const [grossProfit, setGrossProfit] = useState<string | null>(null);
  const [netProfit, setNetProfit] = useState<string | null>(null);
  const [grossProfitMargin, setGrossProfitMargin] = useState<string | null>(null);
  const [netProfitMargin, setNetProfitMargin] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePandL = () => {
    setError(null);
    setGrossProfit(null);
    setNetProfit(null);
    setGrossProfitMargin(null);
    setNetProfitMargin(null);

    const rev = parseFloat(revenue);
    const costOfGoods = parseFloat(cogs) || 0; // Can be 0 for service businesses
    const opEx = parseFloat(operatingExpenses) || 0;

    if (isNaN(rev) || rev < 0 || isNaN(costOfGoods) || costOfGoods < 0 || isNaN(opEx) || opEx < 0) {
      setError('Please enter valid non-negative numbers for all financial fields.');
      return;
    }

    const gp = rev - costOfGoods;
    setGrossProfit(gp.toFixed(2));

    const np = gp - opEx;
    setNetProfit(np.toFixed(2));

    if (rev > 0) {
      setGrossProfitMargin(((gp / rev) * 100).toFixed(2));
      setNetProfitMargin(((np / rev) * 100).toFixed(2));
    } else {
      setGrossProfitMargin(gp === 0 ? "0.00" : "N/A");
      setNetProfitMargin(np === 0 ? "0.00" : "N/A");
    }
  };

  const resetForm = () => {
    setRevenue(''); setCogs(''); setOperatingExpenses('');
    setGrossProfit(null); setNetProfit(null); setGrossProfitMargin(null); setNetProfitMargin(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Profit &amp; Loss (P&amp;L) Calculator</AlertTitle><AlertDescription>Calculate Gross Profit, Net Profit, and associated margins based on your revenue and costs. (Simplified model)</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your financial figures.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="revenuePL">Total Revenue ($)</Label><Input id="revenuePL" type="number" value={revenue} onChange={(e) => setRevenue(e.target.value)} placeholder="e.g., 100000"/></div>
            <div><Label htmlFor="cogsPL">Cost of Goods Sold (COGS) ($)</Label><Input id="cogsPL" type="number" value={cogs} onChange={(e) => setCogs(e.target.value)} placeholder="e.g., 40000"/></div>
            <div><Label htmlFor="opExPL">Operating Expenses ($)</Label><Input id="opExPL" type="number" value={operatingExpenses} onChange={(e) => setOperatingExpenses(e.target.value)} placeholder="e.g., 25000 (rent, salaries, utilities)"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePandL}>Calculate P&amp;L</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(grossProfit || error) && (
          <Card>
            <CardHeader><CardDescription>Profit &amp; Loss Summary</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {grossProfit && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Gross Profit</p><p className="font-semibold">${grossProfit} ({grossProfitMargin}%)</p></div>)}
              {netProfit && (
                <div className={`p-2 rounded-md ${parseFloat(netProfit) >=0 ? 'bg-primary/10' : 'bg-red-500/10'}`}>
                  <p className={`text-sm ${parseFloat(netProfit) >=0 ? 'text-muted-foreground' : 'text-red-700 dark:text-red-400'}`}>Net Profit / Loss</p>
                  <div className="flex justify-between items-center"><p className={`text-xl font-bold ${parseFloat(netProfit) >=0 ? 'text-primary' : 'text-red-600 dark:text-red-500'}`}>${netProfit}</p><CopyButton textToCopy={netProfit} size="sm" variant="ghost"/></div>
                  {netProfitMargin && <p className="text-xs text-muted-foreground">Net Profit Margin: {netProfitMargin}%</p>}
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ProfitAndLossCalculator.tsx ======
==================================================

// ====== START OF FILE: ProfitAndLossStatementSimplified.tsx ======
// File converted from TSX to TXT
// Original size: 4.95 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, DollarSign, LineChart } from "lucide-react";

export default function ProfitAndLossStatementSimplified() {
  const [revenue, setRevenue] = useState<string>('');
  const [cogs, setCogs] = useState<string>(''); // Cost of Goods Sold
  const [operatingExpenses, setOperatingExpenses] = useState<string>('');

  const [grossProfit, setGrossProfit] = useState<string | null>(null);
  const [netProfit, setNetProfit] = useState<string | null>(null);
  const [grossProfitMargin, setGrossProfitMargin] = useState<string | null>(null);
  const [netProfitMargin, setNetProfitMargin] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePandL = () => {
    setError(null);
    setGrossProfit(null);
    setNetProfit(null);
    setGrossProfitMargin(null);
    setNetProfitMargin(null);

    const rev = parseFloat(revenue);
    const costOfGoods = parseFloat(cogs) || 0; // Can be 0 for service businesses
    const opEx = parseFloat(operatingExpenses) || 0;

    if (isNaN(rev) || rev < 0 || isNaN(costOfGoods) || costOfGoods < 0 || isNaN(opEx) || opEx < 0) {
      setError('Please enter valid non-negative numbers for all financial fields.');
      return;
    }

    const gp = rev - costOfGoods;
    setGrossProfit(gp.toFixed(2));

    const np = gp - opEx;
    setNetProfit(np.toFixed(2));

    if (rev > 0) {
      setGrossProfitMargin(((gp / rev) * 100).toFixed(2));
      setNetProfitMargin(((np / rev) * 100).toFixed(2));
    } else {
      setGrossProfitMargin(gp === 0 ? "0.00" : "N/A");
      setNetProfitMargin(np === 0 ? "0.00" : "N/A");
    }
  };

  const resetForm = () => {
    setRevenue(''); setCogs(''); setOperatingExpenses('');
    setGrossProfit(null); setNetProfit(null); setGrossProfitMargin(null); setNetProfitMargin(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Profit & Loss (P&L) Statement Calculator (Simplified)</AlertTitle><AlertDescription>Calculate Gross Profit, Net Profit, and associated margins based on your revenue and costs.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your financial figures.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="revenuePL">Total Revenue ($)</Label><Input id="revenuePL" type="number" value={revenue} onChange={(e) => setRevenue(e.target.value)} placeholder="e.g., 100000"/></div>
            <div><Label htmlFor="cogsPL">Cost of Goods Sold (COGS) ($)</Label><Input id="cogsPL" type="number" value={cogs} onChange={(e) => setCogs(e.target.value)} placeholder="e.g., 40000"/></div>
            <div><Label htmlFor="opExPL">Operating Expenses ($)</Label><Input id="opExPL" type="number" value={operatingExpenses} onChange={(e) => setOperatingExpenses(e.target.value)} placeholder="e.g., 25000 (rent, salaries, utilities)"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePandL}>Calculate P&L</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(grossProfit || error) && (
          <Card>
            <CardHeader><CardDescription>Profit & Loss Summary</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {grossProfit && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Gross Profit</p><p className="font-semibold">${grossProfit} ({grossProfitMargin}%)</p></div>)}
              {netProfit && (
                <div className={`p-2 rounded-md ${parseFloat(netProfit) >= 0 ? 'bg-primary/10' : 'bg-red-500/10'}`}>
                  <p className={`text-sm ${parseFloat(netProfit) >=0 ? 'text-muted-foreground' : 'text-red-700 dark:text-red-400'}`}>Net Profit / Loss</p>
                  <div className="flex justify-between items-center"><p className={`text-xl font-bold ${parseFloat(netProfit) >=0 ? 'text-primary' : 'text-red-600 dark:text-red-500'}`}>${netProfit}</p><CopyButton textToCopy={netProfit} size="sm" variant="ghost"/></div>
                  {netProfitMargin && <p className="text-xs text-muted-foreground">Net Profit Margin: {netProfitMargin}%</p>}
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ProfitAndLossStatementSimplified.tsx ======
==================================================

// ====== START OF FILE: PropertyPricePerSquareFootCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.28 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Square } from "lucide-react";

type AreaUnitSqFt = 'sqft' | 'sqm';

export default function PropertyPricePerSquareFootCalculator() {
  const [totalPrice, setTotalPrice] = useState<string>('');
  const [totalArea, setTotalArea] = useState<string>('');
  const [areaUnit, setAreaUnit] = useState<AreaUnitSqFt>('sqft');

  const [pricePerUnitArea, setPricePerUnitArea] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePricePerUnit = () => {
    setError(null);
    setPricePerUnitArea(null);

    const price = parseFloat(totalPrice);
    const area = parseFloat(totalArea);

    if (isNaN(price) || price <= 0 || isNaN(area) || area <= 0) {
      setError('Please enter valid positive numbers for total price and total area.');
      return;
    }

    const ppu = price / area;
    setPricePerUnitArea(`${ppu.toFixed(2)} per ${areaUnit}`);
  };
  
  const resetForm = () => {
    setTotalPrice('');
    setTotalArea('');
    setPricePerUnitArea(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Price Per Square Foot/Meter</AlertTitle>
        <AlertDescription>
          Calculate the price per square foot (or square meter) of a property to compare values.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter property details.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="totalPrice">Total Property Price ($)</Label>
              <Input id="totalPrice" type="number" value={totalPrice} onChange={(e) => setTotalPrice(e.target.value)} placeholder="e.g., 300000" />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="totalAreaSqFt">Total Area</Label>
                <Input id="totalAreaSqFt" type="number" value={totalArea} onChange={(e) => setTotalArea(e.target.value)} placeholder="e.g., 1500" />
              </div>
              <div>
                <Label htmlFor="areaUnitSqFt">Unit</Label>
                <Select value={areaUnit} onValueChange={(value: AreaUnitSqFt) => setAreaUnit(value)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="sqft">Square Feet (sq ft)</SelectItem>
                    <SelectItem value="sqm">Square Meters (sq m)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculatePricePerUnit}>Calculate Price/Unit</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(pricePerUnitArea || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {pricePerUnitArea && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Price per Unit Area</p><p className="text-2xl font-bold text-primary">${pricePerUnitArea}</p></div>
                  <CopyButton textToCopy={pricePerUnitArea} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PropertyPricePerSquareFootCalculator.tsx ======
==================================================

// ====== START OF FILE: ProteinCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.09 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Drumstick } from "lucide-react";

// General protein recommendations:
// RDA: 0.8g per kg body weight for average adults.
// Athletes/Active individuals may need more (e.g., 1.2-2.2g/kg).

const activityLevelsProtein = [
  { name: "Sedentary (little to no exercise)", factor: 0.8 },
  { name: "Lightly Active (exercise 1-3 days/week)", factor: 1.2 },
  { name: "Moderately Active (exercise 3-5 days/week)", factor: 1.4 },
  { name: "Very Active (exercise 6-7 days/week)", factor: 1.6 },
  { name: "Extremely Active (intense exercise/physical job)", factor: 1.8 },
  // For athletes, factors can go up to 2.2 or even higher for specific goals
];

export default function ProteinCalculator() {
  const [weight, setWeight] = useState<string>('');
  const [weightUnit, setWeightUnit] = useState<'kg' | 'lb'>('kg');
  const [activityLevelFactor, setActivityLevelFactor] = useState<string>(activityLevelsProtein[0].factor.toString());

  const [proteinRangeGrams, setProteinRangeGrams] = useState<string | null>(null);
  const [proteinCalories, setProteinCalories] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateProteinIntake = () => {
    setError(null);
    setProteinRangeGrams(null);
    setProteinCalories(null);

    let weightInKg = parseFloat(weight);
    if (isNaN(weightInKg) || weightInKg <= 0) {
      setError('Please enter a valid positive body weight.');
      return;
    }

    if (weightUnit === 'lb') {
      weightInKg = weightInKg * 0.453592; // Convert lbs to kg
    }

    const factor = parseFloat(activityLevelFactor);
    if (isNaN(factor)) {
      setError("Invalid activity level selected.");
      return;
    }

    const recommendedProteinGrams = weightInKg * factor;
    const minProteinGrams = weightInKg * 0.8; // RDA minimum
    
    // Display a range if factor suggests higher intake, otherwise just RDA
    let displayProteinGrams;
    if (factor > 0.8) {
        displayProteinGrams = `${minProteinGrams.toFixed(0)} - ${recommendedProteinGrams.toFixed(0)} grams`;
    } else {
        displayProteinGrams = `${recommendedProteinGrams.toFixed(0)} grams`;
    }
    
    setProteinRangeGrams(displayProteinGrams);

    // Calories from protein (using the higher end of the range or the single value)
    const caloriesFromProtein = recommendedProteinGrams * 4; // 4 calories per gram of protein
    setProteinCalories(`${caloriesFromProtein.toFixed(0)} Calories from Protein`);
  };
  
  const resetForm = () => {
    setWeight('');
    setActivityLevelFactor(activityLevelsProtein[0].factor.toString());
    setProteinRangeGrams(null);
    setProteinCalories(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Nutritional Disclaimer</AlertTitle>
        <AlertDescription>
          This calculator provides general protein intake estimates. Individual needs vary based on health, specific fitness goals (e.g., muscle building, endurance), and medical conditions. Consult a healthcare professional or registered dietitian for personalized dietary advice.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate your daily protein needs.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="weightProtein">Body Weight</Label>
                <Input id="weightProtein" type="number" value={weight} onChange={(e) => setWeight(e.target.value)} placeholder="e.g., 70 or 154" />
              </div>
              <div>
                <Label htmlFor="weightUnitProtein">Unit</Label>
                <Select value={weightUnit} onValueChange={(value: 'kg' | 'lb') => setWeightUnit(value)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="kg">Kilograms (kg)</SelectItem>
                    <SelectItem value="lb">Pounds (lb)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div>
              <Label htmlFor="activityLevelProtein">Activity Level</Label>
              <Select value={activityLevelFactor} onValueChange={setActivityLevelFactor}>
                <SelectTrigger id="activityLevelProtein"><SelectValue placeholder="Select activity level" /></SelectTrigger>
                <SelectContent>
                  {activityLevelsProtein.map(level => (
                    <SelectItem key={level.name} value={level.factor.toString()}>
                      {level.name} ({level.factor}g/kg)
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateProteinIntake}>Calculate Protein</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(proteinRangeGrams || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Daily Protein Needs</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {proteinRangeGrams && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Recommended Protein Intake</p>
                    <p className="text-2xl font-bold text-primary">{proteinRangeGrams}</p>
                    {proteinCalories && <p className="text-xs text-muted-foreground mt-1">({proteinCalories})</p>}
                  </div>
                  <CopyButton textToCopy={`${proteinRangeGrams} (${proteinCalories || ''})`} />
                </div>
              )}
               <Alert variant="default" className="mt-4">
                <Info className="h-4 w-4"/>
                <AlertTitle>General Guidelines</AlertTitle>
                <AlertDescription>
                    The RDA for protein is 0.8g per kg of body weight for average adults. Active individuals and athletes may benefit from higher intake (1.2-2.2g/kg).
                </AlertDescription>
               </Alert>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ProteinCalculator.tsx ======
==================================================

// ====== START OF FILE: ProteinIntakeForMuscleGainCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.77 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Beef, Dumbbell } from "lucide-react";

type WeightUnitPIMG = 'kg' | 'lb';
// Protein factors (g per kg of body weight)
const proteinFactorsMuscleGain = {
  maintenance: { min: 1.2, max: 1.6, label: "Maintenance / General Fitness" },
  moderate_gain: { min: 1.6, max: 2.0, label: "Moderate Muscle Gain" },
  significant_gain: { min: 1.8, max: 2.2, label: "Significant Muscle Gain / Bodybuilding" },
  // Can add more specific categories or even a direct g/kg input
};

export default function ProteinIntakeForMuscleGainCalculator() {
  const [weight, setWeight] = useState<string>('');
  const [weightUnit, setWeightUnit] = useState<WeightUnitPIMG>('kg');
  const [goal, setGoal] = useState<keyof typeof proteinFactorsMuscleGain>('moderate_gain');

  const [proteinRange, setProteinRange] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateProtein = () => {
    setError(null); setProteinRange(null);
    const w = parseFloat(weight);
    if (isNaN(w) || w <= 0) { setError('Please enter a valid positive body weight.'); return; }

    let weightInKg = w;
    if (weightUnit === 'lb') weightInKg = w * 0.453592;

    const selectedGoalFactors = proteinFactorsMuscleGain[goal];
    const minProtein = weightInKg * selectedGoalFactors.min;
    const maxProtein = weightInKg * selectedGoalFactors.max;

    setProteinRange(`${minProtein.toFixed(0)} - ${maxProtein.toFixed(0)} grams per day`);
  };

  const resetForm = () => {
    setWeight(''); setGoal('moderate_gain');
    setProteinRange(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Protein for Muscle Gain Estimator</AlertTitle><AlertDescription>Estimate daily protein intake for muscle gain based on body weight and goals. These are general guidelines; consult a nutritionist or doctor for personalized advice, especially with underlying health conditions.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your details for estimation.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="weightPIMG">Body Weight</Label><Input id="weightPIMG" type="number" value={weight} onChange={e=>setWeight(e.target.value)} /></div>
              <div><Label htmlFor="weightUnitPIMG">Unit</Label><Select value={weightUnit} onValueChange={(v:WeightUnitPIMG)=>setWeightUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="kg">kg</SelectItem><SelectItem value="lb">lbs</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="goalPIMG">Primary Goal</Label><Select value={goal} onValueChange={(v:keyof typeof proteinFactorsMuscleGain)=>setGoal(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                {Object.entries(proteinFactorsMuscleGain).map(([key, val]) => <SelectItem key={key} value={key}>{val.label} ({val.min}-{val.max}g/kg)</SelectItem>)}
            </SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateProtein}>Calculate Protein</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(proteinRange || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Daily Protein Intake</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {proteinRange && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Recommended Range</p><p className="text-2xl font-bold text-primary">{proteinRange}</p></div><CopyButton textToCopy={proteinRange}/></div>)}
              <AlertDescription className="text-xs pt-2 mt-2">Distribute intake throughout the day. Ensure adequate calorie intake and training for muscle growth.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ProteinIntakeForMuscleGainCalculator.tsx ======
==================================================

// ====== START OF FILE: PythagoreanTheoremCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.94 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Triangle } from "lucide-react";

type SolveFor = 'hypotenuse' | 'sideA' | 'sideB';

export default function PythagoreanTheoremCalculator() {
  const [solveFor, setSolveFor] = useState<SolveFor>('hypotenuse');
  const [sideA, setSideA] = useState<string>('');
  const [sideB, setSideB] = useState<string>('');
  const [hypotenuseC, setHypotenuseC] = useState<string>('');

  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculate = () => {
    setError(null);
    setResult(null);

    const a = parseFloat(sideA);
    const b = parseFloat(sideB);
    const c = parseFloat(hypotenuseC);
    let calculatedValue: number;

    try {
      if (solveFor === 'hypotenuse') {
        if (isNaN(a) || a <= 0 || isNaN(b) || b <= 0) throw new Error("Sides A and B must be positive numbers.");
        calculatedValue = Math.sqrt(a*a + b*b);
      } else if (solveFor === 'sideA') {
        if (isNaN(c) || c <= 0 || isNaN(b) || b <= 0) throw new Error("Hypotenuse C and Side B must be positive numbers.");
        if (c <= b) throw new Error("Hypotenuse C must be greater than Side B.");
        calculatedValue = Math.sqrt(c*c - b*b);
      } else { // solveFor === 'sideB'
        if (isNaN(c) || c <= 0 || isNaN(a) || a <= 0) throw new Error("Hypotenuse C and Side A must be positive numbers.");
        if (c <= a) throw new Error("Hypotenuse C must be greater than Side A.");
        calculatedValue = Math.sqrt(c*c - a*a);
      }
      
      if (isNaN(calculatedValue) || !isFinite(calculatedValue)) throw new Error("Calculation resulted in an invalid number.");
      setResult(calculatedValue.toFixed(4));

    } catch (e: any) { setError(e.message); }
  };
  
  const resetForm = () => {
    setSideA(''); setSideB(''); setHypotenuseC('');
    setResult(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Pythagorean Theorem (a² + b² = c²)</AlertTitle><AlertDescription>Calculate the length of a side of a right-angled triangle. Ensure units are consistent.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Solve for hypotenuse (c) or a side (a or b).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="solveForPT">Solve for:</Label><Select value={solveFor} onValueChange={(v: SolveFor) => {setSolveFor(v); setResult(null); setError(null);}}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent><SelectItem value="hypotenuse">Hypotenuse (c)</SelectItem><SelectItem value="sideA">Side A (a)</SelectItem><SelectItem value="sideB">Side B (b)</SelectItem></SelectContent></Select></div>
            {solveFor !== 'sideA' && <div><Label htmlFor="sideAPT">Side A (a)</Label><Input id="sideAPT" type="number" value={sideA} onChange={e=>setSideA(e.target.value)} placeholder="Length of side A"/></div>}
            {solveFor !== 'sideB' && <div><Label htmlFor="sideBPT">Side B (b)</Label><Input id="sideBPT" type="number" value={sideB} onChange={e=>setSideB(e.target.value)} placeholder="Length of side B"/></div>}
            {solveFor !== 'hypotenuse' && <div><Label htmlFor="hypotenuseCPT">Hypotenuse (c)</Label><Input id="hypotenuseCPT" type="number" value={hypotenuseC} onChange={e=>setHypotenuseC(e.target.value)} placeholder="Length of hypotenuse C"/></div>}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Length of {solveFor === 'hypotenuse' ? 'Hypotenuse (c)' : solveFor === 'sideA' ? 'Side A (a)' : 'Side B (b)'}</p><p className="text-2xl font-bold text-primary">{result} units</p></div><CopyButton textToCopy={result} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: PythagoreanTheoremCalculator.tsx ======
==================================================

// ====== START OF FILE: QuadraticFormulaCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.24 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, FunctionSquare } from "lucide-react";

export default function QuadraticFormulaCalculator() {
  const [coeffA, setCoeffA] = useState<string>('');
  const [coeffB, setCoeffB] = useState<string>('');
  const [coeffC, setCoeffC] = useState<string>('');

  const [root1, setRoot1] = useState<string | null>(null);
  const [root2, setRoot2] = useState<string | null>(null);
  const [discriminantInfo, setDiscriminantInfo] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateRoots = () => {
    setError(null);
    setRoot1(null);
    setRoot2(null);
    setDiscriminantInfo(null);

    const a = parseFloat(coeffA);
    const b = parseFloat(coeffB);
    const c = parseFloat(coeffC);

    if (isNaN(a) || isNaN(b) || isNaN(c)) {
      setError('Please enter valid numbers for coefficients a, b, and c.');
      return;
    }
    if (a === 0) {
      setError('Coefficient "a" cannot be zero for a quadratic equation. This would be a linear equation.');
      return;
    }

    const discriminant = b*b - 4*a*c;
    
    if (discriminant > 0) {
      const r1 = (-b + Math.sqrt(discriminant)) / (2*a);
      const r2 = (-b - Math.sqrt(discriminant)) / (2*a);
      setRoot1(r1.toFixed(4));
      setRoot2(r2.toFixed(4));
      setDiscriminantInfo(`Two distinct real roots (Discriminant = ${discriminant.toFixed(4)})`);
    } else if (discriminant === 0) {
      const r = -b / (2*a);
      setRoot1(r.toFixed(4));
      setRoot2(null); // Only one real root (or two identical real roots)
      setDiscriminantInfo(`One real root (repeated) (Discriminant = 0)`);
    } else { // discriminant < 0
      const realPart = -b / (2*a);
      const imaginaryPart = Math.sqrt(-discriminant) / (2*a);
      setRoot1(`${realPart.toFixed(4)} + ${imaginaryPart.toFixed(4)}i`);
      setRoot2(`${realPart.toFixed(4)} - ${imaginaryPart.toFixed(4)}i`);
      setDiscriminantInfo(`Two complex conjugate roots (Discriminant = ${discriminant.toFixed(4)})`);
    }
  };
  
  const resetForm = () => {
    setCoeffA(''); setCoeffB(''); setCoeffC('');
    setRoot1(null); setRoot2(null); setDiscriminantInfo(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Quadratic Formula Solver (ax² + bx + c = 0)</AlertTitle><AlertDescription>Find the roots of a quadratic equation using the formula x = [-b ± √(b²-4ac)] / 2a.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter coefficients a, b, and c.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="coeffA">Coefficient a (cannot be 0)</Label><Input id="coeffA" type="number" value={coeffA} onChange={(e) => setCoeffA(e.target.value)} placeholder="e.g., 1"/></div>
            <div><Label htmlFor="coeffB">Coefficient b</Label><Input id="coeffB" type="number" value={coeffB} onChange={(e) => setCoeffB(e.target.value)} placeholder="e.g., -3"/></div>
            <div><Label htmlFor="coeffC">Coefficient c</Label><Input id="coeffC" type="number" value={coeffC} onChange={(e) => setCoeffC(e.target.value)} placeholder="e.g., 2"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateRoots}>Solve for x</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(root1 || error) && (
          <Card>
            <CardHeader><CardDescription>Equation Roots</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {discriminantInfo && (<div className="p-2 bg-muted rounded-md text-sm"><p className="text-muted-foreground">Discriminant Info:</p><p className="font-semibold">{discriminantInfo}</p></div>)}
              {root1 && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Root 1 (x₁)</p>
                  <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{root1}</p><CopyButton textToCopy={root1} size="sm" variant="ghost"/></div>
                </div>
              )}
              {root2 && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Root 2 (x₂)</p>
                  <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{root2}</p><CopyButton textToCopy={root2} size="sm" variant="ghost"/></div>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: QuadraticFormulaCalculator.tsx ======
==================================================

// ====== START OF FILE: RacePaceCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.07 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Timer, Footprints } from "lucide-react";

type DistanceUnitRace = 'km' | 'miles';

const raceDistances: Record<string, { km: number, miles: number }> = {
  '5k': { km: 5, miles: 3.10686 },
  '10k': { km: 10, miles: 6.21371 },
  'half_marathon': { km: 21.0975, miles: 13.1094 },
  'marathon': { km: 42.195, miles: 26.21875 },
  'custom': { km: 0, miles: 0 },
};

export default function RacePaceCalculator() {
  const [race, setRace] = useState<string>('marathon');
  const [customDistance, setCustomDistance] = useState<string>('');
  const [distanceUnit, setDistanceUnit] = useState<DistanceUnitRace>('miles');
  const [hours, setHours] = useState<string>('');
  const [minutes, setMinutes] = useState<string>('');
  const [seconds, setSeconds] = useState<string>('');

  const [pacePerMile, setPacePerMile] = useState<string | null>(null);
  const [pacePerKm, setPacePerKm] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const formatPace = (secondsPerUnit: number): string => {
    if (isNaN(secondsPerUnit) || !isFinite(secondsPerUnit)) return "N/A";
    const mins = Math.floor(secondsPerUnit / 60);
    const secs = Math.round(secondsPerUnit % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const calculatePace = () => {
    setError(null);
    setPacePerMile(null);
    setPacePerKm(null);

    const h = parseInt(hours) || 0;
    const m = parseInt(minutes) || 0;
    const s = parseInt(seconds) || 0;
    const totalSeconds = h * 3600 + m * 60 + s;

    let totalDistanceInKm: number;
    if (race === 'custom') {
      const customDist = parseFloat(customDistance);
      if (isNaN(customDist) || customDist <= 0) {
        setError('Please enter a valid positive custom distance.');
        return;
      }
      totalDistanceInKm = distanceUnit === 'km' ? customDist : customDist * 1.60934;
    } else {
      totalDistanceInKm = raceDistances[race].km;
    }

    if (totalSeconds <= 0 || totalDistanceInKm <= 0) {
      setError('Target time and race distance must be positive.');
      return;
    }
    
    const totalDistanceInMiles = totalDistanceInKm / 1.60934;

    const secondsPerKm = totalSeconds / totalDistanceInKm;
    const secondsPerMile = totalSeconds / totalDistanceInMiles;

    setPacePerKm(formatPace(secondsPerKm));
    setPacePerMile(formatPace(secondsPerMile));
  };

  const resetForm = () => {
    setRace('marathon');
    setCustomDistance('');
    setDistanceUnit('miles');
    setHours('');
    setMinutes('');
    setSeconds('');
    setPacePerMile(null);
    setPacePerKm(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Race Pace Calculator</AlertTitle>
        <AlertDescription>
          Calculate the pace you need to maintain to achieve your target time for a specific race distance.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your race goal.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="raceSelect">Race Distance</Label>
              <Select value={race} onValueChange={setRace}>
                <SelectTrigger id="raceSelect">
                  <SelectValue placeholder="Select a race" />
                </SelectTrigger>
                <SelectContent>
                  {Object.keys(raceDistances).filter(k => k !== 'custom').map(key => (
                    <SelectItem key={key} value={key} className="capitalize">
                      {key.replace('_', ' ')}
                    </SelectItem>
                  ))}
                  <SelectItem value="custom">Custom</SelectItem>
                </SelectContent>
              </Select>
            </div>
            {race === 'custom' && (
              <div className="grid grid-cols-2 gap-2">
                <div>
                  <Label htmlFor="customDistInput">Distance</Label>
                  <Input id="customDistInput" type="number" value={customDistance} onChange={e => setCustomDistance(e.target.value)} />
                </div>
                 <div>
                  <Label htmlFor="customDistUnit">Unit</Label>
                  <Select value={distanceUnit} onValueChange={(v: DistanceUnitRace) => setDistanceUnit(v)}>
                    <SelectTrigger><SelectValue /></SelectTrigger>
                    <SelectContent>
                        <SelectItem value="km">km</SelectItem>
                        <SelectItem value="miles">miles</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            )}
            <div>
              <Label>Target Time (HH:MM:SS)</Label>
              <div className="grid grid-cols-3 gap-2">
                <Input type="number" value={hours} onChange={e => setHours(e.target.value)} placeholder="HH" />
                <Input type="number" value={minutes} onChange={e => setMinutes(e.target.value)} placeholder="MM" />
                <Input type="number" value={seconds} onChange={e => setSeconds(e.target.value)} placeholder="SS" />
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculatePace}>Calculate Pace</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>
        {(pacePerKm || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Required Pace</CardDescription>
            </CardHeader>
            <CardContent>
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {pacePerKm && (
                <div className="p-2 bg-muted rounded-md mb-2">
                  <p className="text-sm text-muted-foreground">Pace per Kilometer</p>
                  <p className="font-semibold">{pacePerKm}</p>
                </div>
              )}
              {pacePerMile && (
                 <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Pace per Mile</p>
                  <p className="font-semibold">{pacePerMile}</p>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: RacePaceCalculator.tsx ======
==================================================

// ====== START OF FILE: RaidConfigurationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.44 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, HardDrive } from "lucide-react";

type RaidLevel = '0' | '1' | '5' | '6' | '10';

export default function RaidConfigurationCalculator() {
  const [numDrives, setNumDrives] = useState<string>('');
  const [driveSize, setDriveSize] = useState<string>(''); // In TB
  const [raidLevel, setRaidLevel] = useState<RaidLevel>('5');

  const [usableCapacity, setUsableCapacity] = useState<string | null>(null);
  const [faultTolerance, setFaultTolerance] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateRaid = () => {
    setError(null); setUsableCapacity(null); setFaultTolerance(null);
    const n = parseInt(numDrives);
    const s = parseFloat(driveSize);

    if (isNaN(n) || n <= 0 || isNaN(s) || s <= 0) {
      setError("Number of drives and drive size must be positive numbers.");
      return;
    }
    
    let capacity = 0;
    let tolerance = 'None';
    
    switch (raidLevel) {
      case '0':
        if (n < 2) { setError("RAID 0 requires at least 2 drives."); return; }
        capacity = n * s;
        tolerance = '0 drives (No fault tolerance)';
        break;
      case '1':
        if (n < 2 || n % 2 !== 0) { setError("RAID 1 requires an even number of drives (at least 2)."); return; }
        capacity = (n / 2) * s;
        tolerance = '1 drive per mirror set';
        break;
      case '5':
        if (n < 3) { setError("RAID 5 requires at least 3 drives."); return; }
        capacity = (n - 1) * s;
        tolerance = '1 drive';
        break;
      case '6':
        if (n < 4) { setError("RAID 6 requires at least 4 drives."); return; }
        capacity = (n - 2) * s;
        tolerance = '2 drives';
        break;
      case '10':
        if (n < 4 || n % 2 !== 0) { setError("RAID 10 requires an even number of drives (at least 4)."); return; }
        capacity = (n / 2) * s;
        tolerance = '1 drive per mirror set (up to n/2)';
        break;
      default:
        setError("Invalid RAID level selected.");
        return;
    }
    
    setUsableCapacity(`${capacity.toFixed(2)} TB`);
    setFaultTolerance(tolerance);
  };

  const resetForm = () => {
    setNumDrives(''); setDriveSize(''); setRaidLevel('5');
    setUsableCapacity(null); setFaultTolerance(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>RAID Configuration Calculator</AlertTitle><AlertDescription>Estimate usable capacity and fault tolerance for common RAID levels. Assumes all drives are of equal size.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter RAID parameters.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="numDrivesRaid">Number of Drives (n)</Label><Input id="numDrivesRaid" type="number" value={numDrives} onChange={e=>setNumDrives(e.target.value)} placeholder="e.g., 4"/></div>
            <div><Label htmlFor="driveSizeRaid">Size of Each Drive (TB)</Label><Input id="driveSizeRaid" type="number" value={driveSize} onChange={e=>setDriveSize(e.target.value)} placeholder="e.g., 8"/></div>
            <div><Label htmlFor="raidLevelRaid">RAID Level</Label><Select value={raidLevel} onValueChange={(v:RaidLevel)=>setRaidLevel(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                <SelectItem value="0">RAID 0 (Striping)</SelectItem><SelectItem value="1">RAID 1 (Mirroring)</SelectItem>
                <SelectItem value="5">RAID 5 (Striping with Parity)</SelectItem><SelectItem value="6">RAID 6 (Striping with Double Parity)</SelectItem>
                <SelectItem value="10">RAID 10 (Striped Mirrors)</SelectItem>
            </SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateRaid}>Calculate RAID</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(usableCapacity || error) && (
          <Card>
            <CardHeader><CardDescription>RAID Array Details</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {usableCapacity && (<div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">Usable Capacity</p><div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{usableCapacity}</p><CopyButton textToCopy={usableCapacity} size="sm"/></div></div>)}
              {faultTolerance && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Fault Tolerance</p><p className="font-semibold">{faultTolerance}</p></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: RaidConfigurationCalculator.tsx ======
==================================================

// ====== START OF FILE: RampCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.2 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Accessibility, TrendingUp } from "lucide-react";

type RampCalculationTarget = 'length' | 'slope_ratio' | 'rise_from_length_slope';
type UnitRamp = 'inches' | 'feet' | 'cm' | 'meters';

// Common ADA slope is 1:12 (max for ramps)
// Slope ratio X:Y means X units of rise for Y units of run. Slope = X/Y

export default function RampCalculator() {
  const [target, setTarget] = useState<RampCalculationTarget>('length');
  const [rise, setRise] = useState<string>('');
  const [runOrLength, setRunOrLength] = useState<string>(''); // Run if calculating slope/rise, Length if calculating slope/rise
  const [slopeRatioRise, setSlopeRatioRise] = useState<string>('1'); // e.g., 1 in 1:12
  const [slopeRatioRun, setSlopeRatioRun] = useState<string>('12'); // e.g., 12 in 1:12
  const [unit, setUnit] = useState<UnitRamp>('inches');

  const [resultValue, setResultValue] = useState<string | null>(null);
  const [resultLabel, setResultLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const calculateRamp = () => {
    setError(null); setResultValue(null); setResultLabel('');
    const R = parseFloat(rise);
    const L_or_Run = parseFloat(runOrLength);
    const slopeRise = parseFloat(slopeRatioRise);
    const slopeRun = parseFloat(slopeRatioRun);

    try {
      let calculatedVal: number;
      if (target === 'length') { // Calculate ramp length (hypotenuse) or run based on slope
        if (isNaN(R) || R <= 0 || isNaN(slopeRise) || slopeRise <= 0 || isNaN(slopeRun) || slopeRun <= 0) throw new Error("Rise and slope ratio components must be positive.");
        const actualRun = (R * slopeRun) / slopeRise; // Horizontal run needed
        calculatedVal = Math.sqrt(R*R + actualRun*actualRun); // Actual ramp surface length
        setResultValue(calculatedVal.toFixed(2));
        setResultLabel(`Required Ramp Length (${unit})`);
      } else if (target === 'slope_ratio') { // Calculate slope ratio X:Y given rise and run
        if (isNaN(R) || R <= 0 || isNaN(L_or_Run) || L_or_Run <= 0) throw new Error("Rise and Run must be positive.");
        // Simplify ratio R:L_or_Run. Find GCD for integers or show decimal for X:1
        // For simplicity, show as 1 : (Run/Rise)
        if (R === 0) { setResultValue("0 (Flat)"); }
        else { setResultValue(`1 : ${(L_or_Run / R).toFixed(2)}`); }
        setResultLabel(`Slope Ratio (Rise : Run)`);
      } else { // rise_from_length_slope
        if (isNaN(L_or_Run) || L_or_Run <= 0 || isNaN(slopeRise) || slopeRise <= 0 || isNaN(slopeRun) || slopeRun <= 0) throw new Error("Ramp Length/Run and slope ratio components must be positive.");
        // Assuming L_or_Run is horizontal run
        calculatedVal = (L_or_Run * slopeRise) / slopeRun;
        setResultValue(calculatedVal.toFixed(2));
        setResultLabel(`Achievable Rise (${unit})`);
      }
    } catch (e: any) { setError(e.message); }
  };
  
  const resetForm = () => {
    setRise(''); setRunOrLength(''); setSlopeRatioRise('1'); setSlopeRatioRun('12');
    setResultValue(null); setResultLabel(''); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Ramp Calculator</AlertTitle><AlertDescription>Calculate ramp length, slope, or rise. Ensure all measurements use the same unit. ADA recommended slope for ramps is 1:12 (max).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter ramp parameters.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="rampTarget">Calculate:</Label><Select value={target} onValueChange={(v:RampCalculationTarget)=>{setTarget(v);resetForm()}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
              <SelectItem value="length">Ramp Length (for given Rise & Slope)</SelectItem>
              <SelectItem value="slope_ratio">Slope Ratio (for given Rise & Run)</SelectItem>
              <SelectItem value="rise_from_length_slope">Rise (for given Run & Slope)</SelectItem>
            </SelectContent></Select></div>
            <div><Label htmlFor="rampUnit">Unit for all measurements</Label><Select value={unit} onValueChange={(v:UnitRamp)=>setUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{['inches','feet','cm','meters'].map(u=><SelectItem key={u} value={u}>{u}</SelectItem>)}</SelectContent></Select></div>
            
            {(target === 'length' || target === 'slope_ratio') && <div><Label htmlFor="rampRise">Total Rise / Height ({unit})</Label><Input id="rampRise" type="number" value={rise} onChange={e=>setRise(e.target.value)}/></div>}
            {(target === 'slope_ratio' || target === 'rise_from_length_slope') && <div><Label htmlFor="rampRunLength">Horizontal Run / Length ({unit})</Label><Input id="rampRunLength" type="number" value={runOrLength} onChange={e=>setRunOrLength(e.target.value)}/></div>}
            
            {(target === 'length' || target === 'rise_from_length_slope') && <Label className="font-medium pt-2">Desired Slope Ratio (Rise : Run)</Label>}
            {(target === 'length' || target === 'rise_from_length_slope') && <div className="grid grid-cols-[1fr_auto_1fr] gap-2 items-center">
              <Input type="number" value={slopeRatioRise} onChange={e=>setSlopeRatioRise(e.target.value)} placeholder="Rise (e.g., 1)"/>
              <span className="font-bold">:</span>
              <Input type="number" value={slopeRatioRun} onChange={e=>setSlopeRatioRun(e.target.value)} placeholder="Run (e.g., 12)"/>
            </div>}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateRamp}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(resultValue || error) && (
          <Card>
            <CardHeader><CardDescription>Ramp Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {resultValue && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">{resultLabel}</p><p className="text-2xl font-bold text-primary">{resultValue}</p></div><CopyButton textToCopy={resultValue}/></div>)}
              <AlertDescription className="text-xs pt-2">Always check local building codes for ramp requirements. For example, ADA typically requires a maximum slope of 1:12 for ramps (approx 4.76°).</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: RampCalculator.tsx ======
==================================================

// ====== START OF FILE: RandomNumberGenerator.tsx ======
// File converted from TSX to TXT
// Original size: 5.69 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Shuffle, Dices } from "lucide-react";

export default function RandomNumberGenerator() {
  const [minVal, setMinVal] = useState<string>('1');
  const [maxVal, setMaxVal] = useState<string>('100');
  const [numToGenerate, setNumToGenerate] = useState<string>('1');
  const [allowDuplicates, setAllowDuplicates] = useState<boolean>(true);

  const [generatedNumbers, setGeneratedNumbers] = useState<number[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [lastGeneratedTime, setLastGeneratedTime] = useState<Date | null>(null); // To help re-trigger useEffect for new generation

  const generateNumbers = () => {
    setError(null);
    setGeneratedNumbers([]);

    const min = parseInt(minVal);
    const max = parseInt(maxVal);
    const count = parseInt(numToGenerate);

    if (isNaN(min) || isNaN(max) || isNaN(count)) {
      setError('Min, Max, and Number to Generate must be valid integers.');
      return;
    }
    if (min >= max) {
      setError('Minimum value must be less than maximum value.');
      return;
    }
    if (count <= 0) {
      setError('Number of values to generate must be positive.');
      return;
    }
    
    const rangeSize = max - min + 1;
    if (!allowDuplicates && count > rangeSize) {
      setError('Cannot generate more unique numbers than available in the range without duplicates.');
      return;
    }

    const newNumbers: number[] = [];
    if (allowDuplicates) {
      for (let i = 0; i < count; i++) {
        newNumbers.push(Math.floor(Math.random() * rangeSize) + min);
      }
    } else {
      const availableNumbers = Array.from({ length: rangeSize }, (_, i) => min + i);
      for (let i = 0; i < count; i++) {
        const randomIndex = Math.floor(Math.random() * availableNumbers.length);
        newNumbers.push(availableNumbers.splice(randomIndex, 1)[0]);
      }
    }
    setGeneratedNumbers(newNumbers);
    setLastGeneratedTime(new Date()); // Trigger re-render for visual feedback
  };

  // Consider generating on load or when options change for immediate feedback.
  // For now, manual button click.

  const resetForm = () => {
    setMinVal('1'); setMaxVal('100'); setNumToGenerate('1'); setAllowDuplicates(true);
    setGeneratedNumbers([]); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Random Number Generator</AlertTitle><AlertDescription>Generate one or more random integers within a specified range (inclusive). Choose whether to allow duplicate numbers.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Set generation parameters.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="minValRNG">Minimum Value</Label><Input id="minValRNG" type="number" value={minVal} onChange={(e) => setMinVal(e.target.value)} placeholder="e.g., 1"/></div>
              <div><Label htmlFor="maxValRNG">Maximum Value</Label><Input id="maxValRNG" type="number" value={maxVal} onChange={(e) => setMaxVal(e.target.value)} placeholder="e.g., 100"/></div>
            </div>
            <div><Label htmlFor="numToGenerateRNG">Number of Values to Generate</Label><Input id="numToGenerateRNG" type="number" value={numToGenerate} onChange={(e) => setNumToGenerate(e.target.value)} placeholder="e.g., 5"/></div>
            <div className="flex items-center space-x-2">
              <Checkbox id="allowDuplicatesRNG" checked={allowDuplicates} onCheckedChange={(checked) => setAllowDuplicates(!!checked)} />
              <Label htmlFor="allowDuplicatesRNG">Allow Duplicates</Label>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={generateNumbers}>Generate Numbers</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        <Card>
          <CardHeader><CardDescription>Generated Random Numbers</CardDescription></CardHeader>
          <CardContent>
            {error && (<Alert variant="destructive" className="mb-4"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {generatedNumbers.length > 0 ? (
              <div className="p-3 bg-primary/10 rounded-md">
                <div className="flex justify-between items-center mb-2">
                    <p className="text-sm text-muted-foreground">Results:</p>
                    <CopyButton textToCopy={generatedNumbers.join(', ')} size="sm" variant="ghost"/>
                </div>
                <div className="flex flex-wrap gap-2">
                    {generatedNumbers.map((num, index) => (
                        <span key={`${lastGeneratedTime?.toISOString()}-${index}`} className="px-3 py-1 bg-background border rounded-md text-lg font-mono shadow-sm animate-in fade-in-50">
                           {num}
                        </span>
                    ))}
                </div>
              </div>
            ) : !error && <p className="text-muted-foreground">Click "Generate Numbers" to see results.</p>}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: RandomNumberGenerator.tsx ======
==================================================

// ====== START OF FILE: RatioCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.89 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Ratio as RatioIcon } from "lucide-react";

// GCD function for simplifying ratios
const gcd = (a: number, b: number): number => (b === 0 ? a : gcd(b, a % b));

export default function RatioCalculator() {
  const [valueA, setValueA] = useState<string>('');
  const [valueB, setValueB] = useState<string>('');
  const [solveForX, setSolveForX] = useState<string>(''); // A:B = X:D or A:B = C:X

  const [simplifiedRatio, setSimplifiedRatio] = useState<string | null>(null);
  const [solvedValue, setSolvedValue] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateAndSimplifyRatio = () => {
    setError(null);
    setSimplifiedRatio(null);
    setSolvedValue(null); // Clear solved value when simplifying

    const a = parseFloat(valueA);
    const b = parseFloat(valueB);

    if (isNaN(a) || isNaN(b)) {
      setError('Please enter valid numbers for both Value A and Value B.');
      return;
    }
    if (a < 0 || b < 0) {
        setError('Values for ratio calculation should generally be non-negative.');
        // Allow calculation but it might be context-dependent.
    }
    if (b === 0 && a !== 0) {
        setSimplifiedRatio(`${a} : 0 (undefined or infinite depending on context)`);
        return;
    }
    if (a === 0 && b === 0){
        setSimplifiedRatio("0 : 0 (indeterminate)");
        return;
    }


    // For simplification, we ideally want integers.
    // If inputs are decimals, find a common multiplier to make them integers, then find GCD.
    // This simplification is complex. For now, let's assume users input numbers that can be reasonably simplified or show decimal ratio.
    // Simplification for integers:
    if (Number.isInteger(a) && Number.isInteger(b)) {
        const commonDivisor = gcd(Math.abs(a), Math.abs(b));
        setSimplifiedRatio(`${a / commonDivisor} : ${b / commonDivisor}`);
    } else {
        // For decimals, just show A:B or A/B : 1 (or 1 : B/A)
        if (b !== 0) {
            setSimplifiedRatio(`${(a/b).toFixed(4)} : 1 (or 1 : ${(b/a).toFixed(4)}) or raw ${a}:${b}`);
        } else {
             setSimplifiedRatio(`${a} : ${b}`); // e.g. 5:0
        }
    }
  };

  const solveForUnknown = () => {
    setError(null);
    setSolvedValue(null);
    setSimplifiedRatio(null); // Clear simplified when solving for X

    const a = parseFloat(valueA);
    const b = parseFloat(valueB);
    const xVal = parseFloat(solveForX); // This is C or D in A:B = C:X or A:B = X:D

    if (isNaN(a) || isNaN(b) || isNaN(xVal)) {
      setError('Please enter valid numbers for A, B, and the known part of the second ratio.');
      return;
    }
    if (b === 0) {
        setError("Value B cannot be zero for solving proportions (A/B = C/X or X/C).");
        return;
    }

    // Assume A:B = C:X, solving for X. User inputs C into "Solve for X" field.
    // A/B = C/X  => X = (B*C) / A
    if (a === 0) { // if A is 0, B must also be 0 for a valid ratio, or C must be 0 for X to be defined unless B is also 0
        if (b !== 0 && xVal !== 0) { setError("If A is 0, then C must be 0 for a valid proportion unless B is also 0."); return;}
        if (b === 0 && xVal !== 0) { setError("0:0 ratio can match X:Y only if X and Y are also 0 or related by same factor."); return;}
        // If A=0, B!=0, then C must be 0. X can be anything (0/B = 0/X). Default to 0? Or undefined.
        setSolvedValue("X can be any non-zero if C=0, or X=0 if C!=0 and A=0,B!=0 (Context specific).");
        return;
    }

    const unknownX = (b * xVal) / a;
    setSolvedValue(unknownX.toFixed(4));
  };
  
  const resetForm = () => {
    setValueA(''); setValueB(''); setSolveForX('');
    setSimplifiedRatio(null); setSolvedValue(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Ratio Calculator</AlertTitle><AlertDescription>Simplify ratios (A:B) or solve for an unknown value (X) in a proportion like A:B = C:X or A:B = X:D.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter ratio values.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="valueA">Value A</Label><Input id="valueA" type="number" value={valueA} onChange={(e) => setValueA(e.target.value)} placeholder="e.g., 2"/></div>
              <div><Label htmlFor="valueB">Value B</Label><Input id="valueB" type="number" value={valueB} onChange={(e) => setValueB(e.target.value)} placeholder="e.g., 4"/></div>
            </div>
            <Button onClick={calculateAndSimplifyRatio} className="w-full">Simplify Ratio A:B</Button>
            <div className="border-t pt-4 mt-4 space-y-2">
                <Label htmlFor="solveForX" className="font-semibold">Solve for X in Proportion A : B = C : X (enter C below)</Label>
                 <Input id="solveForX" type="number" value={solveForX} onChange={(e) => setSolveForX(e.target.value)} placeholder="Enter C or D value"/>
                 <p className="text-xs text-muted-foreground">If A:B = C:X, enter C. If A:B = X:D, enter D (and mentally swap C with X for solving).</p>
                <Button onClick={solveForUnknown} className="w-full">Solve for X</Button>
            </div>
          </CardContent>
          <CardFooter><Button variant="outline" onClick={resetForm} className="w-full">Reset All</Button></CardFooter>
        </Card>
        <Card>
          <CardHeader><CardDescription>Results</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {simplifiedRatio && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Simplified Ratio (A:B)</p><div className="flex justify-between items-center"><p className="text-xl font-semibold">{simplifiedRatio}</p><CopyButton textToCopy={simplifiedRatio} size="sm" variant="ghost"/></div></div>)}
            {solvedValue && (<div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">Solved Value for X</p><div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{solvedValue}</p><CopyButton textToCopy={solvedValue} size="sm" variant="ghost"/></div></div>)}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: RatioCalculator.tsx ======
==================================================

// ====== START OF FILE: RationalIrrationalNumberChecker.tsx ======
// File converted from TSX to TXT
// Original size: 6.03 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Binary, HelpCircle } from "lucide-react";

type NumberTypeResult = 'Rational' | 'Irrational' | 'Potentially Rational (Terminating/Repeating Decimal)' | 'Indeterminate / Non-Numeric' | 'Known Irrational Constant';

export default function RationalIrrationalNumberChecker() {
  const [numberInput, setNumberInput] = useState<string>('');
  const [resultType, setResultType] = useState<NumberTypeResult | null>(null);
  const [explanation, setExplanation] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const checkNumberType = () => {
    setError(null); setResultType(null); setExplanation(null);
    const input = numberInput.trim().toLowerCase();
    if (input === '') { setError('Please enter a number or mathematical constant.'); return; }

    // Check for known irrational constants
    if (input === 'pi' || input === 'π') {
      setResultType('Known Irrational Constant');
      setExplanation('Pi (π) is a well-known transcendental, and therefore irrational, number.');
      return;
    }
    if (input === 'e') {
      setResultType('Known Irrational Constant');
      setExplanation('Euler\'s number (e) is a well-known transcendental, and therefore irrational, number.');
      return;
    }
    // Add sqrt(2) or similar if needed, e.g. input "sqrt(2)"

    const num = parseFloat(input);
    if (isNaN(num)) {
      // Check if it's a fraction like "3/4"
      const fractionParts = input.split('/');
      if (fractionParts.length === 2) {
        const numerator = parseInt(fractionParts[0]);
        const denominator = parseInt(fractionParts[1]);
        if (!isNaN(numerator) && !isNaN(denominator) && denominator !== 0) {
          setResultType('Rational');
          setExplanation(`Can be expressed as the fraction ${numerator}/${denominator}.`);
          return;
        }
      }
      setResultType('Indeterminate / Non-Numeric');
      setError(`Input "${input}" is not recognized as a standard number or implemented constant.`);
      return;
    }

    // Check if it's an integer (all integers are rational)
    if (Number.isInteger(num)) {
      setResultType('Rational');
      setExplanation('Integers are rational numbers (can be expressed as N/1).');
      return;
    }

    // Check for terminating decimals (a strong indicator of rationality)
    // If the number string has a decimal part and it's finite
    if (input.includes('.')) {
        const decimalPart = input.split('.')[1];
        if (decimalPart && decimalPart.length < 16) { // Arbitrary limit for "terminating" in practice for JS floats
            setResultType('Potentially Rational (Terminating/Repeating Decimal)');
            setExplanation('Terminating decimals are rational. For very long or non-terminating non-repeating decimals, irrationality is possible but hard to prove programmatically for arbitrary numbers.');
            return;
        }
    }
    
    // At this point, it's a non-integer float. Proving irrationality for arbitrary floats is hard.
    // We can only say it's potentially rational if it terminates (handled above) or repeats.
    // True irrationality like for sqrt(2) not from its decimal representation.
    setResultType('Potentially Rational (Terminating/Repeating Decimal)'); // Or could say "Likely Rational / Cannot Determine Irrationality"
    setExplanation('The number is a decimal. Terminating or repeating decimals are rational. Proving irrationality for arbitrary non-terminating, non-repeating decimals computationally is complex.');

  };

  const resetForm = () => {
    setNumberInput(''); setResultType(null); setExplanation(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4"/>
        <AlertTitle>Rational/Irrational Number Checker (Heuristic)</AlertTitle>
        <AlertDescription>
          This tool attempts to classify a number as rational or irrational based on common properties and known constants (π, e). <strong className="font-semibold">Proving irrationality for arbitrary numbers is mathematically complex.</strong> This calculator uses heuristics for decimal inputs.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter a number or constant (e.g., 3.14, 2/3, pi, e).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="numberInputRational">Number or Constant</Label><Input id="numberInputRational" value={numberInput} onChange={e=>setNumberInput(e.target.value)} placeholder="e.g., 0.5, 1/3, pi, e, sqrt(2)"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={checkNumberType}>Check Number</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(resultType || error) && (
          <Card>
            <CardHeader><CardDescription>Number Classification</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {resultType && (<div className="p-3 bg-primary/10 rounded-md">
                <p className="text-sm text-muted-foreground">Input: {numberInput}</p>
                <p className="text-xl font-bold text-primary">{resultType}</p>
                {explanation && <p className="text-xs text-muted-foreground mt-1">{explanation}</p>}
              </div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: RationalIrrationalNumberChecker.tsx ======
==================================================

// ====== START OF FILE: RealEstateCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.32 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Building } from "lucide-react";

// Simplified Rental Yield: (Annual Rental Income / Property Value) * 100
// Or a basic cash flow: Monthly Rent - Monthly Expenses (PITI, HOA, Maintenance)

export default function RealEstateCalculator() {
  const [propertyValue, setPropertyValue] = useState<string>('');
  const [monthlyRent, setMonthlyRent] = useState<string>('');
  const [monthlyExpenses, setMonthlyExpenses] = useState<string>(''); // PITI, HOA, repairs etc.

  const [annualRentalYield, setAnnualRentalYield] = useState<string | null>(null);
  const [monthlyCashFlow, setMonthlyCashFlow] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateRealEstateMetrics = () => {
    setError(null);
    setAnnualRentalYield(null);
    setMonthlyCashFlow(null);

    const propVal = parseFloat(propertyValue);
    const rentM = parseFloat(monthlyRent);
    const expensesM = parseFloat(monthlyExpenses);

    if (isNaN(propVal) || propVal <= 0 || isNaN(rentM) || rentM < 0 || isNaN(expensesM) || expensesM < 0) {
      setError('Please enter valid numbers. Property value must be positive. Rent/Expenses can be zero.');
      return;
    }

    // Annual Rental Yield
    const annualRent = rentM * 12;
    if (propVal > 0) {
      const yieldPercent = (annualRent / propVal) * 100;
      setAnnualRentalYield(`${yieldPercent.toFixed(2)}%`);
    } else {
      setAnnualRentalYield("N/A (Property Value is zero)");
    }
    
    // Monthly Cash Flow
    const cashFlow = rentM - expensesM;
    setMonthlyCashFlow(cashFlow.toFixed(2));
  };
  
  const resetForm = () => {
    setPropertyValue(''); setMonthlyRent(''); setMonthlyExpenses('');
    setAnnualRentalYield(null); setMonthlyCashFlow(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Real Estate Investment Metrics (Simplified)</AlertTitle><AlertDescription>Calculate basic metrics like potential Annual Rental Yield and Monthly Cash Flow for an investment property. This is a simplified model.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter property financial details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="propertyValueRE">Property Value / Purchase Price ($)</Label><Input id="propertyValueRE" type="number" value={propertyValue} onChange={(e) => setPropertyValue(e.target.value)} placeholder="e.g., 250000"/></div>
            <div><Label htmlFor="monthlyRentRE">Gross Monthly Rent ($)</Label><Input id="monthlyRentRE" type="number" value={monthlyRent} onChange={(e) => setMonthlyRent(e.target.value)} placeholder="e.g., 1800"/></div>
            <div><Label htmlFor="monthlyExpensesRE">Total Monthly Operating Expenses ($)</Label><Input id="monthlyExpensesRE" type="number" value={monthlyExpenses} onChange={(e) => setMonthlyExpenses(e.target.value)} placeholder="e.g., 1200 (PITI, HOA, maintenance)"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateRealEstateMetrics}>Calculate Metrics</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(annualRentalYield || monthlyCashFlow || error) && (
          <Card>
            <CardHeader><CardDescription>Investment Analysis (Simplified)</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {annualRentalYield && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Est. Annual Rental Yield</p><div className="flex justify-between items-center"><p className="font-semibold">{annualRentalYield}</p><CopyButton textToCopy={annualRentalYield} size="sm" variant="ghost"/></div></div>)}
              {monthlyCashFlow && (
                <div className={`p-2 rounded-md ${parseFloat(monthlyCashFlow) >= 0 ? 'bg-primary/10' : 'bg-red-500/10'}`}>
                  <p className={`text-sm ${parseFloat(monthlyCashFlow) >= 0 ? 'text-muted-foreground' : 'text-red-700 dark:text-red-400'}`}>Est. Monthly Cash Flow</p>
                  <div className="flex justify-between items-center"><p className={`text-xl font-bold ${parseFloat(monthlyCashFlow) >= 0 ? 'text-primary' : 'text-red-600 dark:text-red-500'}`}>${monthlyCashFlow}</p><CopyButton textToCopy={monthlyCashFlow} size="sm" variant="ghost"/></div>
                </div>
              )}
              <AlertDescription className="text-xs pt-2">These are gross estimates before taxes on rental income and not accounting for vacancies or appreciation/depreciation.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: RealEstateCalculator.tsx ======
==================================================

// ====== START OF FILE: RecipeCostCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.69 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { PlusCircle, Trash2, DollarSign } from 'lucide-react';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info } from "lucide-react";

interface Ingredient {
  id: string;
  name: string;
  itemPrice: string;
  itemQuantity: string;
  itemUnit: string;
  recipeQuantity: string;
}

export default function RecipeCostCalculator() {
  const [ingredients, setIngredients] = useState<Ingredient[]>([
    { id: crypto.randomUUID(), name: '', itemPrice: '', itemQuantity: '', itemUnit: 'g', recipeQuantity: '' },
  ]);
  const [servings, setServings] = useState<string>('4');
  
  const [totalRecipeCost, setTotalRecipeCost] = useState<string | null>(null);
  const [costPerServing, setCostPerServing] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleIngredientChange = (id: string, field: keyof Omit<Ingredient, 'id'>, value: string) => {
    setIngredients(prev => prev.map(ing => ing.id === id ? { ...ing, [field]: value } : ing));
  };
  
  const addIngredient = () => {
    setIngredients(prev => [...prev, { id: crypto.randomUUID(), name: '', itemPrice: '', itemQuantity: '', itemUnit: 'g', recipeQuantity: '' }]);
  };
  
  const removeIngredient = (id: string) => {
    if (ingredients.length > 1) {
      setIngredients(prev => prev.filter(ing => ing.id !== id));
    }
  };

  const calculateCost = () => {
    setError(null); setTotalRecipeCost(null); setCostPerServing(null);
    let totalCost = 0;

    for (const ing of ingredients) {
      const price = parseFloat(ing.itemPrice);
      const itemQty = parseFloat(ing.itemQuantity);
      const recipeQty = parseFloat(ing.recipeQuantity);

      if (!ing.name.trim() || isNaN(price) || price < 0 || isNaN(itemQty) || itemQty <= 0 || isNaN(recipeQty) || recipeQty < 0) {
        setError(`Invalid or incomplete input for "${ing.name || 'Unnamed Ingredient'}". Please fill all fields with valid numbers.`);
        return;
      }
      const costPerUnit = price / itemQty;
      totalCost += costPerUnit * recipeQty;
    }
    
    setTotalRecipeCost(totalCost.toFixed(2));
    
    const numServings = parseInt(servings);
    if (isNaN(numServings) || numServings <= 0) {
      setError("Number of servings must be a positive integer.");
      return;
    }
    setCostPerServing((totalCost / numServings).toFixed(2));
  };

  const resetForm = () => {
    setIngredients([{ id: crypto.randomUUID(), name: '', itemPrice: '', itemQuantity: '', itemUnit: 'g', recipeQuantity: '' }]);
    setServings('4');
    setTotalRecipeCost(null); setCostPerServing(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Recipe Cost Calculator</AlertTitle><AlertDescription>Calculate the total cost of a recipe and the cost per serving. Ensure all quantity and unit fields are consistent (e.g., if you buy in 'g', use 'g' for the recipe quantity).</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardDescription>List your ingredients and recipe details.</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {ingredients.map((ing, index) => (
              <div key={ing.id} className="p-3 border rounded-md space-y-2">
                <div className="flex justify-between items-center">
                  <Input type="text" placeholder={`Ingredient ${index+1}`} value={ing.name} onChange={e=>handleIngredientChange(ing.id, 'name', e.target.value)} className="h-9 font-semibold text-sm"/>
                  <Button variant="ghost" size="icon" onClick={() => removeIngredient(ing.id)} disabled={ingredients.length <= 1} className="h-8 w-8"><Trash2 className="h-4 w-4 text-destructive"/></Button>
                </div>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                  <div><Label htmlFor={`price-${ing.id}`} className="text-xs">Item Price ($)</Label><Input id={`price-${ing.id}`} type="number" value={ing.itemPrice} onChange={e=>handleIngredientChange(ing.id, 'itemPrice', e.target.value)} placeholder="e.g., 4.99"/></div>
                  <div><Label htmlFor={`itemqty-${ing.id}`} className="text-xs">Item Qty</Label><Input id={`itemqty-${ing.id}`} type="number" value={ing.itemQuantity} onChange={e=>handleIngredientChange(ing.id, 'itemQuantity', e.target.value)} placeholder="e.g., 500"/></div>
                  <div><Label htmlFor={`recipeqty-${ing.id}`} className="text-xs">Recipe Qty</Label><Input id={`recipeqty-${ing.id}`} type="number" value={ing.recipeQuantity} onChange={e=>handleIngredientChange(ing.id, 'recipeQuantity', e.target.value)} placeholder="e.g., 150"/></div>
                  <div><Label htmlFor={`unit-${ing.id}`} className="text-xs">Unit</Label><Input id={`unit-${ing.id}`} value={ing.itemUnit} onChange={e=>handleIngredientChange(ing.id, 'itemUnit', e.target.value)} placeholder="e.g., g, oz, items"/></div>
                </div>
              </div>
            ))}
            <Button variant="outline" size="sm" onClick={addIngredient}><PlusCircle className="mr-2 h-4 w-4"/> Add Ingredient</Button>
          </CardContent>
          <CardFooter><Button onClick={calculateCost} className="w-full md:w-auto">Calculate Recipe Cost</Button></CardFooter>
        </Card>
        
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Cost Summary</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            <div><Label htmlFor="servings">Number of Servings</Label><Input id="servings" type="number" value={servings} onChange={e=>setServings(e.target.value)} placeholder="e.g., 4"/></div>
            {error && <Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>}
            {totalRecipeCost && <div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Recipe Cost</p><p className="font-semibold">${totalRecipeCost}</p></div>}
            {costPerServing && <div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">Cost Per Serving</p><p className="font-bold text-xl text-primary">${costPerServing}</p></div>}
          </CardContent>
          <CardFooter><Button variant="outline" onClick={resetForm} className="w-full">Reset</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: RecipeCostCalculator.tsx ======
==================================================

// ====== START OF FILE: RecipeSuggester.tsx ======
// File converted from TSX to TXT
// Original size: 5.42 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardDescription, CardTitle, CardFooter } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Loader2, CookingPot, Utensils } from "lucide-react";
import { suggestRecipe, type RecipeSuggestionInput, type RecipeSuggestionOutput } from '@/ai/flows/recipe-suggester';

export default function RecipeSuggester() {
  const [ingredients, setIngredients] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [recipe, setRecipe] = useState<RecipeSuggestionOutput | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);
    setRecipe(null);
    
    const ingredientList = ingredients.split(',').map(s => s.trim()).filter(Boolean);
    if (ingredientList.length === 0) {
      setError("Please enter at least one ingredient.");
      setIsLoading(false);
      return;
    }

    try {
      const input: RecipeSuggestionInput = { ingredients: ingredientList };
      const suggestedRecipe = await suggestRecipe(input);
      setRecipe(suggestedRecipe);
    } catch (err: any) {
      setError(err.message || "An unexpected error occurred.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-6">
       <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>AI-Powered Recipe Suggester</AlertTitle>
        <AlertDescription>
          Enter the ingredients you have on hand, and our AI will suggest a recipe for you! The more ingredients you list, the better the suggestion.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-1">
          <form onSubmit={handleSubmit}>
            <CardHeader><CardDescription>List your ingredients below.</CardDescription></CardHeader>
            <CardContent>
              <Label htmlFor="ingredients">Ingredients (comma-separated)</Label>
              <Textarea
                id="ingredients"
                value={ingredients}
                onChange={(e) => setIngredients(e.target.value)}
                placeholder="e.g., chicken breast, rice, broccoli, soy sauce"
                rows={5}
                disabled={isLoading}
              />
            </CardContent>
            <CardFooter>
              <Button type="submit" disabled={isLoading} className="w-full">
                {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <CookingPot className="mr-2 h-4 w-4" />}
                {isLoading ? 'Thinking...' : 'Suggest a Recipe'}
              </Button>
            </CardFooter>
          </form>
        </Card>

        <Card className="lg:col-span-2">
          <CardHeader>
            <CardTitle className="font-headline">Recipe Suggestion</CardTitle>
          </CardHeader>
          <CardContent>
            {error && <Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>}
            {!recipe && !isLoading && !error && <p className="text-muted-foreground">Your recipe suggestion will appear here.</p>}
            {isLoading && <div className="flex items-center justify-center py-8"><Loader2 className="h-8 w-8 animate-spin text-primary" /></div>}
            
            {recipe && (
              <div className="space-y-4">
                <h3 className="text-2xl font-bold text-primary">{recipe.recipeName}</h3>
                <p className="text-muted-foreground italic">{recipe.description}</p>
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-2 text-center text-sm">
                  <div className="p-2 bg-muted rounded-md"><strong>Prep:</strong> {recipe.prepTime}</div>
                  <div className="p-2 bg-muted rounded-md"><strong>Cook:</strong> {recipe.cookTime}</div>
                  <div className="p-2 bg-muted rounded-md"><strong>Servings:</strong> {recipe.servings}</div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <h4 className="font-semibold mb-2">Ingredients</h4>
                    <ul className="list-disc list-inside text-sm space-y-1">
                      {recipe.ingredients.map((ing, i) => <li key={i}><strong>{ing.quantity}</strong> {ing.name}</li>)}
                    </ul>
                     {recipe.missingItems && recipe.missingItems.length > 0 && (
                      <div className="mt-2 text-xs text-muted-foreground">
                        <p><strong>You might also need:</strong> {recipe.missingItems.join(', ')}</p>
                      </div>
                    )}
                  </div>
                   <div>
                    <h4 className="font-semibold mb-2">Instructions</h4>
                    <ol className="list-decimal list-inside text-sm space-y-2">
                      {recipe.instructions.map((step, i) => <li key={i}>{step}</li>)}
                    </ol>
                  </div>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: RecipeSuggester.tsx ======
==================================================

// ====== START OF FILE: RefinancingCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 10.37 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Repeat } from "lucide-react";

export default function RefinancingCalculator() {
  // Current Loan
  const [currentBalance, setCurrentBalance] = useState<string>('');
  const [currentInterestRate, setCurrentInterestRate] = useState<string>(''); // %
  const [currentRemainingTerm, setCurrentRemainingTerm] = useState<string>(''); // months
  const [currentMonthlyPayment, setCurrentMonthlyPayment] = useState<string | null>(null); // Auto-calc or user input

  // New Loan
  const [newInterestRate, setNewInterestRate] = useState<string>(''); // %
  const [newLoanTerm, setNewLoanTerm] = useState<string>(''); // months
  const [closingCosts, setClosingCosts] = useState<string>('0'); // $

  // Results
  const [newMonthlyPayment, setNewMonthlyPayment] = useState<string | null>(null);
  const [monthlySavings, setMonthlySavings] = useState<string | null>(null);
  const [totalSavings, setTotalSavings] = useState<string | null>(null); // Simplified: doesn't account for changed term life savings
  const [error, setError] = useState<string | null>(null);

  const calculatePayment = (balance: number, ratePercent: number, termMonths: number): number | null => {
    if (balance <= 0 || ratePercent < 0 || termMonths <= 0) return null;
    const monthlyRate = ratePercent / 100 / 12;
    if (monthlyRate === 0) return balance / termMonths;
    const payment = balance * (monthlyRate * Math.pow(1 + monthlyRate, termMonths)) / (Math.pow(1 + monthlyRate, termMonths) - 1);
    return isNaN(payment) || !isFinite(payment) ? null : payment;
  };
  
  // Auto-calculate current monthly payment if possible
  const autoCalculateCurrentPayment = () => {
      const bal = parseFloat(currentBalance);
      const rate = parseFloat(currentInterestRate);
      const term = parseInt(currentRemainingTerm);
      const pmt = calculatePayment(bal,rate,term);
      if (pmt !== null) setCurrentMonthlyPayment(pmt.toFixed(2));
      else setCurrentMonthlyPayment(null);
  }


  const calculateRefinance = () => {
    setError(null);
    setNewMonthlyPayment(null);
    setMonthlySavings(null);
    setTotalSavings(null);
    // Re-calculate current payment if fields are filled
    autoCalculateCurrentPayment();
    const currentPmtVal = parseFloat(currentMonthlyPayment || '0');


    const bal = parseFloat(currentBalance);
    const newRate = parseFloat(newInterestRate);
    const newTerm = parseInt(newLoanTerm);
    const costs = parseFloat(closingCosts);
    const currTerm = parseInt(currentRemainingTerm);

    if (isNaN(bal) || bal <= 0 || isNaN(currentPmtVal) || currentPmtVal <=0 || isNaN(newRate) || newRate < 0 || isNaN(newTerm) || newTerm <= 0 || isNaN(costs) || costs < 0) {
      setError('Please enter valid positive numbers for current balance, current payment, new rate, new term. Closing costs can be zero.');
      return;
    }

    const newLoanAmount = bal + costs; // Add closing costs to new loan principal
    const calculatedNewPayment = calculatePayment(newLoanAmount, newRate, newTerm);

    if (calculatedNewPayment === null) {
      setError('Could not calculate new monthly payment. Check new loan terms.');
      return;
    }
    setNewMonthlyPayment(calculatedNewPayment.toFixed(2));

    const monthlyDiff = currentPmtVal - calculatedNewPayment;
    setMonthlySavings(monthlyDiff.toFixed(2));
    
    // Simplified total savings - this doesn't accurately reflect total interest saved over life of loan if terms change.
    // A more detailed calculation would sum total payments for both scenarios.
    // For now, just show monthly difference.
    // Example: Total interest saved = (currentPmtVal * currTerm) - (calculatedNewPayment * newTerm + costs - bal_already_paid_from_orig_loan_if_any_not_bal)
    // This is very rough. Better to focus on monthly payment change for this simplified tool.
    
    // More accurate (but still simplified) total interest comparison over *new term*:
    const totalPaidNew = (calculatedNewPayment * newTerm) + costs; // total out of pocket for new loan
    const totalInterestNew = totalPaidNew - bal;
    
    // What would have been paid on old loan over *new term* length or *remaining term*
    // Let's compare over the *shorter* of (currentRemainingTerm, newLoanTerm) for a somewhat fair look at interest
    const comparisonTerm = Math.min(currTerm, newTerm);
    let totalPaidOldOverComparisonTerm = 0;
    let remainingBalOld = bal;
    const monthlyRateOld = parseFloat(currentInterestRate)/100/12;

    for(let i=0; i< comparisonTerm; i++){
        if(remainingBalOld <=0) break;
        const interestOld = remainingBalOld * monthlyRateOld;
        const principalOld = currentPmtVal - interestOld;
        remainingBalOld -= principalOld;
        totalPaidOldOverComparisonTerm += currentPmtVal;
    }
    const totalInterestOldOverComparisonTerm = totalPaidOldOverComparisonTerm - (bal - Math.max(0,remainingBalOld));


    const totalInterestNewOverComparisonTerm = (calculatedNewPayment * comparisonTerm) + costs - bal; // Simplified interest for new loan for comparisonTerm
    
    if(isFinite(totalInterestOldOverComparisonTerm) && isFinite(totalInterestNewOverComparisonTerm)){
      const interestDiff = totalInterestOldOverComparisonTerm - totalInterestNewOverComparisonTerm;
      setTotalSavings(interestDiff.toFixed(2));
    } else {
      setTotalSavings("N/A");
    }

  };

  const resetForm = () => {
    setCurrentBalance(''); setCurrentInterestRate(''); setCurrentRemainingTerm(''); setCurrentMonthlyPayment(null);
    setNewInterestRate(''); setNewLoanTerm(''); setClosingCosts('0');
    setNewMonthlyPayment(null); setMonthlySavings(null); setTotalSavings(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Refinance Calculator (Simplified)</AlertTitle><AlertDescription>Estimate potential savings by refinancing a loan. Compares monthly payments and offers a simplified look at total interest. Does not account for all loan types or tax implications.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardTitle className="font-headline">Loan Details</CardTitle></CardHeader>
          <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
            <fieldset className="space-y-3 border p-3 rounded-md"><legend className="text-sm font-medium px-1">Current Loan</legend>
              <div><Label htmlFor="currBal">Remaining Balance ($)</Label><Input id="currBal" type="number" value={currentBalance} onChange={e=>setCurrentBalance(e.target.value)} onBlur={autoCalculateCurrentPayment}/></div>
              <div><Label htmlFor="currRate">Interest Rate (%)</Label><Input id="currRate" type="number" value={currentInterestRate} onChange={e=>setCurrentInterestRate(e.target.value)} onBlur={autoCalculateCurrentPayment}/></div>
              <div><Label htmlFor="currTerm">Remaining Term (months)</Label><Input id="currTerm" type="number" value={currentRemainingTerm} onChange={e=>setCurrentRemainingTerm(e.target.value)} onBlur={autoCalculateCurrentPayment}/></div>
              <div><Label htmlFor="currPmt">Monthly Payment ($)</Label><Input id="currPmt" type="number" value={currentMonthlyPayment || ''} onChange={e=>setCurrentMonthlyPayment(e.target.value)} placeholder="Auto-calculated or enter"/></div>
            </fieldset>
            <fieldset className="space-y-3 border p-3 rounded-md"><legend className="text-sm font-medium px-1">New (Refinance) Loan</legend>
              <div><Label htmlFor="newRate">Interest Rate (%)</Label><Input id="newRate" type="number" value={newInterestRate} onChange={e=>setNewInterestRate(e.target.value)}/></div>
              <div><Label htmlFor="newTerm">Loan Term (months)</Label><Input id="newTerm" type="number" value={newLoanTerm} onChange={e=>setNewLoanTerm(e.target.value)}/></div>
              <div><Label htmlFor="closingCosts">Closing Costs ($)</Label><Input id="closingCosts" type="number" value={closingCosts} onChange={e=>setClosingCosts(e.target.value)} placeholder="e.g., 1500"/></div>
            </fieldset>
          </CardContent>
          <CardFooter><Button onClick={calculateRefinance} className="w-full md:w-auto">Calculate Refinance</Button></CardFooter>
        </Card>
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Refinance Summary</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {newMonthlyPayment && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">New Est. Monthly Payment</p><div className="flex justify-between items-center"><p className="text-xl font-semibold">${newMonthlyPayment}</p><CopyButton textToCopy={newMonthlyPayment} size="sm" variant="ghost"/></div></div>)}
            {monthlySavings && (<div className={`p-2 rounded-md ${parseFloat(monthlySavings) >= 0 ? 'bg-green-500/10 text-green-700' : 'bg-red-500/10 text-red-700'}`}><p className="text-sm">Potential Monthly {parseFloat(monthlySavings) >= 0 ? 'Savings' : 'Increase'}</p><p className="font-semibold">${Math.abs(parseFloat(monthlySavings)).toFixed(2)}</p></div>)}
            {totalSavings && (<div className={`p-2 rounded-md ${parseFloat(totalSavings) >= 0 ? 'bg-green-500/10 text-green-700' : 'bg-red-500/10 text-red-700'}`}><p className="text-sm">Potential Total Interest {parseFloat(totalSavings) >= 0 ? 'Saved' : 'Increase'} (Simplified)</p><p className="font-semibold">${Math.abs(parseFloat(totalSavings)).toFixed(2)}</p></div>)}
            <AlertDescription className="text-xs pt-2">Total savings are highly dependent on loan terms and how long you keep the new loan. Consider break-even point for closing costs.</AlertDescription>
          </CardContent>
          <CardFooter><Button variant="outline" onClick={resetForm} className="w-full">Reset</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: RefinancingCalculator.tsx ======
==================================================

// ====== START OF FILE: RefineCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.69 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Filter, PlusCircle, Trash2 } from "lucide-react";

type FilterOperator = 'equals' | 'not_equals' | 'greater_than' | 'less_than' | 'greater_than_equal' | 'less_than_equal' | 'contains' | 'not_contains';

interface FilterItem {
  id: string;
  field: string;
  operator: FilterOperator;
  value: string;
}

const exampleData = JSON.stringify([
  {"name": "Laptop", "category": "Electronics", "price": 1200, "stock": 15},
  {"name": "Mouse", "category": "Electronics", "price": 25, "stock": 150},
  {"name": "Desk Chair", "category": "Furniture", "price": 150, "stock": 40},
  {"name": "Monitor", "category": "Electronics", "price": 300, "stock": 75}
], null, 2);

export default function RefineCalculator() {
  const [dataInput, setDataInput] = useState<string>(exampleData);
  const [filters, setFilters] = useState<FilterItem[]>([
    { id: crypto.randomUUID(), field: 'price', operator: 'greater_than', value: '100' },
  ]);
  const [filteredResult, setFilteredResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleFilterChange = (id: string, field: keyof Omit<FilterItem, 'id'>, value: string) => {
    setFilters(prev => prev.map(f => (f.id === id ? { ...f, [field]: value } : f)));
  };

  const addFilter = () => {
    setFilters(prev => [...prev, { id: crypto.randomUUID(), field: '', operator: 'equals', value: '' }]);
  };

  const removeFilter = (id: string) => {
    if (filters.length > 1) {
      setFilters(prev => prev.filter(f => f.id !== id));
    }
  };

  const applyFilters = () => {
    setError(null);
    setFilteredResult(null);

    let parsedData: any[];
    try {
      parsedData = JSON.parse(dataInput);
      if (!Array.isArray(parsedData)) throw new Error();
    } catch {
      setError("Invalid input data. Please provide a valid JSON array.");
      return;
    }
    
    try {
      const result = parsedData.filter(item => {
        return filters.every(filter => {
          if (!filter.field) return true; // Skip empty filters
          const itemValue = item[filter.field];
          const filterValue = filter.value;
          
          const numericItemValue = parseFloat(itemValue);
          const numericFilterValue = parseFloat(filterValue);
          
          const isNumericComparison = !isNaN(numericItemValue) && !isNaN(numericFilterValue);

          switch (filter.operator) {
            case 'equals': return String(itemValue) === filterValue;
            case 'not_equals': return String(itemValue) !== filterValue;
            case 'greater_than': return isNumericComparison && numericItemValue > numericFilterValue;
            case 'less_than': return isNumericComparison && numericItemValue < numericFilterValue;
            case 'greater_than_equal': return isNumericComparison && numericItemValue >= numericFilterValue;
            case 'less_than_equal': return isNumericComparison && numericItemValue <= numericFilterValue;
            case 'contains': return String(itemValue).toLowerCase().includes(filterValue.toLowerCase());
            case 'not_contains': return !String(itemValue).toLowerCase().includes(filterValue.toLowerCase());
            default: return true;
          }
        });
      });
      setFilteredResult(JSON.stringify(result, null, 2));
    } catch (e: any) {
        setError("An error occurred during filtering. Check your filter logic and data fields.");
    }
  };

  const resetForm = () => {
    setDataInput(exampleData);
    setFilters([{ id: crypto.randomUUID(), field: 'price', operator: 'greater_than', value: '100' }]);
    setFilteredResult(null);
    setError(null);
  };
  
  const operatorLabels: Record<FilterOperator, string> = {
    equals: '=', not_equals: '≠', greater_than: '>', less_than: '<',
    greater_than_equal: '≥', less_than_equal: '≤', contains: 'contains', not_contains: 'does not contain'
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Data Filtering Tool</AlertTitle><AlertDescription>Input a JSON array of data, define your criteria, and filter the results. A powerful way to refine lists based on specific attributes.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="font-headline">Input & Filters</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="dataInput">Input Data (JSON Array)</Label>
              <Textarea id="dataInput" value={dataInput} onChange={e => setDataInput(e.target.value)} rows={8} className="font-mono text-xs"/>
            </div>
            <div className="space-y-3">
              <Label className="font-medium">Filter Criteria</Label>
              {filters.map((filter, index) => (
                <div key={filter.id} className="grid grid-cols-[1fr_auto_1fr_auto] gap-2 items-center">
                  <Input placeholder="Field (e.g., price)" value={filter.field} onChange={e => handleFilterChange(filter.id, 'field', e.target.value)} className="h-9"/>
                  <Select value={filter.operator} onValueChange={(v: FilterOperator) => handleFilterChange(filter.id, 'operator', v)}>
                    <SelectTrigger className="w-[100px] h-9"><SelectValue/></SelectTrigger>
                    <SelectContent>{Object.entries(operatorLabels).map(([key, label]) => <SelectItem key={key} value={key}>{label}</SelectItem>)}</SelectContent>
                  </Select>
                  <Input placeholder="Value" value={filter.value} onChange={e => handleFilterChange(filter.id, 'value', e.target.value)} className="h-9"/>
                  <Button variant="ghost" size="icon" onClick={() => removeFilter(filter.id)} disabled={filters.length === 1} className="h-9 w-9"><Trash2 className="h-4 w-4 text-destructive"/></Button>
                </div>
              ))}
              <Button variant="outline" size="sm" onClick={addFilter}><PlusCircle className="mr-2 h-4 w-4"/> Add Filter</Button>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={applyFilters}><Filter className="mr-2"/>Apply Filters</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>
        
        <Card>
            <CardHeader><CardTitle className="font-headline">Filtered Results</CardTitle></CardHeader>
            <CardContent>
                 {error && (<Alert variant="destructive" className="mb-4"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
                 {filteredResult ? (
                    <div>
                         <Textarea value={filteredResult} readOnly rows={15} className="font-mono text-xs bg-muted/50"/>
                         <CopyButton textToCopy={filteredResult} buttonText="Copy Results" className="w-full mt-2"/>
                    </div>
                 ) : !error && <p className="text-muted-foreground text-sm">Results will appear here after applying filters.</p>}
            </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: RefineCalculator.tsx ======
==================================================

// ====== START OF FILE: RentalPropertyCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8.03 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Building, DollarSign } from "lucide-react";

// Calculates simple cash flow and Cap Rate for a rental property.

export default function RentalPropertyCalculator() {
  const [propertyPrice, setPropertyPrice] = useState<string>('');
  const [monthlyRentalIncome, setMonthlyRentalIncome] = useState<string>('');
  const [annualOperatingExpenses, setAnnualOperatingExpenses] = useState<string>(''); // Includes PITI, management, vacancy, repairs if desired

  const [netOperatingIncome, setNetOperatingIncome] = useState<string | null>(null); // Annual NOI
  const [cashFlowMonthly, setCashFlowMonthly] = useState<string | null>(null); // If considering mortgage
  const [capRate, setCapRate] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Optional: Mortgage details for cash flow
  const [loanAmountRP, setLoanAmountRP] = useState<string>('');
  const [interestRateRP, setInterestRateRP] = useState<string>('');
  const [loanTermRP, setLoanTermRP] = useState<string>('30');

  const calculateMetrics = () => {
    setError(null);
    setNetOperatingIncome(null);
    setCashFlowMonthly(null);
    setCapRate(null);

    const price = parseFloat(propertyPrice);
    const rentM = parseFloat(monthlyRentalIncome);
    const opExAnnual = parseFloat(annualOperatingExpenses);

    // Optional mortgage
    const loan = parseFloat(loanAmountRP) || 0;
    const rate = parseFloat(interestRateRP) / 100 || 0;
    const term = parseInt(loanTermRP) || 30;


    if (isNaN(price) || price <= 0 || isNaN(rentM) || rentM < 0 || isNaN(opExAnnual) || opExAnnual < 0) {
      setError('Valid property price (>0), monthly rent (>=0), and annual operating expenses (>=0) required.');
      return;
    }
    if (loan > 0 && (isNaN(rate) || rate <0 || isNaN(term) || term <=0)) {
        setError('If including mortgage, please enter valid loan amount, interest rate, and term.');
        return;
    }


    const annualGrossRent = rentM * 12;
    const noi = annualGrossRent - opExAnnual;
    setNetOperatingIncome(noi.toFixed(2));

    if (price > 0) {
      const cap = (noi / price) * 100;
      setCapRate(cap.toFixed(2));
    } else {
      setCapRate("N/A (Price is zero)");
    }

    // Cash flow if mortgage details provided
    let monthlyPandI = 0;
    if (loan > 0 && rate >= 0 && term > 0) {
      const monthlyRate = rate / 12;
      const numPayments = term * 12;
      if (monthlyRate === 0) {
        monthlyPandI = loan / numPayments;
      } else {
        monthlyPandI = loan * (monthlyRate * Math.pow(1 + monthlyRate, numPayments)) / (Math.pow(1 + monthlyRate, numPayments) - 1);
      }
    }
    
    const monthlyOpEx = opExAnnual / 12; // Assumes OpEx doesn't include P&I
    // This cashflow definition is simplified. A better way is NOI/12 - P&I.
    // If OpEx already includes PITI, then CashFlow = Rent - OpEx.
    // Let's assume OpEx *does not* include P&I from the new loan for this property.
    const cashflow = rentM - monthlyOpEx - monthlyPandI;
    setCashFlowMonthly(cashflow.toFixed(2));

  };

  const resetForm = () => {
    setPropertyPrice(''); setMonthlyRentalIncome(''); setAnnualOperatingExpenses('');
    setLoanAmountRP(''); setInterestRateRP(''); setLoanTermRP('30');
    setNetOperatingIncome(null); setCashFlowMonthly(null); setCapRate(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Rental Property Analysis (Simplified)</AlertTitle><AlertDescription>Estimate Net Operating Income (NOI), Capitalization Rate (Cap Rate), and simple Monthly Cash Flow for a rental property. Does not include taxes on income or detailed financing nuances.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardTitle className="font-headline">Property &amp; Financial Details</CardTitle></CardHeader>
          <CardContent className="space-y-6">
             <fieldset className="border p-4 rounded-md space-y-3"><legend className="text-sm font-medium px-1">Property &amp; Income</legend>
                <div><Label htmlFor="propertyPriceRP">Property Purchase Price ($)</Label><Input id="propertyPriceRP" type="number" value={propertyPrice} onChange={e=>setPropertyPrice(e.target.value)} placeholder="e.g., 200000"/></div>
                <div><Label htmlFor="monthlyRentRP">Gross Monthly Rental Income ($)</Label><Input id="monthlyRentRP" type="number" value={monthlyRentalIncome} onChange={e=>setMonthlyRentalIncome(e.target.value)} placeholder="e.g., 1500"/></div>
             </fieldset>
             <fieldset className="border p-4 rounded-md space-y-3"><legend className="text-sm font-medium px-1">Expenses &amp; (Optional) Loan</legend>
                <div><Label htmlFor="annualOpExRP">Total Annual Operating Expenses ($)</Label><Input id="annualOpExRP" type="number" value={annualOperatingExpenses} onChange={e=>setAnnualOperatingExpenses(e.target.value)} placeholder="e.g., 6000 (taxes, insurance, maint., vacancy, mgmt)"/></div>
                <p className="text-xs text-muted-foreground">For cash flow, optionally add mortgage details below for THIS property (if financed):</p>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
                    <div><Label htmlFor="loanAmountRP" className="text-xs">Loan Amt ($)</Label><Input id="loanAmountRP" type="number" value={loanAmountRP} onChange={e=>setLoanAmountRP(e.target.value)} placeholder="e.g., 160000"/></div>
                    <div><Label htmlFor="interestRateRP" className="text-xs">Rate (%)</Label><Input id="interestRateRP" type="number" value={interestRateRP} onChange={e=>setInterestRateRP(e.target.value)} placeholder="e.g., 7.0"/></div>
                    <div><Label htmlFor="loanTermRP" className="text-xs">Term (Yrs)</Label><Input id="loanTermRP" type="number" value={loanTermRP} onChange={e=>setLoanTermRP(e.target.value)} placeholder="e.g., 30"/></div>
                </div>
            </fieldset>
          </CardContent>
          <CardFooter><Button onClick={calculateMetrics} className="w-full md:w-auto">Analyze Property</Button></CardFooter>
        </Card>
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Investment Metrics</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {netOperatingIncome && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Annual Net Operating Income (NOI)</p><p className="font-semibold">${netOperatingIncome}</p></div>)}
            {capRate && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Capitalization Rate (Cap Rate)</p><p className="font-semibold">{capRate}%</p></div>)}
            {cashFlowMonthly && (
              <div className={`p-2 rounded-md ${parseFloat(cashFlowMonthly) >= 0 ? 'bg-green-500/10 text-green-700' : 'bg-red-500/10 text-red-700'}`}>
                <p className="text-sm">Estimated Monthly Cash Flow</p>
                <div className="flex justify-between items-center"><p className={`text-xl font-bold`}>${cashFlowMonthly}</p><CopyButton textToCopy={cashFlowMonthly} size="sm" variant="ghost"/></div>
                 <p className="text-xs mt-1"> (After OpEx & P&amp;I if loan details provided) </p>
              </div>
            )}
          </CardContent>
          <CardFooter><Button variant="outline" onClick={resetForm} className="w-full">Reset</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: RentalPropertyCalculator.tsx ======
==================================================

// ====== START OF FILE: RentalYieldCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.43 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Percent, Building } from "lucide-react";

// Rental Yield = (Annual Rental Income / Property Value) * 100
// Gross Yield = (Annual Gross Rent / Property Value) * 100
// Net Yield = ( (Annual Gross Rent - Annual Operating Expenses) / Property Value ) * 100

export default function RentalYieldCalculator() {
  const [propertyValueRY, setPropertyValueRY] = useState<string>('');
  const [annualGrossRentRY, setAnnualGrossRentRY] = useState<string>('');
  const [annualOperatingExpensesRY, setAnnualOperatingExpensesRY] = useState<string>('0');

  const [grossYield, setGrossYield] = useState<string | null>(null);
  const [netYield, setNetYield] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateYields = () => {
    setError(null);
    setGrossYield(null);
    setNetYield(null);

    const propVal = parseFloat(propertyValueRY);
    const grossRent = parseFloat(annualGrossRentRY);
    const opEx = parseFloat(annualOperatingExpensesRY);

    if (isNaN(propVal) || propVal <= 0 || isNaN(grossRent) || grossRent < 0 || isNaN(opEx) || opEx < 0) {
      setError('Property Value must be positive. Rent & Expenses can be zero but should be valid numbers.');
      return;
    }
    if (opEx > grossRent && propVal > 0) { // Operating expenses exceed gross rent
        // This is possible, net yield will be negative.
    }

    const calculatedGrossYield = (grossRent / propVal) * 100;
    setGrossYield(calculatedGrossYield.toFixed(2));

    const netAnnualIncome = grossRent - opEx;
    const calculatedNetYield = (netAnnualIncome / propVal) * 100;
    setNetYield(calculatedNetYield.toFixed(2));
  };

  const resetForm = () => {
    setPropertyValueRY('');
    setAnnualGrossRentRY('');
    setAnnualOperatingExpensesRY('0');
    setGrossYield(null);
    setNetYield(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Rental Yield Calculator</AlertTitle>
        <AlertDescription>
          Calculate the Gross and Net Rental Yield for an investment property. Helps assess profitability.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter property and income/expense details.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="propertyValueRY">Property Value / Purchase Price ($)</Label>
              <Input id="propertyValueRY" type="number" value={propertyValueRY} onChange={(e) => setPropertyValueRY(e.target.value)} placeholder="e.g., 300000" />
            </div>
            <div>
              <Label htmlFor="annualGrossRentRY">Annual Gross Rental Income ($)</Label>
              <Input id="annualGrossRentRY" type="number" value={annualGrossRentRY} onChange={(e) => setAnnualGrossRentRY(e.target.value)} placeholder="e.g., 24000 (12 x monthly rent)" />
            </div>
            <div>
              <Label htmlFor="annualOpExRY">Total Annual Operating Expenses ($)</Label>
              <Input id="annualOpExRY" type="number" value={annualOperatingExpensesRY} onChange={(e) => setAnnualOperatingExpensesRY(e.target.value)} placeholder="e.g., 7000 (taxes, insurance, repairs, etc.)" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateYields}>Calculate Yields</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(grossYield || netYield || error) && (
          <Card>
            <CardHeader><CardDescription>Rental Yield Results</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {grossYield && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Gross Rental Yield</p>
                  <div className="flex justify-between items-center"><p className="font-semibold">{grossYield}%</p><CopyButton textToCopy={grossYield} size="sm" variant="ghost"/></div>
                </div>
              )}
              {netYield && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Net Rental Yield</p>
                  <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{netYield}%</p><CopyButton textToCopy={netYield} size="sm" variant="ghost"/></div>
                </div>
              )}
               <AlertDescription className="text-xs pt-2">Net Yield considers operating expenses for a more accurate picture of return before financing costs.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: RentalYieldCalculator.tsx ======
==================================================

// ====== START OF FILE: RentAndBillSplitCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.31 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { PlusCircle, Trash2 } from 'lucide-react';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Users, ReceiptText } from "lucide-react";

interface BillItem {
  id: string;
  name: string;
  amount: number;
}

interface Roommate {
  id: string;
  name: string;
}

interface SplitResult {
    name: string;
    amountOwed: string;
}

export default function RentAndBillSplitCalculator() {
  const [totalRent, setTotalRent] = useState<string>('');
  const [bills, setBills] = useState<BillItem[]>([{ id: crypto.randomUUID(), name: 'Utilities (Gas, Electric)', amount: 0 }]);
  const [roommates, setRoommates] = useState<Roommate[]>([
    { id: crypto.randomUUID(), name: 'Roommate 1' },
    { id: crypto.randomUUID(), name: 'Roommate 2' },
  ]);
  
  const [splitResults, setSplitResults] = useState<SplitResult[] | null>(null);
  const [totalMonthlyCost, setTotalMonthlyCost] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleBillChange = (id: string, field: 'name' | 'amount', value: string) => {
    setBills(prev => prev.map(bill => bill.id === id ? { ...bill, [field]: field === 'amount' ? parseFloat(value) || 0 : value } : bill));
  };
  const addBill = () => setBills(prev => [...prev, { id: crypto.randomUUID(), name: '', amount: 0 }]);
  const removeBill = (id: string) => setBills(prev => prev.filter(bill => bill.id !== id));
  
  const handleRoommateChange = (id: string, value: string) => {
    setRoommates(prev => prev.map(rm => rm.id === id ? { ...rm, name: value } : rm));
  };
  const addRoommate = () => setRoommates(prev => [...prev, { id: crypto.randomUUID(), name: `Roommate ${prev.length + 1}` }]);
  const removeRoommate = (id: string) => {
    if (roommates.length > 1) setRoommates(prev => prev.filter(rm => rm.id !== id));
  };

  const calculateSplit = () => {
    setError(null); setSplitResults(null); setTotalMonthlyCost(null);
    const rentAmount = parseFloat(totalRent);
    if (isNaN(rentAmount) || rentAmount <= 0) {
      setError('Please enter a valid positive total rent amount.');
      return;
    }
    if (roommates.some(rm => !rm.name.trim())) {
      setError("All roommates must have a name.");
      return;
    }
    if (roommates.length === 0) {
        setError("There must be at least one roommate.");
        return;
    }

    const totalBillsAmount = bills.reduce((sum, bill) => sum + bill.amount, 0);
    const totalCost = rentAmount + totalBillsAmount;
    setTotalMonthlyCost(totalCost.toFixed(2));
    
    const amountPerPerson = totalCost / roommates.length;
    
    const results = roommates.map(rm => ({
      name: rm.name,
      amountOwed: amountPerPerson.toFixed(2),
    }));
    setSplitResults(results);
  };
  
  const resetForm = () => {
    setTotalRent('');
    setBills([{ id: crypto.randomUUID(), name: 'Utilities (Gas, Electric)', amount: 0 }]);
    setRoommates([{ id: crypto.randomUUID(), name: 'Roommate 1' },{ id: crypto.randomUUID(), name: 'Roommate 2' }]);
    setSplitResults(null); setTotalMonthlyCost(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Rent & Bill Split Calculator</AlertTitle><AlertDescription>Easily split rent and shared bills equally among roommates.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardDescription>Enter total costs and add roommates.</CardDescription></CardHeader>
          <CardContent className="space-y-6">
            <div><Label htmlFor="totalRentRBS">Total Monthly Rent ($)</Label><Input id="totalRentRBS" type="number" value={totalRent} onChange={e=>setTotalRent(e.target.value)} placeholder="e.g., 2000"/></div>
            
            <CardTitle className="font-headline text-lg border-t pt-4">Shared Bills</CardTitle>
            <div className="space-y-2 max-h-[200px] overflow-y-auto pr-2">
              {bills.map((bill) => (
                <div key={bill.id} className="flex items-center gap-2">
                  <Input type="text" placeholder="Bill Name (e.g., Internet)" value={bill.name} onChange={e => handleBillChange(bill.id, 'name', e.target.value)} className="h-9"/>
                  <Input type="number" placeholder="Amount ($)" value={bill.amount || ''} onChange={e => handleBillChange(bill.id, 'amount', e.target.value)} className="h-9 w-32"/>
                  <Button variant="ghost" size="icon" onClick={() => removeBill(bill.id)} className="h-9 w-9"><Trash2 className="h-4 w-4 text-destructive"/></Button>
                </div>
              ))}
            </div>
            <Button variant="outline" size="sm" onClick={addBill}><PlusCircle className="mr-2 h-4 w-4"/> Add Bill</Button>

            <CardTitle className="font-headline text-lg border-t pt-4">Roommates</CardTitle>
            <div className="space-y-2 max-h-[200px] overflow-y-auto pr-2">
              {roommates.map((rm) => (
                <div key={rm.id} className="flex items-center gap-2">
                  <Input type="text" placeholder="Roommate Name" value={rm.name} onChange={e => handleRoommateChange(rm.id, e.target.value)} className="h-9"/>
                  <Button variant="ghost" size="icon" onClick={() => removeRoommate(rm.id)} disabled={roommates.length <= 1} className="h-9 w-9"><Trash2 className="h-4 w-4 text-destructive"/></Button>
                </div>
              ))}
            </div>
            <Button variant="outline" size="sm" onClick={addRoommate}><PlusCircle className="mr-2 h-4 w-4"/> Add Roommate</Button>
          </CardContent>
          <CardFooter><Button onClick={calculateSplit} className="w-full md:w-auto">Calculate Split</Button></CardFooter>
        </Card>
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Split Summary</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {totalMonthlyCost && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Monthly Household Cost</p><p className="font-semibold">${totalMonthlyCost}</p></div>)}
            {splitResults && splitResults.length > 0 ? (
                splitResults.map(res => (
                    <div key={res.name} className="flex justify-between items-center p-2 bg-primary/10 rounded-md">
                        <p className="font-semibold text-primary">{res.name}</p>
                        <p className="font-bold text-primary">${res.amountOwed}</p>
                    </div>
                ))
            ) : !error && (
                <p className="text-muted-foreground text-sm">Results will appear here.</p>
            )}
          </CardContent>
           <CardFooter><Button variant="outline" onClick={resetForm} className="w-full">Reset</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: RentAndBillSplitCalculator.tsx ======
==================================================

// ====== START OF FILE: RentCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.09 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, KeyRound } from "lucide-react";

// Calculates rent affordability based on income (e.g., 30% rule)

export default function RentCalculator() {
  const [grossMonthlyIncome, setGrossMonthlyIncome] = useState<string>('');
  const [rentPercentage, setRentPercentage] = useState<string>('30'); // Common affordability guideline

  const [affordableRent, setAffordableRent] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateAffordableRent = () => {
    setError(null);
    setAffordableRent(null);

    const income = parseFloat(grossMonthlyIncome);
    const percentage = parseFloat(rentPercentage) / 100;

    if (isNaN(income) || income <= 0 || isNaN(percentage) || percentage <= 0 || percentage > 1) {
      setError('Please enter a valid positive gross monthly income and a rent percentage (e.g., 25-40%).');
      return;
    }

    const calculatedAffordableRent = income * percentage;
    setAffordableRent(calculatedAffordableRent.toFixed(2));
  };
  
  const resetForm = () => {
    setGrossMonthlyIncome('');
    setRentPercentage('30');
    setAffordableRent(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Rent Affordability Calculator</AlertTitle>
        <AlertDescription>
          Estimate an affordable monthly rent based on your gross monthly income and a desired percentage (e.g., the 25-30% rule). This is a guideline and doesn't include other debts or expenses.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your income and desired rent percentage.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="grossMonthlyIncome">Gross Monthly Income ($)</Label>
              <Input id="grossMonthlyIncome" type="number" value={grossMonthlyIncome} onChange={(e) => setGrossMonthlyIncome(e.target.value)} placeholder="e.g., 5000" />
            </div>
            <div>
              <Label htmlFor="rentPercentage">Percentage of Income for Rent (%)</Label>
              <Input id="rentPercentage" type="number" value={rentPercentage} onChange={(e) => setRentPercentage(e.target.value)} placeholder="e.g., 30 (common guideline)" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateAffordableRent}>Calculate Affordable Rent</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(affordableRent || error) && (
          <Card>
            <CardHeader><CardDescription>Affordability Estimate</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {affordableRent && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Affordable Monthly Rent</p><p className="text-2xl font-bold text-primary">${affordableRent}</p></div>
                  <CopyButton textToCopy={affordableRent} />
                </div>
              )}
              <AlertDescription className="text-xs pt-2 mt-2">Remember to also budget for utilities, food, transportation, and other living expenses.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: RentCalculator.tsx ======
==================================================

// ====== START OF FILE: RentSplitCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.92 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { PlusCircle, Trash2 } from 'lucide-react';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Users } from "lucide-react";

interface Roommate {
  id: string;
  name: string;
  income: number; // For income-based split
  // Could add roomSizeFactor or other criteria later
}

type SplitMethod = 'equally' | 'by_income'; // Add 'by_room_size' etc. later

export default function RentSplitCalculator() {
  const [totalRent, setTotalRent] = useState<string>('');
  const [roommates, setRoommates] = useState<Roommate[]>([
    { id: crypto.randomUUID(), name: 'Roommate 1', income: 0 },
    { id: crypto.randomUUID(), name: 'Roommate 2', income: 0 },
  ]);
  const [splitMethod, setSplitMethod] = useState<SplitMethod>('equally');
  
  const [splitResults, setSplitResults] = useState<Array<{ name: string; amount: string }> | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleRoommateChange = (id: string, field: keyof Omit<Roommate, 'id'>, value: string) => {
    setRoommates(prev => prev.map(rm => rm.id === id ? { ...rm, [field]: field === 'income' ? parseFloat(value) || 0 : value } : rm));
  };
  const addRoommate = () => setRoommates(prev => [...prev, { id: crypto.randomUUID(), name: `Roommate ${prev.length + 1}`, income: 0 }]);
  const removeRoommate = (id: string) => {
    if (roommates.length > 1) { // Keep at least one roommate field
      setRoommates(prev => prev.filter(rm => rm.id !== id));
    }
  };

  const calculateRentSplit = () => {
    setError(null);
    setSplitResults(null);

    const rent = parseFloat(totalRent);
    if (isNaN(rent) || rent <= 0) {
      setError('Please enter a valid positive total rent amount.');
      return;
    }
    if (roommates.length === 0) {
        setError('Please add at least one roommate.');
        return;
    }

    const results: Array<{ name: string; amount: string }> = [];
    if (splitMethod === 'equally') {
      const amountPerPerson = rent / roommates.length;
      roommates.forEach(rm => results.push({ name: rm.name || 'Unnamed', amount: amountPerPerson.toFixed(2) }));
    } else if (splitMethod === 'by_income') {
      const totalIncome = roommates.reduce((sum, rm) => sum + rm.income, 0);
      if (totalIncome <= 0) {
        setError('Total income must be positive for income-based split. Please enter incomes for roommates.');
        return;
      }
      roommates.forEach(rm => {
        const proportion = rm.income / totalIncome;
        results.push({ name: rm.name || 'Unnamed', amount: (rent * proportion).toFixed(2) });
      });
    }
    setSplitResults(results);
  };
  
  const resetForm = () => {
    setTotalRent('');
    setRoommates([{ id: crypto.randomUUID(), name: 'Roommate 1', income: 0 },{ id: crypto.randomUUID(), name: 'Roommate 2', income: 0 }]);
    setSplitResults(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Rent Split Calculator</AlertTitle><AlertDescription>Fairly split rent among roommates, either equally or based on income. More split methods coming soon!</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardDescription>Enter rent details and roommate information.</CardDescription></CardHeader>
          <CardContent className="space-y-6">
            <div><Label htmlFor="totalRent">Total Monthly Rent ($)</Label><Input id="totalRent" type="number" value={totalRent} onChange={e => setTotalRent(e.target.value)} placeholder="e.g., 2400"/></div>
            <div>
              <Label htmlFor="splitMethod" className="block mb-2">Split Method</Label>
              <Select value={splitMethod} onValueChange={(v: SplitMethod) => setSplitMethod(v)}>
                <SelectTrigger className="w-[180px]"><SelectValue/></SelectTrigger>
                <SelectContent><SelectItem value="equally">Equally</SelectItem><SelectItem value="by_income">By Income</SelectItem></SelectContent>
              </Select>
            </div>
            <CardTitle className="font-headline text-lg border-t pt-4">Roommate Details</CardTitle>
            <div className="space-y-3">
              {roommates.map((rm, index) => (
                <div key={rm.id} className="p-3 border rounded-md space-y-2">
                  <div className="flex justify-between items-center">
                    <Input type="text" placeholder={`Roommate ${index+1} Name`} value={rm.name} onChange={e => handleRoommateChange(rm.id, 'name', e.target.value)} className="h-8 text-sm font-semibold"/>
                    {roommates.length > 1 && <Button variant="ghost" size="icon" onClick={() => removeRoommate(rm.id)} className="h-8 w-8"><Trash2 className="h-4 w-4 text-destructive" /></Button>}
                  </div>
                  {splitMethod === 'by_income' && (<div><Label htmlFor={`income-${rm.id}`} className="text-xs">Monthly Income ($)</Label><Input id={`income-${rm.id}`} type="number" value={rm.income || ''} onChange={e => handleRoommateChange(rm.id, 'income', e.target.value)} placeholder="0"/></div>)}
                </div>
              ))}
              <Button variant="outline" size="sm" onClick={addRoommate}><PlusCircle className="mr-2 h-4 w-4"/> Add Roommate</Button>
            </div>
          </CardContent>
          <CardFooter><Button onClick={calculateRentSplit} className="w-full md:w-auto">Calculate Split</Button></CardFooter>
        </Card>
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Rent Split per Roommate</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {splitResults && splitResults.map(res => (
              <div key={res.name} className="flex justify-between items-center p-2 bg-muted rounded-md">
                <p className="font-medium">{res.name}:</p>
                <div className="flex items-center gap-1">
                  <p className="font-semibold text-primary">${res.amount}</p>
                  <CopyButton textToCopy={res.amount} size="icon" variant="ghost" className="h-7 w-7"/>
                </div>
              </div>
            ))}
            {!error && !splitResults && <p className="text-muted-foreground text-sm">Results will appear here.</p>}
          </CardContent>
           <CardFooter><Button variant="outline" onClick={resetForm} className="w-full">Reset</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: RentSplitCalculator.tsx ======
==================================================

// ====== START OF FILE: RentVsBuyCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8.32 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Home, ShoppingCart } from "lucide-react";

// Highly simplified Rent vs. Buy analysis. Many factors are omitted for brevity.

export default function RentVsBuyCalculator() {
  // Renting Inputs
  const [monthlyRent, setMonthlyRent] = useState<string>('');
  
  // Buying Inputs
  const [homePriceRvB, setHomePriceRvB] = useState<string>('');
  const [downPaymentRvB, setDownPaymentRvB] = useState<string>('');
  const [interestRateRvB, setInterestRateRvB] = useState<string>(''); // %
  const [loanTermRvB, setLoanTermRvB] = useState<string>('30'); // years
  const [propertyTaxAnnualRvB, setPropertyTaxAnnualRvB] = useState<string>('');
  const [homeInsuranceAnnualRvB, setHomeInsuranceAnnualRvB] = useState<string>('');
  const [maintenanceAnnualRvB, setMaintenanceAnnualRvB] = useState<string>(''); // as % of home price or fixed

  // Comparison Results
  const [monthlyRentCost, setMonthlyRentCost] = useState<string | null>(null);
  const [monthlyBuyCost, setMonthlyBuyCost] = useState<string | null>(null);
  const [costDifference, setCostDifference] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateComparison = () => {
    setError(null);
    setMonthlyRentCost(null);
    setMonthlyBuyCost(null);
    setCostDifference(null);

    const rent = parseFloat(monthlyRent);
    const price = parseFloat(homePriceRvB);
    const dp = parseFloat(downPaymentRvB);
    const rate = parseFloat(interestRateRvB) / 100;
    const term = parseInt(loanTermRvB);
    const tax = parseFloat(propertyTaxAnnualRvB) / 12;
    const insurance = parseFloat(homeInsuranceAnnualRvB) / 12;
    const maint = parseFloat(maintenanceAnnualRvB) / 12; // If fixed annual, convert to monthly

    if (isNaN(rent) || rent < 0 || isNaN(price) || price <= 0 || isNaN(dp) || dp < 0 || isNaN(rate) || rate < 0 || isNaN(term) || term <= 0 || isNaN(tax) || tax < 0 || isNaN(insurance) || insurance < 0 || isNaN(maint) || maint < 0) {
      setError('Please enter valid numbers for all fields. Rent & costs can be zero, price must be positive.');
      return;
    }
    if (dp >= price) {
        setError("Down payment cannot be equal to or greater than home price for buying scenario.");
        return;
    }

    setMonthlyRentCost(rent.toFixed(2));

    const loanAmount = price - dp;
    const monthlyRate = rate / 12;
    const numPayments = term * 12;
    
    let monthlyPandI = 0;
    if (loanAmount > 0) {
        if (monthlyRate === 0) {
            monthlyPandI = loanAmount / numPayments;
        } else {
            monthlyPandI = loanAmount * (monthlyRate * Math.pow(1 + monthlyRate, numPayments)) / (Math.pow(1 + monthlyRate, numPayments) - 1);
        }
    }

    const totalMonthlyBuy = monthlyPandI + tax + insurance + maint;
    setMonthlyBuyCost(totalMonthlyBuy.toFixed(2));
    
    setCostDifference((totalMonthlyBuy - rent).toFixed(2));
  };

  const resetForm = () => {
    setMonthlyRent(''); setHomePriceRvB(''); setDownPaymentRvB(''); setInterestRateRvB(''); setLoanTermRvB('30');
    setPropertyTaxAnnualRvB(''); setHomeInsuranceAnnualRvB(''); setMaintenanceAnnualRvB('');
    setMonthlyRentCost(null); setMonthlyBuyCost(null); setCostDifference(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive"><Info className="h-4 w-4" /><AlertTitle>Simplified Rent vs. Buy Comparison</AlertTitle><AlertDescription>This calculator provides a very basic comparison of monthly costs. It <strong className="font-semibold">omits many crucial factors</strong> like tax benefits of homeownership, appreciation/depreciation, closing costs for buying/selling, opportunity cost of down payment, and HOA fees. Consult a financial advisor for comprehensive advice.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardTitle className="font-headline">Financial Inputs</CardTitle></CardHeader>
          <CardContent className="space-y-6">
            <fieldset className="border p-4 rounded-md space-y-3"><legend className="text-sm font-medium px-1">Renting Costs</legend>
              <div><Label htmlFor="monthlyRentRvB">Monthly Rent ($)</Label><Input id="monthlyRentRvB" type="number" value={monthlyRent} onChange={e=>setMonthlyRent(e.target.value)} placeholder="e.g., 1500"/></div>
            </fieldset>
            <fieldset className="border p-4 rounded-md space-y-3"><legend className="text-sm font-medium px-1">Buying Costs</legend>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div><Label htmlFor="homePriceRvB">Home Price ($)</Label><Input id="homePriceRvB" type="number" value={homePriceRvB} onChange={e=>setHomePriceRvB(e.target.value)} placeholder="e.g., 300000"/></div>
                <div><Label htmlFor="downPaymentRvB">Down Payment ($)</Label><Input id="downPaymentRvB" type="number" value={downPaymentRvB} onChange={e=>setDownPaymentRvB(e.target.value)} placeholder="e.g., 60000"/></div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div><Label htmlFor="interestRateRvB">Mortgage Interest Rate (%)</Label><Input id="interestRateRvB" type="number" value={interestRateRvB} onChange={e=>setInterestRateRvB(e.target.value)} placeholder="e.g., 6.5"/></div>
                <div><Label htmlFor="loanTermRvB">Loan Term (Years)</Label><Input id="loanTermRvB" type="number" value={loanTermRvB} onChange={e=>setLoanTermRvB(e.target.value)} placeholder="e.g., 30"/></div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div><Label htmlFor="propertyTaxRvB">Annual Property Tax ($)</Label><Input id="propertyTaxRvB" type="number" value={propertyTaxAnnualRvB} onChange={e=>setPropertyTaxAnnualRvB(e.target.value)} placeholder="e.g., 3000"/></div>
                <div><Label htmlFor="homeInsuranceRvB">Annual Home Insurance ($)</Label><Input id="homeInsuranceRvB" type="number" value={homeInsuranceAnnualRvB} onChange={e=>setHomeInsuranceAnnualRvB(e.target.value)} placeholder="e.g., 1200"/></div>
                <div><Label htmlFor="maintenanceRvB">Annual Maintenance ($)</Label><Input id="maintenanceRvB" type="number" value={maintenanceAnnualRvB} onChange={e=>setMaintenanceAnnualRvB(e.target.value)} placeholder="e.g., 3000 (or 1% of price)"/></div>
              </div>
            </fieldset>
          </CardContent>
          <CardFooter><Button onClick={calculateComparison} className="w-full md:w-auto">Compare Costs</Button></CardFooter>
        </Card>
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Monthly Cost Comparison</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {monthlyRentCost && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Monthly Rent Cost</p><p className="font-semibold">${monthlyRentCost}</p></div>)}
            {monthlyBuyCost && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Monthly Buying Cost (P&I + T&I + Maint.)</p><p className="font-semibold">${monthlyBuyCost}</p></div>)}
            {costDifference && (
              <div className={`p-2 rounded-md ${parseFloat(costDifference) >= 0 ? 'bg-red-500/10 text-red-700' : 'bg-green-500/10 text-green-700'}`}>
                <p className="text-sm">Monthly Buying Cost is <strong className="font-bold">${Math.abs(parseFloat(costDifference)).toFixed(2)} {parseFloat(costDifference) >= 0 ? 'MORE' : 'LESS'}</strong> than Renting</p>
              </div>
            )}
          </CardContent>
          <CardFooter><Button variant="outline" onClick={resetForm} className="w-full">Reset</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: RentVsBuyCalculator.tsx ======
==================================================

// ====== START OF FILE: ResistorCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.28 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CircuitBoard } from "lucide-react";

// This is a general resistor calculator, similar to Ohm's Law but framed for resistors.
// Or can be used for specific resistor calculations like series/parallel, voltage divider, etc.
// For now, let's keep it focused on finding one value of V, I, R given the other two for a single resistor.

type TargetVariableResistor = 'voltage_across' | 'current_through' | 'resistance_value';

export default function ResistorCalculator() {
  const [target, setTarget] = useState<TargetVariableResistor>('resistance_value');
  const [voltageRes, setVoltageRes] = useState<string>(''); // Volts (V)
  const [currentRes, setCurrentRes] = useState<string>(''); // Amperes (A) - can add mA option later
  const [resistanceRes, setResistanceRes] = useState<string>(''); // Ohms (Ω) - can add kΩ, MΩ later

  const [result, setResult] = useState<string | null>(null);
  const [resultUnit, setResultUnit] = useState<string>('');
  const [powerDissipated, setPowerDissipated] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateResistorValue = () => {
    setError(null);
    setResult(null);
    setResultUnit('');
    setPowerDissipated(null);

    const V = parseFloat(voltageRes);
    const I = parseFloat(currentRes); // Assume Amperes for now
    const R = parseFloat(resistanceRes); // Assume Ohms for now
    let calculatedValue: number;
    let power: number | null = null;

    try {
      switch (target) {
        case 'voltage_across': // V = I * R
          if (isNaN(I) || isNaN(R)) throw new Error("Current (A) and Resistance (Ω) must be valid numbers.");
          calculatedValue = I * R;
          power = I * I * R;
          setResultUnit('Volts (V)');
          break;
        case 'current_through': // I = V / R
          if (isNaN(V) || isNaN(R) || R === 0) throw new Error("Voltage (V) and Resistance (Ω, non-zero) must be valid numbers.");
          calculatedValue = V / R;
          power = V * V / R;
          setResultUnit('Amperes (A)');
          break;
        case 'resistance_value': // R = V / I
          if (isNaN(V) || isNaN(I) || I === 0) throw new Error("Voltage (V) and Current (A, non-zero) must be valid numbers.");
          calculatedValue = V / I;
          power = V * I; // Or I*I*R, or V*V/R
          setResultUnit('Ohms (Ω)');
          break;
        default: throw new Error("Invalid selection.");
      }
      if (isNaN(calculatedValue) || !isFinite(calculatedValue)) throw new Error("Calculation resulted in an invalid or infinite number.");
      setResult(calculatedValue.toPrecision(5));
      if (power !== null && isFinite(power)) {
        setPowerDissipated(power.toPrecision(3) + " Watts");
      }
    } catch (e: any) { setError(e.message); }
  };

  const resetForm = () => {
    setVoltageRes(''); setCurrentRes(''); setResistanceRes('');
    setResult(null); setError(null); setResultUnit(''); setPowerDissipated(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Resistor Calculator (Ohm's Law)</AlertTitle><AlertDescription>Calculate Voltage, Current, or Resistance for a resistor using Ohm's Law (V=IR). Also shows power dissipated. Basic units: Volts, Amps, Ohms.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Solve for the unknown resistor property.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="targetResistor">Calculate:</Label><Select value={target} onValueChange={(v: TargetVariableResistor) => {setTarget(v);setResult(null);setError(null);}}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent><SelectItem value="voltage_across">Voltage (V)</SelectItem><SelectItem value="current_through">Current (I)</SelectItem><SelectItem value="resistance_value">Resistance (R)</SelectItem></SelectContent></Select></div>
            {target !== 'voltage_across' && <div><Label htmlFor="voltageRes">Voltage (Volts)</Label><Input id="voltageRes" type="number" value={voltageRes} onChange={e=>setVoltageRes(e.target.value)} /></div>}
            {target !== 'current_through' && <div><Label htmlFor="currentRes">Current (Amperes)</Label><Input id="currentRes" type="number" value={currentRes} onChange={e=>setCurrentRes(e.target.value)} /></div>}
            {target !== 'resistance_value' && <div><Label htmlFor="resistanceRes">Resistance (Ohms)</Label><Input id="resistanceRes" type="number" value={resistanceRes} onChange={e=>setResistanceRes(e.target.value)} /></div>}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateResistorValue}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Calculated {target.replace('_', ' ')}</p><p className="text-2xl font-bold text-primary">{result} {resultUnit}</p></div><CopyButton textToCopy={`${result} ${resultUnit}`} /></div>)}
              {powerDissipated && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Power Dissipated by Resistor</p><p className="font-semibold">{powerDissipated}</p></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ResistorCalculator.tsx ======
==================================================

// ====== START OF FILE: ResistorColorCodeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8.98 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Info, Palette, VenetianMask } from "lucide-react"; // VenetianMask (or similar) could represent color bands

// Resistor color code values
const colorMap: Record<string, { value: number, multiplier: number, tolerance?: number, colorClass: string }> = {
  black:  { value: 0, multiplier: 1,       tolerance: 20, colorClass: "bg-black text-white"},
  brown:  { value: 1, multiplier: 10,      tolerance: 1,  colorClass: "bg-yellow-700 text-white"}, // Using yellow-700 for brown
  red:    { value: 2, multiplier: 100,     tolerance: 2,  colorClass: "bg-red-500 text-white"},
  orange: { value: 3, multiplier: 1000,    tolerance: 0.05,colorClass: "bg-orange-500 text-white"},
  yellow: { value: 4, multiplier: 10000,   tolerance: 0.02,colorClass: "bg-yellow-400 text-black"},
  green:  { value: 5, multiplier: 100000,  tolerance: 0.5, colorClass: "bg-green-500 text-white"},
  blue:   { value: 6, multiplier: 1000000, tolerance: 0.25,colorClass: "bg-blue-500 text-white"},
  violet: { value: 7, multiplier: 10000000,tolerance: 0.1, colorClass: "bg-purple-500 text-white"},
  gray:   { value: 8, multiplier: 100000000,tolerance:0.01,colorClass: "bg-gray-500 text-white"}, // Not typically used for multiplier
  white:  { value: 9, multiplier: 1000000000,           colorClass: "bg-white text-black border"}, // Not typically used for multiplier
  gold:   { value: -1,multiplier: 0.1,     tolerance: 5,  colorClass: "bg-yellow-500 text-black"}, // Gold as multiplier
  silver: { value: -2,multiplier: 0.01,    tolerance: 10, colorClass: "bg-slate-400 text-black"}, // Silver as multiplier
  none:   { value: -3,multiplier: 1,       tolerance: 20, colorClass: "bg-transparent border"} // For 3-band or no tolerance band
};

const bandColors = ['black', 'brown', 'red', 'orange', 'yellow', 'green', 'blue', 'violet', 'gray', 'white'];
const multiplierColors = ['black', 'brown', 'red', 'orange', 'yellow', 'green', 'blue', 'violet', 'gold', 'silver']; // Gray/White less common
const toleranceColors = ['brown', 'red', 'green', 'blue', 'violet', 'gold', 'silver', 'none'];


export default function ResistorColorCodeCalculator() {
  const [numBands, setNumBands] = useState<string>('4');
  const [band1, setBand1] = useState<string>('brown');
  const [band2, setBand2] = useState<string>('black');
  const [band3, setBand3] = useState<string>('red'); // Multiplier for 4-band, 3rd digit for 5-band
  const [band4, setBand4] = useState<string>('gold'); // Tolerance for 4-band, Multiplier for 5-band
  const [band5, setBand5] = useState<string>('gold'); // Tolerance for 5-band

  const [resistorValue, setResistorValue] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateResistor = () => {
    setError(null);
    setResistorValue(null);
    try {
      let val = 0;
      let mult = 1;
      let tol = 0;

      if (parseInt(numBands) === 3 || parseInt(numBands) === 4) {
        if (!colorMap[band1] || colorMap[band1].value < 0 || !colorMap[band2] || colorMap[band2].value < 0) throw new Error("Invalid digit band color.");
        val = (colorMap[band1].value * 10) + colorMap[band2].value;
        mult = colorMap[band3]?.multiplier; // Band 3 is multiplier
        tol = parseInt(numBands) === 4 ? (colorMap[band4]?.tolerance ?? 20) : 20; // Band 4 is tolerance (or default 20% for 3-band)
        if (!mult && colorMap[band3]?.value >=0) mult = Math.pow(10, colorMap[band3].value) // Fallback if multiplier isn't directly defined for a digit color
         if (mult === undefined) throw new Error("Invalid multiplier color for 3/4 band resistor.");

      } else if (parseInt(numBands) === 5) {
        if (!colorMap[band1] || colorMap[band1].value < 0 || !colorMap[band2] || colorMap[band2].value < 0 || !colorMap[band3] || colorMap[band3].value < 0) throw new Error("Invalid digit band color.");
        val = (colorMap[band1].value * 100) + (colorMap[band2].value * 10) + colorMap[band3].value;
        mult = colorMap[band4]?.multiplier; // Band 4 is multiplier
        tol = colorMap[band5]?.tolerance ?? 20;
         if (!mult && colorMap[band4]?.value >=0) mult = Math.pow(10, colorMap[band4].value)
        if (mult === undefined) throw new Error("Invalid multiplier color for 5-band resistor.");
      } else {
        throw new Error("Unsupported number of bands.");
      }

      const finalValue = val * mult;
      let displayValue = "";
      if (finalValue >= 1000000000) displayValue = `${(finalValue/1000000000).toFixed(2)} GΩ`;
      else if (finalValue >= 1000000) displayValue = `${(finalValue/1000000).toFixed(2)} MΩ`;
      else if (finalValue >= 1000) displayValue = `${(finalValue/1000).toFixed(2)} kΩ`;
      else displayValue = `${finalValue.toFixed(2)} Ω`;
      
      setResistorValue(`${displayValue} ±${tol}%`);

    } catch (e: any) { setError(e.message); }
  };

  const renderBandSelector = (bandNum: number, value: string, setter: React.Dispatch<React.SetStateAction<string>>, availableColors: string[]) => (
    <div>
      <Label htmlFor={`band${bandNum}`}>Band {bandNum} {bandNum === 3 && numBands === '4' ? '(Multiplier)' : bandNum === 4 && numBands === '5' ? '(Multiplier)' : bandNum === 4 && numBands === '4' ? '(Tolerance)' : bandNum === 5 && numBands === '5' ? '(Tolerance)' : ''}</Label>
      <Select value={value} onValueChange={setter}>
        <SelectTrigger id={`band${bandNum}`} className={`capitalize ${colorMap[value]?.colorClass || ''}`}><SelectValue/></SelectTrigger>
        <SelectContent>{availableColors.map(c => <SelectItem key={c} value={c} className={`capitalize ${colorMap[c]?.colorClass || ''}`}>{c}</SelectItem>)}</SelectContent>
      </Select>
    </div>
  );


  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Resistor Color Code Calculator</AlertTitle><AlertDescription>Determine the value and tolerance of a resistor based on its color bands (3, 4, or 5 bands).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Select the colors for each band.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="numBandsRCC">Number of Bands</Label><Select value={numBands} onValueChange={(v) => {setNumBands(v); setResistorValue(null); setError(null);}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="3">3 Bands</SelectItem><SelectItem value="4">4 Bands</SelectItem><SelectItem value="5">5 Bands</SelectItem></SelectContent></Select></div>
            <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
              {renderBandSelector(1, band1, setBand1, bandColors)}
              {renderBandSelector(2, band2, setBand2, bandColors)}
              {renderBandSelector(3, band3, setBand3, (parseInt(numBands) === 5 ? bandColors : multiplierColors))}
              {(parseInt(numBands) >= 4) && renderBandSelector(4, band4, setBand4, (parseInt(numBands) === 5 ? multiplierColors : toleranceColors))}
              {(parseInt(numBands) === 5) && renderBandSelector(5, band5, setBand5, toleranceColors)}
            </div>
             <div className="flex items-center justify-center space-x-1 mt-4 p-2 border rounded-md min-h-[40px] bg-gray-200 dark:bg-gray-700">
                {[band1, band2, band3, (parseInt(numBands) >= 4 ? band4 : undefined), (parseInt(numBands) === 5 ? band5 : undefined)]
                .filter(Boolean).map((color, index) => (
                    <div key={index} title={color} className={`h-8 w-3 sm:w-4 rounded-sm ${colorMap[color!]?.colorClass || 'bg-transparent border'}`}></div>
                ))}
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateResistor}>Calculate Value</Button><Button variant="outline" onClick={()=>{setResistorValue(null); setError(null);}}>Reset</Button></CardFooter>
        </Card>
        {(resistorValue || error) && (
          <Card>
            <CardHeader><CardDescription>Resistor Value</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {resistorValue && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Calculated Value</p><p className="text-xl font-bold text-primary">{resistorValue}</p></div><CopyButton textToCopy={resistorValue} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ResistorColorCodeCalculator.tsx ======
==================================================

// ====== START OF FILE: RetirementCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8.35 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Landmark, TrendingUp } from "lucide-react";

export default function RetirementCalculator() {
  const [currentAgeRet, setCurrentAgeRet] = useState<string>('');
  const [retirementAgeRet, setRetirementAgeRet] = useState<string>('');
  const [currentSavingsRet, setCurrentSavingsRet] = useState<string>('0');
  const [annualContributionRet, setAnnualContributionRet] = useState<string>('');
  const [annualReturnRateRet, setAnnualReturnRateRet] = useState<string>(''); // Pre-retirement %
  const [inflationRateRet, setInflationRateRet] = useState<string>('2.5'); // Assumed avg inflation
  const [withdrawalRateRet, setWithdrawalRateRet] = useState<string>('4'); // Post-retirement %
  const [yearsInRetirement, setYearsInRetirement] = useState<string>('25'); // How long retirement funds should last

  const [projectedNestEgg, setProjectedNestEgg] = useState<string | null>(null);
  const [firstYearWithdrawal, setFirstYearWithdrawal] = useState<string | null>(null); // In today's dollars
  const [error, setError] = useState<string | null>(null);

  const calculateRetirement = () => {
    setError(null);
    setProjectedNestEgg(null);
    setFirstYearWithdrawal(null);

    const age = parseInt(currentAgeRet);
    const retAge = parseInt(retirementAgeRet);
    const currentPot = parseFloat(currentSavingsRet);
    const contrib = parseFloat(annualContributionRet);
    const returnRate = parseFloat(annualReturnRateRet) / 100;
    const inflation = parseFloat(inflationRateRet) / 100;
    const withdrawal = parseFloat(withdrawalRateRet) / 100;
    const retYears = parseInt(yearsInRetirement);


    if (isNaN(age) || age <=0 || isNaN(retAge) || retAge <= age || isNaN(currentPot) || currentPot < 0 || isNaN(contrib) || contrib < 0 || isNaN(returnRate) || returnRate < 0 || isNaN(inflation) || inflation < 0 || isNaN(withdrawal) || withdrawal <=0 || isNaN(retYears) || retYears <=0) {
      setError('Please enter valid numbers for all fields. Most values must be positive.');
      return;
    }

    const yearsToGrow = retAge - age;
    const realReturnRate = (1 + returnRate) / (1 + inflation) - 1; // Approximate real rate of return

    // FV of current savings (real terms)
    const fvCurrentPotReal = currentPot * Math.pow(1 + realReturnRate, yearsToGrow);
    
    // FV of annual contributions (ordinary annuity, real terms)
    let fvContributionsReal;
    if (realReturnRate === 0) {
        fvContributionsReal = contrib * yearsToGrow; // If real return is 0, contributions don't grow beyond their nominal value
    } else {
        fvContributionsReal = contrib * ((Math.pow(1 + realReturnRate, yearsToGrow) - 1) / realReturnRate);
    }
    
    const totalNestEggTodayDollars = fvCurrentPotReal + fvContributionsReal;
    setProjectedNestEgg(totalNestEggTodayDollars.toFixed(2)); // This is the nest egg in today's purchasing power

    const firstYearIncomeTodayDollars = totalNestEggTodayDollars * withdrawal;
    setFirstYearWithdrawal(firstYearIncomeTodayDollars.toFixed(2));
  };

  const resetForm = () => {
    setCurrentAgeRet(''); setRetirementAgeRet(''); setCurrentSavingsRet('0'); setAnnualContributionRet('');
    setAnnualReturnRateRet(''); setInflationRateRet('2.5'); setWithdrawalRateRet('4'); setYearsInRetirement('25');
    setProjectedNestEgg(null); setFirstYearWithdrawal(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Simplified Retirement Estimator - For Illustration Only</AlertTitle>
        <AlertDescription>
          Retirement planning is complex. This calculator provides a <strong className="font-semibold">very basic projection in today's dollars (real terms)</strong> and does not account for taxes, fees, social security, specific investment risks, changing inflation, or detailed withdrawal strategies. <strong className="font-semibold">Consult a qualified financial advisor for personalized retirement planning.</strong>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardDescription>Estimate your retirement savings and potential income.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div><Label htmlFor="currentAgeRet">Current Age</Label><Input id="currentAgeRet" type="number" value={currentAgeRet} onChange={e=>setCurrentAgeRet(e.target.value)} placeholder="e.g., 35"/></div>
              <div><Label htmlFor="retAgeRet">Desired Retirement Age</Label><Input id="retAgeRet" type="number" value={retirementAgeRet} onChange={e=>setRetirementAgeRet(e.target.value)} placeholder="e.g., 65"/></div>
            </div>
            <div><Label htmlFor="currentSavingsRet">Current Retirement Savings ($)</Label><Input id="currentSavingsRet" type="number" value={currentSavingsRet} onChange={e=>setCurrentSavingsRet(e.target.value)} placeholder="e.g., 50000"/></div>
            <div><Label htmlFor="annualContribRet">Annual Contribution ($)</Label><Input id="annualContribRet" type="number" value={annualContributionRet} onChange={e=>setAnnualContributionRet(e.target.value)} placeholder="e.g., 10000"/></div>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div><Label htmlFor="returnRateRet">Avg. Annual Return (Before Inflation %)</Label><Input id="returnRateRet" type="number" value={annualReturnRateRet} onChange={e=>setAnnualReturnRateRet(e.target.value)} placeholder="e.g., 7"/></div>
              <div><Label htmlFor="inflationRateRet">Avg. Annual Inflation (%)</Label><Input id="inflationRateRet" type="number" value={inflationRateRet} onChange={e=>setInflationRateRet(e.target.value)} placeholder="e.g., 2.5"/></div>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div><Label htmlFor="withdrawalRateRet">Annual Withdrawal Rate in Retirement (%)</Label><Input id="withdrawalRateRet" type="number" value={withdrawalRateRet} onChange={e=>setWithdrawalRateRet(e.target.value)} placeholder="e.g., 4"/></div>
                <div><Label htmlFor="yearsInRet">Years in Retirement</Label><Input id="yearsInRet" type="number" value={yearsInRetirement} onChange={e=>setYearsInRetirement(e.target.value)} placeholder="e.g., 25"/></div>
            </div>
          </CardContent>
          <CardFooter><Button onClick={calculateRetirement} className="w-full md:w-auto">Estimate Retirement</Button></CardFooter>
        </Card>
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Retirement Projection (Today's Dollars)</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {projectedNestEgg && (<div className="p-2 bg-primary/10 rounded-md">
                <p className="text-sm text-muted-foreground">Projected Nest Egg at Retirement</p>
                <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">${projectedNestEgg}</p><CopyButton textToCopy={projectedNestEgg} size="sm" variant="ghost"/></div>
                <p className="text-xs text-muted-foreground">(In today's purchasing power)</p>
            </div>)}
            {firstYearWithdrawal && (<div className="p-2 bg-muted rounded-md">
                <p className="text-sm text-muted-foreground">Est. First Year Retirement Income</p>
                <p className="font-semibold">${firstYearWithdrawal} / year</p>
                <p className="text-xs text-muted-foreground">(In today's purchasing power, assuming {withdrawalRateRet}% withdrawal)</p>
            </div>)}
          </CardContent>
          <CardFooter><Button variant="outline" onClick={resetForm} className="w-full">Reset</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: RetirementCalculator.tsx ======
==================================================

// ====== START OF FILE: RetirementPlannerCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.23 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Landmark, TrendingUp } from "lucide-react";

export default function RetirementPlannerCalculator() {
  const [currentAge, setCurrentAge] = useState<string>('');
  const [retirementAge, setRetirementAge] = useState<string>('');
  const [currentSavings, setCurrentSavings] = useState<string>('0');
  const [annualContribution, setAnnualContribution] = useState<string>('');
  const [annualReturnRate, setAnnualReturnRate] = useState<string>(''); // Pre-retirement %
  const [withdrawalRate, setWithdrawalRate] = useState<string>('4'); // Post-retirement %

  const [projectedNestEgg, setProjectedNestEgg] = useState<string | null>(null);
  const [estimatedAnnualIncome, setEstimatedAnnualIncome] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateRetirement = () => {
    setError(null);
    setProjectedNestEgg(null);
    setEstimatedAnnualIncome(null);

    const age = parseInt(currentAge);
    const retAge = parseInt(retirementAge);
    const pot = parseFloat(currentSavings);
    const contrib = parseFloat(annualContribution);
    const rate = parseFloat(annualReturnRate) / 100;
    const withdraw = parseFloat(withdrawalRate) / 100;

    if (isNaN(age) || age <= 0 || isNaN(retAge) || retAge <= age || isNaN(pot) || pot < 0 || isNaN(contrib) || contrib < 0 || isNaN(rate) || rate < 0 || isNaN(withdraw) || withdraw <= 0) {
      setError('Please enter valid, non-negative numbers for all fields. Ages and term must be positive.');
      return;
    }

    const yearsToGrow = retAge - age;
    
    // Using a loop for year-by-year calculation for simplicity
    let futureValue = pot;
    for (let i = 0; i < yearsToGrow; i++) {
        futureValue = (futureValue + contrib) * (1 + rate);
    }

    if (isNaN(futureValue) || !isFinite(futureValue)) {
        setError("Could not calculate nest egg. Check inputs for very large numbers.");
        return;
    }

    setProjectedNestEgg(futureValue.toFixed(2));

    const annualIncome = futureValue * withdraw;
    setEstimatedAnnualIncome(annualIncome.toFixed(2));
  };

  const resetForm = () => {
    setCurrentAge(''); setRetirementAge(''); setCurrentSavings('0'); setAnnualContribution('');
    setAnnualReturnRate(''); setWithdrawalRate('4');
    setProjectedNestEgg(null); setEstimatedAnnualIncome(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Simplified Retirement Planner - For Illustration Only</AlertTitle>
        <AlertDescription>
          This calculator provides a basic projection and should NOT be used for financial planning. It does not account for taxes, inflation, fees, or varying returns. Consult a qualified financial advisor for personalized retirement planning.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate your retirement savings and potential income.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="currentAgeRetire">Current Age</Label><Input id="currentAgeRetire" type="number" value={currentAge} onChange={(e) => setCurrentAge(e.target.value)} /></div>
              <div><Label htmlFor="retirementAgeRetire">Retirement Age</Label><Input id="retirementAgeRetire" type="number" value={retirementAge} onChange={(e) => setRetirementAge(e.target.value)} /></div>
            </div>
            <div><Label htmlFor="currentSavingsRetire">Current Retirement Savings ($)</Label><Input id="currentSavingsRetire" type="number" value={currentSavings} onChange={(e) => setCurrentSavings(e.target.value)}/></div>
            <div><Label htmlFor="annualContributionRetire">Annual Contribution ($)</Label><Input id="annualContributionRetire" type="number" value={annualContribution} onChange={(e) => setAnnualContribution(e.target.value)} /></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="returnRateRetire">Avg. Annual Return (%)</Label><Input id="returnRateRetire" type="number" value={annualReturnRate} onChange={(e) => setAnnualReturnRate(e.target.value)} placeholder="e.g., 7"/></div>
              <div><Label htmlFor="withdrawalRateRetire">Withdrawal Rate (%)</Label><Input id="withdrawalRateRetire" type="number" value={withdrawalRate} onChange={(e) => setWithdrawalRate(e.target.value)} placeholder="e.g., 4"/></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateRetirement}>Estimate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(projectedNestEgg || error) && (
          <Card>
            <CardHeader><CardDescription>Retirement Projection (Nominal)</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {projectedNestEgg && (<div className="p-2 bg-primary/10 rounded-md">
                <p className="text-sm text-muted-foreground">Projected Nest Egg at Retirement</p>
                <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">${projectedNestEgg}</p><CopyButton textToCopy={projectedNestEgg} size="sm" variant="ghost"/></div>
              </div>)}
              {estimatedAnnualIncome && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Est. Annual Income in Retirement</p><p className="font-semibold">${estimatedAnnualIncome} / year</p></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: RetirementPlannerCalculator.tsx ======
==================================================

// ====== START OF FILE: RightTriangleCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.06 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Triangle } from "lucide-react";

// For a right triangle: a² + b² = c²
// sin(A) = a/c, cos(A) = b/c, tan(A) = a/b
// sin(B) = b/c, cos(B) = a/c, tan(B) = b/a
// Angle A + Angle B = 90 degrees (or PI/2 radians)

export default function RightTriangleCalculator() {
  const [sideA, setSideA] = useState<string>('');
  const [sideB, setSideB] = useState<string>('');
  // Could add inputs for angles or hypotenuse if solving for other things.
  // For simplicity, let's assume we have sides A and B, and want to find C and angles.

  const [hypotenuse, setHypotenuse] = useState<string | null>(null);
  const [angleA, setAngleA] = useState<string | null>(null); // Angle opposite side A
  const [angleB, setAngleB] = useState<string | null>(null); // Angle opposite side B
  const [area, setArea] = useState<string | null>(null);
  const [perimeter, setPerimeter] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTriangle = () => {
    setError(null);
    setHypotenuse(null);
    setAngleA(null);
    setAngleB(null);
    setArea(null);
    setPerimeter(null);

    const a = parseFloat(sideA);
    const b = parseFloat(sideB);

    if (isNaN(a) || a <= 0 || isNaN(b) || b <= 0) {
      setError('Please enter valid positive lengths for side A and side B.');
      return;
    }

    const c = Math.sqrt(a*a + b*b);
    setHypotenuse(c.toFixed(4));

    // Angles in degrees
    const angA_rad = Math.atan(a/b); // Radian angle A (opposite a)
    const angB_rad = Math.atan(b/a); // Radian angle B (opposite b)
    // Alternative for B: Math.PI/2 - angA_rad;

    setAngleA((angA_rad * 180 / Math.PI).toFixed(2));
    setAngleB((angB_rad * 180 / Math.PI).toFixed(2));
    // Sum should be 90. Check: ( (angA_rad * 180 / Math.PI) + (angB_rad * 180 / Math.PI) ).toFixed(0) == 90

    const triArea = 0.5 * a * b;
    setArea(triArea.toFixed(4));

    const peri = a + b + c;
    setPerimeter(peri.toFixed(4));
  };
  
  const resetForm = () => {
    setSideA(''); setSideB('');
    setHypotenuse(null); setAngleA(null); setAngleB(null); setArea(null); setPerimeter(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Right-Angled Triangle Calculator</AlertTitle><AlertDescription>Calculate hypotenuse, angles, area, and perimeter of a right triangle given two perpendicular sides (a and b).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter lengths of sides A and B.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="sideART">Side A (perpendicular)</Label><Input id="sideART" type="number" value={sideA} onChange={e=>setSideA(e.target.value)} placeholder="e.g., 3"/></div>
            <div><Label htmlFor="sideBRT">Side B (perpendicular)</Label><Input id="sideBRT" type="number" value={sideB} onChange={e=>setSideB(e.target.value)} placeholder="e.g., 4"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTriangle}>Calculate Triangle</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(hypotenuse || error) && (
          <Card>
            <CardHeader><CardDescription>Triangle Properties</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {hypotenuse && (<div className="p-1 bg-primary/10 rounded-md"><p className="text-xs text-muted-foreground">Hypotenuse (c): <strong className="text-primary">{hypotenuse} units</strong></p></div>)}
              {angleA && (<div className="p-1 bg-muted rounded-md"><p className="text-xs text-muted-foreground">Angle A (opposite side a): <span className="font-semibold">{angleA}°</span></p></div>)}
              {angleB && (<div className="p-1 bg-muted rounded-md"><p className="text-xs text-muted-foreground">Angle B (opposite side b): <span className="font-semibold">{angleB}°</span></p></div>)}
              {area && (<div className="p-1 bg-muted rounded-md"><p className="text-xs text-muted-foreground">Area: <span className="font-semibold">{area} units²</span></p></div>)}
              {perimeter && (<div className="p-1 bg-muted rounded-md"><p className="text-xs text-muted-foreground">Perimeter: <span className="font-semibold">{perimeter} units</span></p></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: RightTriangleCalculator.tsx ======
==================================================

// ====== START OF FILE: RmdCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.98 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, FileText, CalendarDays } from "lucide-react";

// RMD = Account Balance / Life Expectancy Factor
// Life expectancy factors are from IRS tables (e.g., Uniform Lifetime Table).
// This calculator will use a VERY simplified factor for demonstration.

// Highly simplified placeholder factors, NOT official IRS data.
const simplifiedLifeExpectancyFactors: Record<number, number> = {
  73: 26.5, 74: 25.5, 75: 24.6, 76: 23.7, 77: 22.9, 78: 22.0, 79: 21.2,
  80: 20.3, 81: 19.5, 82: 18.7, 83: 17.9, 84: 17.1, 85: 16.3, 86: 15.5,
  // ... extend as needed. For ages > 86, the factor decreases more slowly.
  // For example, at 115, it might be around 2.5.
};

export default function RmdCalculator() {
  const [accountBalance, setAccountBalance] = useState<string>('');
  const [ageRMD, setAgeRMD] = useState<string>(''); // Age at year-end for which RMD is calculated

  const [estimatedRmd, setEstimatedRmd] = useState<string | null>(null);
  const [factorUsed, setFactorUsed] = useState<number | string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateRmd = () => {
    setError(null);
    setEstimatedRmd(null);
    setFactorUsed(null);

    const balance = parseFloat(accountBalance);
    const age = parseInt(ageRMD);

    if (isNaN(balance) || balance < 0 || isNaN(age) || age < 73) { // RMDs generally start at age 73 (SECURE 2.0 Act)
      setError('Please enter a valid account balance (>=0) and age (typically >=73 for RMDs).');
      return;
    }
    
    // Use the simplified factor. If age not in map, provide a generic message or very rough estimate.
    const expectancyFactor = simplifiedLifeExpectancyFactors[age];
    if (!expectancyFactor) {
      setError(`Simplified life expectancy factor for age ${age} is not in this demo calculator. Official IRS tables are more comprehensive.`);
      // For demo, if factor not found, maybe use a rough estimate or stop.
      // Example: if age > 86, factor = 15.5 - (age - 86) * 0.8 (very rough, decreases by ~0.8 per year)
      if (age > 86 && age < 115) {
          const estFactor = Math.max(2.0, 15.5 - (age-86)*0.8);
          setFactorUsed(`${estFactor.toFixed(1)} (rough estimate)`);
          setEstimatedRmd((balance / estFactor).toFixed(2));
      } else if (age >= 115) {
          setFactorUsed(`~2.0 (rough estimate)`);
          setEstimatedRmd((balance/2.0).toFixed(2));
      }
      return;
    }

    setFactorUsed(expectancyFactor);
    const rmd = balance / expectancyFactor;
    setEstimatedRmd(rmd.toFixed(2));
  };
  
  const resetForm = () => {
    setAccountBalance('');
    setAgeRMD('');
    setEstimatedRmd(null);
    setFactorUsed(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Highly Simplified RMD Estimator - For Illustrative Purposes Only</AlertTitle>
        <AlertDescription>
          Required Minimum Distribution (RMD) rules are complex and depend on specific IRS tables (e.g., Uniform Lifetime Table), account types, and beneficiary status. This calculator uses <strong className="font-semibold">placeholder life expectancy factors and does not constitute financial or tax advice.</strong> RMDs typically start at age 73 (as of SECURE 2.0 Act). <strong className="font-semibold">Consult a qualified financial advisor or tax professional for accurate RMD calculations and advice.</strong>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate your Required Minimum Distribution (RMD).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="accountBalanceRMD">Retirement Account Balance ($)</Label><Input id="accountBalanceRMD" type="number" value={accountBalance} onChange={(e) => setAccountBalance(e.target.value)} placeholder="e.g., 500000 (as of Dec 31 of prior year)"/></div>
            <div><Label htmlFor="ageRMD">Your Age (at end of RMD year)</Label><Input id="ageRMD" type="number" value={ageRMD} onChange={(e) => setAgeRMD(e.target.value)} placeholder="e.g., 75"/></div>
             <AlertDescription className="text-xs">This demo uses simplified factors for ages 73-86. Actual IRS tables are more detailed.</AlertDescription>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateRmd}>Estimate RMD</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(estimatedRmd || error) && (
          <Card>
            <CardHeader><CardDescription>RMD Estimation (Simplified)</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {factorUsed && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Life Expectancy Factor Used (Simplified)</p><p className="font-semibold">{factorUsed}</p></div>)}
              {estimatedRmd && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated RMD for the Year</p><p className="text-2xl font-bold text-primary">${estimatedRmd}</p></div>
                  <CopyButton textToCopy={estimatedRmd} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: RmdCalculator.tsx ======
==================================================

// ====== START OF FILE: RmrCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.79 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Flame } from "lucide-react";

type UnitSystemRMR = 'imperial' | 'metric';

export default function RmrCalculator() {
  const [weight, setWeight] = useState<string>('');
  const [bodyFat, setBodyFat] = useState<string>('');
  const [units, setUnits] = useState<UnitSystemRMR>('imperial');
  
  const [rmr, setRmr] = useState<string | null>(null);
  const [leanBodyMass, setLeanBodyMass] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateRmr = () => {
    setError(null);
    setRmr(null);
    setLeanBodyMass(null);

    let weightInKg = parseFloat(weight);
    const bfPercentage = parseFloat(bodyFat);

    if (isNaN(weightInKg) || weightInKg <= 0 || isNaN(bfPercentage) || bfPercentage <= 0 || bfPercentage >= 100) {
      setError('Please enter a valid positive weight and body fat percentage (1-99).');
      return;
    }

    if (units === 'imperial') {
      weightInKg *= 0.453592; // lbs to kg
    }
    
    // Katch-McArdle Formula: RMR = 370 + (21.6 * LBM in kg)
    const lbm = weightInKg * (1 - (bfPercentage / 100));
    setLeanBodyMass(`${lbm.toFixed(1)} kg / ${(lbm * 2.20462).toFixed(1)} lbs`);
    
    const calculatedRmr = 370 + (21.6 * lbm);
    setRmr(calculatedRmr.toFixed(0));
  };
  
  const resetForm = () => {
    setWeight('');
    setBodyFat('');
    setUnits('imperial');
    setRmr(null);
    setLeanBodyMass(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Resting Metabolic Rate (RMR) Calculator</AlertTitle>
        <AlertDescription>
          Estimate your RMR using the Katch-McArdle formula, which is often more accurate for athletic individuals as it considers lean body mass. You'll need an estimate of your body fat percentage.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your body composition details.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="unitsRMR">Unit System</Label><Select value={units} onValueChange={(v: UnitSystemRMR) => setUnits(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Imperial (lbs)</SelectItem><SelectItem value="metric">Metric (kg)</SelectItem></SelectContent></Select></div>
            <div><Label htmlFor="weightRMR">Body Weight ({units})</Label><Input id="weightRMR" type="number" value={weight} onChange={e=>setWeight(e.target.value)} /></div>
            <div><Label htmlFor="bodyFatRMR">Body Fat Percentage (%)</Label><Input id="bodyFatRMR" type="number" value={bodyFat} onChange={e=>setBodyFat(e.target.value)} placeholder="e.g., 15"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateRmr}>Calculate RMR</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(rmr || error) && (
          <Card>
            <CardHeader><CardDescription>Metabolic Rate Estimation</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {leanBodyMass && <div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Lean Body Mass</p><p className="font-semibold">{leanBodyMass}</p></div>}
              {rmr && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Resting Metabolic Rate (RMR)</p>
                    <p className="text-2xl font-bold text-primary">{rmr} Calories/day</p>
                  </div>
                  <CopyButton textToCopy={rmr} />
                </div>
              )}
              <AlertDescription className="text-xs pt-2">This is the energy your body burns at rest. Your total daily energy needs (TDEE) will be higher based on activity level.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: RmrCalculator.tsx ======
==================================================

// ====== START OF FILE: RoiCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.61 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, LineChart, TrendingUp } from "lucide-react";

// ROI = ((Net Profit or Final Value - Initial Investment Cost) / Initial Investment Cost) * 100

export default function RoiCalculator() {
  const [initialInvestment, setInitialInvestment] = useState<string>('');
  const [finalValue, setFinalValue] = useState<string>(''); // Or Net Profit if that's how user thinks
  // Alternative: Inputs for Net Profit directly
  const [netProfitInput, setNetProfitInput] = useState<string>('');
  const [useNetProfit, setUseNetProfit] = useState<boolean>(false);


  const [roi, setRoi] = useState<string | null>(null);
  const [profitOrLoss, setProfitOrLoss] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateRoi = () => {
    setError(null);
    setRoi(null);
    setProfitOrLoss(null);

    const initialInv = parseFloat(initialInvestment);
    let netP: number;

    if (isNaN(initialInv) || initialInv <= 0) {
      setError('Initial Investment must be a positive number.');
      return;
    }

    if (useNetProfit) {
        netP = parseFloat(netProfitInput);
        if (isNaN(netP)) {
            setError('Net Profit must be a valid number if chosen.');
            return;
        }
    } else {
        const finalVal = parseFloat(finalValue);
        if (isNaN(finalVal) || finalVal < 0) {
            setError('Final Value must be a non-negative number if Net Profit is not used.');
            return;
        }
        netP = finalVal - initialInv;
    }
    
    setProfitOrLoss(netP.toFixed(2));
    const calculatedRoi = (netP / initialInv) * 100;
    
    if(isNaN(calculatedRoi) || !isFinite(calculatedRoi)){
        setError("Could not calculate ROI. Ensure Initial Investment is not zero.");
        return;
    }
    setRoi(calculatedRoi.toFixed(2));
  };
  
  const resetForm = () => {
    setInitialInvestment(''); setFinalValue(''); setNetProfitInput(''); setUseNetProfit(false);
    setRoi(null); setProfitOrLoss(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Return on Investment (ROI) Calculator</AlertTitle><AlertDescription>Calculate ROI based on initial investment and either final value or net profit. ROI measures the profitability of an investment.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter investment details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="initialInvestmentROI">Initial Investment Cost ($)</Label><Input id="initialInvestmentROI" type="number" value={initialInvestment} onChange={e=>setInitialInvestment(e.target.value)} placeholder="e.g., 1000"/></div>
            
            <div className="flex items-center space-x-2">
                <input type="radio" id="useFinalValue" name="profit_input_type" checked={!useNetProfit} onChange={() => setUseNetProfit(false)} className="form-radio"/>
                <Label htmlFor="useFinalValue" className="text-sm">Use Final Value of Investment</Label>
            </div>
            <div className="flex items-center space-x-2">
                 <input type="radio" id="useNetProfit" name="profit_input_type" checked={useNetProfit} onChange={() => setUseNetProfit(true)} className="form-radio"/>
                <Label htmlFor="useNetProfit" className="text-sm">Use Net Profit Directly</Label>
            </div>

            {!useNetProfit && (<div><Label htmlFor="finalValueROI">Final Value of Investment ($)</Label><Input id="finalValueROI" type="number" value={finalValue} onChange={e=>setFinalValue(e.target.value)} placeholder="e.g., 1200"/></div>)}
            {useNetProfit && (<div><Label htmlFor="netProfitROI">Net Profit ($)</Label><Input id="netProfitROI" type="number" value={netProfitInput} onChange={e=>setNetProfitInput(e.target.value)} placeholder="e.g., 200"/></div>)}

          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateRoi}>Calculate ROI</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(roi || error) && (
          <Card>
            <CardHeader><CardDescription>ROI Calculation Results</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {profitOrLoss && (<div className={`p-2 rounded-md ${parseFloat(profitOrLoss) >= 0 ? 'bg-green-500/10 text-green-700' : 'bg-red-500/10 text-red-700'}`}><p className="text-sm">Net Profit / Loss</p><p className="font-semibold">${profitOrLoss}</p></div>)}
              {roi && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Return on Investment (ROI)</p><p className="text-2xl font-bold text-primary">{roi}%</p></div>
                  <CopyButton textToCopy={roi} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: RoiCalculator.tsx ======
==================================================

// ====== START OF FILE: RoofCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8.43 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Home, Ruler } from "lucide-react";

// Roof area often calculated using footprint area and pitch, or direct measurement.
// For simplicity, this will take roof plane dimensions or footprint + pitch.
// 1 roofing square = 100 sq ft. Shingles usually sold in bundles covering ~33.3 sq ft.

type RoofInputMethod = 'plane_dimensions' | 'footprint_pitch';
type UnitSystemRoof = 'imperial' | 'metric';

export default function RoofCalculator() {
  const [inputMethod, setInputMethod] = useState<RoofInputMethod>('plane_dimensions');
  const [units, setUnits] = useState<UnitSystemRoof>('imperial');

  // Plane dimensions
  const [planeLength, setPlaneLength] = useState<string>('');
  const [planeWidth, setPlaneWidth] = useState<string>('');
  const [numPlanes, setNumPlanes] = useState<string>('1'); // For simple gable, might be 2 identical planes

  // Footprint and pitch
  const [footprintLength, setFootprintLength] = useState<string>('');
  const [footprintWidth, setFootprintWidth] = useState<string>('');
  const [roofPitch, setRoofPitch] = useState<string>('6'); // e.g., 6 for 6/12 pitch

  const [totalRoofArea, setTotalRoofArea] = useState<string | null>(null);
  const [roofingSquares, setRoofingSquares] = useState<string | null>(null);
  const [shingleBundles, setShingleBundles] = useState<string | null>(null); // Approx. 3 bundles per square
  const [error, setError] = useState<string | null>(null);

  const calculateRoofArea = () => {
    setError(null);
    setTotalRoofArea(null);
    setRoofingSquares(null);
    setShingleBundles(null);

    let areaSqFt = 0; // Calculate everything in sq ft for squares/bundles

    try {
      if (inputMethod === 'plane_dimensions') {
        const pL = parseFloat(planeLength);
        const pW = parseFloat(planeWidth);
        const nP = parseInt(numPlanes);
        if (isNaN(pL) || pL <=0 || isNaN(pW) || pW <=0 || isNaN(nP) || nP <=0) throw new Error("Valid plane dimensions and number of planes required.");
        
        let singlePlaneArea = pL * pW;
        if (units === 'metric') singlePlaneArea *= 10.7639; // sqm to sqft
        areaSqFt = singlePlaneArea * nP;

      } else { // footprint_pitch
        const fL = parseFloat(footprintLength);
        const fW = parseFloat(footprintWidth);
        const pitchRise = parseFloat(roofPitch); // Rise for a 12-inch run
        if (isNaN(fL) || fL <=0 || isNaN(fW) || fW <=0 || isNaN(pitchRise) || pitchRise < 0) throw new Error("Valid footprint dimensions and roof pitch required.");

        let footprintArea = fL * fW;
        if (units === 'metric') footprintArea *= 10.7639; // sqm to sqft
        
        // Pitch factor: sqrt(rise^2 + run^2) / run. Run is typically 12 inches.
        const run = 12;
        const pitchFactor = Math.sqrt(pitchRise*pitchRise + run*run) / run;
        areaSqFt = footprintArea * pitchFactor; // This is approximate, assumes simple gable
      }

      if (isNaN(areaSqFt) || areaSqFt <= 0) throw new Error("Calculated roof area is invalid.");
      
      const areaWithWastage = areaSqFt * 1.10; // Add 10% wastage by default
      
      setTotalRoofArea(`${areaWithWastage.toFixed(2)} ${units === 'imperial' ? 'sq ft' : 'sq m (converted)'}`);
      setRoofingSquares((areaWithWastage / 100).toFixed(2));
      setShingleBundles(Math.ceil(areaWithWastage / 33.3).toString()); // Approx 3 bundles per square

    } catch (e: any) { setError(e.message); }
  };

  const resetForm = () => {
    setPlaneLength(''); setPlaneWidth(''); setNumPlanes('1');
    setFootprintLength(''); setFootprintWidth(''); setRoofPitch('6');
    setTotalRoofArea(null); setRoofingSquares(null); setShingleBundles(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Roofing Calculator (Simplified)</AlertTitle><AlertDescription>Estimate total roof area and material needs (squares, bundles). Includes a 10% wastage factor. Assumes simple roof shapes. For complex roofs, consult a professional.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardDescription>Enter roof dimensions and type.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
                <div><Label htmlFor="roofInputMethod">Input Method</Label><Select value={inputMethod} onValueChange={(v:RoofInputMethod)=>setInputMethod(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="plane_dimensions">Plane Dimensions</SelectItem><SelectItem value="footprint_pitch">Footprint &amp; Pitch</SelectItem></SelectContent></Select></div>
                <div><Label htmlFor="roofUnits">Units</Label><Select value={units} onValueChange={(v:UnitSystemRoof)=>setUnits(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Imperial (Feet)</SelectItem><SelectItem value="metric">Metric (Meters)</SelectItem></SelectContent></Select></div>
            </div>
            {inputMethod === 'plane_dimensions' && (
              <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 border p-3 rounded-md">
                <div><Label htmlFor="planeL">Plane Length ({units})</Label><Input id="planeL" type="number" value={planeLength} onChange={e=>setPlaneLength(e.target.value)}/></div>
                <div><Label htmlFor="planeW">Plane Width ({units})</Label><Input id="planeW" type="number" value={planeWidth} onChange={e=>setPlaneWidth(e.target.value)}/></div>
                <div><Label htmlFor="numP">Number of Such Planes</Label><Input id="numP" type="number" value={numPlanes} onChange={e=>setNumPlanes(e.target.value)} placeholder="e.g., 2"/></div>
              </div>
            )}
            {inputMethod === 'footprint_pitch' && (
              <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 border p-3 rounded-md">
                <div><Label htmlFor="footL">Footprint Length ({units})</Label><Input id="footL" type="number" value={footprintLength} onChange={e=>setFootprintLength(e.target.value)}/></div>
                <div><Label htmlFor="footW">Footprint Width ({units})</Label><Input id="footW" type="number" value={footprintWidth} onChange={e=>setFootprintWidth(e.target.value)}/></div>
                <div><Label htmlFor="pitch">Roof Pitch (x/12)</Label><Input id="pitch" type="number" value={roofPitch} onChange={e=>setRoofPitch(e.target.value)} placeholder="e.g., 6 for 6/12"/></div>
              </div>
            )}
          </CardContent>
          <CardFooter><Button onClick={calculateRoofArea} className="w-full md:w-auto">Calculate Roofing</Button></CardFooter>
        </Card>
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Estimated Material Needs</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {totalRoofArea && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Roof Area (incl. 10% waste)</p><p className="font-semibold">{totalRoofArea}</p></div>)}
            {roofingSquares && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Roofing Squares (100 sq ft/sq)</p><p className="font-semibold">{roofingSquares}</p></div>)}
            {shingleBundles && (<div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">Approx. Shingle Bundles (33.3 sq ft/bundle)</p><div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{shingleBundles} bundles</p><CopyButton textToCopy={shingleBundles} size="sm" variant="ghost"/></div></div>)}
          </CardContent>
          <CardFooter><Button variant="outline" onClick={resetForm} className="w-full">Reset</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: RoofCalculator.tsx ======
==================================================

// ====== START OF FILE: RoofingMaterialCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.61 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Layers3 } from "lucide-react";

// Similar to RoofCalculator, but can be tailored more for material types if needed in future
type UnitSystemRoofMat = 'imperial' | 'metric';
// Assuming 1 square = 100 sq ft. Shingles: ~3 bundles/square. Rolls: vary. Metal panels: vary.

export default function RoofingMaterialCalculator() {
  const [roofArea, setRoofArea] = useState<string>('');
  const [units, setUnits] = useState<UnitSystemRoofMat>('imperial');
  const [wastage, setWastage] = useState<string>('10'); // Default 10%

  const [totalAreaWithWastage, setTotalAreaWithWastage] = useState<string | null>(null);
  const [roofingSquaresNeeded, setRoofingSquaresNeeded] = useState<string | null>(null);
  const [shingleBundlesNeeded, setShingleBundlesNeeded] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateMaterials = () => {
    setError(null);
    setTotalAreaWithWastage(null);
    setRoofingSquaresNeeded(null);
    setShingleBundlesNeeded(null);

    const area = parseFloat(roofArea);
    const wasteFactor = 1 + (parseFloat(wastage) / 100);

    if (isNaN(area) || area <= 0 || isNaN(wasteFactor -1) || (wasteFactor-1) < 0) {
      setError('Please enter a valid positive roof area and wastage percentage (>=0).');
      return;
    }

    let areaInSqFt = area;
    if (units === 'metric') {
      areaInSqFt = area * 10.7639; // Convert sq m to sq ft for standard material units
    }
    
    const totalAreaCalc = areaInSqFt * wasteFactor;
    setTotalAreaWithWastage(`${totalAreaCalc.toFixed(2)} sq ft (or ${(totalAreaCalc / 10.7639).toFixed(2)} sq m)`);
    
    const squares = totalAreaCalc / 100;
    setRoofingSquaresNeeded(squares.toFixed(2));

    // Assuming standard asphalt shingles, ~3 bundles per square
    const bundles = Math.ceil(squares * 3);
    setShingleBundlesNeeded(bundles.toString());
  };

  const resetForm = () => {
    setRoofArea(''); setWastage('10'); setUnits('imperial');
    setTotalAreaWithWastage(null); setRoofingSquaresNeeded(null); setShingleBundlesNeeded(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Roofing Material Estimator</AlertTitle><AlertDescription>Estimate total roof area and common roofing material quantities (squares, shingle bundles). Includes a wastage factor. Assumes standard material coverages.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter total roof area and wastage.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="roofAreaMat">Total Roof Area</Label><Input id="roofAreaMat" type="number" value={roofArea} onChange={e=>setRoofArea(e.target.value)} placeholder="e.g., 1500"/></div>
              <div><Label htmlFor="roofUnitMat">Unit</Label><Select value={units} onValueChange={(v:UnitSystemRoofMat)=>setUnits(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Square Feet (sq ft)</SelectItem><SelectItem value="metric">Square Meters (sq m)</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="wastageRoofMat">Wastage Factor (%)</Label><Input id="wastageRoofMat" type="number" value={wastage} onChange={e=>setWastage(e.target.value)} placeholder="e.g., 10 (5-15% common)"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateMaterials}>Estimate Materials</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(totalAreaWithWastage || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Material Needs</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalAreaWithWastage && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Area (incl. wastage)</p><p className="font-semibold">{totalAreaWithWastage}</p></div>)}
              {roofingSquaresNeeded && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Roofing Squares (100 sq ft/sq)</p><p className="font-semibold">{roofingSquaresNeeded} squares</p></div>)}
              {shingleBundlesNeeded && (<div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">Approx. Shingle Bundles (3 bundles/sq)</p><div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{shingleBundlesNeeded} bundles</p><CopyButton textToCopy={shingleBundlesNeeded} size="sm" variant="ghost"/></div></div>)}
               <AlertDescription className="text-xs pt-2">Actual material needs can vary by roof complexity and shingle type.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: RoofingMaterialCalculator.tsx ======
==================================================

// ====== START OF FILE: RoofingMaterialsCostCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.08 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Layers3, DollarSign } from "lucide-react";

type UnitSystemRoofCost = 'imperial' | 'metric';

export default function RoofingMaterialsCostCalculator() {
  const [roofArea, setRoofArea] = useState<string>('');
  const [units, setUnits] = useState<UnitSystemRoofCost>('imperial');
  const [costPerUnitArea, setCostPerUnitArea] = useState<string>(''); // $/sq ft or $/sq m
  const [wastage, setWastage] = useState<string>('10'); // Default 10%

  const [totalMaterialCost, setTotalMaterialCost] = useState<string | null>(null);
  const [totalAreaToCover, setTotalAreaToCover] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateCost = () => {
    setError(null);
    setTotalMaterialCost(null);
    setTotalAreaToCover(null);

    const area = parseFloat(roofArea);
    const cost = parseFloat(costPerUnitArea);
    const wasteFactor = 1 + (parseFloat(wastage) / 100);

    if (isNaN(area) || area <= 0 || isNaN(cost) || cost < 0 || isNaN(wasteFactor - 1) || (wasteFactor - 1) < 0) {
      setError('Roof area and cost must be positive. Wastage must be non-negative.');
      return;
    }

    const totalAreaWithWastage = area * wasteFactor;
    const totalCost = totalAreaWithWastage * cost;
    
    setTotalAreaToCover(`${totalAreaWithWastage.toFixed(2)} ${units === 'imperial' ? 'sq ft' : 'sq m'}`);
    setTotalMaterialCost(totalCost.toFixed(2));
  };

  const resetForm = () => {
    setRoofArea('');
    setCostPerUnitArea('');
    setWastage('10');
    setTotalMaterialCost(null);
    setTotalAreaToCover(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Roofing Materials Cost Estimator</AlertTitle><AlertDescription>Estimate the total material cost for your roofing project based on area, material cost per unit area, and a wastage factor.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your roofing project details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="roofAreaCost">Total Roof Area</Label><Input id="roofAreaCost" type="number" value={roofArea} onChange={e=>setRoofArea(e.target.value)} placeholder="e.g., 1800"/></div>
              <div><Label htmlFor="roofUnitCost">Unit</Label><Select value={units} onValueChange={(v:UnitSystemRoofCost)=>setUnits(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Square Feet (sq ft)</SelectItem><SelectItem value="metric">Square Meters (sq m)</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="costPerUnitAreaRoof">Material Cost per {units === 'imperial' ? 'Square Foot' : 'Square Meter'} ($)</Label><Input id="costPerUnitAreaRoof" type="number" value={costPerUnitArea} onChange={e=>setCostPerUnitArea(e.target.value)} placeholder="e.g., 3.50"/></div>
            <div><Label htmlFor="wastageRoofCost">Wastage Factor (%)</Label><Input id="wastageRoofCost" type="number" value={wastage} onChange={e=>setWastage(e.target.value)} placeholder="e.g., 10 (10-15% common)"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateCost}>Estimate Cost</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(totalMaterialCost || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Material Cost</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalAreaToCover && (<div className="p-2 bg-muted rounded-md text-sm mb-2">Total Area to Purchase (incl. wastage): <strong className="font-semibold">{totalAreaToCover}</strong></div>)}
              {totalMaterialCost && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Total Material Cost</p><p className="text-2xl font-bold text-primary">${totalMaterialCost}</p></div><CopyButton textToCopy={totalMaterialCost}/></div>)}
              <AlertDescription className="text-xs pt-2">This estimate is for materials only and does not include labor, underlayment, or other supplies.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: RoofingMaterialsCostCalculator.tsx ======
==================================================

// ====== START OF FILE: RoofingShinglesAndMaterialsEstimator.tsx ======
// File converted from TSX to TXT
// Original size: 5.76 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Layers3 } from "lucide-react";

type UnitSystemRoofEst = 'imperial' | 'metric';
const SQFT_PER_SQUARE = 100;
const BUNDLES_PER_SQUARE = 3;
const SQFT_PER_UNDERLAYMENT_ROLL = 400; // Common size for synthetic underlayment

export default function RoofingShinglesAndMaterialsEstimator() {
  const [roofArea, setRoofArea] = useState<string>('');
  const [units, setUnits] = useState<UnitSystemRoofEst>('imperial');
  const [wastage, setWastage] = useState<string>('15'); // 10-15% is common for complex roofs

  const [totalAreaToCover, setTotalAreaToCover] = useState<string | null>(null);
  const [squaresNeeded, setSquaresNeeded] = useState<string | null>(null);
  const [shingleBundles, setShingleBundles] = useState<string | null>(null);
  const [underlaymentRolls, setUnderlaymentRolls] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateMaterials = () => {
    setError(null);
    setTotalAreaToCover(null);
    setSquaresNeeded(null);
    setShingleBundles(null);
    setUnderlaymentRolls(null);

    const area = parseFloat(roofArea);
    const wasteFactor = 1 + (parseFloat(wastage) / 100);

    if (isNaN(area) || area <= 0 || isNaN(wasteFactor - 1) || (wasteFactor - 1) < 0) {
      setError('Roof area must be positive. Wastage must be a non-negative number.');
      return;
    }

    let areaInSqFt = area;
    if (units === 'metric') {
      areaInSqFt = area * 10.7639; // Convert sq m to sq ft for US material units
    }
    
    const totalAreaCalc = areaInSqFt * wasteFactor;
    setTotalAreaToCover(`${totalAreaCalc.toFixed(2)} sq ft (or ${(totalAreaCalc / 10.7639).toFixed(2)} sq m)`);
    
    const numSquares = totalAreaCalc / SQFT_PER_SQUARE;
    setSquaresNeeded(numSquares.toFixed(2));

    setShingleBundles(Math.ceil(numSquares * BUNDLES_PER_SQUARE).toString());
    setUnderlaymentRolls(Math.ceil(totalAreaCalc / SQFT_PER_UNDERLAYMENT_ROLL).toString());
  };

  const resetForm = () => {
    setRoofArea(''); setWastage('15'); setUnits('imperial');
    setTotalAreaToCover(null); setSquaresNeeded(null); setShingleBundles(null); setUnderlaymentRolls(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Roofing Materials Estimator</AlertTitle><AlertDescription>Estimate the quantity of major roofing materials like shingles and underlayment needed for a given roof area.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter total roof area and wastage.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="roofAreaEst">Total Roof Area</Label><Input id="roofAreaEst" type="number" value={roofArea} onChange={e=>setRoofArea(e.target.value)} placeholder="e.g., 2000"/></div>
              <div><Label htmlFor="roofUnitEst">Unit</Label><Select value={units} onValueChange={(v:UnitSystemRoofEst)=>setUnits(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Square Feet</SelectItem><SelectItem value="metric">Square Meters</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="wastageRoofEst">Wastage Factor (%)</Label><Input id="wastageRoofEst" type="number" value={wastage} onChange={e=>setWastage(e.target.value)} placeholder="e.g., 15 for complex roofs"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateMaterials}>Estimate Materials</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(squaresNeeded || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Materials (US Units)</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalAreaToCover && (<div className="p-2 bg-muted rounded-md text-sm">Total Area to Purchase (incl. wastage): <strong className="font-semibold">{totalAreaToCover}</strong></div>)}
              {squaresNeeded && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Roofing Squares</p><p className="font-semibold">{squaresNeeded} squares</p></div>)}
              {shingleBundles && (<div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">Approx. Shingle Bundles</p><div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{shingleBundles} bundles</p><CopyButton textToCopy={shingleBundles} size="sm" variant="ghost"/></div></div>)}
              {underlaymentRolls && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Underlayment Rolls (~400 sq ft/roll)</p><p className="font-semibold">{underlaymentRolls} rolls</p></div>)}
               <AlertDescription className="text-xs pt-2">Material coverages are approximate. Consult supplier specs.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: RoofingShinglesAndMaterialsEstimator.tsx ======
==================================================

// ====== START OF FILE: RootCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.53 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, SquareRoot } from "lucide-react";

type RootType = 'square' | 'cube' | 'nth';

export default function RootCalculator() {
  const [numberInput, setNumberInput] = useState<string>('');
  const [rootType, setRootType] = useState<RootType>('square');
  const [nthRootValue, setNthRootValue] = useState<string>('2'); // For custom nth root

  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateRoot = () => {
    setError(null);
    setResult(null);

    const num = parseFloat(numberInput);
    const nRoot = parseInt(nthRootValue);

    if (isNaN(num)) {
      setError('Please enter a valid number to find the root of.');
      return;
    }

    let calculatedRoot: number;

    switch (rootType) {
      case 'square':
        if (num < 0) { setError('Cannot calculate real square root of a negative number.'); return; }
        calculatedRoot = Math.sqrt(num);
        break;
      case 'cube':
        calculatedRoot = Math.cbrt(num);
        break;
      case 'nth':
        if (isNaN(nRoot) || nRoot === 0) { setError('Nth root value must be a non-zero integer.'); return; }
        if (num < 0 && nRoot % 2 === 0) { setError('Cannot calculate real even root of a negative number.'); return; }
        calculatedRoot = Math.pow(num, 1 / nRoot);
        break;
      default:
        setError('Invalid root type selected.');
        return;
    }

    if (isNaN(calculatedRoot) || !isFinite(calculatedRoot)) {
      setError('Calculation resulted in an invalid number.');
      return;
    }
    setResult(calculatedRoot.toPrecision(10));
  };

  const resetForm = () => {
    setNumberInput('');
    setNthRootValue('2');
    setRootType('square');
    setResult(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Root Calculator</AlertTitle><AlertDescription>Calculate square root, cube root, or any Nth root of a number.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter number and select root type.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="numberRoot">Number</Label><Input id="numberRoot" type="number" value={numberInput} onChange={e=>setNumberInput(e.target.value)} placeholder="e.g., 27"/></div>
            <div><Label htmlFor="rootType">Root Type</Label><Select value={rootType} onValueChange={(v: RootType) => setRootType(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="square">Square Root (√x)</SelectItem><SelectItem value="cube">Cube Root (³√x)</SelectItem><SelectItem value="nth">Nth Root (ⁿ√x)</SelectItem></SelectContent></Select></div>
            {rootType === 'nth' && (<div><Label htmlFor="nthRootValue">Value of N (for Nth root)</Label><Input id="nthRootValue" type="number" value={nthRootValue} onChange={e=>setNthRootValue(e.target.value)} placeholder="e.g., 4 for 4th root"/></div>)}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateRoot}>Calculate Root</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Root</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">{rootType === 'nth' ? `${nthRootValue}th` : rootType} Root of {numberInput}</p><p className="text-2xl font-bold text-primary break-all">{result}</p></div><CopyButton textToCopy={result} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: RootCalculator.tsx ======
==================================================

// ====== START OF FILE: RothIraCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.62 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, ShieldCheck, TrendingUp } from "lucide-react";

export default function RothIraCalculator() {
  const [currentAgeRoth, setCurrentAgeRoth] = useState<string>('');
  const [retirementAgeRoth, setRetirementAgeRoth] = useState<string>('');
  const [initialBalanceRoth, setInitialBalanceRoth] = useState<string>('0');
  const [annualContributionRoth, setAnnualContributionRoth] = useState<string>('');
  const [annualReturnRateRoth, setAnnualReturnRateRoth] = useState<string>(''); // %

  const [futureValueRoth, setFutureValueRoth] = useState<string | null>(null);
  const [totalContributionsRoth, setTotalContributionsRoth] = useState<string | null>(null);
  const [totalGrowthRoth, setTotalGrowthRoth] = useState<string | null>(null);
  const [errorRoth, setErrorRoth] = useState<string | null>(null);

  const calculateRothIraGrowth = () => {
    setErrorRoth(null);
    setFutureValueRoth(null);
    setTotalContributionsRoth(null);
    setTotalGrowthRoth(null);

    const age = parseInt(currentAgeRoth);
    const retAge = parseInt(retirementAgeRoth);
    const P0 = parseFloat(initialBalanceRoth);
    const PMT_annual = parseFloat(annualContributionRoth);
    const r_annual = parseFloat(annualReturnRateRoth) / 100;

    if (isNaN(age) || age <= 0 || isNaN(retAge) || retAge <= age || isNaN(P0) || P0 < 0 || isNaN(PMT_annual) || PMT_annual < 0 || isNaN(r_annual) || r_annual < 0) {
      setErrorRoth('Please enter valid numbers for ages (Retirement > Current), balances/contributions (>=0), and rate (>=0).');
      return;
    }

    const t_years = retAge - age;
    
    // FV of initial principal
    const fv_principal = P0 * Math.pow(1 + r_annual, t_years);
    
    // FV of annual contributions (ordinary annuity - contributions at end of year)
    let fv_contributions = 0;
    if (r_annual === 0) {
        fv_contributions = PMT_annual * t_years;
    } else {
        fv_contributions = PMT_annual * ((Math.pow(1 + r_annual, t_years) - 1) / r_annual);
    }
    
    const finalFV = fv_principal + fv_contributions;
    const finalTotalContributions = P0 + (PMT_annual * t_years);
    const finalTotalGrowth = finalFV - finalTotalContributions;

    setFutureValueRoth(finalFV.toFixed(2));
    setTotalContributionsRoth(finalTotalContributions.toFixed(2));
    setTotalGrowthRoth(finalTotalGrowth.toFixed(2));
  };
  
  const resetForm = () => {
    setCurrentAgeRoth(''); setRetirementAgeRoth(''); setInitialBalanceRoth('0'); setAnnualContributionRoth(''); setAnnualReturnRateRoth('');
    setFutureValueRoth(null); setTotalContributionsRoth(null); setTotalGrowthRoth(null); setErrorRoth(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Roth IRA Growth Estimator (Simplified)</AlertTitle><AlertDescription>Estimate the future value of your Roth IRA. This simplified model assumes annual contributions and compounding, and does not account for specific IRS contribution limits, income phase-outs, or tax implications on non-qualified withdrawals. Roth IRA growth and qualified withdrawals are generally tax-free. Consult a financial advisor.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your Roth IRA details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="currentAgeRoth">Current Age</Label><Input id="currentAgeRoth" type="number" value={currentAgeRoth} onChange={(e) => setCurrentAgeRoth(e.target.value)} placeholder="e.g., 25"/></div>
              <div><Label htmlFor="retirementAgeRoth">Retirement Age</Label><Input id="retirementAgeRoth" type="number" value={retirementAgeRoth} onChange={(e) => setRetirementAgeRoth(e.target.value)} placeholder="e.g., 60"/></div>
            </div>
            <div><Label htmlFor="initialBalanceRoth">Current Roth IRA Balance ($)</Label><Input id="initialBalanceRoth" type="number" value={initialBalanceRoth} onChange={(e) => setInitialBalanceRoth(e.target.value)} placeholder="e.g., 5000"/></div>
            <div><Label htmlFor="annualContributionRoth">Annual Contribution ($)</Label><Input id="annualContributionRoth" type="number" value={annualContributionRoth} onChange={(e) => setAnnualContributionRoth(e.target.value)} placeholder="e.g., 7000 (Max for 2024 under 50)"/></div>
            <div><Label htmlFor="annualRateOfReturnRoth">Expected Annual Rate of Return (%)</Label><Input id="annualRateOfReturnRoth" type="number" value={annualReturnRateRoth} onChange={(e) => setAnnualReturnRateRoth(e.target.value)} placeholder="e.g., 7"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateRothIraGrowth}>Calculate Growth</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(futureValueRoth || errorRoth) && (
          <Card>
            <CardHeader><CardDescription>Roth IRA Projection</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {errorRoth && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{errorRoth}</AlertDescription></Alert>)}
              {futureValueRoth && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Est. Value at Retirement</p><p className="text-2xl font-bold text-primary">${futureValueRoth}</p></div><CopyButton textToCopy={futureValueRoth} /></div>)}
              {totalContributionsRoth && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Contributions Made</p><p className="font-semibold">${totalContributionsRoth}</p></div>)}
              {totalGrowthRoth && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Tax-Free Growth</p><p className="font-semibold">${totalGrowthRoth}</p></div>)}
            </CardContent>
             <CardFooter><p className="text-xs text-muted-foreground">Assumes contributions at end of year and annual compounding. Qualified withdrawals are tax-free.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: RothIraCalculator.tsx ======
==================================================

// ====== START OF FILE: RothVs401kCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.82 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, GitCompareArrows } from "lucide-react";

export default function RothVs401kCalculator() {
  const [age, setAge] = useState<string>('');
  const [retirementAge, setRetirementAge] = useState<string>('');
  const [annualContribution, setAnnualContribution] = useState<string>('');
  const [annualReturn, setAnnualReturn] = useState<string>('');
  const [currentTaxRate, setCurrentTaxRate] = useState<string>('');
  const [retirementTaxRate, setRetirementTaxRate] = useState<string>('');

  const [traditionalResult, setTraditionalResult] = useState<string | null>(null);
  const [rothResult, setRothResult] = useState<string | null>(null);
  const [winner, setWinner] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateComparison = () => {
    setError(null);
    setTraditionalResult(null);
    setRothResult(null);
    setWinner(null);

    const curAge = parseInt(age);
    const retAge = parseInt(retirementAge);
    const contribution = parseFloat(annualContribution);
    const rate = parseFloat(annualReturn) / 100;
    const curTax = parseFloat(currentTaxRate) / 100;
    const retTax = parseFloat(retirementTaxRate) / 100;

    if (isNaN(curAge) || isNaN(retAge) || isNaN(contribution) || isNaN(rate) || isNaN(curTax) || isNaN(retTax)) {
      setError("Please enter valid numbers for all fields.");
      return;
    }
    if (curAge >= retAge) {
      setError("Current age must be less than retirement age.");
      return;
    }

    const years = retAge - curAge;

    // Traditional 401(k)/IRA: Contribute pre-tax, grows tax-deferred, taxed on withdrawal.
    let traditionalFutureValue = 0;
    for (let i = 0; i < years; i++) {
      traditionalFutureValue = (traditionalFutureValue + contribution) * (1 + rate);
    }
    const traditionalNet = traditionalFutureValue * (1 - retTax);
    setTraditionalResult(traditionalNet.toFixed(2));

    // Roth 401(k)/IRA: Contribute post-tax, grows tax-free, tax-free on withdrawal.
    const postTaxContribution = contribution * (1 - curTax);
    let rothFutureValue = 0;
    for (let i = 0; i < years; i++) {
      rothFutureValue = (rothFutureValue + postTaxContribution) * (1 + rate);
    }
    setRothResult(rothFutureValue.toFixed(2));
    
    if (traditionalNet > rothFutureValue) {
        setWinner(`Traditional 401(k)/IRA is estimated to be better by $${(traditionalNet - rothFutureValue).toFixed(2)}.`);
    } else if (rothFutureValue > traditionalNet) {
        setWinner(`Roth 401(k)/IRA is estimated to be better by $${(rothFutureValue - traditionalNet).toFixed(2)}.`);
    } else {
        setWinner("Both options are estimated to have a similar outcome.");
    }
  };
  
  const resetForm = () => {
      setAge(''); setRetirementAge(''); setAnnualContribution(''); setAnnualReturn(''); setCurrentTaxRate(''); setRetirementTaxRate('');
      setTraditionalResult(null); setRothResult(null); setWinner(null); setError(null);
  }

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Highly Simplified - For Illustration Only</AlertTitle>
        <AlertDescription>
          This calculator provides a basic comparison between Traditional (pre-tax) and Roth (post-tax) retirement accounts. It ignores contribution limits, income phase-outs, employer match, and specific tax bracket details. It's a conceptual tool to illustrate the impact of your current vs. future tax rate assumption. <strong className="font-semibold">Consult a financial advisor.</strong>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardDescription>Compare retirement account outcomes based on tax assumptions.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="currentAgeRVT">Current Age</Label><Input id="currentAgeRVT" type="number" value={age} onChange={e=>setAge(e.target.value)} /></div>
              <div><Label htmlFor="retirementAgeRVT">Retirement Age</Label><Input id="retirementAgeRVT" type="number" value={retirementAge} onChange={e=>setRetirementAge(e.target.value)} /></div>
            </div>
            <div className="grid grid-cols-2 gap-4">
                <div><Label htmlFor="annualContributionRVT">Annual Contribution ($)</Label><Input id="annualContributionRVT" type="number" value={annualContribution} onChange={e=>setAnnualContribution(e.target.value)} /></div>
                <div><Label htmlFor="annualReturnRVT">Annual Investment Return (%)</Label><Input id="annualReturnRVT" type="number" value={annualReturn} onChange={e=>setAnnualReturn(e.target.value)} /></div>
            </div>
            <div className="grid grid-cols-2 gap-4">
                <div><Label htmlFor="currentTaxRateRVT">Current Marginal Tax Rate (%)</Label><Input id="currentTaxRateRVT" type="number" value={currentTaxRate} onChange={e=>setCurrentTaxRate(e.target.value)} /></div>
                <div><Label htmlFor="retirementTaxRateRVT">Expected Retirement Tax Rate (%)</Label><Input id="retirementTaxRateRVT" type="number" value={retirementTaxRate} onChange={e=>setRetirementTaxRate(e.target.value)} /></div>
            </div>
          </CardContent>
          <CardFooter><Button onClick={calculateComparison} className="w-full md:w-auto">Compare Accounts</Button></CardFooter>
        </Card>
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Estimated Net Value at Retirement</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && <Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>}
            {traditionalResult && <div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Traditional 401k/IRA Net Value</p><p className="font-semibold">${traditionalResult}</p></div>}
            {rothResult && <div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Roth 401k/IRA Net Value</p><p className="font-semibold">${rothResult}</p></div>}
            {winner && <Alert className="mt-2"><p className="font-semibold">{winner}</p></Alert>}
          </CardContent>
          <CardFooter><Button variant="outline" onClick={resetForm} className="w-full">Reset</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: RothVs401kCalculator.tsx ======
==================================================

// ====== START OF FILE: RoundingCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.65 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, SigmaSquare } from "lucide-react";

type RoundingMethod = 'nearest_integer' | 'decimal_places' | 'floor' | 'ceil';

export default function RoundingCalculator() {
  const [numberToRound, setNumberToRound] = useState<string>('');
  const [method, setMethod] = useState<RoundingMethod>('nearest_integer');
  const [decimalPlaces, setDecimalPlaces] = useState<string>('2'); // For 'decimal_places' method

  const [roundedResult, setRoundedResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateRounding = () => {
    setError(null);
    setRoundedResult(null);

    const num = parseFloat(numberToRound);
    if (isNaN(num)) {
      setError('Please enter a valid number to round.');
      return;
    }

    let resultVal: number;
    switch (method) {
      case 'nearest_integer':
        resultVal = Math.round(num);
        break;
      case 'decimal_places':
        const dp = parseInt(decimalPlaces);
        if (isNaN(dp) || dp < 0) { setError('Decimal places must be a non-negative integer.'); return; }
        const factor = Math.pow(10, dp);
        resultVal = Math.round(num * factor) / factor;
        break;
      case 'floor':
        resultVal = Math.floor(num);
        break;
      case 'ceil':
        resultVal = Math.ceil(num);
        break;
      default:
        setError('Invalid rounding method selected.');
        return;
    }
    setRoundedResult(resultVal.toString());
  };

  const resetForm = () => {
    setNumberToRound('');
    setMethod('nearest_integer');
    setDecimalPlaces('2');
    setRoundedResult(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Rounding Calculator</AlertTitle><AlertDescription>Round numbers to the nearest integer, specified decimal places, or use floor/ceiling functions.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter number and rounding options.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="numberToRound">Number to Round</Label><Input id="numberToRound" type="number" value={numberToRound} onChange={e=>setNumberToRound(e.target.value)} placeholder="e.g., 123.456"/></div>
            <div><Label htmlFor="roundingMethod">Rounding Method</Label>
              <Select value={method} onValueChange={(v: RoundingMethod) => setMethod(v)}>
                <SelectTrigger><SelectValue/></SelectTrigger>
                <SelectContent>
                  <SelectItem value="nearest_integer">Nearest Integer</SelectItem>
                  <SelectItem value="decimal_places">To Decimal Places</SelectItem>
                  <SelectItem value="floor">Floor (Round Down)</SelectItem>
                  <SelectItem value="ceil">Ceiling (Round Up)</SelectItem>
                </SelectContent>
              </Select>
            </div>
            {method === 'decimal_places' && (<div><Label htmlFor="decimalPlaces">Number of Decimal Places</Label><Input id="decimalPlaces" type="number" value={decimalPlaces} onChange={e=>setDecimalPlaces(e.target.value)} placeholder="e.g., 2"/></div>)}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateRounding}>Round Number</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(roundedResult || error) && (
          <Card>
            <CardHeader><CardDescription>Rounded Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {roundedResult && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Result</p><p className="text-2xl font-bold text-primary">{roundedResult}</p></div><CopyButton textToCopy={roundedResult} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: RoundingCalculator.tsx ======
==================================================

// ====== START OF FILE: RunningPaceCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8.99 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Footprints, Timer } from "lucide-react";

// Similar to PaceCalculator but framed specifically for running

type DistanceUnitRun = 'km' | 'miles' | 'meters' | 'yards';
type TargetVariableRun = 'pace' | 'time' | 'distance';

export default function RunningPaceCalculator() {
  const [target, setTarget] = useState<TargetVariableRun>('pace');
  const [distance, setDistance] = useState<string>('');
  const [timeHours, setTimeHours] = useState<string>('');
  const [timeMinutes, setTimeMinutes] = useState<string>('');
  const [timeSeconds, setTimeSeconds] = useState<string>('');
  const [paceMinutes, setPaceMinutes] = useState<string>('');
  const [paceSeconds, setPaceSeconds] = useState<string>('');
  
  const [distanceUnit, setDistanceUnit] = useState<DistanceUnitRun>('km');
  const [paceUnit, setPaceUnit] = useState<'min_km' | 'min_mile'>('min_km');
  
  const [result, setResult] = useState<string | null>(null);
  const [resultLabel, setResultLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const formatPaceString = (secondsPerUnit: number, unit: 'km' | 'mile'): string => {
    const minutes = Math.floor(secondsPerUnit / 60);
    const seconds = Math.round(secondsPerUnit % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')} per ${unit}`;
  };
  
  const formatTimeString = (totalSeconds: number): string => {
    const h = Math.floor(totalSeconds / 3600);
    const m = Math.floor((totalSeconds % 3600) / 60);
    const s = Math.round(totalSeconds % 60);
    return `${h > 0 ? `${h}h ` : ''}${m}m ${s}s`;
  };

  const calculate = () => {
    setError(null);
    setResult(null);
    setResultLabel('');

    const distVal = parseFloat(distance);
    const tH = parseFloat(timeHours) || 0;
    const tM = parseFloat(timeMinutes) || 0;
    const tS = parseFloat(timeSeconds) || 0;
    const pM = parseFloat(paceMinutes) || 0;
    const pS = parseFloat(paceSeconds) || 0;

    try {
      let distInKm: number;
      switch(distanceUnit) {
        case 'miles': distInKm = distVal * 1.60934; break;
        case 'meters': distInKm = distVal / 1000; break;
        case 'yards': distInKm = distVal * 0.0009144; break;
        default: distInKm = distVal; // km
      }

      if (target === 'pace') {
        if (isNaN(distVal) || distVal <= 0 || (tH === 0 && tM === 0 && tS === 0)) throw new Error("Distance and Time must be positive.");
        const totalTimeInSeconds = tH * 3600 + tM * 60 + tS;
        if (totalTimeInSeconds <=0) throw new Error("Total time must be positive.");
        
        let secondsPerUnitOutput: number;
        if (paceUnit === 'min_km') {
          secondsPerUnitOutput = totalTimeInSeconds / distInKm;
          setResult(formatPaceString(secondsPerUnitOutput, 'km'));
          setResultLabel('Pace per km');
        } else { // min_mile
          const distInMiles = distInKm / 1.60934;
          secondsPerUnitOutput = totalTimeInSeconds / distInMiles;
          setResult(formatPaceString(secondsPerUnitOutput, 'mile'));
          setResultLabel('Pace per mile');
        }
      } else if (target === 'time') {
        if (isNaN(distVal) || distVal <= 0 || (pM === 0 && pS === 0)) throw new Error("Distance and Pace must be positive.");
        let paceTotalSecondsPerKm = pM * 60 + pS;
        if (paceUnit === 'min_mile') {
          paceTotalSecondsPerKm = (pM * 60 + pS) / 1.60934; // Convert pace from per/mile to per/km
        }
        if (paceTotalSecondsPerKm <=0) throw new Error("Total pace time must be positive.");
        const totalSeconds = distInKm * paceTotalSecondsPerKm;
        setResult(formatTimeString(totalSeconds));
        setResultLabel('Total Time');
      } else { // distance
        if ((tH === 0 && tM === 0 && tS === 0) || (pM === 0 && pS === 0)) throw new Error("Time and Pace must be positive.");
        const totalTimeInSeconds = tH * 3600 + tM * 60 + tS;
        let paceTotalSecondsPerKm = pM * 60 + pS;
        if (paceUnit === 'min_mile') {
          paceTotalSecondsPerKm = (pM * 60 + pS) / 1.60934;
        }
        if (totalTimeInSeconds <=0 || paceTotalSecondsPerKm <=0) throw new Error("Total time and pace time must be positive.");
        const calculatedDistKm = totalTimeInSeconds / paceTotalSecondsPerKm;
        
        let outputDist = calculatedDistKm;
        if (distanceUnit === 'miles') outputDist = calculatedDistKm / 1.60934;
        else if (distanceUnit === 'meters') outputDist = calculatedDistKm * 1000;
        else if (distanceUnit === 'yards') outputDist = calculatedDistKm / 0.0009144;
        
        setResult(`${outputDist.toFixed(2)} ${distanceUnit}`);
        setResultLabel(`Total Distance (${distanceUnit})`);
      }
    } catch (e: any) { setError(e.message); }
  };
  
  const resetForm = () => {
    setDistance(''); setTimeHours(''); setTimeMinutes(''); setTimeSeconds('');
    setPaceMinutes(''); setPaceSeconds('');
    setResult(null); setError(null); setResultLabel('');
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Running Pace Calculator</AlertTitle><AlertDescription>Calculate your running pace, finish time, or distance. Supports various units.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Solve for Pace, Time, or Distance.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="targetRunPaceCalc">Calculate:</Label><Select value={target} onValueChange={(v: TargetVariableRun) => {setTarget(v);setResult(null);setError(null);}}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent><SelectItem value="pace">Pace</SelectItem><SelectItem value="time">Time</SelectItem><SelectItem value="distance">Distance</SelectItem></SelectContent></Select></div>
            
            {target !== 'distance' && (<div className="grid grid-cols-[2fr_1fr] gap-2"><div><Label htmlFor="distanceRun">Distance</Label><Input id="distanceRun" type="number" value={distance} onChange={e => setDistance(e.target.value)} /></div><div><Label htmlFor="distUnitRun">Unit</Label><Select value={distanceUnit} onValueChange={(v: DistanceUnitRun) => setDistanceUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="km">km</SelectItem><SelectItem value="miles">miles</SelectItem><SelectItem value="meters">meters</SelectItem><SelectItem value="yards">yards</SelectItem></SelectContent></Select></div></div>)}
            
            {target !== 'time' && (<div><Label>Time (HH:MM:SS)</Label><div className="grid grid-cols-3 gap-2"><Input type="number" value={timeHours} onChange={e => setTimeHours(e.target.value)} placeholder="H" /><Input type="number" value={timeMinutes} onChange={e => setTimeMinutes(e.target.value)} placeholder="M" /><Input type="number" value={timeSeconds} onChange={e => setTimeSeconds(e.target.value)} placeholder="S" /></div></div>)}
            
            {target !== 'pace' && (<div className="grid grid-cols-[2fr_1fr] gap-2"><div><Label>Pace (MM:SS per unit)</Label><div className="grid grid-cols-2 gap-1"><Input type="number" value={paceMinutes} onChange={e => setPaceMinutes(e.target.value)} placeholder="Min" /><Input type="number" value={paceSeconds} onChange={e => setPaceSeconds(e.target.value)} placeholder="Sec" /></div></div><div><Label htmlFor="paceUnitRun">Pace Unit</Label><Select value={paceUnit} onValueChange={(v: 'min_km'|'min_mile') => setPaceUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="min_km">min/km</SelectItem><SelectItem value="min_mile">min/mile</SelectItem></SelectContent></Select></div></div>)}
          
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculate}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">{resultLabel}</p><p className="text-2xl font-bold text-primary">{result}</p></div><CopyButton textToCopy={result} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: RunningPaceCalculator.tsx ======
==================================================

// ====== START OF FILE: SaaSMetricsCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.97 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, BarChartHorizontalBig } from "lucide-react";

export default function SaaSMetricsCalculator() {
  const [monthlyRecurringRevenue, setMonthlyRecurringRevenue] = useState<string>('');
  const [numCustomersStart, setNumCustomersStart] = useState<string>(''); // For churn
  const [numCustomersLost, setNumCustomersLost] = useState<string>('');   // For churn

  const [annualRecurringRevenue, setAnnualRecurringRevenue] = useState<string | null>(null);
  const [customerChurnRate, setCustomerChurnRate] = useState<string | null>(null);
  // Could add LTV, CAC later with more inputs
  const [error, setError] = useState<string | null>(null);

  const calculateSaaSMetrics = () => {
    setError(null); setAnnualRecurringRevenue(null); setCustomerChurnRate(null);
    const mrr = parseFloat(monthlyRecurringRevenue);
    const custStart = parseInt(numCustomersStart);
    const custLost = parseInt(numCustomersLost);

    let arrCalculated = false, churnCalculated = false;

    if (monthlyRecurringRevenue.trim() !== "") {
        if (isNaN(mrr) || mrr < 0) { setError('MRR must be a non-negative number.'); return; }
        setAnnualRecurringRevenue((mrr * 12).toFixed(2));
        arrCalculated = true;
    }

    if (numCustomersStart.trim() !== "" && numCustomersLost.trim() !== "") {
        if (isNaN(custStart) || custStart <= 0 || isNaN(custLost) || custLost < 0) {
            setError('Number of customers (start > 0, lost >= 0) must be valid numbers for churn calculation.'); return;
        }
        if (custLost > custStart) {
            setError('Customers lost cannot exceed customers at start of period.'); return;
        }
        const churn = (custLost / custStart) * 100;
        setCustomerChurnRate(churn.toFixed(2));
        churnCalculated = true;
    }
    
    if (!arrCalculated && !churnCalculated) {
        setError("Please provide input for at least one metric (MRR for ARR, or Customer data for Churn).");
    }
  };

  const resetForm = () => {
    setMonthlyRecurringRevenue(''); setNumCustomersStart(''); setNumCustomersLost('');
    setAnnualRecurringRevenue(null); setCustomerChurnRate(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>SaaS Metrics Calculator (Simplified)</AlertTitle><AlertDescription>Calculate key SaaS metrics like Annual Recurring Revenue (ARR) from MRR, and basic Customer Churn Rate. More metrics coming soon.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your SaaS data.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="mrrSaaS">Monthly Recurring Revenue (MRR) ($)</Label><Input id="mrrSaaS" type="number" value={monthlyRecurringRevenue} onChange={e=>setMonthlyRecurringRevenue(e.target.value)} placeholder="e.g., 10000"/></div>
            <p className="text-sm font-medium text-muted-foreground pt-2 border-t">Customer Churn Rate (Optional):</p>
            <div><Label htmlFor="custStartSaaS">Customers at Start of Period</Label><Input id="custStartSaaS" type="number" value={numCustomersStart} onChange={e=>setNumCustomersStart(e.target.value)} placeholder="e.g., 500"/></div>
            <div><Label htmlFor="custLostSaaS">Customers Lost During Period</Label><Input id="custLostSaaS" type="number" value={numCustomersLost} onChange={e=>setNumCustomersLost(e.target.value)} placeholder="e.g., 25"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateSaaSMetrics}>Calculate Metrics</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(annualRecurringRevenue || customerChurnRate || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated SaaS Metrics</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {annualRecurringRevenue && (<div className="p-2 bg-primary/10 rounded-md text-sm">Annual Recurring Revenue (ARR): <strong className="font-bold text-primary">${annualRecurringRevenue}</strong></div>)}
              {customerChurnRate && (<div className="p-2 bg-muted rounded-md text-sm">Customer Churn Rate: <strong className="font-semibold">{customerChurnRate}%</strong> per period</div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
    

// ====== END OF FILE: SaaSMetricsCalculator.tsx ======
==================================================

// ====== START OF FILE: SalaryBreakdownCalculatorSimplifiedUsStyle.tsx ======
// File converted from TSX to TXT
// Original size: 5.06 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Terminal, Info, DollarSign } from "lucide-react";

interface SalaryBreakdown {
  period: string;
  gross: string;
  net: string;
}

export default function SalaryBreakdownCalculatorSimplifiedUsStyle() {
  const [annualSalary, setAnnualSalary] = useState<string>('');
  const [estimatedTaxRate, setEstimatedTaxRate] = useState<string>('22'); // Combined flat tax rate %

  const [breakdown, setBreakdown] = useState<SalaryBreakdown[] | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateBreakdown = () => {
    setError(null);
    setBreakdown(null);

    const salary = parseFloat(annualSalary);
    const taxRate = parseFloat(estimatedTaxRate) / 100;

    if (isNaN(salary) || salary < 0 || isNaN(taxRate) || taxRate < 0 || taxRate >= 1) {
      setError('Please enter a valid non-negative annual salary and a tax rate between 0 and 99.9%.');
      return;
    }

    const payPeriods = [
      { name: 'Monthly', divisor: 12 },
      { name: 'Semi-Monthly', divisor: 24 },
      { name: 'Bi-Weekly', divisor: 26 },
      { name: 'Weekly', divisor: 52 },
      { name: 'Daily (8h)', divisor: 52 * 5 },
      { name: 'Hourly', divisor: 52 * 40 },
    ];

    const results = payPeriods.map(period => {
      const grossPay = salary / period.divisor;
      const netPay = grossPay * (1 - taxRate);
      return {
        period: period.name,
        gross: grossPay.toFixed(2),
        net: netPay.toFixed(2),
      };
    });
    setBreakdown(results);
  };

  const resetForm = () => {
    setAnnualSalary('');
    setEstimatedTaxRate('22');
    setBreakdown(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Simplified Salary Estimator - For Illustration Only</AlertTitle>
        <AlertDescription>
          This calculator uses a <strong className="font-semibold">single flat percentage to estimate total deductions (taxes, FICA, etc.).</strong> Actual take-home pay is affected by complex tax brackets, filing status, and pre-tax deductions. <strong className="font-semibold">Do not use for financial planning.</strong>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your annual salary to see a simplified breakdown.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="annualSalarySBC">Gross Annual Salary ($)</Label><Input id="annualSalarySBC" type="number" value={annualSalary} onChange={(e) => setAnnualSalary(e.target.value)} placeholder="e.g., 80000" /></div>
            <div><Label htmlFor="taxRateSBC">Estimated Total Tax & Deductions Rate (%)</Label><Input id="taxRateSBC" type="number" value={estimatedTaxRate} onChange={(e) => setEstimatedTaxRate(e.target.value)} placeholder="e.g., 22 for 22%"/></div>
             <AlertDescription className="text-xs">Assumes a standard 40-hour work week, 52 weeks a year.</AlertDescription>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateBreakdown}>Calculate Breakdown</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(breakdown || error) && (
          <Card>
            <CardHeader><CardDescription>Salary Breakdown</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {breakdown && (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Period</TableHead>
                      <TableHead>Gross Pay</TableHead>
                      <TableHead className="text-right">Est. Net Pay</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {breakdown.map(b => (
                      <TableRow key={b.period}>
                        <TableCell>{b.period}</TableCell>
                        <TableCell>${b.gross}</TableCell>
                        <TableCell className="text-right font-semibold text-primary">${b.net}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SalaryBreakdownCalculatorSimplifiedUsStyle.tsx ======
==================================================

// ====== START OF FILE: SalaryCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.31 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Briefcase, VenetianMask } from "lucide-react"; // VenetianMask just for fun as a different icon

type PayPeriod = 'hourly' | 'daily' | 'weekly' | 'biweekly' | 'monthly' | 'annually';
const hoursPerDay = 8;
const daysPerWeek = 5;
const weeksPerYear = 52;

export default function SalaryCalculator() {
  const [amount, setAmount] = useState<string>('');
  const [fromPeriod, setFromPeriod] = useState<PayPeriod>('annually');
  const [toPeriod, setToPeriod] = useState<PayPeriod>('monthly');

  const [convertedAmount, setConvertedAmount] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const getAnnualEquivalent = (amt: number, period: PayPeriod): number => {
    switch(period) {
      case 'hourly': return amt * hoursPerDay * daysPerWeek * weeksPerYear;
      case 'daily': return amt * daysPerWeek * weeksPerYear;
      case 'weekly': return amt * weeksPerYear;
      case 'biweekly': return amt * (weeksPerYear / 2);
      case 'monthly': return amt * 12;
      case 'annually': return amt;
      default: return 0;
    }
  };

  const convertFromAnnual = (annualAmt: number, period: PayPeriod): number => {
     switch(period) {
      case 'hourly': return annualAmt / (weeksPerYear * daysPerWeek * hoursPerDay) ;
      case 'daily': return annualAmt / (weeksPerYear * daysPerWeek);
      case 'weekly': return annualAmt / weeksPerYear;
      case 'biweekly': return annualAmt / (weeksPerYear / 2);
      case 'monthly': return annualAmt / 12;
      case 'annually': return annualAmt;
      default: return 0;
    }
  };

  const calculateSalary = () => {
    setError(null);
    setConvertedAmount(null);

    const amt = parseFloat(amount);
    if (isNaN(amt) || amt < 0) {
      setError('Please enter a valid non-negative salary amount.');
      return;
    }

    const annualEquiv = getAnnualEquivalent(amt, fromPeriod);
    const converted = convertFromAnnual(annualEquiv, toPeriod);
    
    setConvertedAmount(converted.toFixed(2));
  };

  const resetForm = () => {
    setAmount('');
    setFromPeriod('annually');
    setToPeriod('monthly');
    setConvertedAmount(null);
    setError(null);
  };
  
  const payPeriodOptions: PayPeriod[] = ['hourly', 'daily', 'weekly', 'biweekly', 'monthly', 'annually'];

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Salary Conversion Calculator</AlertTitle><AlertDescription>Convert salary amounts between different pay periods (hourly, daily, weekly, monthly, annually). Assumes standard work hours/weeks.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Convert salary across pay periods.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="salaryAmount">Amount ($)</Label><Input id="salaryAmount" type="number" value={amount} onChange={e=>setAmount(e.target.value)} placeholder="e.g., 60000"/></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="fromPeriod">From Period</Label><Select value={fromPeriod} onValueChange={(v:PayPeriod)=>setFromPeriod(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{payPeriodOptions.map(p=><SelectItem key={`from-${p}`} value={p} className="capitalize">{p}</SelectItem>)}</SelectContent></Select></div>
              <div><Label htmlFor="toPeriod">To Period</Label><Select value={toPeriod} onValueChange={(v:PayPeriod)=>setToPeriod(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{payPeriodOptions.map(p=><SelectItem key={`to-${p}`} value={p} className="capitalize">{p}</SelectItem>)}</SelectContent></Select></div>
            </div>
             <AlertDescription className="text-xs">Assumes {hoursPerDay} hours/day, {daysPerWeek} days/week, {weeksPerYear} weeks/year.</AlertDescription>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateSalary}>Convert Salary</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(convertedAmount || error) && (
          <Card>
            <CardHeader><CardDescription>Converted Salary</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {convertedAmount && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Equivalent {toPeriod} salary</p><p className="text-2xl font-bold text-primary">${convertedAmount}</p></div><CopyButton textToCopy={convertedAmount} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SalaryCalculator.tsx ======
==================================================

// ====== START OF FILE: SalaryToHourlyCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.32 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Clock } from "lucide-react";

const WEEKS_PER_YEAR = 52; // Standard assumption

export default function SalaryToHourlyCalculator() {
  const [annualSalary, setAnnualSalary] = useState<string>('');
  const [hoursPerWeek, setHoursPerWeek] = useState<string>('40');

  const [hourlyWage, setHourlyWage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const convertSalaryToHourly = () => {
    setError(null); setHourlyWage(null);
    const salary = parseFloat(annualSalary);
    const hours = parseFloat(hoursPerWeek);

    if (isNaN(salary) || salary < 0 || isNaN(hours) || hours <= 0) {
      setError('Please enter a valid non-negative annual salary and positive hours per week.');
      return;
    }

    const totalHoursPerYear = hours * WEEKS_PER_YEAR;
    const wage = salary / totalHoursPerYear;
    setHourlyWage(wage.toFixed(2));
  };

  const resetForm = () => {
    setAnnualSalary(''); setHoursPerWeek('40');
    setHourlyWage(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Salary to Hourly Converter</AlertTitle><AlertDescription>Convert an annual salary to an equivalent hourly wage based on hours worked per week. Assumes {WEEKS_PER_YEAR} weeks per year.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter salary and work hours.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="annualSalarySTH">Annual Salary ($)</Label><Input id="annualSalarySTH" type="number" value={annualSalary} onChange={e=>setAnnualSalary(e.target.value)} placeholder="e.g., 65000"/></div>
            <div><Label htmlFor="hoursPerWeekSTH">Hours Worked Per Week</Label><Input id="hoursPerWeekSTH" type="number" value={hoursPerWeek} onChange={e=>setHoursPerWeek(e.target.value)} placeholder="e.g., 40"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={convertSalaryToHourly}>Convert to Hourly</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(hourlyWage || error) && (
          <Card>
            <CardHeader><CardDescription>Equivalent Hourly Wage</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {hourlyWage && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Hourly Wage</p><p className="text-2xl font-bold text-primary">${hourlyWage} / hour</p></div><CopyButton textToCopy={hourlyWage}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: SalaryToHourlyCalculator.tsx ======
==================================================

// ====== START OF FILE: SalesTaxAndVatCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.97 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, ReceiptText } from "lucide-react";

type TaxType = 'sales_tax' | 'vat';
type CalculationMode = 'add_tax' | 'remove_tax'; // Add tax to net price, or extract tax from gross price

export default function SalesTaxAndVatCalculator() {
  const [price, setPrice] = useState<string>('');
  const [taxRate, setTaxRate] = useState<string>(''); // Percentage
  const [taxType, setTaxType] = useState<TaxType>('sales_tax');
  const [calcMode, setCalcMode] = useState<CalculationMode>('add_tax'); // Default to adding tax

  const [taxAmount, setTaxAmount] = useState<string | null>(null);
  const [totalPriceWithTax, setTotalPriceWithTax] = useState<string | null>(null);
  const [originalPriceWithoutTax, setOriginalPriceWithoutTax] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTax = () => {
    setError(null);
    setTaxAmount(null);
    setTotalPriceWithTax(null);
    setOriginalPriceWithoutTax(null);

    const p = parseFloat(price);
    const rate = parseFloat(taxRate) / 100;

    if (isNaN(p) || p < 0 || isNaN(rate) || rate < 0) {
      setError('Please enter valid non-negative numbers for price and tax rate.');
      return;
    }

    if (calcMode === 'add_tax') {
      const tax = p * rate;
      const total = p + tax;
      setTaxAmount(tax.toFixed(2));
      setTotalPriceWithTax(total.toFixed(2));
      setOriginalPriceWithoutTax(p.toFixed(2)); // The input price is the original price
    } else { // remove_tax (price is gross, extract tax)
      // For Sales Tax: Original = Gross / (1 + Rate) ; Tax = Gross - Original
      // For VAT (Value Added Tax), price often includes VAT: Original = Gross / (1 + Rate)
      let originalP, taxAmt;
      if ( (taxType === 'sales_tax' || taxType === 'vat') && rate === -1) { // Price already includes tax, impossible to remove if rate is -100%
         setError("Cannot remove tax if rate implies price is zero after tax. Rate must be > -100%."); return;
      }
      
      originalP = p / (1 + rate);
      taxAmt = p - originalP;

      setTaxAmount(taxAmt.toFixed(2));
      setOriginalPriceWithoutTax(originalP.toFixed(2));
      setTotalPriceWithTax(p.toFixed(2)); // The input price is the total price
    }
  };
  
  const resetForm = () => {
    setPrice(''); setTaxRate('');
    setTaxAmount(null); setTotalPriceWithTax(null); setOriginalPriceWithoutTax(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Sales Tax &amp; VAT Calculator</AlertTitle><AlertDescription>Calculate total price including tax, or extract tax amount from a gross price. Supports Sales Tax (added) and VAT (often inclusive) models.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter price and tax details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="taxType">Tax Type</Label><Select value={taxType} onValueChange={(v: TaxType) => setTaxType(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="sales_tax">Sales Tax</SelectItem><SelectItem value="vat">VAT (Value Added Tax)</SelectItem></SelectContent></Select></div>
            <div><Label htmlFor="calcModeTax">Calculation Mode</Label><Select value={calcMode} onValueChange={(v: CalculationMode) => setCalcMode(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="add_tax">Add Tax to Net Price</SelectItem><SelectItem value="remove_tax">Extract Tax from Gross Price</SelectItem></SelectContent></Select></div>
            <div><Label htmlFor="priceTaxVat">{calcMode === 'add_tax' ? 'Net Price (Before Tax)' : 'Gross Price (Including Tax)'} ($)</Label><Input id="priceTaxVat" type="number" value={price} onChange={e=>setPrice(e.target.value)} placeholder="e.g., 100"/></div>
            <div><Label htmlFor="taxRateTaxVat">Tax Rate (%)</Label><Input id="taxRateTaxVat" type="number" value={taxRate} onChange={e=>setTaxRate(e.target.value)} placeholder="e.g., 7 or 20"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTax}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(totalPriceWithTax || originalPriceWithoutTax || error) && (
          <Card>
            <CardHeader><CardDescription>Tax Calculation Results</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {originalPriceWithoutTax && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Price Before Tax</p><p className="font-semibold">${originalPriceWithoutTax}</p></div>)}
              {taxAmount && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Tax Amount</p><p className="font-semibold">${taxAmount}</p></div>)}
              {totalPriceWithTax && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Total Price With Tax</p><p className="text-2xl font-bold text-primary">${totalPriceWithTax}</p></div><CopyButton textToCopy={totalPriceWithTax} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SalesTaxAndVatCalculator.tsx ======
==================================================

// ====== START OF FILE: SalesTaxCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.66 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Percent } from "lucide-react";

export default function SalesTaxCalculator() {
  const [netPrice, setNetPrice] = useState<string>('');
  const [salesTaxRate, setSalesTaxRate] = useState<string>(''); // Percentage

  const [taxAmount, setTaxAmount] = useState<string | null>(null);
  const [totalPrice, setTotalPrice] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateSalesTax = () => {
    setError(null);
    setTaxAmount(null);
    setTotalPrice(null);

    const price = parseFloat(netPrice);
    const rate = parseFloat(salesTaxRate) / 100;

    if (isNaN(price) || price < 0 || isNaN(rate) || rate < 0) {
      setError('Please enter valid non-negative numbers for net price and sales tax rate.');
      return;
    }

    const calculatedTax = price * rate;
    const calculatedTotal = price + calculatedTax;

    setTaxAmount(calculatedTax.toFixed(2));
    setTotalPrice(calculatedTotal.toFixed(2));
  };
  
  const resetForm = () => {
    setNetPrice('');
    setSalesTaxRate('');
    setTaxAmount(null);
    setTotalPrice(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Sales Tax Calculator</AlertTitle><AlertDescription>Calculate the sales tax amount and the total price including tax for an item or service.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter price and tax rate.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="netPriceST">Net Price (Before Tax) ($)</Label><Input id="netPriceST" type="number" value={netPrice} onChange={(e) => setNetPrice(e.target.value)} placeholder="e.g., 100"/></div>
            <div><Label htmlFor="salesTaxRateST">Sales Tax Rate (%)</Label><Input id="salesTaxRateST" type="number" value={salesTaxRate} onChange={(e) => setSalesTaxRate(e.target.value)} placeholder="e.g., 7.5"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateSalesTax}>Calculate Tax</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(totalPrice || error) && (
          <Card>
            <CardHeader><CardDescription>Sales Tax Calculation</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {taxAmount && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Sales Tax Amount</p><p className="font-semibold">${taxAmount}</p></div>)}
              {totalPrice && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Total Price (Including Tax)</p><p className="text-2xl font-bold text-primary">${totalPrice}</p></div>
                  <CopyButton textToCopy={totalPrice} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SalesTaxCalculator.tsx ======
==================================================

// ====== START OF FILE: SampleSizeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.73 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Users } from "lucide-react";

// Simplified sample size for proportion: n = (Z^2 * P * (1-P)) / E^2
// Z = Z-score for confidence level
// P = Estimated proportion (use 0.5 if unknown for max sample size)
// E = Margin of error (decimal)

const zScoresSSC: { [key: string]: number } = {
  '90': 1.645,
  '95': 1.960,
  '99': 2.576,
};

export default function SampleSizeCalculator() {
  const [confidenceLevel, setConfidenceLevel] = useState<string>('95');
  const [marginOfError, setMarginOfError] = useState<string>('5'); // Percentage
  const [populationProportion, setPopulationProportion] = useState<string>('50'); // Percentage, use 50 if unknown

  const [sampleSize, setSampleSize] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateSampleSize = () => {
    setError(null);
    setSampleSize(null);

    const Z = zScoresSSC[confidenceLevel];
    const E = parseFloat(marginOfError) / 100; // Convert to decimal
    const P = parseFloat(populationProportion) / 100; // Convert to decimal

    if (!Z || isNaN(E) || E <= 0 || E >=1 || isNaN(P) || P < 0 || P > 1) {
      setError('Please enter valid confidence level (90, 95, 99%), margin of error (0-100%), and population proportion (0-100%). Margin of error must be > 0 and < 100.');
      return;
    }

    const n_numerator = Z*Z * P * (1-P);
    const n_denominator = E*E;
    const calculatedN = n_numerator / n_denominator;
    
    setSampleSize(Math.ceil(calculatedN).toString());
  };

  const resetForm = () => {
    setConfidenceLevel('95');
    setMarginOfError('5');
    setPopulationProportion('50');
    setSampleSize(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Sample Size Calculator (Proportions)</AlertTitle><AlertDescription>Estimate the sample size needed for a survey or study when measuring proportions. Assumes a large population. Uses Z-scores for confidence levels.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your study parameters.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="confidenceLevelSSC">Confidence Level (%)</Label><Select value={confidenceLevel} onValueChange={setConfidenceLevel}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.keys(zScoresSSC).map(lvl=><SelectItem key={lvl} value={lvl}>{lvl}%</SelectItem>)}</SelectContent></Select></div>
            <div><Label htmlFor="marginOfErrorSSC">Margin of Error (E, %)</Label><Input id="marginOfErrorSSC" type="number" value={marginOfError} onChange={e=>setMarginOfError(e.target.value)} placeholder="e.g., 5 (for ±5%)"/></div>
            <div><Label htmlFor="populationProportionSSC">Population Proportion (P, %)</Label><Input id="populationProportionSSC" type="number" value={populationProportion} onChange={e=>setPopulationProportion(e.target.value)} placeholder="e.g., 50 (if unknown)"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateSampleSize}>Calculate Sample Size</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(sampleSize || error) && (
          <Card>
            <CardHeader><CardDescription>Required Sample Size (n)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {sampleSize && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Estimated Sample Size (n)</p><p className="text-2xl font-bold text-primary">{sampleSize}</p></div><CopyButton textToCopy={sampleSize} /></div>)}
              <AlertDescription className="text-xs pt-2">This calculation does not account for finite population correction. If population proportion is unknown, 50% provides the most conservative (largest) sample size.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SampleSizeCalculator.tsx ======
==================================================

// ====== START OF FILE: SavingsGoalCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.72 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Target, PiggyBank } from "lucide-react";

export default function SavingsGoalCalculator() {
  const [targetAmount, setTargetAmount] = useState<string>('');
  const [currentSavings, setCurrentSavings] = useState<string>('0');
  const [monthlyContribution, setMonthlyContribution] = useState<string>('');
  const [annualInterestRate, setAnnualInterestRate] = useState<string>('0'); // %

  const [timeToGoal, setTimeToGoal] = useState<string | null>(null);
  const [totalContributionsMade, setTotalContributionsMade] = useState<string | null>(null);
  const [totalInterestEarned, setTotalInterestEarned] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTimeToGoal = () => {
    setError(null); setTimeToGoal(null); setTotalContributionsMade(null); setTotalInterestEarned(null);
    const target = parseFloat(targetAmount);
    const current = parseFloat(currentSavings);
    const pmt = parseFloat(monthlyContribution);
    const rateAnnual = parseFloat(annualInterestRate) / 100;

    if (isNaN(target) || target <= current || isNaN(current) || current < 0 || isNaN(pmt) || pmt <= 0 || isNaN(rateAnnual) || rateAnnual < 0) {
      setError("Valid inputs: Target (> Current), Current (>=0), Monthly Contrib (>0), Rate (>=0).");
      return;
    }
    
    const monthlyRate = rateAnnual / 12;
    let months = 0;
    let balance = current;
    let totalContrib = 0;
    const MAX_MONTHS = 600; // 50 years safety break

    if (pmt <= 0 && rateAnnual === 0 && current < target) {
         setError("With no contributions and no interest, the goal will not be reached."); return;
    }
     if (pmt <= 0 && current * Math.pow(1+monthlyRate, MAX_MONTHS) < target && current < target){
        setError("With no contributions and low interest, goal may not be reached in a reasonable time."); return;
    }


    while (balance < target && months < MAX_MONTHS) {
      balance += pmt; // Assume contribution at start of month
      balance *= (1 + monthlyRate);
      totalContrib += pmt;
      months++;
    }

    if (months >= MAX_MONTHS && balance < target) {
      setTimeToGoal(`Over ${Math.floor(MAX_MONTHS/12)} years (or goal unreachable)`);
    } else {
      const years = Math.floor(months / 12);
      const remainingMonths = months % 12;
      setTimeToGoal(`${years} years, ${remainingMonths} months`);
      setTotalContributionsMade(totalContrib.toFixed(2));
      setTotalInterestEarned((balance - current - totalContrib).toFixed(2));
    }
  };

  const resetForm = () => {
    setTargetAmount(''); setCurrentSavings('0'); setMonthlyContribution(''); setAnnualInterestRate('0');
    setTimeToGoal(null); setTotalContributionsMade(null); setTotalInterestEarned(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Savings Goal Calculator</AlertTitle><AlertDescription>Estimate how long it will take to reach your savings goal based on current savings, monthly contributions, and interest rate.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your savings details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="targetAmountSG">Savings Goal Amount ($)</Label><Input id="targetAmountSG" type="number" value={targetAmount} onChange={e=>setTargetAmount(e.target.value)}/></div>
            <div><Label htmlFor="currentSavingsSG">Current Savings ($)</Label><Input id="currentSavingsSG" type="number" value={currentSavings} onChange={e=>setCurrentSavings(e.target.value)}/></div>
            <div><Label htmlFor="monthlyContribSG">Monthly Contribution ($)</Label><Input id="monthlyContribSG" type="number" value={monthlyContribution} onChange={e=>setMonthlyContribution(e.target.value)}/></div>
            <div><Label htmlFor="annualRateSG">Expected Annual Interest Rate (%)</Label><Input id="annualRateSG" type="number" value={annualInterestRate} onChange={e=>setAnnualInterestRate(e.target.value)} placeholder="e.g., 3.5"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTimeToGoal}>Calculate Time</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(timeToGoal || error) && (
          <Card>
            <CardHeader><CardDescription>Savings Projection</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {timeToGoal && (<div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">Time to Reach Goal</p><p className="text-xl font-bold text-primary">{timeToGoal}</p></div>)}
              {totalContributionsMade && (<div className="p-1.5 bg-muted rounded-md text-sm">Total Contributions: <strong className="font-semibold">${totalContributionsMade}</strong></div>)}
              {totalInterestEarned && (<div className="p-1.5 bg-muted rounded-md text-sm">Total Interest Earned: <strong className="font-semibold">${totalInterestEarned}</strong></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SavingsGoalCalculator.tsx ======
==================================================

// ====== START OF FILE: ScientificCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8.74 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Eraser, SigmaSquare } from 'lucide-react'; // Using SigmaSquare to represent scientific functions

// Note: Implementing a full JS math expression parser and evaluator is complex.
// This will be an extended version of the BasicCalculator, adding some scientific function buttons
// that operate on the current display value. No complex expression parsing (like order of operations for multiple ops).

export default function ScientificCalculator() {
  const [displayValue, setDisplayValue] = useState<string>('0');
  const [firstOperand, setFirstOperand] = useState<number | null>(null);
  const [operator, setOperator] = useState<string | null>(null);
  const [waitingForSecondOperand, setWaitingForSecondOperand] = useState<boolean>(false);
  const [history, setHistory] = useState<string>('');
  const [isRadians, setIsRadians] = useState<boolean>(true); // Mode for trig functions

  const inputDigit = (digit: string) => {
    if (waitingForSecondOperand) {
      setDisplayValue(digit);
      setWaitingForSecondOperand(false);
    } else {
      setDisplayValue(displayValue === '0' ? digit : displayValue + digit);
    }
  };

  const inputDecimal = () => {
    if (waitingForSecondOperand) { setDisplayValue('0.'); setWaitingForSecondOperand(false); return; }
    if (!displayValue.includes('.')) setDisplayValue(displayValue + '.');
  };

  const handleOperator = (nextOperator: string) => {
    const inputValue = parseFloat(displayValue);
    if (operator && waitingForSecondOperand) { setOperator(nextOperator); setHistory(prev => prev.slice(0, -2) + ` ${nextOperator} `); return; }
    if (firstOperand === null) { setFirstOperand(inputValue); setHistory(`${inputValue} ${nextOperator} `); } 
    else if (operator) {
      const result = performCalculation();
      setDisplayValue(String(parseFloat(result.toPrecision(12))));
      setFirstOperand(result);
      setHistory(prev => `${prev} ${inputValue} = ${parseFloat(result.toPrecision(12))} ${nextOperator} `);
    }
    setWaitingForSecondOperand(true);
    setOperator(nextOperator);
  };
  
  const performCalculation = (): number => {
    if (firstOperand === null || operator === null) return parseFloat(displayValue);
    const secondOperand = parseFloat(displayValue);
    let result = 0;
    switch (operator) {
      case '+': result = firstOperand + secondOperand; break;
      case '-': result = firstOperand - secondOperand; break;
      case '×': result = firstOperand * secondOperand; break;
      case '÷': result = secondOperand === 0 ? NaN : firstOperand / secondOperand; break; // Handle division by zero
      case '^': result = Math.pow(firstOperand, secondOperand); break;
      default: return secondOperand;
    }
    return result;
  };

  const handleEquals = () => {
    if (operator && firstOperand !== null) {
      const result = performCalculation();
      const secondOperand = parseFloat(displayValue);
      setHistory(prev => `${prev} ${secondOperand} = `);
      setDisplayValue(String(parseFloat(result.toPrecision(12))));
      setFirstOperand(null); setOperator(null); setWaitingForSecondOperand(true);
    }
  };

  const clearAll = () => {
    setDisplayValue('0'); setFirstOperand(null); setOperator(null);
    setWaitingForSecondOperand(false); setHistory('');
  };
  
  const clearEntry = () => setDisplayValue('0');

  const handleScientificFunction = (func: string) => {
    const value = parseFloat(displayValue);
    let result: number | undefined;
    let funcDisplay = func;

    try {
        switch(func) {
            case 'sin': result = isRadians ? Math.sin(value) : Math.sin(value * Math.PI / 180); funcDisplay = `sin${isRadians?'Rad':'Deg'}(${value})`; break;
            case 'cos': result = isRadians ? Math.cos(value) : Math.cos(value * Math.PI / 180); funcDisplay = `cos${isRadians?'Rad':'Deg'}(${value})`; break;
            case 'tan': result = isRadians ? Math.tan(value) : Math.tan(value * Math.PI / 180); funcDisplay = `tan${isRadians?'Rad':'Deg'}(${value})`; break;
            case 'ln': if(value <= 0) throw new Error("ln(x) undefined for x <= 0"); result = Math.log(value); funcDisplay = `ln(${value})`; break;
            case 'log₁₀': if(value <= 0) throw new Error("log₁₀(x) undefined for x <= 0"); result = Math.log10(value); funcDisplay = `log₁₀(${value})`; break;
            case '√': if(value < 0) throw new Error("√x undefined for x < 0 (real numbers)"); result = Math.sqrt(value); funcDisplay = `√(${value})`; break;
            case 'x²': result = value * value; funcDisplay = `(${value})²`; break;
            case '1/x': if(value === 0) throw new Error("1/x undefined for x = 0"); result = 1 / value; funcDisplay = `1/(${value})`; break;
            case '±': result = value * -1; funcDisplay = `negate(${value})`; break;
            case '%': result = value / 100; funcDisplay = `${value}%`; break;
            default: break;
        }
        if (result !== undefined && !isNaN(result) && isFinite(result)) {
            setDisplayValue(String(parseFloat(result.toPrecision(12))));
            setHistory(prev => `${prev} ${funcDisplay} = ${parseFloat(result!.toPrecision(12))} `);
            setWaitingForSecondOperand(true); // Functions usually finalize the current number
        } else if (result === undefined) {
            // No operation performed, do nothing
        } else {
             setHistory(prev => `${prev} ${funcDisplay} = Error `);
             setDisplayValue('Error');
        }
    } catch (e: any) {
        setHistory(prev => `${prev} ${funcDisplay} = Error `);
        setDisplayValue('Error: ' + e.message.substring(0,20));
    }
  };


  const buttonsLayout = [
    ['AC', 'C', 'Rad/Deg', '÷'],
    ['sin', 'cos', 'tan', '×'],
    ['ln', 'log₁₀', 'xʸ', '-'], // xʸ is ^
    ['7', '8', '9', '+'],
    ['4', '5', '6', '√'],
    ['1', '2', '3', 'x²'],
    ['0', '.', '±', '='],
    ['%', '1/x', '(', ')'] // Parentheses are for show, not functional yet
  ];
  
  const getAction = (label: string) => {
    switch(label) {
        case 'AC': return clearAll;
        case 'C': return clearEntry;
        case 'Rad/Deg': return () => setIsRadians(!isRadians);
        case '+': case '-': case '×': case '÷': return () => handleOperator(label);
        case 'xʸ': return () => handleOperator('^');
        case '=': return handleEquals;
        case '.': return inputDecimal;
        case 'sin': case 'cos': case 'tan': case 'ln': case 'log₁₀': case '√': case 'x²': case '1/x': case '±': case '%': return () => handleScientificFunction(label);
        case '(': case ')': return () => setHistory(prev => prev + label); // Placeholder
        default: return () => inputDigit(label); // Digits
    }
  };


  return (
    <Card className="max-w-md mx-auto shadow-2xl">
      <CardHeader>
        <CardTitle className="text-sm text-muted-foreground text-right h-6 overflow-x-auto truncate" title={history}>
          {history || 'Calculation History'}
        </CardTitle>
        <div className="flex items-center">
          <Input type="text" value={displayValue} readOnly className="text-3xl font-mono text-right h-14 py-2 pr-3 bg-background focus-visible:ring-0 focus-visible:ring-offset-0 border-0 shadow-none" aria-label="Calculator display"/>
          <CopyButton textToCopy={displayValue} variant="ghost" size="icon" />
        </div>
        <div className="text-xs text-right text-muted-foreground pr-2">{isRadians ? "RAD" : "DEG"} Mode</div>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-4 gap-1.5">
          {buttonsLayout.flat().map((label) => (
            <Button key={label} onClick={getAction(label)}
              className={`text-md h-12 ${
                ['AC', 'C'].includes(label) ? 'bg-destructive hover:bg-destructive/90' :
                ['Rad/Deg', 'sin', 'cos', 'tan', 'ln', 'log₁₀', 'xʸ','√','x²','1/x', '%', '(', ')'].includes(label) ? 'bg-secondary hover:bg-secondary/80' :
                ['÷', '×', '-', '+', '='].includes(label) ? 'bg-accent hover:bg-accent/90' : ''
              }`}
              variant={['AC','C','Rad/Deg', 'sin', 'cos', 'tan', 'ln', 'log₁₀', 'xʸ', '√','x²','1/x','%','(', ')', '÷', '×', '-', '+', '='].includes(label) ? 'default' : 'outline'}
            >
              {label === 'xʸ' ? <span>x<sup>y</sup></span> : label}
            </Button>
          ))}
        </div>
      </CardContent>
       <CardFooter className="justify-end">
         <Button variant="ghost" onClick={clearAll} size="sm"><Eraser className="mr-2 h-4 w-4" /> Reset</Button>
      </CardFooter>
    </Card>
  );
}


// ====== END OF FILE: ScientificCalculator.tsx ======
==================================================

// ====== START OF FILE: ScientificNotationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.89 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, SigmaSquare as MathIcon } from "lucide-react";

export default function ScientificNotationCalculator() {
  const [numberInput, setNumberInput] = useState<string>('');
  const [scientificNotation, setScientificNotation] = useState<string | null>(null);
  const [standardNotation, setStandardNotation] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const convertNumber = () => {
    setError(null);
    setScientificNotation(null);
    setStandardNotation(null);

    const input = numberInput.trim();
    if (input === '') {
      setError('Please enter a number or a number in scientific notation.');
      return;
    }

    // Check if input is in scientific notation (e.g., 1.23e+5 or 1.23E-5)
    const sciNotationRegex = /^(-?\d+(\.\d+)?)[eE]([+-]?\d+)$/;
    const match = input.match(sciNotationRegex);

    if (match) { // Input is scientific notation, convert to standard
      try {
        const num = parseFloat(input);
        if (isNaN(num) || !isFinite(num)) throw new Error("Invalid scientific notation format.");
        setStandardNotation(num.toLocaleString('en-US', { maximumFractionDigits: 20, useGrouping: false }));
        setScientificNotation(num.toExponential(4)); // Keep original scientific as well, maybe re-formatted
      } catch (e: any) {
        setError(e.message || "Failed to parse scientific notation.");
      }
    } else { // Input is standard number, convert to scientific
      const num = parseFloat(input);
      if (isNaN(num)) {
        setError('Please enter a valid number.');
        return;
      }
      setScientificNotation(num.toExponential(4)); // 4 decimal places in exponent form
      setStandardNotation(num.toLocaleString('en-US', { maximumFractionDigits: 20, useGrouping: false }));
    }
  };

  const resetForm = () => {
    setNumberInput('');
    setScientificNotation(null);
    setStandardNotation(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Scientific Notation Converter</AlertTitle>
        <AlertDescription>
          Convert numbers to and from scientific notation (e.g., 1.23e+5). Enter a standard number or one in scientific notation.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter a number to convert.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="numberInputSci">Number or Scientific Notation</Label>
              <Input 
                id="numberInputSci" 
                value={numberInput} 
                onChange={(e) => setNumberInput(e.target.value)} 
                placeholder="e.g., 12345 or 1.2345e+4" 
              />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={convertNumber}>Convert</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(scientificNotation || standardNotation || error) && (
          <Card>
            <CardHeader><CardDescription>Conversion Results</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {scientificNotation && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Scientific Notation</p>
                  <div className="flex justify-between items-center"><p className="font-semibold break-all">{scientificNotation}</p><CopyButton textToCopy={scientificNotation} size="icon" variant="ghost"/></div>
                </div>
              )}
              {standardNotation && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Standard Decimal Notation</p>
                  <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary break-all">{standardNotation}</p><CopyButton textToCopy={standardNotation} size="icon" variant="ghost" className="text-primary"/></div>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ScientificNotationCalculator.tsx ======
==================================================

// ====== START OF FILE: ScreenSizeAndAspectRatioCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.45 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Monitor } from "lucide-react";

export default function ScreenSizeAndAspectRatioCalculator() {
  const [aspectRatioW, setAspectRatioW] = useState<string>('16');
  const [aspectRatioH, setAspectRatioH] = useState<string>('9');
  const [diagonal, setDiagonal] = useState<string>(''); // in inches

  const [widthResult, setWidthResult] = useState<string | null>(null);
  const [heightResult, setHeightResult] = useState<string | null>(null);
  const [areaResult, setAreaResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateScreenSize = () => {
    setError(null);
    setWidthResult(null);
    setHeightResult(null);
    setAreaResult(null);

    const arW = parseInt(aspectRatioW);
    const arH = parseInt(aspectRatioH);
    const diag = parseFloat(diagonal);

    if (isNaN(arW) || arW <= 0 || isNaN(arH) || arH <= 0 || isNaN(diag) || diag <= 0) {
      setError('Aspect ratio components and diagonal size must be positive numbers.');
      return;
    }

    // w = arW * x, h = arH * x. diag^2 = w^2 + h^2 = (arW^2 * x^2) + (arH^2 * x^2)
    // x = diag / sqrt(arW^2 + arH^2)
    const x = diag / Math.sqrt(arW * arW + arH * arH);
    const widthInches = arW * x;
    const heightInches = arH * x;
    const areaSqInches = widthInches * heightInches;

    setWidthResult(`${widthInches.toFixed(2)} in / ${(widthInches * 2.54).toFixed(2)} cm`);
    setHeightResult(`${heightInches.toFixed(2)} in / ${(heightInches * 2.54).toFixed(2)} cm`);
    setAreaResult(`${areaSqInches.toFixed(2)} in² / ${(areaSqInches * 6.4516).toFixed(2)} cm²`);
  };

  const resetForm = () => {
    setAspectRatioW('16'); setAspectRatioH('9'); setDiagonal('');
    setWidthResult(null); setHeightResult(null); setAreaResult(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Screen Size & Dimensions Calculator</AlertTitle><AlertDescription>Calculate a screen's width, height, and area from its diagonal size and aspect ratio.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter screen details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <Label>Aspect Ratio</Label>
            <div className="grid grid-cols-[1fr_auto_1fr] gap-2 items-center">
              <Input type="number" value={aspectRatioW} onChange={e=>setAspectRatioW(e.target.value)} placeholder="Width (e.g., 16)"/>
              <span className="font-bold">:</span>
              <Input type="number" value={aspectRatioH} onChange={e=>setAspectRatioH(e.target.value)} placeholder="Height (e.g., 9)"/>
            </div>
            <div><Label htmlFor="diagonalScreen">Diagonal Size (inches)</Label><Input id="diagonalScreen" type="number" value={diagonal} onChange={e=>setDiagonal(e.target.value)} placeholder="e.g., 27"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateScreenSize}>Calculate Dimensions</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(widthResult || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Screen Dimensions</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {widthResult && (<div className="p-1 bg-muted rounded-md text-sm">Width: <strong className="font-semibold">{widthResult}</strong></div>)}
              {heightResult && (<div className="p-1 bg-muted rounded-md text-sm">Height: <strong className="font-semibold">{heightResult}</strong></div>)}
              {areaResult && (<div className="p-1 bg-muted rounded-md text-sm">Area: <strong className="font-semibold">{areaResult}</strong></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ScreenSizeAndAspectRatioCalculator.tsx ======
==================================================

// ====== START OF FILE: ScreenSizeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.44 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Monitor } from "lucide-react";

export default function ScreenSizeCalculator() {
  const [aspectRatioW, setAspectRatioW] = useState<string>('16');
  const [aspectRatioH, setAspectRatioH] = useState<string>('9');
  const [diagonal, setDiagonal] = useState<string>(''); // in inches

  const [widthResult, setWidthResult] = useState<string | null>(null);
  const [heightResult, setHeightResult] = useState<string | null>(null);
  const [areaResult, setAreaResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateScreenSize = () => {
    setError(null);
    setWidthResult(null);
    setHeightResult(null);
    setAreaResult(null);

    const arW = parseInt(aspectRatioW);
    const arH = parseInt(aspectRatioH);
    const diag = parseFloat(diagonal);

    if (isNaN(arW) || arW <= 0 || isNaN(arH) || arH <= 0 || isNaN(diag) || diag <= 0) {
      setError('Aspect ratio components and diagonal size must be positive numbers.');
      return;
    }

    // w = arW * x, h = arH * x. diag^2 = w^2 + h^2 = (arW^2 * x^2) + (arH^2 * x^2)
    // x = diag / sqrt(arW^2 + arH^2)
    const x = diag / Math.sqrt(arW * arW + arH * arH);
    const widthInches = arW * x;
    const heightInches = arH * x;
    const areaSqInches = widthInches * heightInches;

    setWidthResult(`${widthInches.toFixed(2)} in / ${(widthInches * 2.54).toFixed(2)} cm`);
    setHeightResult(`${heightInches.toFixed(2)} in / ${(heightInches * 2.54).toFixed(2)} cm`);
    setAreaResult(`${areaSqInches.toFixed(2)} in² / ${(areaSqInches * 6.4516).toFixed(2)} cm²`);
  };

  const resetForm = () => {
    setAspectRatioW('16'); setAspectRatioH('9'); setDiagonal('');
    setWidthResult(null); setHeightResult(null); setAreaResult(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Screen Size & Dimensions Calculator</AlertTitle><AlertDescription>Calculate a screen's width, height, and area from its diagonal size and aspect ratio.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter screen details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <Label>Aspect Ratio</Label>
            <div className="grid grid-cols-[1fr_auto_1fr] gap-2 items-center">
              <Input type="number" value={aspectRatioW} onChange={e=>setAspectRatioW(e.target.value)} placeholder="Width (e.g., 16)"/>
              <span className="font-bold">:</span>
              <Input type="number" value={aspectRatioH} onChange={e=>setAspectRatioH(e.target.value)} placeholder="Height (e.g., 9)"/>
            </div>
            <div><Label htmlFor="diagonalScreen">Diagonal Size (inches)</Label><Input id="diagonalScreen" type="number" value={diagonal} onChange={e=>setDiagonal(e.target.value)} placeholder="e.g., 27"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateScreenSize}>Calculate Dimensions</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(widthResult || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Screen Dimensions</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {widthResult && (<div className="p-1 bg-muted rounded-md text-sm">Width: <strong className="font-semibold">{widthResult}</strong></div>)}
              {heightResult && (<div className="p-1 bg-muted rounded-md text-sm">Height: <strong className="font-semibold">{heightResult}</strong></div>)}
              {areaResult && (<div className="p-1 bg-muted rounded-md text-sm">Area: <strong className="font-semibold">{areaResult}</strong></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ScreenSizeCalculator.tsx ======
==================================================

// ====== START OF FILE: SeedGerminationRateCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.21 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Sprout } from "lucide-react";

export default function SeedGerminationRateCalculator() {
  const [seedsSown, setSeedsSown] = useState<string>('');
  const [seedsGerminated, setSeedsGerminated] = useState<string>('');

  const [germinationRate, setGerminationRate] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateRate = () => {
    setError(null);
    setGerminationRate(null);

    const sown = parseInt(seedsSown);
    const germinated = parseInt(seedsGerminated);

    if (isNaN(sown) || sown <= 0 || isNaN(germinated) || germinated < 0) {
      setError('Total seeds sown must be a positive number. Germinated seeds must be non-negative.');
      return;
    }
    if (germinated > sown) {
      setError('Number of germinated seeds cannot exceed the number of seeds sown.');
      return;
    }

    const rate = (germinated / sown) * 100;
    setGerminationRate(rate.toFixed(1));
  };

  const resetForm = () => {
    setSeedsSown('');
    setSeedsGerminated('');
    setGerminationRate(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Seed Germination Rate Calculator</AlertTitle>
        <AlertDescription>
          Calculate the germination rate of your seeds to assess their viability.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your germination test results.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="seedsSown">Total Seeds Sown</Label>
              <Input
                id="seedsSown"
                type="number"
                value={seedsSown}
                onChange={(e) => setSeedsSown(e.target.value)}
                placeholder="e.g., 50"
              />
            </div>
            <div>
              <Label htmlFor="seedsGerminated">Number of Seeds Germinated</Label>
              <Input
                id="seedsGerminated"
                type="number"
                value={seedsGerminated}
                onChange={(e) => setSeedsGerminated(e.target.value)}
                placeholder="e.g., 45"
              />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateRate}>Calculate Rate</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(germinationRate || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Germination Rate</CardDescription>
            </CardHeader>
            <CardContent>
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {germinationRate !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Germination Rate</p>
                    <p className="text-2xl font-bold text-primary">{germinationRate}%</p>
                  </div>
                  <CopyButton textToCopy={germinationRate} />
                </div>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    A higher rate indicates better seed viability.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SeedGerminationRateCalculator.tsx ======
==================================================

// ====== START OF FILE: SeriesParallelResistorsCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.64 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CircuitBoard } from "lucide-react";

type Configuration = 'series' | 'parallel';

export default function SeriesParallelResistorsCalculator() {
  const [resistorValues, setResistorValues] = useState<string>('');
  const [configuration, setConfiguration] = useState<Configuration>('series');

  const [totalResistance, setTotalResistance] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateResistance = () => {
    setError(null);
    setTotalResistance(null);

    const values = resistorValues
      .split(/[\s,]+/)
      .filter(v => v.trim() !== '')
      .map(v => parseFloat(v));

    if (values.some(isNaN) || values.some(v => v <= 0)) {
      setError('All resistor values must be positive numbers.');
      return;
    }
    if (values.length < 2) {
      setError('Please enter at least two resistor values to calculate.');
      return;
    }

    let totalR: number;
    if (configuration === 'series') {
      // R_total = R1 + R2 + ... + Rn
      totalR = values.reduce((sum, val) => sum + val, 0);
    } else { // Parallel
      // 1/R_total = 1/R1 + 1/R2 + ... + 1/Rn
      const sumOfReciprocals = values.reduce((sum, val) => sum + (1 / val), 0);
      if (sumOfReciprocals === 0) {
        setError('Cannot calculate parallel resistance if sum of reciprocals is zero.');
        return;
      }
      totalR = 1 / sumOfReciprocals;
    }
    
    setTotalResistance(totalR.toFixed(3));
  };

  const resetForm = () => {
    setResistorValues('');
    setTotalResistance(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Series & Parallel Resistor Calculator</AlertTitle><AlertDescription>Calculate the total equivalent resistance of multiple resistors connected in series or parallel.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter resistor values and configuration.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="resistorValues">Resistor Values (Ω) (comma or space separated)</Label>
              <Textarea 
                id="resistorValues" 
                value={resistorValues} 
                onChange={(e) => setResistorValues(e.target.value)} 
                placeholder="e.g., 100, 220, 470" 
                rows={3}
              />
            </div>
            <div>
              <Label htmlFor="configuration">Configuration</Label>
              <Select value={configuration} onValueChange={(v: Configuration) => setConfiguration(v)}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="series">Series</SelectItem>
                  <SelectItem value="parallel">Parallel</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateResistance}>Calculate Total Resistance</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>
        {(totalResistance || error) && (
          <Card>
            <CardHeader><CardDescription>Equivalent Resistance (R<sub>eq</sub>)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalResistance && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Total Resistance</p>
                    <p className="text-2xl font-bold text-primary">{totalResistance} Ω</p>
                  </div>
                  <CopyButton textToCopy={totalResistance} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SeriesParallelResistorsCalculator.tsx ======
==================================================

// ====== START OF FILE: SetTheoryCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.04 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CircleDot } from "lucide-react";

type SetOperation = 'union' | 'intersection' | 'difference_A_minus_B' | 'difference_B_minus_A' | 'symmetric_difference';

export default function SetTheoryCalculator() {
  const [setAInput, setSetAInput] = useState<string>(''); // Comma-separated numbers
  const [setBInput, setSetBInput] = useState<string>('');
  const [operation, setOperation] = useState<SetOperation>('union');

  const [resultantSet, setResultantSet] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const parseSetInput = (input: string): Set<number> | null => {
    if (!input.trim()) return new Set(); // Empty set if input is empty
    const elements = input.split(',').map(s => parseFloat(s.trim()));
    if (elements.some(isNaN)) return null; // Invalid number found
    return new Set(elements);
  };

  const performSetOperation = () => {
    setError(null); setResultantSet(null);
    const setA = parseSetInput(setAInput);
    const setB = parseSetInput(setBInput);

    if (setA === null || setB === null) { setError("Invalid input. Ensure sets contain comma-separated numbers only."); return; }

    let resultSet: Set<number>;
    switch(operation) {
      case 'union': resultSet = new Set([...setA, ...setB]); break;
      case 'intersection': resultSet = new Set([...setA].filter(x => setB.has(x))); break;
      case 'difference_A_minus_B': resultSet = new Set([...setA].filter(x => !setB.has(x))); break;
      case 'difference_B_minus_A': resultSet = new Set([...setB].filter(x => !setA.has(x))); break;
      case 'symmetric_difference': 
        const union = new Set([...setA, ...setB]);
        const intersection = new Set([...setA].filter(x => setB.has(x)));
        resultSet = new Set([...union].filter(x => !intersection.has(x)));
        break;
      default: setError("Invalid operation."); return;
    }
    setResultantSet(`{ ${Array.from(resultSet).sort((a,b)=>a-b).join(', ')} }`);
  };

  const resetForm = () => {
    setSetAInput(''); setSetBInput('');
    setResultantSet(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Set Theory Operations</AlertTitle><AlertDescription>Perform basic set operations like Union, Intersection, Difference, and Symmetric Difference on two sets of numbers.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter sets as comma-separated numbers.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="setAInput">Set A elements</Label><Input id="setAInput" value={setAInput} onChange={e=>setSetAInput(e.target.value)} placeholder="e.g., 1, 2, 3, 4"/></div>
            <div><Label htmlFor="setBInput">Set B elements</Label><Input id="setBInput" value={setBInput} onChange={e=>setSetBInput(e.target.value)} placeholder="e.g., 3, 4, 5, 6"/></div>
            <div><Label htmlFor="setOperation">Operation</Label><Select value={operation} onValueChange={(v:SetOperation)=>setOperation(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                <SelectItem value="union">Union (A ∪ B)</SelectItem><SelectItem value="intersection">Intersection (A ∩ B)</SelectItem>
                <SelectItem value="difference_A_minus_B">Difference (A - B)</SelectItem><SelectItem value="difference_B_minus_A">Difference (B - A)</SelectItem>
                <SelectItem value="symmetric_difference">Symmetric Difference (A Δ B)</SelectItem>
            </SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={performSetOperation}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(resultantSet || error) && (
          <Card>
            <CardHeader><CardDescription>Resultant Set</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {resultantSet && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Result</p><p className="text-xl font-bold text-primary">{resultantSet}</p></div><CopyButton textToCopy={resultantSet.replace(/[{}]/g, "").trim()}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: SetTheoryCalculator.tsx ======
==================================================

// ====== START OF FILE: SignificantFiguresCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 9.86 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Baseline } from "lucide-react";

type SigFigOperation = 'count' | 'round';

export default function SignificantFiguresCalculator() {
  const [numberInput, setNumberInput] = useState<string>('');
  const [operation, setOperation] = useState<SigFigOperation>('count');
  const [numSigFigsToRound, setNumSigFigsToRound] = useState<string>('3');

  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const countSignificantFigures = (numStr: string): number => {
    // Remove sign and check for invalid format
    let s = numStr.replace(/^-/, '');
    if (s.match(/[^0-9.eE+-]/)) throw new Error("Invalid number format for sig fig counting.");
    if (s.includes('e') || s.includes('E')) { // Scientific notation
      const parts = s.split(/[eE]/);
      if (parts.length !== 2) throw new Error("Invalid scientific notation.");
      return countSignificantFigures(parts[0]); // Count sig figs in mantissa
    }

    if (!s.includes('.')) s = s.replace(/^0+/, ''); // Remove leading zeros if no decimal
    else s = s.replace(/^0+(?=\d)/, ''); // Remove leading zeros before first non-zero digit unless it's like 0.xxx

    if (s === "" || s === "0") return 1; // "0" has one sig fig by some conventions
    if (s.startsWith('.')) s = '0' + s; // Normalize ".5" to "0.5"

    let count = 0;
    let firstNonZeroFound = false;
    let inDecimalPart = false;

    for (let i = 0; i < s.length; i++) {
      const char = s[i];
      if (char === '.') {
        inDecimalPart = true;
        continue;
      }
      if (char >= '1' && char <= '9') {
        count++;
        firstNonZeroFound = true;
      } else if (char === '0') {
        if (firstNonZeroFound) count++; // Zeros between non-zeros, or trailing zeros in decimal part
      }
    }
    // Trailing zeros in whole numbers without a decimal point are ambiguous (e.g., 1200).
    // This simple counter will count them if they are not leading.
    // For more precision on ambiguity, scientific notation is better.
    if (s.includes('.') === false) { // Handle trailing zeros in integers
        let tempS = s;
        while (tempS.endsWith('0') && tempS.length > 1 && !firstNonZeroFound && count > 1 ) {
            // This logic is tricky; for 1200, typically 2 sig figs unless decimal shown (1200.)
            // This simple counter will likely count all digits for integers once a non-zero is found.
            // For 1200, it will give 4. For 0.01200, it will give 4.
            // Let's refine: if no decimal, trailing zeros are not significant unless specified.
            // But that requires more context. Current method will count trailing zeros if they follow non-zeros.
        }
    }
    if (s.match(/^0\.0*$/)) return 1; // "0.0", "0.00" has 1 sig fig by convention (the first 0 if that's all there is)
    if (!firstNonZeroFound && s.includes('0')) return 1; // Case for "0"

    return count;
  };
  
  const roundToSignificantFigures = (num: number, n: number): string => {
    if (n <= 0) throw new Error("Number of significant figures must be positive.");
    if (num === 0) return "0"; // Or with n decimal places if needed

    const magnitude = Math.floor(Math.log10(Math.abs(num))) + 1;
    const scale = Math.pow(10, n - magnitude);
    const rounded = Math.round(num * scale) / scale;
    
    // Ensure correct number of trailing zeros if needed (e.g., round 12345 to 3 sig figs -> 12300)
    // This part is complex to get perfect for all edge cases in string format.
    // Using toPrecision can help, but it might switch to exponential.
    // Let's use toPrecision and then try to format it reasonably.
    let resultStr = rounded.toPrecision(n);

    // If toPrecision gives exponential notation for small/large numbers, try to convert back or leave as is.
    // For numbers where rounding makes it an integer, ensure it doesn't lose trailing zeros if they are significant
    // e.g. rounding 12.03 to 3 sig figs should be 12.0.
    if(!resultStr.includes('e') && !resultStr.includes('E')) {
      if (resultStr.includes('.')) {
        // No change needed, toPrecision handles this for decimals
      } else {
        // Integer result. If n > number of digits in integer, it might need ".0"
        // But this is not standard sig fig representation unless it's something like 12300 vs 1.23e4.
        // For simplicity, toPrecision() result is often sufficient.
      }
    }
    // If toExponential is used and n is small, it might display fewer than n sig figs.
    // A robust solution for displaying *exactly* n sig figs in all cases is non-trivial.
    return resultStr;
  };


  const performOperation = () => {
    setError(null); setResult(null);
    const inputStr = numberInput.trim();
    if (inputStr === '') { setError('Please enter a number.'); return; }

    try {
      if (operation === 'count') {
        // A more robust regex based counter for sig figs, handles most common cases
        // Remove leading sign
        let s = inputStr.replace(/^[+-]/, "");
        // If scientific notation, count sig figs in mantissa
        if (s.includes('e') || s.includes('E')) {
            s = s.substring(0, s.search(/[eE]/)).replace(".",""); // "1.23e5" -> "123"
             s = s.replace(/^0+/, ""); // Remove leading zeros from mantissa like "001.23" -> "123"
             if (s === "") { setResult("1"); return; } // e.g. "0.0e5" mantissa part is "00" after removing "."
             setResult(s.length.toString());
             return;
        }
        
        // Remove leading zeros if no decimal present or if they are before the decimal
        s = s.replace(/^0+(?!\.)/, ""); // "00123" -> "123", but "0.123" -> "0.123"

        if (s.includes('.')) {
            s = s.replace(".", ""); // Remove decimal for counting digits
            s = s.replace(/^0+/, ""); // Remove leading zeros like in 0.00123 -> 123
        } else {
            // For integers, trailing zeros are ambiguous without more context (e.g. 1200 vs 1200.)
            // A common convention is to NOT count them unless a decimal is present.
            // For simplicity, this basic version might count them if they follow non-zeros.
            // Refined: Remove trailing zeros if no decimal point.
            s = s.replace(/0+$/, "");
        }
        s = s.replace(/^0+/, ""); // remove leading zeros again after all transformations if any
        if (s==="") { // if only zeros were present and now string is empty
            setResult("1"); // "0", "0.0", "000" count as 1 sig fig.
            return;
        }
        setResult(s.length.toString());

      } else { // round
        const numToRd = parseFloat(inputStr);
        const nSigFigs = parseInt(numSigFigsToRound);
        if (isNaN(numToRd)) throw new Error("Invalid number for rounding.");
        if (isNaN(nSigFigs) || nSigFigs <= 0) throw new Error("Number of significant figures to round to must be a positive integer.");
        setResult(roundToSignificantFigures(numToRd, nSigFigs));
      }
    } catch (e: any) { setError(e.message); }
  };

  const resetForm = () => {
    setNumberInput(''); setNumSigFigsToRound('3');
    setResult(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Significant Figures Calculator</AlertTitle><AlertDescription>Count significant figures in a number or round a number to a specified number of significant figures.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter number and select operation.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="sigFigOp">Operation</Label><Select value={operation} onValueChange={(v:SigFigOperation)=>setOperation(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="count">Count Sig Figs</SelectItem><SelectItem value="round">Round to Sig Figs</SelectItem></SelectContent></Select></div>
            <div><Label htmlFor="numberInputSigFig">Number / Value</Label><Input id="numberInputSigFig" value={numberInput} onChange={e=>setNumberInput(e.target.value)} placeholder="e.g., 123.450 or 0.00500 or 1.2e-3"/></div>
            {operation === 'round' && (<div><Label htmlFor="numSigFigsRound">Number of Sig Figs to Round To</Label><Input id="numSigFigsRound" type="number" value={numSigFigsToRound} onChange={e=>setNumSigFigsToRound(e.target.value)} placeholder="e.g., 3"/></div>)}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={performOperation}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">{operation === 'count' ? 'Number of Significant Figures' : 'Rounded Value'}</p><p className="text-2xl font-bold text-primary">{result}</p></div><CopyButton textToCopy={result}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: SignificantFiguresCalculator.tsx ======
==================================================

// ====== START OF FILE: SimplifiedHvacAirflowCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.31 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, AirVent } from "lucide-react";

const CFM_PER_TON = 400; // Common rule of thumb for residential HVAC

export default function SimplifiedHvacAirflowCalculator() {
  const [systemTonnage, setSystemTonnage] = useState<string>('');

  const [estimatedCfm, setEstimatedCfm] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateAirflow = () => {
    setError(null);
    setEstimatedCfm(null);

    const tonnage = parseFloat(systemTonnage);
    if (isNaN(tonnage) || tonnage <= 0) {
      setError('Please enter a valid positive number for system tonnage.');
      return;
    }

    const cfm = tonnage * CFM_PER_TON;
    setEstimatedCfm(cfm.toFixed(0));
  };

  const resetForm = () => {
    setSystemTonnage('');
    setEstimatedCfm(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Simplified HVAC Airflow Estimator - For Illustration Only</AlertTitle>
        <AlertDescription>
          This calculator provides a <strong className="font-semibold">very basic estimate</strong> of total required airflow based on a common rule of thumb (e.g., 400 CFM per ton of cooling). Actual airflow requirements depend on detailed heat load calculations (Manual J), duct design (Manual D), and specific equipment performance. <strong className="font-semibold">Consult a qualified HVAC professional for accurate system design.</strong>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Estimate total airflow needed (CFM).</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="systemTonnage">HVAC System Size (Tons of Cooling)</Label>
              <Input
                id="systemTonnage"
                type="number"
                value={systemTonnage}
                onChange={(e) => setSystemTonnage(e.target.value)}
                placeholder="e.g., 2.5 or 3"
              />
              <p className="text-xs text-muted-foreground mt-1">1 Ton = 12,000 BTU/hr</p>
            </div>
             <AlertDescription className="text-xs">
                Uses a rule of thumb: {CFM_PER_TON} Cubic Feet per Minute (CFM) per ton.
            </AlertDescription>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateAirflow}>Estimate Airflow</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(estimatedCfm || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Estimated Total Airflow</CardDescription>
            </CardHeader>
            <CardContent>
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {estimatedCfm !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Estimated Required Airflow</p>
                    <p className="text-2xl font-bold text-primary">{estimatedCfm} CFM</p>
                  </div>
                  <CopyButton textToCopy={estimatedCfm} />
                </div>
              )}
               <AlertDescription className="text-xs pt-2 mt-2">
                This total airflow is distributed among different rooms based on their individual heating/cooling needs.
              </AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SimplifiedHvacAirflowCalculator.tsx ======
==================================================

// ====== START OF FILE: SimplifiedTimeZoneConverter.tsx ======
// File converted from TSX to TXT
// Original size: 6.5 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Globe2, ArrowRightLeft } from "lucide-react";
import { format, toZonedTime, toDate } from 'date-fns-tz';

// Get a list of common time zones. Intl.supportedValuesOf('timeZone') is good.
const timeZoneIdentifiers = Intl.supportedValuesOf('timeZone').filter(tz => 
  tz.includes('/') && !tz.startsWith('Etc/') && !tz.startsWith('SystemV/') && !tz.startsWith('US/') && !tz.startsWith('Canada/') && !tz.startsWith('Brazil/') && !tz.startsWith('Mexico/') && !tz.startsWith('Chile/') // Basic filtering
).sort();


export default function SimplifiedTimeZoneConverter() {
  const [fromTimeZone, setFromTimeZone] = useState<string>(Intl.DateTimeFormat().resolvedOptions().timeZone);
  const [toTimeZone, setToTimeZone] = useState<string>('America/New_York');
  const [inputTime, setInputTime] = useState<string>(format(new Date(), "HH:mm")); // Default to current time
  const [inputDate, setInputDate] = useState<string>(format(new Date(), "yyyy-MM-dd")); // Default to current date

  const [convertedTime, setConvertedTime] = useState<string | null>(null);
  const [currentTimeInFromZone, setCurrentTimeInFromZone] = useState<string>('');
  const [currentTimeInToZone, setCurrentTimeInToZone] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const getCurrentTimes = () => {
    try {
      const now = new Date();
      setCurrentTimeInFromZone(format(toZonedTime(now, fromTimeZone), "PPP HH:mm:ss zzz", { timeZone: fromTimeZone }));
      setCurrentTimeInToZone(format(toZonedTime(now, toTimeZone), "PPP HH:mm:ss zzz", { timeZone: toTimeZone }));
    } catch (e: any) {
      setError("Failed to get current times: " + e.message);
    }
  };
  
  useEffect(() => {
    getCurrentTimes();
    const intervalId = setInterval(getCurrentTimes, 1000); // Update every second
    return () => clearInterval(intervalId);
  }, [fromTimeZone, toTimeZone]);


  const convertTime = () => {
    setError(null);
    setConvertedTime(null);
    try {
      if (!inputDate || !inputTime) {
        throw new Error("Please select a valid date and time.");
      }
      const dateTimeString = `${inputDate}T${inputTime}:00`;
      // Use toDate with the fromTimeZone option to interpret the string correctly
      const dateInFromZoneAsUtcEquivalent = toDate(dateTimeString, { timeZone: fromTimeZone });
      // Now convert this Date object (which is UTC internally) to the target time zone
      const dateInToZone = toZonedTime(dateInFromZoneAsUtcEquivalent, toTimeZone); 
      setConvertedTime(format(dateInToZone, "PPP HH:mm:ss zzz", { timeZone: toTimeZone }));
    } catch (e: any) {
      setError("Error converting time: " + e.message + ". Ensure date/time are valid for the 'From' timezone.");
    }
  };

  const resetForm = () => {
    setInputTime(format(new Date(), "HH:mm"));
    setInputDate(format(new Date(), "yyyy-MM-dd"));
    setConvertedTime(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Time Zone Converter</AlertTitle><AlertDescription>Convert time between different time zones or see current times. Uses your system's timezone database via JavaScript Intl API.</AlertDescription></Alert>
      
      <Card>
        <CardHeader><CardDescription>Current Times</CardDescription></CardHeader>
        <CardContent className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div className="p-3 bg-muted rounded-md">
            <Label className="text-sm text-muted-foreground block mb-1">Current time in {fromTimeZone}</Label>
            <p className="font-semibold text-lg">{currentTimeInFromZone || "Loading..."}</p>
          </div>
           <div className="p-3 bg-muted rounded-md">
            <Label className="text-sm text-muted-foreground block mb-1">Current time in {toTimeZone}</Label>
            <p className="font-semibold text-lg">{currentTimeInToZone || "Loading..."}</p>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader><CardDescription>Convert Specific Time</CardDescription></CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div><Label htmlFor="inputDateTZ">Date</Label><Input id="inputDateTZ" type="date" value={inputDate} onChange={e=>setInputDate(e.target.value)}/></div>
            <div><Label htmlFor="inputTimeTZ">Time (HH:MM)</Label><Input id="inputTimeTZ" type="time" value={inputTime} onChange={e=>setInputTime(e.target.value)}/></div>
          </div>
          <div className="grid grid-cols-1 sm:grid-cols-[1fr_auto_1fr] gap-2 items-center">
            <div><Label htmlFor="fromTimeZone">From Time Zone</Label><Select value={fromTimeZone} onValueChange={setFromTimeZone}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent className="max-h-60">{timeZoneIdentifiers.map(tz=><SelectItem key={tz} value={tz}>{tz}</SelectItem>)}</SelectContent></Select></div>
            <ArrowRightLeft className="h-5 w-5 text-muted-foreground self-end mb-2 hidden sm:block"/>
            <div><Label htmlFor="toTimeZone">To Time Zone</Label><Select value={toTimeZone} onValueChange={setToTimeZone}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent className="max-h-60">{timeZoneIdentifiers.map(tz=><SelectItem key={tz} value={tz}>{tz}</SelectItem>)}</SelectContent></Select></div>
          </div>
           {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
          {convertedTime && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Converted Time</p><p className="text-xl font-bold text-primary">{convertedTime}</p></div><CopyButton textToCopy={convertedTime}/></div>)}
        </CardContent>
        <CardFooter className="flex justify-between"><Button onClick={convertTime}>Convert Time</Button><Button variant="outline" onClick={resetForm}>Reset Converter</Button></CardFooter>
      </Card>
    </div>
  );
}


// ====== END OF FILE: SimplifiedTimeZoneConverter.tsx ======
==================================================

// ====== START OF FILE: SleepCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.76 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Info, Bed, Clock } from "lucide-react";
import { addMinutes, subMinutes, format } from 'date-fns';

// Assumes average sleep cycle is 90 minutes.
// Recommends waking up at the end of a cycle.
// It takes about 15 minutes to fall asleep.

export default function SleepCalculator() {
  const [goal, setGoal] = useState<'wakeUp' | 'bedTime'>('wakeUp');
  const [targetTime, setTargetTime] = useState<string>(''); // HH:MM format (24-hour)

  const [recommendedTimes, setRecommendedTimes] = useState<string[]>([]);
  const [error, setError] = useState<string | null>(null);

  const fallAsleepTimeMinutes = 15;
  const sleepCycleMinutes = 90;
  const numCyclesOptions = [6, 5, 4]; // 9h, 7.5h, 6h of sleep

  const parseTime = (timeStr: string): Date | null => {
    const [hours, minutes] = timeStr.split(':').map(Number);
    if (isNaN(hours) || hours < 0 || hours > 23 || isNaN(minutes) || minutes < 0 || minutes > 59) {
      return null;
    }
    const date = new Date();
    date.setHours(hours, minutes, 0, 0);
    return date;
  };

  const calculateSleepTimes = () => {
    setError(null);
    setRecommendedTimes([]);

    const timeDate = parseTime(targetTime);
    if (!timeDate) {
      setError('Please enter a valid target time in HH:MM format (e.g., 07:00 or 23:00).');
      return;
    }

    const times: string[] = [];
    if (goal === 'wakeUp') { // Calculate bedtimes to wake up at targetTime
      numCyclesOptions.forEach(cycles => {
        const totalSleepNeeded = cycles * sleepCycleMinutes;
        const bedTime = subMinutes(timeDate, totalSleepNeeded + fallAsleepTimeMinutes);
        times.push(format(bedTime, "HH:mm"));
      });
    } else { // Calculate wake-up times if going to bed at targetTime
      const fallAsleepActualTime = addMinutes(timeDate, fallAsleepTimeMinutes);
      numCyclesOptions.forEach(cycles => {
        const totalSleepDuration = cycles * sleepCycleMinutes;
        const wakeUpTime = addMinutes(fallAsleepActualTime, totalSleepDuration);
        times.push(format(wakeUpTime, "HH:mm"));
      });
    }
    setRecommendedTimes(times);
  };

  const resetForm = () => {
    setTargetTime('');
    setRecommendedTimes([]);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Sleep Cycle Calculator</AlertTitle>
        <AlertDescription>
          Plan your sleep to wake up refreshed at the end of a natural sleep cycle (approx. 90 mins). Assumes ~15 mins to fall asleep.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Choose your goal and target time.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="sleepGoal">I want to:</Label>
              <Select value={goal} onValueChange={(v: 'wakeUp' | 'bedTime') => setGoal(v)}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="wakeUp">Wake up at...</SelectItem>
                  <SelectItem value="bedTime">Go to bed at...</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="targetTimeSleep">{goal === 'wakeUp' ? 'Desired Wake-up Time (HH:MM)' : 'Desired Bedtime (HH:MM)'}</Label>
              <Input id="targetTimeSleep" type="time" value={targetTime} onChange={(e) => setTargetTime(e.target.value)} />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateSleepTimes}>Calculate Times</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(recommendedTimes.length > 0 || error) && (
          <Card>
            <CardHeader><CardDescription>Recommended Times</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {recommendedTimes.length > 0 && (
                <>
                  <p className="text-sm text-muted-foreground">
                    {goal === 'wakeUp' 
                      ? `To wake up at ${targetTime}, try going to bed at one of these times:` 
                      : `If you go to bed at ${targetTime}, try waking up at one of these times:`}
                  </p>
                  <div className="grid grid-cols-2 sm:grid-cols-3 gap-2">
                    {recommendedTimes.map((time, index) => (
                      <div key={index} className="p-2 bg-primary/10 rounded-md text-center">
                        <p className="text-lg font-bold text-primary">{time}</p>
                        <p className="text-xs text-muted-foreground">({numCyclesOptions[index]} cycles)</p>
                      </div>
                    ))}
                  </div>
                </>
              )}
            </CardContent>
            <CardFooter>
                <p className="text-xs text-muted-foreground">These are estimates. Individual sleep needs vary.</p>
            </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SleepCalculator.tsx ======
==================================================

// ====== START OF FILE: SleepDebtCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.4 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { PlusCircle, Trash2 } from 'lucide-react';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Bed } from "lucide-react";

interface DailySleepEntry {
  id: string;
  day: string; // e.g., "Day 1", "Monday"
  hoursSlept: string;
}

export default function SleepDebtCalculator() {
  const [desiredSleepHours, setDesiredSleepHours] = useState<string>('8');
  const [sleepEntries, setSleepEntries] = useState<DailySleepEntry[]>([
    { id: crypto.randomUUID(), day: 'Day 1', hoursSlept: '' },
    { id: crypto.randomUUID(), day: 'Day 2', hoursSlept: '' },
    { id: crypto.randomUUID(), day: 'Day 3', hoursSlept: '' },
  ]);
  
  const [totalSleepDebt, setTotalSleepDebt] = useState<string | null>(null);
  const [averageSleep, setAverageSleep] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleEntryChange = (id: string, value: string) => {
    setSleepEntries(prev => prev.map(entry => entry.id === id ? { ...entry, hoursSlept: value } : entry));
    setTotalSleepDebt(null); setAverageSleep(null); // Reset on change
  };

  const addDay = () => {
    setSleepEntries(prev => [...prev, { id: crypto.randomUUID(), day: `Day ${prev.length + 1}`, hoursSlept: '' }]);
  };
  const removeDay = (id: string) => {
    if (sleepEntries.length > 1) setSleepEntries(prev => prev.filter(entry => entry.id !== id));
  };

  const calculateSleepDebt = () => {
    setError(null);
    const desired = parseFloat(desiredSleepHours);
    if (isNaN(desired) || desired <= 0 || desired > 16) { // 16h is a generous upper limit
      setError("Desired sleep hours per night must be a reasonable positive number (e.g., 6-10).");
      return;
    }

    let totalHoursActuallySlept = 0;
    let validEntriesCount = 0;
    for (const entry of sleepEntries) {
      if (entry.hoursSlept.trim() === "") continue; // Skip empty entries for average calculation
      const slept = parseFloat(entry.hoursSlept);
      if (isNaN(slept) || slept < 0 || slept > 24) {
        setError(`Invalid hours slept for ${entry.day}. Must be between 0 and 24.`);
        return;
      }
      totalHoursActuallySlept += slept;
      validEntriesCount++;
    }
    
    if (validEntriesCount === 0) {
      setError("Please enter hours slept for at least one day.");
      return;
    }

    const totalHoursDesired = desired * validEntriesCount;
    const debt = totalHoursDesired - totalHoursActuallySlept;
    setTotalSleepDebt(debt.toFixed(1));
    setAverageSleep((totalHoursActuallySlept / validEntriesCount).toFixed(1));
  };

  const resetForm = () => {
    setDesiredSleepHours('8');
    setSleepEntries([{ id: crypto.randomUUID(), day: 'Day 1', hoursSlept: '' }, { id: crypto.randomUUID(), day: 'Day 2', hoursSlept: '' }, { id: crypto.randomUUID(), day: 'Day 3', hoursSlept: '' }]);
    setTotalSleepDebt(null); setAverageSleep(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Sleep Debt Calculator</AlertTitle><AlertDescription>Track your sleep over several days to estimate your sleep debt or surplus compared to your desired amount of sleep.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardDescription>Enter your sleep details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="desiredSleepSD">Desired Hours of Sleep Per Night</Label><Input id="desiredSleepSD" type="number" value={desiredSleepHours} onChange={e=>setDesiredSleepHours(e.target.value)} placeholder="e.g., 8"/></div>
            <CardTitle className="font-headline text-lg border-t pt-3">Daily Sleep Log</CardTitle>
            <div className="space-y-2 max-h-[300px] overflow-y-auto pr-2">
              {sleepEntries.map((entry, index) => (
                <div key={entry.id} className="flex items-center gap-2 p-2 border rounded-md">
                  <Label htmlFor={`sleep-${entry.id}`} className="w-16 shrink-0">{entry.day}:</Label>
                  <Input id={`sleep-${entry.id}`} type="number" step="0.25" value={entry.hoursSlept} onChange={e=>handleEntryChange(entry.id, e.target.value)} placeholder="Hours Slept" className="h-9 flex-grow"/>
                  <Button variant="ghost" size="icon" onClick={()=>removeDay(entry.id)} disabled={sleepEntries.length === 1} className="h-9 w-9 shrink-0"><Trash2 className="h-4 w-4 text-destructive"/></Button>
                </div>
              ))}
            </div>
            <Button variant="outline" size="sm" onClick={addDay}><PlusCircle className="mr-2 h-4 w-4"/> Add Day</Button>
          </CardContent>
          <CardFooter><Button onClick={calculateSleepDebt} className="w-full md:w-auto">Calculate Sleep Debt</Button></CardFooter>
        </Card>
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Sleep Summary</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {averageSleep && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Average Hours Slept Per Night</p><p className="font-semibold">{averageSleep} hours</p></div>)}
            {totalSleepDebt && (<div className={`p-2 rounded-md ${parseFloat(totalSleepDebt) > 0 ? 'bg-red-500/10 text-red-700' : 'bg-green-500/10 text-green-700'}`}>
                <p className="text-sm">Total Sleep {parseFloat(totalSleepDebt) >= 0 ? 'Debt' : 'Surplus'}</p>
                <div className="flex justify-between items-center"><p className="text-xl font-bold">{Math.abs(parseFloat(totalSleepDebt)).toFixed(1)} hours</p><CopyButton textToCopy={totalSleepDebt} size="sm" variant="ghost"/></div>
            </div>)}
          </CardContent>
          <CardFooter><Button variant="outline" onClick={resetForm} className="w-full">Reset Tracker</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: SleepDebtCalculator.tsx ======
==================================================

// ====== START OF FILE: SlopeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.71 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, TrendingUp } from "lucide-react";

export default function SlopeCalculator() {
  const [x1, setX1] = useState<string>('');
  const [y1, setY1] = useState<string>('');
  const [x2, setX2] = useState<string>('');
  const [y2, setY2] = useState<string>('');

  const [slope, setSlope] = useState<string | null>(null);
  const [equation, setEquation] = useState<string | null>(null); // y = mx + c
  const [error, setError] = useState<string | null>(null);

  const calculateSlope = () => {
    setError(null);
    setSlope(null);
    setEquation(null);

    const numX1 = parseFloat(x1);
    const numY1 = parseFloat(y1);
    const numX2 = parseFloat(x2);
    const numY2 = parseFloat(y2);

    if (isNaN(numX1) || isNaN(numY1) || isNaN(numX2) || isNaN(numY2)) {
      setError('Please enter valid numbers for all coordinates (x1, y1, x2, y2).');
      return;
    }

    if (numX2 - numX1 === 0) {
      setError('Slope is undefined (vertical line, x2 - x1 = 0).');
      setSlope("Undefined (Vertical Line)");
      setEquation(`x = ${numX1}`);
      return;
    }

    const m = (numY2 - numY1) / (numX2 - numX1);
    setSlope(m.toFixed(4));

    // Calculate y-intercept (c) for y = mx + c  => c = y - mx
    const c = numY1 - m * numX1;
    setEquation(`y = ${m.toFixed(4)}x ${c >= 0 ? '+' : '-'} ${Math.abs(c).toFixed(4)}`);
  };

  const resetForm = () => {
    setX1(''); setY1(''); setX2(''); setY2('');
    setSlope(null); setEquation(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Slope Calculator</AlertTitle>
        <AlertDescription>
          Calculate the slope (m) and equation (y = mx + c) of a line given two points (x₁, y₁) and (x₂, y₂).
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter coordinates of two points.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="x1">Point 1: X₁</Label><Input id="x1" type="number" value={x1} onChange={(e) => setX1(e.target.value)} placeholder="e.g., 1"/></div>
              <div><Label htmlFor="y1">Point 1: Y₁</Label><Input id="y1" type="number" value={y1} onChange={(e) => setY1(e.target.value)} placeholder="e.g., 2"/></div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="x2">Point 2: X₂</Label><Input id="x2" type="number" value={x2} onChange={(e) => setX2(e.target.value)} placeholder="e.g., 3"/></div>
              <div><Label htmlFor="y2">Point 2: Y₂</Label><Input id="y2" type="number" value={y2} onChange={(e) => setY2(e.target.value)} placeholder="e.g., 8"/></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateSlope}>Calculate Slope</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(slope || error) && (
          <Card>
            <CardHeader><CardDescription>Line Properties</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {slope && (
                <div className="p-2 bg-primary/10 rounded-md">
                  <p className="text-sm text-muted-foreground">Slope (m)</p>
                  <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{slope}</p><CopyButton textToCopy={slope} size="sm" variant="ghost"/></div>
                </div>
              )}
              {equation && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Equation of the Line</p>
                  <div className="flex justify-between items-center"><p className="font-semibold">{equation}</p><CopyButton textToCopy={equation} size="sm" variant="ghost"/></div>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SlopeCalculator.tsx ======
==================================================

// ====== START OF FILE: SocialSecurityBenefitEstimatorSimplifiedUs.tsx ======
// File converted from TSX to TXT
// Original size: 5.28 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Landmark } from "lucide-react";

// VERY SIMPLIFIED Social Security benefit estimator
// True calculation involves AIME, PIA, bend points, and indexing of past earnings.
// This will use a placeholder logic.

export default function SocialSecurityBenefitEstimatorSimplifiedUs() {
  const [averageAnnualEarnings, setAverageAnnualEarnings] = useState<string>('');
  const [retirementAgeSS, setRetirementAgeSS] = useState<string>('67'); // Full Retirement Age (FRA) example

  const [estimatedMonthlyBenefit, setEstimatedMonthlyBenefit] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateBenefit = () => {
    setError(null);
    setEstimatedMonthlyBenefit(null);

    const avgEarnings = parseFloat(averageAnnualEarnings);
    const retAge = parseInt(retirementAgeSS);

    if (isNaN(avgEarnings) || avgEarnings <= 0 || isNaN(retAge) || retAge < 62 || retAge > 70) {
      setError('Please enter valid average annual earnings and a retirement age between 62 and 70.');
      return;
    }

    // Extremely simplified placeholder logic:
    // Assume PIA is roughly 40% of AIME (Average Indexed Monthly Earnings) for a mid-range earner.
    // And AIME is roughly average annual earnings / 12.
    // Then adjust for early/late retirement. FRA 67.
    const aime = avgEarnings / 12;
    let pia = aime * 0.40; // Placeholder PIA

    // Placeholder adjustment for retirement age (very rough)
    if (retAge < 67) {
      pia *= (1 - (67 - retAge) * 0.06); // Reduce by ~6% per year before FRA
    } else if (retAge > 67) {
      pia *= (1 + (retAge - 67) * 0.08); // Increase by ~8% per year after FRA (up to 70)
    }
    
    pia = Math.max(0, pia); // Benefit cannot be negative

    setEstimatedMonthlyBenefit(pia.toFixed(2));
  };

  const resetForm = () => {
    setAverageAnnualEarnings('');
    setRetirementAgeSS('67');
    setEstimatedMonthlyBenefit(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Highly Simplified Estimator - For Illustrative Purposes Only</AlertTitle>
        <AlertDescription>
          Social Security benefit calculations are extremely complex and depend on your entire earnings history, specific Full Retirement Age (FRA), and current SSA formulas. This calculator uses a <strong className="font-semibold">grossly simplified placeholder logic</strong>. For an accurate estimate, use the official calculator on the Social Security Administration (SSA.gov) website or consult your SSA statement. <strong className="font-semibold">This tool is NOT for financial planning.</strong>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Get a very basic estimate of potential Social Security benefits.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="avgAnnualEarningsSSBESU">Average Annual Earnings (approximate career average) ($)</Label>
              <Input id="avgAnnualEarningsSSBESU" type="number" value={averageAnnualEarnings} onChange={(e) => setAverageAnnualEarnings(e.target.value)} placeholder="e.g., 60000"/>
            </div>
            <div>
              <Label htmlFor="retirementAgeSSBESU">Desired Retirement Age (62-70)</Label>
              <Input id="retirementAgeSSBESU" type="number" value={retirementAgeSS} onChange={(e) => setRetirementAgeSS(e.target.value)} placeholder="e.g., 67 (FRA for many)"/>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateBenefit}>Estimate Benefit</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(estimatedMonthlyBenefit || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Monthly Benefit (Highly Simplified)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {estimatedMonthlyBenefit && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Monthly Benefit</p><p className="text-2xl font-bold text-primary">${estimatedMonthlyBenefit}</p></div>
                  <CopyButton textToCopy={estimatedMonthlyBenefit} />
                </div>
              )}
              <AlertDescription className="text-xs pt-2 mt-2">This is a placeholder result. Use official SSA tools for accurate estimates.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SocialSecurityBenefitEstimatorSimplifiedUs.tsx ======
==================================================

// ====== START OF FILE: SocialSecurityCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.28 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Landmark } from "lucide-react";

// VERY SIMPLIFIED Social Security benefit estimator
// True calculation involves AIME, PIA, bend points, and indexing of past earnings.
// This will use a placeholder logic.

export default function SocialSecurityCalculator() {
  const [averageAnnualEarnings, setAverageAnnualEarnings] = useState<string>('');
  const [retirementAgeSS, setRetirementAgeSS] = useState<string>('67'); // Full Retirement Age (FRA) example

  const [estimatedMonthlyBenefit, setEstimatedMonthlyBenefit] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateBenefit = () => {
    setError(null);
    setEstimatedMonthlyBenefit(null);

    const avgEarnings = parseFloat(averageAnnualEarnings);
    const retAge = parseInt(retirementAgeSS);

    if (isNaN(avgEarnings) || avgEarnings <= 0 || isNaN(retAge) || retAge < 62 || retAge > 70) {
      setError('Please enter valid average annual earnings and a retirement age between 62 and 70.');
      return;
    }

    // Extremely simplified placeholder logic:
    // Assume PIA is roughly 40% of AIME (Average Indexed Monthly Earnings) for a mid-range earner.
    // And AIME is roughly average annual earnings / 12.
    // Then adjust for early/late retirement. FRA 67.
    const aime = avgEarnings / 12;
    let pia = aime * 0.40; // Placeholder PIA

    // Placeholder adjustment for retirement age (very rough)
    if (retAge < 67) {
      pia *= (1 - (67 - retAge) * 0.06); // Reduce by ~6% per year before FRA
    } else if (retAge > 67) {
      pia *= (1 + (retAge - 67) * 0.08); // Increase by ~8% per year after FRA (up to 70)
    }
    
    pia = Math.max(0, pia); // Benefit cannot be negative

    setEstimatedMonthlyBenefit(pia.toFixed(2));
  };

  const resetForm = () => {
    setAverageAnnualEarnings('');
    setRetirementAgeSS('67');
    setEstimatedMonthlyBenefit(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Highly Simplified Estimator - For Illustrative Purposes Only</AlertTitle>
        <AlertDescription>
          Social Security benefit calculations are extremely complex and depend on your entire earnings history, specific Full Retirement Age (FRA), and current SSA formulas. This calculator uses a <strong className="font-semibold">grossly simplified placeholder logic</strong>. For an accurate estimate, use the official calculator on the Social Security Administration (SSA.gov) website or consult your SSA statement. <strong className="font-semibold">This tool is NOT for financial planning.</strong>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Get a very basic estimate of potential Social Security benefits.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="avgAnnualEarnings">Average Annual Earnings (approximate career average) ($)</Label>
              <Input id="avgAnnualEarnings" type="number" value={averageAnnualEarnings} onChange={(e) => setAverageAnnualEarnings(e.target.value)} placeholder="e.g., 60000"/>
            </div>
            <div>
              <Label htmlFor="retirementAgeSS">Desired Retirement Age (62-70)</Label>
              <Input id="retirementAgeSS" type="number" value={retirementAgeSS} onChange={(e) => setRetirementAgeSS(e.target.value)} placeholder="e.g., 67 (FRA for many)"/>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateBenefit}>Estimate Benefit</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(estimatedMonthlyBenefit || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Monthly Benefit (Highly Simplified)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {estimatedMonthlyBenefit && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Monthly Benefit</p><p className="text-2xl font-bold text-primary">${estimatedMonthlyBenefit}</p></div>
                  <CopyButton textToCopy={estimatedMonthlyBenefit} />
                </div>
              )}
              <AlertDescription className="text-xs pt-2 mt-2">This is a placeholder result. Use official SSA tools for accurate estimates.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SocialSecurityCalculator.tsx ======
==================================================

// ====== START OF FILE: SolarPanelSystemCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.07 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Sun, ExternalLink } from "lucide-react";
import Link from 'next/link';

export default function SolarPanelSystemCalculator() {
  const [monthlyKwhUsage, setMonthlyKwhUsage] = useState<string>('');
  const [peakSunHours, setPeakSunHours] = useState<string>('4.5');
  const [panelWattage, setPanelWattage] = useState<string>('400');
  const [desiredOffset, setDesiredOffset] = useState<string>('100'); // %

  const [systemSizeKw, setSystemSizeKw] = useState<string | null>(null);
  const [numPanels, setNumPanels] = useState<string | null>(null);
  const [annualProduction, setAnnualProduction] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateSystem = () => {
    setError(null);
    setSystemSizeKw(null);
    setNumPanels(null);
    setAnnualProduction(null);

    const kWh = parseFloat(monthlyKwhUsage);
    const psh = parseFloat(peakSunHours);
    const wattage = parseInt(panelWattage);
    const offset = parseFloat(desiredOffset) / 100;
    const systemLosses = 0.85; // Assume 15% system loss (inverter, wiring, dirt, etc.)

    if (isNaN(kWh) || kWh <=0 || isNaN(psh) || psh <=0 || isNaN(wattage) || wattage <=0 || isNaN(offset) || offset <= 0 || offset > 2) { // Allow up to 200% offset
      setError("Please enter valid, positive numbers for all fields.");
      return;
    }

    const dailyKwhNeeded = (kWh / 30.4) * offset; // Avg days in month
    const requiredSystemSizeKw = (dailyKwhNeeded / psh) / systemLosses;
    setSystemSizeKw(requiredSystemSizeKw.toFixed(2));
    
    const calculatedNumPanels = (requiredSystemSizeKw * 1000) / wattage;
    setNumPanels(Math.ceil(calculatedNumPanels).toString());

    const estimatedAnnualProd = dailyKwhNeeded / offset * 365; // Total annual kWh based on daily need before offset
    setAnnualProduction(estimatedAnnualProd.toFixed(0));
  };
  
  const resetForm = () => {
    setMonthlyKwhUsage(''); setPeakSunHours('4.5'); setPanelWattage('400'); setDesiredOffset('100');
    setSystemSizeKw(null); setNumPanels(null); setAnnualProduction(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Solar Panel System Size Estimator</AlertTitle><AlertDescription>Estimate the size of the solar panel system you might need. This is a simplified calculation; consult a professional for an accurate site assessment.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your energy needs and panel specs.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="monthlyKwh">Average Monthly Electricity Usage (kWh)</Label><Input id="monthlyKwh" type="number" value={monthlyKwhUsage} onChange={e=>setMonthlyKwhUsage(e.target.value)} placeholder="e.g., 900"/></div>
            <div>
              <Label htmlFor="peakSunHours">Peak Sun Hours per Day</Label>
              <Input id="peakSunHours" type="number" value={peakSunHours} onChange={e=>setPeakSunHours(e.target.value)} placeholder="e.g., 4.5"/>
              <p className="text-xs text-muted-foreground mt-1">This varies by location. Check a <Link href="https://www.solar-estimate.org/solar-radiation-maps" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">solar radiation map <ExternalLink className="inline h-3 w-3 ml-0.5"/></Link> for your area.</p>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="panelWattage">Solar Panel Wattage (W)</Label><Input id="panelWattage" type="number" value={panelWattage} onChange={e=>setPanelWattage(e.target.value)} placeholder="e.g., 400"/></div>
              <div><Label htmlFor="desiredOffset">Desired Offset (%)</Label><Input id="desiredOffset" type="number" value={desiredOffset} onChange={e=>setDesiredOffset(e.target.value)} placeholder="e.g., 100"/></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateSystem}>Estimate System Size</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(systemSizeKw || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated System Requirements</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {systemSizeKw && (<div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">Required System Size (DC)</p><div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{systemSizeKw} kW</p><CopyButton textToCopy={systemSizeKw} size="sm"/></div></div>)}
              {numPanels && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Number of {panelWattage}W Panels</p><p className="font-semibold">{numPanels} panels</p></div>)}
              {annualProduction && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Annual Production</p><p className="font-semibold">{annualProduction} kWh</p></div>)}
              <AlertDescription className="text-xs pt-2">Assumes ~15% system loss (inverter, wiring, dirt, etc.). Actual output varies with weather, roof angle, and shading.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SolarPanelSystemCalculator.tsx ======
==================================================

// ====== START OF FILE: SolarPanelSystemSizeEstimator.tsx ======
// File converted from TSX to TXT
// Original size: 3.08 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { Card, CardContent, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Sun, Info, ExternalLink } from "lucide-react";
import Link from 'next/link';

export default function SolarPanelSystemSizeEstimator() {
  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle className="font-bold text-lg">Placeholder - Requires Professional Expertise</AlertTitle>
        <AlertDescription className="text-base">
          <p>Solar panel system sizing and production estimation is a very complex task that depends on many factors including:
          your precise geographic location (for solar irradiance/peak sun hours), roof orientation and tilt, shading, panel efficiency, inverter efficiency, system losses, and local weather patterns.</p>
          <p className="mt-2"><strong className="font-semibold">This calculator is a conceptual placeholder UI and DOES NOT perform actual solar system calculations.</strong> Using simplified averages can lead to very inaccurate estimates.</p>
          <p className="mt-2"><strong className="font-semibold">ALWAYS consult with qualified solar installation professionals</strong> for an accurate assessment and system design tailored to your specific needs and location. They use specialized software and on-site evaluation.</p>
        </AlertDescription>
      </Alert>
      
      <Card>
        <CardHeader>
          <CardDescription className="flex items-center"><Sun className="mr-2 h-5 w-5 text-primary"/>Conceptual Solar Panel System Inputs</CardDescription>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">
            A comprehensive solar calculator would typically require inputs such as:
          </p>
          <ul className="list-disc list-inside mt-2 text-muted-foreground text-sm space-y-1">
            <li>Average Monthly Electricity Consumption (kWh)</li>
            <li>Location (for Peak Sun Hours data, or direct Peak Sun Hours input)</li>
            <li>Individual Solar Panel Wattage (e.g., 300W, 400W)</li>
            <li>Desired Percentage of Energy Offset (e.g., 100%)</li>
            <li>System Losses (e.g., inverter, wiring, dirt - often 10-20%)</li>
          </ul>
           <p className="text-muted-foreground mt-4">
            Based on these, it could estimate:
          </p>
          <ul className="list-disc list-inside mt-2 text-muted-foreground text-sm space-y-1">
            <li>Required System Size (kW)</li>
            <li>Number of Panels Needed</li>
            <li>Estimated Annual Energy Production (kWh)</li>
          </ul>
           <p className="text-muted-foreground mt-4">
            Specialized tools like <Link href="https://pvwatts.nrel.gov/" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">PVWatts (from NREL) <ExternalLink className="inline h-3 w-3 ml-1"/></Link> offer more detailed online calculations.
          </p>
        </CardContent>
      </Card>
    </div>
  );
}


// ====== END OF FILE: SolarPanelSystemSizeEstimator.tsx ======
==================================================

// ====== START OF FILE: SolutionDilutionCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.33 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Beaker } from "lucide-react";

// Formula: M1V1 = M2V2
// M1 = Initial Molarity, V1 = Initial Volume
// M2 = Final Molarity, V2 = Final Volume

type TargetVariableDilution = 'M1' | 'V1' | 'M2' | 'V2';

export default function SolutionDilutionCalculator() {
  const [target, setTarget] = useState<TargetVariableDilution>('V2'); // Often solve for final volume or initial volume
  const [m1, setM1] = useState<string>(''); // Initial Molarity
  const [v1, setV1] = useState<string>(''); // Initial Volume
  const [m2, setM2] = useState<string>(''); // Final Molarity
  const [v2, setV2] = useState<string>(''); // Final Volume
  
  // Assuming consistent units for volume (e.g., mL or L for both V1 and V2) for simplicity.
  // User should ensure units for M1/M2 are same, and V1/V2 are same.

  const [result, setResult] = useState<string | null>(null);
  const [resultUnitLabel, setResultUnitLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const calculateDilution = () => {
    setError(null);
    setResult(null);
    setResultUnitLabel('');

    const valM1 = parseFloat(m1);
    const valV1 = parseFloat(v1);
    const valM2 = parseFloat(m2);
    const valV2 = parseFloat(v2);
    let calculatedValue: number;

    try {
      switch (target) {
        case 'M1': // M1 = (M2 * V2) / V1
          if (isNaN(valM2) || valM2 < 0 || isNaN(valV2) || valV2 <= 0 || isNaN(valV1) || valV1 <= 0) throw new Error("M2, V2 (>0), and V1 (>0) must be valid numbers.");
          calculatedValue = (valM2 * valV2) / valV1;
          setResultUnitLabel('M (mol/L)');
          break;
        case 'V1': // V1 = (M2 * V2) / M1
          if (isNaN(valM2) || valM2 < 0 || isNaN(valV2) || valV2 <= 0 || isNaN(valM1) || valM1 <= 0) throw new Error("M2, V2 (>0), and M1 (>0) must be valid numbers.");
          calculatedValue = (valM2 * valV2) / valM1;
          setResultUnitLabel('Volume (units as V2)');
          break;
        case 'M2': // M2 = (M1 * V1) / V2
          if (isNaN(valM1) || valM1 < 0 || isNaN(valV1) || valV1 <= 0 || isNaN(valV2) || valV2 <= 0) throw new Error("M1, V1 (>0), and V2 (>0) must be valid numbers.");
          calculatedValue = (valM1 * valV1) / valV2;
          setResultUnitLabel('M (mol/L)');
          break;
        case 'V2': // V2 = (M1 * V1) / M2
          if (isNaN(valM1) || valM1 < 0 || isNaN(valV1) || valV1 <= 0 || isNaN(valM2) || valM2 <= 0) throw new Error("M1, V1 (>0), and M2 (>0) must be valid numbers.");
          calculatedValue = (valM1 * valV1) / valM2;
          setResultUnitLabel('Volume (units as V1)');
          break;
        default: throw new Error("Invalid selection.");
      }
      if (isNaN(calculatedValue) || !isFinite(calculatedValue) || calculatedValue < 0) throw new Error("Calculation resulted in an invalid or negative number.");
      setResult(calculatedValue.toPrecision(5));
    } catch (e: any) { setError(e.message); }
  };

  const resetForm = () => {
    setM1(''); setV1(''); setM2(''); setV2('');
    setResult(null); setError(null); setResultUnitLabel('');
  };
  
  const inputFields = [
    { id: 'M1', label: 'Initial Molarity (M1)', value: m1, setter: setM1, unit: 'mol/L' },
    { id: 'V1', label: 'Initial Volume (V1)', value: v1, setter: setV1, unit: 'e.g., mL or L' },
    { id: 'M2', label: 'Final Molarity (M2)', value: m2, setter: setM2, unit: 'mol/L' },
    { id: 'V2', label: 'Final Volume (V2)', value: v2, setter: setV2, unit: 'e.g., mL or L' },
  ];

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Solution Dilution Calculator (M₁V₁ = M₂V₂)</AlertTitle><AlertDescription>Calculate one unknown from the dilution equation. Ensure volume units are consistent for V1 and V2, and molarity units are consistent for M1 and M2.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Solve for M1, V1, M2, or V2.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="targetDilution">Variable to Calculate:</Label><Select value={target} onValueChange={(v: TargetVariableDilution) => {setTarget(v);setResult(null);setError(null);}}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent>
                <SelectItem value="M1">Initial Molarity (M1)</SelectItem><SelectItem value="V1">Initial Volume (V1)</SelectItem>
                <SelectItem value="M2">Final Molarity (M2)</SelectItem><SelectItem value="V2">Final Volume (V2)</SelectItem>
            </SelectContent></Select></div>
            {inputFields.filter(field => field.id !== target).map(field => (
              <div key={field.id}><Label htmlFor={field.id}>{field.label} ({field.unit})</Label><Input id={field.id} type="number" value={field.value} onChange={e => field.setter(e.target.value)} /></div>
            ))}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateDilution}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Calculated {target}</p><p className="text-2xl font-bold text-primary">{result} <span className="text-lg">{resultUnitLabel}</span></p></div><CopyButton textToCopy={`${result} ${resultUnitLabel}`} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SolutionDilutionCalculator.tsx ======
==================================================

// ====== START OF FILE: SolutionDilutionCalculatorM1v1M2v2.tsx ======
// File converted from TSX to TXT
// Original size: 6.34 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Beaker } from "lucide-react";

// Formula: M1V1 = M2V2
// M1 = Initial Molarity, V1 = Initial Volume
// M2 = Final Molarity, V2 = Final Volume

type TargetVariableDilution = 'M1' | 'V1' | 'M2' | 'V2';

export default function SolutionDilutionCalculatorM1v1M2v2() {
  const [target, setTarget] = useState<TargetVariableDilution>('V2'); // Often solve for final volume or initial volume
  const [m1, setM1] = useState<string>(''); // Initial Molarity
  const [v1, setV1] = useState<string>(''); // Initial Volume
  const [m2, setM2] = useState<string>(''); // Final Molarity
  const [v2, setV2] = useState<string>(''); // Final Volume
  
  // Assuming consistent units for volume (e.g., mL or L for both V1 and V2) for simplicity.
  // User should ensure units for M1/M2 are same, and V1/V2 are same.

  const [result, setResult] = useState<string | null>(null);
  const [resultUnitLabel, setResultUnitLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const calculateDilution = () => {
    setError(null);
    setResult(null);
    setResultUnitLabel('');

    const valM1 = parseFloat(m1);
    const valV1 = parseFloat(v1);
    const valM2 = parseFloat(m2);
    const valV2 = parseFloat(v2);
    let calculatedValue: number;

    try {
      switch (target) {
        case 'M1': // M1 = (M2 * V2) / V1
          if (isNaN(valM2) || valM2 < 0 || isNaN(valV2) || valV2 <= 0 || isNaN(valV1) || valV1 <= 0) throw new Error("M2, V2 (>0), and V1 (>0) must be valid numbers.");
          calculatedValue = (valM2 * valV2) / valV1;
          setResultUnitLabel('M (mol/L)');
          break;
        case 'V1': // V1 = (M2 * V2) / M1
          if (isNaN(valM2) || valM2 < 0 || isNaN(valV2) || valV2 <= 0 || isNaN(valM1) || valM1 <= 0) throw new Error("M2, V2 (>0), and M1 (>0) must be valid numbers.");
          calculatedValue = (valM2 * valV2) / valM1;
          setResultUnitLabel('Volume (units as V2)');
          break;
        case 'M2': // M2 = (M1 * V1) / V2
          if (isNaN(valM1) || valM1 < 0 || isNaN(valV1) || valV1 <= 0 || isNaN(valV2) || valV2 <= 0) throw new Error("M1, V1 (>0), and V2 (>0) must be valid numbers.");
          calculatedValue = (valM1 * valV1) / valV2;
          setResultUnitLabel('M (mol/L)');
          break;
        case 'V2': // V2 = (M1 * V1) / M2
          if (isNaN(valM1) || valM1 < 0 || isNaN(valV1) || valV1 <= 0 || isNaN(valM2) || valM2 <= 0) throw new Error("M1, V1 (>0), and M2 (>0) must be valid numbers.");
          calculatedValue = (valM1 * valV1) / valM2;
          setResultUnitLabel('Volume (units as V1)');
          break;
        default: throw new Error("Invalid selection.");
      }
      if (isNaN(calculatedValue) || !isFinite(calculatedValue) || calculatedValue < 0) throw new Error("Calculation resulted in an invalid or negative number.");
      setResult(calculatedValue.toPrecision(5));
    } catch (e: any) { setError(e.message); }
  };

  const resetForm = () => {
    setM1(''); setV1(''); setM2(''); setV2('');
    setResult(null); setError(null); setResultUnitLabel('');
  };
  
  const inputFields = [
    { id: 'M1', label: 'Initial Molarity (M1)', value: m1, setter: setM1, unit: 'mol/L' },
    { id: 'V1', label: 'Initial Volume (V1)', value: v1, setter: setV1, unit: 'e.g., mL or L' },
    { id: 'M2', label: 'Final Molarity (M2)', value: m2, setter: setM2, unit: 'mol/L' },
    { id: 'V2', label: 'Final Volume (V2)', value: v2, setter: setV2, unit: 'e.g., mL or L' },
  ];

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Solution Dilution Calculator (M₁V₁ = M₂V₂)</AlertTitle><AlertDescription>Calculate one unknown from the dilution equation. Ensure volume units are consistent for V1 and V2, and molarity units are consistent for M1 and M2.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Solve for M1, V1, M2, or V2.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="targetDilution">Variable to Calculate:</Label><Select value={target} onValueChange={(v: TargetVariableDilution) => {setTarget(v);setResult(null);setError(null);}}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent>
                <SelectItem value="M1">Initial Molarity (M1)</SelectItem><SelectItem value="V1">Initial Volume (V1)</SelectItem>
                <SelectItem value="M2">Final Molarity (M2)</SelectItem><SelectItem value="V2">Final Volume (V2)</SelectItem>
            </SelectContent></Select></div>
            {inputFields.filter(field => field.id !== target).map(field => (
              <div key={field.id}><Label htmlFor={field.id}>{field.label} ({field.unit})</Label><Input id={field.id} type="number" value={field.value} onChange={e => field.setter(e.target.value)} /></div>
            ))}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateDilution}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Calculated {target}</p><p className="text-2xl font-bold text-primary">{result} <span className="text-lg">{resultUnitLabel}</span></p></div><CopyButton textToCopy={`${result} ${resultUnitLabel}`} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: SolutionDilutionCalculatorM1v1M2v2.tsx ======
==================================================

// ====== START OF FILE: SpaceTourismSavingsCalculatorConceptual.tsx ======
// File converted from TSX to TXT
// Original size: 4.9 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Rocket } from "lucide-react";

export default function SpaceTourismSavingsCalculatorConceptual() {
  const [tripCost, setTripCost] = useState<string>('250000');
  const [currentSavings, setCurrentSavings] = useState<string>('0');
  const [annualContribution, setAnnualContribution] = useState<string>('');
  const [annualReturnRate, setAnnualReturnRate] = useState<string>('7'); // %

  const [yearsToGoal, setYearsToGoal] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTimeToGoal = () => {
    setError(null);
    setYearsToGoal(null);

    const target = parseFloat(tripCost);
    const P0 = parseFloat(currentSavings);
    const PMT = parseFloat(annualContribution);
    const r_nominal = parseFloat(annualReturnRate) / 100;

    if (isNaN(target) || target <= 0 || isNaN(P0) || P0 < 0 || isNaN(PMT) || PMT <= 0 || isNaN(r_nominal) || r_nominal < 0) {
      setError("Please enter valid, positive numbers for all fields (Current Savings can be zero).");
      return;
    }
    
    // Iterative calculation for years to reach goal
    let years = 0;
    let balance = P0;
    const MAX_YEARS = 200; // Safety break

    while (balance < target && years < MAX_YEARS) {
      balance = (balance + PMT) * (1 + r_nominal);
      years++;
    }

    if (years >= MAX_YEARS && balance < target) {
      setYearsToGoal(`Over ${MAX_YEARS} years (this is a long journey!)`);
    } else {
      setYearsToGoal(years.toString());
    }
  };

  const resetForm = () => {
    setTripCost('250000');
    setCurrentSavings('0');
    setAnnualContribution('');
    setAnnualReturnRate('7');
    setYearsToGoal(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Conceptual Space Tourism Savings Calculator</AlertTitle>
        <AlertDescription>
          A fun, illustrative tool to estimate how long it might take to save for a trip to space. This is a simplified financial projection and not investment advice.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your space savings plan.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="tripCostSTS">Space Trip Cost ($)</Label><Input id="tripCostSTS" type="number" value={tripCost} onChange={e => setTripCost(e.target.value)} /></div>
            <div><Label htmlFor="currentSavingsSTS">Current Savings ($)</Label><Input id="currentSavingsSTS" type="number" value={currentSavings} onChange={e => setCurrentSavings(e.target.value)} /></div>
            <div><Label htmlFor="annualContribSTS">Annual Contribution ($)</Label><Input id="annualContribSTS" type="number" value={annualContribution} onChange={e => setAnnualContribution(e.target.value)} /></div>
            <div><Label htmlFor="returnRateSTS">Expected Annual Investment Return (%)</Label><Input id="returnRateSTS" type="number" value={annualReturnRate} onChange={e => setAnnualReturnRate(e.target.value)} /></div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateTimeToGoal}>Calculate Time to Liftoff</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>
        {(yearsToGoal || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Savings Projection</CardDescription>
            </CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {yearsToGoal && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Estimated Time to Reach Goal</p>
                    <p className="text-2xl font-bold text-primary">{yearsToGoal} years</p>
                  </div>
                  <CopyButton textToCopy={yearsToGoal} />
                </div>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">Assumes annual contributions at the start of the year and annual compounding.</p>
            </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SpaceTourismSavingsCalculatorConceptual.tsx ======
==================================================

// ====== START OF FILE: SpeedCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.72 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Gauge } from "lucide-react";

// General Speed = Distance / Time calculator. Similar to DistanceCalculator logic but focused on speed.

type DistanceUnitSpeed = 'km' | 'miles' | 'meters' | 'feet';
type TimeUnitSpeed = 'hours' | 'minutes' | 'seconds';
type OutputSpeedUnit = 'kmh' | 'mph' | 'ms' | 'fts'; // Meters/sec, Feet/sec

export default function SpeedCalculator() {
  const [distance, setDistance] = useState<string>('');
  const [timeHours, setTimeHours] = useState<string>('0');
  const [timeMinutes, setTimeMinutes] = useState<string>('0');
  const [timeSeconds, setTimeSeconds] = useState<string>('0');

  const [distanceUnit, setDistanceUnit] = useState<DistanceUnitSpeed>('km');
  const [outputUnit, setOutputUnit] = useState<OutputSpeedUnit>('kmh');

  const [speedResult, setSpeedResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Base units for calculation: meters and seconds
  const distToBaseMeters: Record<DistanceUnitSpeed, number> = {
    km: 1000, miles: 1609.34, meters: 1, feet: 0.3048,
  };
  const speedFromBaseMs: Record<OutputSpeedUnit, { factor: number, label: string }> = {
    kmh: { factor: 3.6, label: 'km/h' },
    mph: { factor: 2.23694, label: 'mph' },
    ms: { factor: 1, label: 'm/s' },
    fts: { factor: 3.28084, label: 'ft/s' },
  };

  const calculateSpeed = () => {
    setError(null);
    setSpeedResult(null);

    const distVal = parseFloat(distance);
    const tH = parseFloat(timeHours) || 0;
    const tM = parseFloat(timeMinutes) || 0;
    const tS = parseFloat(timeSeconds) || 0;

    if (isNaN(distVal) || distVal <= 0) {
      setError('Distance must be a positive number.');
      return;
    }
    const totalTimeInSeconds = tH * 3600 + tM * 60 + tS;
    if (totalTimeInSeconds <= 0) {
      setError('Total time must be positive.');
      return;
    }

    const distanceInMeters = distVal * distToBaseMeters[distanceUnit];
    const speedInMs = distanceInMeters / totalTimeInSeconds; // Speed in meters per second (base)

    const finalSpeed = speedInMs * speedFromBaseMs[outputUnit].factor;
    
    if (isNaN(finalSpeed) || !isFinite(finalSpeed)) {
        setError("Could not calculate speed. Check inputs.");
        return;
    }
    setSpeedResult(`${finalSpeed.toFixed(2)} ${speedFromBaseMs[outputUnit].label}`);
  };

  const resetForm = () => {
    setDistance(''); setTimeHours('0'); setTimeMinutes('0'); setTimeSeconds('0');
    setSpeedResult(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Speed Calculator (Distance/Time)</AlertTitle><AlertDescription>Calculate average speed given distance and time. Supports various units.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter distance and time taken.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="distanceSpeed">Distance</Label><Input id="distanceSpeed" type="number" value={distance} onChange={(e) => setDistance(e.target.value)} /></div>
              <div><Label htmlFor="distanceUnitSpeed">Unit</Label><Select value={distanceUnit} onValueChange={(v: DistanceUnitSpeed) => setDistanceUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.keys(distToBaseMeters).map(u=><SelectItem key={u} value={u}>{u}</SelectItem>)}</SelectContent></Select></div>
            </div>
            <div><Label>Time Taken (HH:MM:SS)</Label><div className="grid grid-cols-3 gap-2"><Input type="number" value={timeHours} onChange={e=>setTimeHours(e.target.value)} placeholder="H"/><Input type="number" value={timeMinutes} onChange={e=>setTimeMinutes(e.target.value)} placeholder="M"/><Input type="number" value={timeSeconds} onChange={e=>setTimeSeconds(e.target.value)} placeholder="S"/></div></div>
            <div><Label htmlFor="outputSpeedUnit">Desired Speed Unit</Label><Select value={outputUnit} onValueChange={(v: OutputSpeedUnit) => setOutputUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.entries(speedFromBaseMs).map(([key, val])=><SelectItem key={key} value={key}>{val.label}</SelectItem>)}</SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateSpeed}>Calculate Speed</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(speedResult || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Average Speed</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {speedResult && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Average Speed</p><p className="text-2xl font-bold text-primary">{speedResult}</p></div><CopyButton textToCopy={speedResult} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SpeedCalculator.tsx ======
==================================================

// ====== START OF FILE: SquareFootageCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.75 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Square as SquareIcon } from "lucide-react";

type UnitSystemSqFt = 'imperial' | 'metric'; // imperial (feet/inches), metric (meters/cm)

export default function SquareFootageCalculator() {
  const [length, setLength] = useState<string>('');
  const [width, setWidth] = useState<string>('');
  const [units, setUnits] = useState<UnitSystemSqFt>('imperial');

  // Specific imperial inputs if feet & inches are separate
  const [lengthFeet, setLengthFeet] = useState<string>('');
  const [lengthInches, setLengthInches] = useState<string>('0');
  const [widthFeet, setWidthFeet] = useState<string>('');
  const [widthInches, setWidthInches] = useState<string>('0');
  
  const [areaResult, setAreaResult] = useState<string | null>(null);
  const [areaUnitLabel, setAreaUnitLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const calculateArea = () => {
    setError(null);
    setAreaResult(null);
    setAreaUnitLabel('');

    let len: number, wid: number;

    if (units === 'imperial') {
      const lF = parseFloat(lengthFeet) || 0;
      const lI = parseFloat(lengthInches) || 0;
      const wF = parseFloat(widthFeet) || 0;
      const wI = parseFloat(widthInches) || 0;

      if ( (lengthFeet && isNaN(lF)) || (lengthInches && isNaN(lI)) || (widthFeet && isNaN(wF)) || (widthInches && isNaN(wI)) ) {
        setError('Please enter valid numbers for feet and inches.');
        return;
      }
      if ( (lF <= 0 && lI <=0) || (wF <=0 && wI <= 0) ){
         setError('Length and Width must be positive.');
         return;
      }
      len = lF + (lI / 12); // Convert total length to feet
      wid = wF + (wI / 12); // Convert total width to feet
      setAreaUnitLabel('sq ft');
    } else { // Metric
      len = parseFloat(length); // Assuming meters
      wid = parseFloat(width);  // Assuming meters
      if (isNaN(len) || len <= 0 || isNaN(wid) || wid <= 0) {
        setError('Please enter valid positive length and width in meters.');
        return;
      }
      setAreaUnitLabel('sq m');
    }

    const area = len * wid;
    setAreaResult(area.toFixed(2));
  };

  const resetForm = () => {
    setLength(''); setWidth('');
    setLengthFeet(''); setLengthInches('0'); setWidthFeet(''); setWidthInches('0');
    setAreaResult(null); setError(null); setAreaUnitLabel('');
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Square Footage/Meterage Calculator</AlertTitle><AlertDescription>Calculate the area of a rectangular space in square feet or square meters.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter dimensions of the area.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="unitSystemSqFt">Unit System</Label><Select value={units} onValueChange={(v: UnitSystemSqFt) => setUnits(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Imperial (Feet & Inches)</SelectItem><SelectItem value="metric">Metric (Meters)</SelectItem></SelectContent></Select></div>
            {units === 'imperial' ? (
              <>
                <div><Label>Length</Label><div className="grid grid-cols-2 gap-2"><Input type="number" value={lengthFeet} onChange={e=>setLengthFeet(e.target.value)} placeholder="Feet"/><Input type="number" value={lengthInches} onChange={e=>setLengthInches(e.target.value)} placeholder="Inches (0-11)"/></div></div>
                <div><Label>Width</Label><div className="grid grid-cols-2 gap-2"><Input type="number" value={widthFeet} onChange={e=>setWidthFeet(e.target.value)} placeholder="Feet"/><Input type="number" value={widthInches} onChange={e=>setWidthInches(e.target.value)} placeholder="Inches (0-11)"/></div></div>
              </>
            ) : (
              <>
                <div><Label htmlFor="lengthMetersSq">Length (meters)</Label><Input id="lengthMetersSq" type="number" value={length} onChange={e=>setLength(e.target.value)} placeholder="e.g., 5.5"/></div>
                <div><Label htmlFor="widthMetersSq">Width (meters)</Label><Input id="widthMetersSq" type="number" value={width} onChange={e=>setWidth(e.target.value)} placeholder="e.g., 4.2"/></div>
              </>
            )}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateArea}>Calculate Area</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(areaResult || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Area</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {areaResult && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Total Area</p><p className="text-2xl font-bold text-primary">{areaResult} {areaUnitLabel}</p></div><CopyButton textToCopy={`${areaResult} ${areaUnitLabel}`} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SquareFootageCalculator.tsx ======
==================================================

// ====== START OF FILE: StairCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.13 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Ruler, AlignVerticalSpaceAround } from "lucide-react";

// Simplified stair calculations. Does not account for building codes which vary.
// Total Rise / Ideal Riser Height = Number of Risers
// Total Run / Number of Treads = Tread Depth (Number of Treads = Number of Risers - 1 for typical stairs)

export default function StairCalculator() {
  const [totalRise, setTotalRise] = useState<string>(''); // e.g., inches or cm
  const [idealRiserHeight, setIdealRiserHeight] = useState<string>('7'); // Common ideal in inches
  const [idealTreadDepth, setIdealTreadDepth] = useState<string>('10'); // Common ideal in inches
  // Units are assumed consistent for now (e.g. all inches, or all cm)

  const [numRisers, setNumRisers] = useState<string | null>(null);
  const [actualRiserHeight, setActualRiserHeight] = useState<string | null>(null);
  const [numTreads, setNumTreads] = useState<string | null>(null);
  const [totalRun, setTotalRun] = useState<string | null>(null);
  const [stairAngle, setStairAngle] = useState<string | null>(null);
  const [stringerLength, setStringerLength] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateStairs = () => {
    setError(null); // Reset all results
    setNumRisers(null); setActualRiserHeight(null); setNumTreads(null);
    setTotalRun(null); setStairAngle(null); setStringerLength(null);

    const rise = parseFloat(totalRise);
    const idealRise = parseFloat(idealRiserHeight);
    const idealTread = parseFloat(idealTreadDepth);

    if (isNaN(rise) || rise <= 0 || isNaN(idealRise) || idealRise <= 0 || isNaN(idealTread) || idealTread <= 0) {
      setError('Please enter valid positive numbers for total rise, ideal riser height, and ideal tread depth. Ensure units are consistent (e.g., all inches or all cm).');
      return;
    }

    const calculatedNumRisers = Math.ceil(rise / idealRise);
    const calculatedActualRiserHeight = rise / calculatedNumRisers;
    const calculatedNumTreads = calculatedNumRisers - 1; // Usually one less tread than risers
    
    if (calculatedNumTreads < 0) { // Should not happen if rise > 0 and idealRise > 0
        setError("Calculated number of treads is less than zero. Check inputs.");
        return;
    }

    const calculatedTotalRun = calculatedNumTreads * idealTread; // Using ideal tread depth for total run
    
    setNumRisers(calculatedNumRisers.toString());
    setActualRiserHeight(calculatedActualRiserHeight.toFixed(2));
    setNumTreads(calculatedNumTreads.toString());
    setTotalRun(calculatedTotalRun.toFixed(2));

    // Angle: atan(Total Rise / Total Run)
    if (calculatedTotalRun > 0) {
        const angleRad = Math.atan(rise / calculatedTotalRun);
        setStairAngle((angleRad * 180 / Math.PI).toFixed(1));
    } else {
        setStairAngle(calculatedNumTreads === 0 ? "0 (flat)" : "90 (vertical ladder)");
    }

    // Stringer Length: sqrt(Total Rise^2 + Total Run^2)
    const strLen = Math.sqrt(rise*rise + calculatedTotalRun*calculatedTotalRun);
    setStringerLength(strLen.toFixed(2));
  };

  const resetForm = () => {
    setTotalRise(''); setIdealRiserHeight('7'); setIdealTreadDepth('10');
    setError(null); setNumRisers(null); setActualRiserHeight(null); setNumTreads(null);
    setTotalRun(null); setStairAngle(null); setStringerLength(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Simplified Stair Calculator - For Estimation Only</AlertTitle>
        <AlertDescription>
          This calculator provides basic estimates for stair construction. <strong className="font-semibold">It does NOT account for local building codes (e.g., max/min riser/tread, headroom, handrails), which are critical and vary by location.</strong> Always consult official building codes and a professional for actual construction projects. Ensure all input units are consistent (e.g., all inches or all cm).
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate stair dimensions.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="totalRise">Total Rise (Overall Height)</Label><Input id="totalRise" type="number" value={totalRise} onChange={e=>setTotalRise(e.target.value)} placeholder="e.g., 108 (inches or cm)"/></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="idealRiserHeight">Ideal Riser Height</Label><Input id="idealRiserHeight" type="number" value={idealRiserHeight} onChange={e=>setIdealRiserHeight(e.target.value)} placeholder="e.g., 7"/></div>
              <div><Label htmlFor="idealTreadDepth">Ideal Tread Depth (Run)</Label><Input id="idealTreadDepth" type="number" value={idealTreadDepth} onChange={e=>setIdealTreadDepth(e.target.value)} placeholder="e.g., 10"/></div>
            </div>
            <p className="text-xs text-muted-foreground">Ensure all inputs use the same unit (e.g., inches or cm).</p>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateStairs}>Calculate Stairs</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(numRisers || error) && (
          <Card>
            <CardHeader><CardDescription>Stair Dimension Estimates</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {numRisers && (<div className="p-1 bg-muted rounded-md text-sm">Number of Risers: <strong className="font-semibold">{numRisers}</strong></div>)}
              {actualRiserHeight && (<div className="p-1 bg-muted rounded-md text-sm">Actual Riser Height: <strong className="font-semibold">{actualRiserHeight} per step</strong></div>)}
              {numTreads !== null && (<div className="p-1 bg-muted rounded-md text-sm">Number of Treads: <strong className="font-semibold">{numTreads}</strong></div>)}
              {totalRun && (<div className="p-1 bg-muted rounded-md text-sm">Total Run (Horizontal Length): <strong className="font-semibold">{totalRun}</strong></div>)}
              {stairAngle && (<div className="p-1 bg-muted rounded-md text-sm">Stair Angle: <strong className="font-semibold">{stairAngle}°</strong></div>)}
              {stringerLength && (<div className="p-1 bg-primary/10 rounded-md text-sm">Est. Stringer Length: <strong className="font-semibold text-primary">{stringerLength}</strong></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: StairCalculator.tsx ======
==================================================

// ====== START OF FILE: StandardDeviationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.19 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, BarChartHorizontalBig } from "lucide-react";

type CalculationType = 'population' | 'sample';

export default function StandardDeviationCalculator() {
  const [numbersInput, setNumbersInput] = useState<string>('');
  const [calcType, setCalcType] = useState<CalculationType>('sample');

  const [mean, setMean] = useState<string | null>(null);
  const [variance, setVariance] = useState<string | null>(null);
  const [stdDeviation, setStdDeviation] = useState<string | null>(null);
  const [count, setCount] = useState<number | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateStats = () => {
    setError(null);
    setMean(null);
    setVariance(null);
    setStdDeviation(null);
    setCount(null);

    const parsedNumbers = numbersInput
      .split(/[\s,]+/)
      .filter(n => n.trim() !== '')
      .map(n => parseFloat(n))
      .filter(n => !isNaN(n));

    if (parsedNumbers.length === 0) {
      setError('Please enter at least one valid number.');
      return;
    }
    if (calcType === 'sample' && parsedNumbers.length < 2) {
      setError('Sample standard deviation requires at least two data points.');
      return;
    }

    const n = parsedNumbers.length;
    setCount(n);

    const calculatedMean = parsedNumbers.reduce((acc, val) => acc + val, 0) / n;
    setMean(calculatedMean.toFixed(4));

    const squaredDifferences = parsedNumbers.map(val => Math.pow(val - calculatedMean, 2));
    const sumOfSquaredDiff = squaredDifferences.reduce((acc, val) => acc + val, 0);
    
    let calculatedVariance: number;
    if (calcType === 'population') {
      calculatedVariance = sumOfSquaredDiff / n;
    } else { // sample
      calculatedVariance = sumOfSquaredDiff / (n - 1);
    }
    setVariance(calculatedVariance.toFixed(4));

    const calculatedStdDev = Math.sqrt(calculatedVariance);
    setStdDeviation(calculatedStdDev.toFixed(4));
  };

  const resetForm = () => {
    setNumbersInput('');
    setMean(null); setVariance(null); setStdDeviation(null); setCount(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Standard Deviation Calculator</AlertTitle><AlertDescription>Calculate Standard Deviation (and Variance) for a sample or an entire population data set.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter data set and select calculation type.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="numbersStdDev">Enter Numbers (comma or space separated)</Label><Textarea id="numbersStdDev" value={numbersInput} onChange={(e) => setNumbersInput(e.target.value)} placeholder="e.g., 10, 12, 23, 23, 16, 23, 21, 16" rows={4}/></div>
            <div><Label htmlFor="calcTypeStdDev">Calculate for:</Label><Select value={calcType} onValueChange={(v: CalculationType) => setCalcType(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="sample">Sample</SelectItem><SelectItem value="population">Population</SelectItem></SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateStats}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(stdDeviation || error) && (
          <Card>
            <CardHeader><CardDescription>Statistical Results</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {count !== null && (<div className="p-1 bg-muted rounded-md text-sm">Count (n): <strong className="font-semibold">{count}</strong></div>)}
              {mean && (<div className="p-1 bg-muted rounded-md text-sm">Mean (Average): <strong className="font-semibold">{mean}</strong></div>)}
              {variance && (<div className="p-1 bg-muted rounded-md text-sm">Variance (σ² or s²): <strong className="font-semibold">{variance}</strong></div>)}
              {stdDeviation && (<div className="p-2 bg-primary/10 rounded-md">
                <p className="text-sm text-muted-foreground">Standard Deviation ({calcType === 'population' ? 'σ' : 's'})</p>
                <div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">{stdDeviation}</p><CopyButton textToCopy={stdDeviation} size="sm" variant="ghost"/></div>
              </div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: StandardDeviationCalculator.tsx ======
==================================================

// ====== START OF FILE: StartupValuationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.34 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Rocket } from "lucide-react";

// Simplified Berkus Method (Example values per factor, sum up for pre-money valuation)
// Max value per Berkus factor is typically $500k, totaling up to $2.5M pre-revenue.
// This is highly subjective and varies.
const berkusFactors = [
  { id: 'idea', label: 'Sound Idea (Basic Value)', max: 500000 },
  { id: 'prototype', label: 'Working Prototype (Reduces Technology Risk)', max: 500000 },
  { id: 'management', label: 'Quality Management Team (Execution Risk)', max: 500000 },
  { id: 'strategic', label: 'Strategic Relationships (Market Risk)', max: 500000 },
  { id: 'rollout', label: 'Product Rollout or Sales (Production/Sales Risk)', max: 500000 },
];

const ratingOptions = [
  { value: '0', label: '0% - Not Present / Very Weak' },
  { value: '0.25', label: '25% - Partially Present / Weak' },
  { value: '0.5', label: '50% - Adequately Present / Moderate' },
  { value: '0.75', label: '75% - Strongly Present / Good' },
  { value: '1', label: '100% - Fully Present / Excellent' },
];

type FactorRatings = Record<string, string>;

export default function StartupValuationCalculator() {
  const initialRatings = berkusFactors.reduce((acc, factor) => {
    acc[factor.id] = '0.5'; // Default to 50%
    return acc;
  }, {} as FactorRatings);
  
  const [ratings, setRatings] = useState<FactorRatings>(initialRatings);
  const [valuationRange, setValuationRange] = useState<string | null>(null);
  const [totalAssignedValue, setTotalAssignedValue] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleRatingChange = (factorId: string, value: string) => {
    setRatings(prev => ({ ...prev, [factorId]: value }));
  };

  const calculateValuation = () => {
    setError(null); setValuationRange(null); setTotalAssignedValue(null);
    let currentValuation = 0;
    for (const factor of berkusFactors) {
      const ratingValue = parseFloat(ratings[factor.id]);
      if (isNaN(ratingValue)) {
        setError(`Invalid rating for ${factor.label}.`);
        return;
      }
      currentValuation += factor.max * ratingValue;
    }
    setTotalAssignedValue(currentValuation.toLocaleString('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 0, maximumFractionDigits: 0 }));
    // Berkus method is a pre-money valuation. Range is subjective.
    // For simplicity, let's show the calculated value as a point estimate.
    // A range might be +/- 20% or more depending on context.
    setValuationRange(`A Berkus method based estimate might place pre-money valuation around $${currentValuation.toLocaleString('en-US', {minimumFractionDigits:0, maximumFractionDigits:0})}. Actual valuation depends on many other factors and negotiation.`);
  };

  const resetForm = () => {
    setRatings(initialRatings);
    setValuationRange(null); setTotalAssignedValue(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Highly Simplified & Subjective Estimator</AlertTitle>
        <AlertDescription>
          Startup valuation is extremely complex and depends on numerous factors (market, traction, team, comparables, etc.). The Berkus Method is one of many simplified approaches for <strong className="font-semibold">pre-revenue, pre-money startups</strong>. This calculator is for <strong className="font-semibold">illustrative and educational purposes ONLY</strong> and should NOT be used for actual investment decisions. Max value per factor is capped at $500k. Consult with experienced investors and advisors.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Rate your startup on these key Berkus Method factors (0-100%).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            {berkusFactors.map(factor => (
              <div key={factor.id}>
                <Label htmlFor={factor.id} className="font-medium">{factor.label}</Label>
                <p className="text-xs text-muted-foreground mb-1">(Max Value: ${(factor.max/1000).toLocaleString()}k)</p>
                <Select value={ratings[factor.id]} onValueChange={(v) => handleRatingChange(factor.id, v)}>
                  <SelectTrigger id={factor.id}><SelectValue/></SelectTrigger>
                  <SelectContent>{ratingOptions.map(opt=><SelectItem key={opt.value} value={opt.value}>{opt.label}</SelectItem>)}</SelectContent>
                </Select>
              </div>
            ))}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateValuation}>Estimate Valuation</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(valuationRange || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Pre-Money Valuation (Berkus Method)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalAssignedValue && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Total Assigned Value</p><p className="text-2xl font-bold text-primary">{totalAssignedValue}</p></div><CopyButton textToCopy={totalAssignedValue.replace(/[^0-9.]/g, "")}/></div>)}
              {valuationRange && (<Alert className="mt-3"><Info className="h-4 w-4"/><AlertDescription>{valuationRange}</AlertDescription></Alert>)}
            </CardContent>
             <CardFooter><p className="text-xs text-muted-foreground">This is a very rough estimate. Seek professional advice for actual valuations.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: StartupValuationCalculator.tsx ======
==================================================

// ====== START OF FILE: StartupValuationCalculatorConceptualScorecard.tsx ======
// File converted from TSX to TXT
// Original size: 6.36 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Rocket } from "lucide-react";

// Simplified Berkus Method (Example values per factor, sum up for pre-money valuation)
// Max value per Berkus factor is typically $500k, totaling up to $2.5M pre-revenue.
// This is highly subjective and varies.
const berkusFactors = [
  { id: 'idea', label: 'Sound Idea (Basic Value)', max: 500000 },
  { id: 'prototype', label: 'Working Prototype (Reduces Technology Risk)', max: 500000 },
  { id: 'management', label: 'Quality Management Team (Execution Risk)', max: 500000 },
  { id: 'strategic', label: 'Strategic Relationships (Market Risk)', max: 500000 },
  { id: 'rollout', label: 'Product Rollout or Sales (Production/Sales Risk)', max: 500000 },
];

const ratingOptions = [
  { value: '0', label: '0% - Not Present / Very Weak' },
  { value: '0.25', label: '25% - Partially Present / Weak' },
  { value: '0.5', label: '50% - Adequately Present / Moderate' },
  { value: '0.75', label: '75% - Strongly Present / Good' },
  { value: '1', label: '100% - Fully Present / Excellent' },
];

type FactorRatings = Record<string, string>;

export default function StartupValuationCalculatorConceptualScorecard() {
  const initialRatings = berkusFactors.reduce((acc, factor) => {
    acc[factor.id] = '0.5'; // Default to 50%
    return acc;
  }, {} as FactorRatings);
  
  const [ratings, setRatings] = useState<FactorRatings>(initialRatings);
  const [valuationRange, setValuationRange] = useState<string | null>(null);
  const [totalAssignedValue, setTotalAssignedValue] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleRatingChange = (factorId: string, value: string) => {
    setRatings(prev => ({ ...prev, [factorId]: value }));
  };

  const calculateValuation = () => {
    setError(null); setValuationRange(null); setTotalAssignedValue(null);
    let currentValuation = 0;
    for (const factor of berkusFactors) {
      const ratingValue = parseFloat(ratings[factor.id]);
      if (isNaN(ratingValue)) {
        setError(`Invalid rating for ${factor.label}.`);
        return;
      }
      currentValuation += factor.max * ratingValue;
    }
    setTotalAssignedValue(currentValuation.toLocaleString('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 0, maximumFractionDigits: 0 }));
    // Berkus method is a pre-money valuation. Range is subjective.
    // For simplicity, let's show the calculated value as a point estimate.
    // A range might be +/- 20% or more depending on context.
    setValuationRange(`A Berkus method based estimate might place pre-money valuation around $${currentValuation.toLocaleString('en-US', {minimumFractionDigits:0, maximumFractionDigits:0})}. Actual valuation depends on many other factors and negotiation.`);
  };

  const resetForm = () => {
    setRatings(initialRatings);
    setValuationRange(null); setTotalAssignedValue(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Highly Simplified & Subjective Estimator</AlertTitle>
        <AlertDescription>
          Startup valuation is extremely complex and depends on numerous factors (market, traction, team, comparables, etc.). The Berkus Method is one of many simplified approaches for <strong className="font-semibold">pre-revenue, pre-money startups</strong>. This calculator is for <strong className="font-semibold">illustrative and educational purposes ONLY</strong> and should NOT be used for actual investment decisions. Max value per factor is capped at $500k. Consult with experienced investors and advisors.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Rate your startup on these key Berkus Method factors (0-100%).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            {berkusFactors.map(factor => (
              <div key={factor.id}>
                <Label htmlFor={factor.id} className="font-medium">{factor.label}</Label>
                <p className="text-xs text-muted-foreground mb-1">(Max Value: ${(factor.max/1000).toLocaleString()}k)</p>
                <Select value={ratings[factor.id]} onValueChange={(v) => handleRatingChange(factor.id, v)}>
                  <SelectTrigger id={factor.id}><SelectValue/></SelectTrigger>
                  <SelectContent>{ratingOptions.map(opt=><SelectItem key={opt.value} value={opt.value}>{opt.label}</SelectItem>)}</SelectContent>
                </Select>
              </div>
            ))}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateValuation}>Estimate Valuation</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(valuationRange || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Pre-Money Valuation (Berkus Method)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalAssignedValue && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Total Assigned Value</p><p className="text-2xl font-bold text-primary">{totalAssignedValue}</p></div><CopyButton textToCopy={totalAssignedValue.replace(/[^0-9.]/g, "")}/></div>)}
              {valuationRange && (<Alert className="mt-3"><Info className="h-4 w-4"/><AlertDescription>{valuationRange}</AlertDescription></Alert>)}
            </CardContent>
             <CardFooter><p className="text-xs text-muted-foreground">This is a very rough estimate. Seek professional advice for actual valuations.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: StartupValuationCalculatorConceptualScorecard.tsx ======
==================================================

// ====== START OF FILE: StatisticsCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.53 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, BarChartHorizontalBig } from "lucide-react";

interface StatsResults {
  mean: number;
  median: number;
  mode: number[] | string;
  range: number;
  count: number;
  sum: number;
  stdDevSample: number | string;
  varianceSample: number | string;
}

export default function StatisticsCalculator() {
  const [numbersInput, setNumbersInput] = useState<string>('');
  const [results, setResults] = useState<StatsResults | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateStats = () => {
    setError(null);
    setResults(null);

    const parsedNumbers = numbersInput.split(/[\s,]+/).filter(n => n.trim() !== '').map(n => parseFloat(n)).filter(n => !isNaN(n));
    if (parsedNumbers.length === 0) {
      setError('Please enter at least one valid number.');
      return;
    }

    parsedNumbers.sort((a, b) => a - b);
    const count = parsedNumbers.length;
    const sum = parsedNumbers.reduce((acc, curr) => acc + curr, 0);
    const mean = sum / count;
    const range = parsedNumbers[count - 1] - parsedNumbers[0];

    let median: number;
    if (count % 2 === 0) {
      median = (parsedNumbers[count / 2 - 1] + parsedNumbers[count / 2]) / 2;
    } else {
      median = parsedNumbers[Math.floor(count / 2)];
    }

    const frequencyMap = new Map<number, number>();
    parsedNumbers.forEach(num => frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1));
    let maxFrequency = 0;
    frequencyMap.forEach(freq => { if (freq > maxFrequency) maxFrequency = freq; });
    
    let mode: number[] | string = [];
    if (maxFrequency > 1) {
      frequencyMap.forEach((freq, num) => { if (freq === maxFrequency) (mode as number[]).push(num); });
    }
    if ((mode as number[]).length === 0 || ((mode as number[]).length > 0 && (mode as number[]).length === frequencyMap.size)) {
      mode = "N/A";
    }

    let varianceSample: number | string = "N/A";
    let stdDevSample: number | string = "N/A";
    if (count > 1) {
      const squaredDifferences = parsedNumbers.map(val => Math.pow(val - mean, 2));
      const sumOfSquaredDiff = squaredDifferences.reduce((acc, val) => acc + val, 0);
      varianceSample = sumOfSquaredDiff / (count - 1);
      stdDevSample = Math.sqrt(varianceSample);
    }
    
    setResults({ 
      mean, median, mode, range, count, sum,
      varianceSample: typeof varianceSample === 'number' ? varianceSample : varianceSample,
      stdDevSample: typeof stdDevSample === 'number' ? stdDevSample : stdDevSample,
    });
  };
  
  const resetForm = () => {
    setNumbersInput('');
    setResults(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Calculate descriptive statistics for a data set.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="numbersStats">Enter Data (comma or space separated)</Label><Textarea id="numbersStats" value={numbersInput} onChange={(e) => setNumbersInput(e.target.value)} placeholder="e.g., 10, 25, 10, 30, 15" rows={6}/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateStats}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {results || error ? (
          <Card>
            <CardHeader><CardDescription>Descriptive Statistics</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" />{error}</Alert>)}
              {results && (
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div className="p-1.5 bg-muted rounded-md">Count: <span className="font-semibold">{results.count}</span></div>
                  <div className="p-1.5 bg-muted rounded-md">Sum: <span className="font-semibold">{results.sum.toFixed(2)}</span></div>
                  <div className="p-1.5 bg-muted rounded-md">Mean (Average): <span className="font-semibold">{results.mean.toFixed(4)}</span></div>
                  <div className="p-1.5 bg-muted rounded-md">Median: <span className="font-semibold">{results.median.toFixed(4)}</span></div>
                  <div className="p-1.5 bg-muted rounded-md col-span-2">Mode: <span className="font-semibold">{Array.isArray(results.mode) ? results.mode.join(', ') : results.mode}</span></div>
                  <div className="p-1.5 bg-muted rounded-md">Range: <span className="font-semibold">{results.range.toFixed(4)}</span></div>
                  <div className="p-1.5 bg-muted rounded-md">Variance (Sample): <span className="font-semibold">{typeof results.varianceSample === 'number' ? results.varianceSample.toFixed(4) : results.varianceSample}</span></div>
                  <div className="p-1.5 bg-primary/10 rounded-md col-span-2">Standard Deviation (Sample): <span className="font-bold text-primary">{typeof results.stdDevSample === 'number' ? results.stdDevSample.toFixed(4) : results.stdDevSample}</span></div>
                </div>
              )}
            </CardContent>
          </Card>
        ) : null}
      </div>
    </div>
  );
}


// ====== END OF FILE: StatisticsCalculator.tsx ======
==================================================

// ====== START OF FILE: StatisticsCalculatorExtended.tsx ======
// File converted from TSX to TXT
// Original size: 4.66 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, BarChartHorizontalBig } from "lucide-react";

interface StatsResults {
  mean: number;
  median: number;
  mode: number[] | string; // Can be multiple modes or N/A
  range: number;
  count: number;
  sum: number;
}

export default function StatisticsCalculatorExtended() {
  const [numbersInput, setNumbersInput] = useState<string>('');
  const [results, setResults] = useState<StatsResults | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateStats = () => {
    setError(null);
    setResults(null);

    const parsedNumbers = numbersInput
      .split(/[\s,]+/)
      .filter(n => n.trim() !== '')
      .map(n => parseFloat(n))
      .filter(n => !isNaN(n));

    if (parsedNumbers.length === 0) {
      setError('Please enter at least one valid number.');
      return;
    }

    parsedNumbers.sort((a, b) => a - b);
    const count = parsedNumbers.length;
    const sum = parsedNumbers.reduce((acc, curr) => acc + curr, 0);
    const mean = sum / count;
    const range = parsedNumbers[count - 1] - parsedNumbers[0];

    let median: number;
    if (count % 2 === 0) {
      median = (parsedNumbers[count / 2 - 1] + parsedNumbers[count / 2]) / 2;
    } else {
      median = parsedNumbers[Math.floor(count / 2)];
    }

    const frequencyMap = new Map<number, number>();
    parsedNumbers.forEach(num => frequencyMap.set(num, (frequencyMap.get(num) || 0) + 1));
    let maxFrequency = 0;
    frequencyMap.forEach(freq => { if (freq > maxFrequency) maxFrequency = freq; });
    
    let mode: number[] | string = [];
    if (maxFrequency > 1) { // Only consider mode if a number appears more than once
      frequencyMap.forEach((freq, num) => { if (freq === maxFrequency) (mode as number[]).push(num); });
    }
    if ((mode as number[]).length === 0 || ((mode as number[]).length > 0 && (mode as number[]).length === frequencyMap.size)) { // No unique mode or all numbers are the mode
        mode = "N/A";
    }

    setResults({ mean, median, mode, range, count, sum });
  };
  
  const resetForm = () => {
    setNumbersInput('');
    setResults(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Calculate Mean, Median, Mode, and Range for a set of numbers.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="numbersStatsExt">Enter Numbers (comma or space separated)</Label><Textarea id="numbersStatsExt" value={numbersInput} onChange={(e) => setNumbersInput(e.target.value)} placeholder="e.g., 10, 25, 10, 30, 15" rows={5}/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateStats}>Calculate Statistics</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {results || error ? (
          <Card>
            <CardHeader><CardDescription>Statistical Results</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {results && (
                <>
                  <div className="p-1.5 bg-muted rounded-md text-sm">Count: <span className="font-semibold">{results.count}</span></div>
                  <div className="p-1.5 bg-muted rounded-md text-sm">Sum: <span className="font-semibold">{results.sum.toFixed(2)}</span></div>
                  <div className="p-1.5 bg-muted rounded-md text-sm">Mean (Average): <span className="font-semibold">{results.mean.toFixed(2)}</span></div>
                  <div className="p-1.5 bg-muted rounded-md text-sm">Median: <span className="font-semibold">{results.median.toFixed(2)}</span></div>
                  <div className="p-1.5 bg-muted rounded-md text-sm">Mode: <span className="font-semibold">{Array.isArray(results.mode) ? results.mode.join(', ') : results.mode}</span></div>
                  <div className="p-1.5 bg-muted rounded-md text-sm">Range: <span className="font-semibold">{results.range.toFixed(2)}</span></div>
                </>
              )}
            </CardContent>
          </Card>
        ) : null}
      </div>
    </div>
  );
}


// ====== END OF FILE: StatisticsCalculatorExtended.tsx ======
==================================================

// ====== START OF FILE: StockAverageDownCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.75 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, TrendingDown } from "lucide-react";

export default function StockAverageDownCalculator() {
  const [currentShares, setCurrentShares] = useState<string>('');
  const [currentAvgPrice, setCurrentAvgPrice] = useState<string>('');
  const [newSharePrice, setNewSharePrice] = useState<string>('');
  const [additionalInvestment, setAdditionalInvestment] = useState<string>('');

  const [newTotalShares, setNewTotalShares] = useState<string | null>(null);
  const [newAveragePrice, setNewAveragePrice] = useState<string | null>(null);
  const [sharesToBuy, setSharesToBuy] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateAverageDown = () => {
    setError(null);
    setNewTotalShares(null);
    setNewAveragePrice(null);
    setSharesToBuy(null);

    const cShares = parseFloat(currentShares);
    const cAvg = parseFloat(currentAvgPrice);
    const nPrice = parseFloat(newSharePrice);
    const addInvest = parseFloat(additionalInvestment);

    if (isNaN(cShares) || cShares <= 0 || isNaN(cAvg) || cAvg <= 0 || isNaN(nPrice) || nPrice <= 0 || isNaN(addInvest) || addInvest <= 0) {
      setError('Please enter valid positive numbers for all fields.');
      return;
    }

    if (nPrice >= cAvg) {
      setError('New share price must be lower than your current average to average down.');
      return;
    }

    const initialValue = cShares * cAvg;
    const additionalShares = addInvest / nPrice;
    
    setSharesToBuy(additionalShares.toFixed(4));

    const finalTotalShares = cShares + additionalShares;
    setNewTotalShares(finalTotalShares.toFixed(4));

    const finalTotalValue = initialValue + addInvest;
    const finalAveragePrice = finalTotalValue / finalTotalShares;
    setNewAveragePrice(finalAveragePrice.toFixed(2));
  };

  const resetForm = () => {
    setCurrentShares('');
    setCurrentAvgPrice('');
    setNewSharePrice('');
    setAdditionalInvestment('');
    setNewTotalShares(null);
    setNewAveragePrice(null);
    setSharesToBuy(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Stock Average Down Calculator</AlertTitle>
        <AlertDescription>
          Calculate how an additional investment at a lower price affects your average cost per share. This does not account for trading fees.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your current holdings and new investment details.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="currentShares">Current Number of Shares</Label>
              <Input id="currentShares" type="number" value={currentShares} onChange={e => setCurrentShares(e.target.value)} placeholder="e.g., 100" />
            </div>
            <div>
              <Label htmlFor="currentAvgPrice">Current Average Price per Share ($)</Label>
              <Input id="currentAvgPrice" type="number" value={currentAvgPrice} onChange={e => setCurrentAvgPrice(e.target.value)} placeholder="e.g., 50" />
            </div>
            <div>
              <Label htmlFor="newSharePrice">New Purchase Price per Share ($)</Label>
              <Input id="newSharePrice" type="number" value={newSharePrice} onChange={e => setNewSharePrice(e.target.value)} placeholder="e.g., 40" />
            </div>
            <div>
              <Label htmlFor="additionalInvestment">Additional Amount to Invest ($)</Label>
              <Input id="additionalInvestment" type="number" value={additionalInvestment} onChange={e => setAdditionalInvestment(e.target.value)} placeholder="e.g., 1000" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateAverageDown}>Calculate</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>
        {(newAveragePrice || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Averaging Down Results</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {sharesToBuy && <div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Shares to Buy</p><p className="font-semibold">{sharesToBuy} shares</p></div>}
              {newTotalShares && <div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">New Total Shares</p><p className="font-semibold">{newTotalShares}</p></div>}
              {newAveragePrice && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">New Average Price</p>
                    <p className="text-2xl font-bold text-primary">${newAveragePrice}</p>
                  </div>
                  <CopyButton textToCopy={newAveragePrice} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: StockAverageDownCalculator.tsx ======
==================================================

// ====== START OF FILE: StockReturnCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.41 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, LineChart } from "lucide-react";

export default function StockReturnCalculator() {
  const [purchasePrice, setPurchasePrice] = useState<string>('');
  const [sellingPrice, setSellingPrice] = useState<string>('');
  const [numShares, setNumShares] = useState<string>('1');
  const [dividendsReceived, setDividendsReceived] = useState<string>('0'); // Total dividends during holding period
  const [holdingPeriodYears, setHoldingPeriodYears] = useState<string>('');

  const [totalReturnAmount, setTotalReturnAmount] = useState<string | null>(null);
  const [totalReturnPercent, setTotalReturnPercent] = useState<string | null>(null);
  const [annualizedReturnPercent, setAnnualizedReturnPercent] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateStockReturn = () => {
    setError(null); setTotalReturnAmount(null); setTotalReturnPercent(null); setAnnualizedReturnPercent(null);
    const pp = parseFloat(purchasePrice);
    const sp = parseFloat(sellingPrice);
    const shares = parseInt(numShares);
    const divs = parseFloat(dividendsReceived);
    const years = parseFloat(holdingPeriodYears);

    if (isNaN(pp) || pp <=0 || isNaN(sp) || sp < 0 || isNaN(shares) || shares <=0 || isNaN(divs) || divs < 0 || isNaN(years) || years <=0) {
      setError('Please enter valid positive numbers for prices, shares, years. Dividends can be zero.');
      return;
    }

    const initialInvestment = pp * shares;
    const finalValueFromSale = sp * shares;
    const netProfitFromSale = finalValueFromSale - initialInvestment;
    const totalProfit = netProfitFromSale + divs;
    
    setTotalReturnAmount(totalProfit.toFixed(2));

    const roiPercent = (totalProfit / initialInvestment) * 100;
    setTotalReturnPercent(roiPercent.toFixed(2));

    // Annualized ROI (CAGR if only considering capital gains, or more general annualized for total)
    // Simplified: ( ( (Final Total Value + Dividends) / Initial Investment) ^ (1/Years) ) - 1
    const totalFinalValueWithDividends = finalValueFromSale + divs;
    if (initialInvestment > 0 && totalFinalValueWithDividends >= 0 && years > 0) {
        const annualized = (Math.pow(totalFinalValueWithDividends / initialInvestment, 1 / years) - 1) * 100;
        if(!isNaN(annualized) && isFinite(annualized)) {
            setAnnualizedReturnPercent(annualized.toFixed(2));
        } else {
            setAnnualizedReturnPercent("N/A");
        }
    } else {
        setAnnualizedReturnPercent("N/A");
    }
  };

  const resetForm = () => {
    setPurchasePrice(''); setSellingPrice(''); setNumShares('1'); setDividendsReceived('0'); setHoldingPeriodYears('');
    setTotalReturnAmount(null); setTotalReturnPercent(null); setAnnualizedReturnPercent(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Stock Investment Return Calculator</AlertTitle><AlertDescription>Calculate total return and annualized return for a stock investment. Does not account for taxes or trading fees.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your stock trade details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="purchasePriceSR">Purchase Price per Share ($)</Label><Input id="purchasePriceSR" type="number" value={purchasePrice} onChange={e=>setPurchasePrice(e.target.value)}/></div>
              <div><Label htmlFor="sellingPriceSR">Selling Price per Share ($)</Label><Input id="sellingPriceSR" type="number" value={sellingPrice} onChange={e=>setSellingPrice(e.target.value)}/></div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="numSharesSR">Number of Shares</Label><Input id="numSharesSR" type="number" value={numShares} onChange={e=>setNumShares(e.target.value)}/></div>
              <div><Label htmlFor="dividendsSR">Total Dividends Received ($)</Label><Input id="dividendsSR" type="number" value={dividendsReceived} onChange={e=>setDividendsReceived(e.target.value)}/></div>
            </div>
            <div><Label htmlFor="holdingPeriodSR">Holding Period (Years)</Label><Input id="holdingPeriodSR" type="number" value={holdingPeriodYears} onChange={e=>setHoldingPeriodYears(e.target.value)}/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateStockReturn}>Calculate Return</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(totalReturnAmount || error) && (
          <Card>
            <CardHeader><CardDescription>Investment Return Analysis</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalReturnAmount && (<div className={`p-2 rounded-md ${parseFloat(totalReturnAmount) >= 0 ? 'bg-green-500/10' : 'bg-red-500/10'}`}><p className={`text-sm ${parseFloat(totalReturnAmount) >=0 ? 'text-green-700' : 'text-red-700'}`}>Total Profit / Loss</p><p className={`font-semibold ${parseFloat(totalReturnAmount) >=0 ? 'text-green-600' : 'text-red-600'}`}>${totalReturnAmount}</p></div>)}
              {totalReturnPercent && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Return (%)</p><p className="font-semibold">{totalReturnPercent}%</p></div>)}
              {annualizedReturnPercent && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Annualized Return (%)</p><p className="text-xl font-bold text-primary">{annualizedReturnPercent}%</p></div><CopyButton textToCopy={annualizedReturnPercent}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: StockReturnCalculator.tsx ======
==================================================

// ====== START OF FILE: StudentLoanCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.26 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, GraduationCap } from "lucide-react";

export default function StudentLoanCalculator() {
  const [loanAmount, setLoanAmount] = useState<string>('');
  const [interestRate, setInterestRate] = useState<string>(''); // Annual %
  const [loanTermYears, setLoanTermYears] = useState<string>('10'); // Common for student loans
  
  const [monthlyPayment, setMonthlyPayment] = useState<string | null>(null);
  const [totalRepayment, setTotalRepayment] = useState<string | null>(null);
  const [totalInterest, setTotalInterest] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateLoan = () => {
    setError(null);
    setMonthlyPayment(null);
    setTotalRepayment(null);
    setTotalInterest(null);

    const P = parseFloat(loanAmount);
    const annualRate = parseFloat(interestRate) / 100;
    const N_years = parseInt(loanTermYears);

    if (isNaN(P) || P <= 0 || isNaN(annualRate) || annualRate < 0 || isNaN(N_years) || N_years <= 0) {
      setError('Please enter valid positive numbers for loan amount, interest rate, and term (years).');
      return;
    }

    const N_months = N_years * 12;
    const monthlyRate = annualRate / 12;
    let M; 

    if (monthlyRate === 0) { 
        M = P / N_months;
    } else {
        M = P * (monthlyRate * Math.pow(1 + monthlyRate, N_months)) / (Math.pow(1 + monthlyRate, N_months) - 1);
    }
    
    if (isNaN(M) || !isFinite(M)) {
        setError('Could not calculate monthly payment. Check inputs.');
        return;
    }

    const calculatedTotalRepayment = M * N_months;
    const calculatedTotalInterest = calculatedTotalRepayment - P;

    setMonthlyPayment(M.toFixed(2));
    setTotalRepayment(calculatedTotalRepayment.toFixed(2));
    setTotalInterest(calculatedTotalInterest.toFixed(2));
  };
  
  const resetForm = () => {
    setLoanAmount('');
    setInterestRate('');
    setLoanTermYears('10');
    setMonthlyPayment(null);
    setTotalRepayment(null);
    setTotalInterest(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Student Loan Estimator</AlertTitle><AlertDescription>Estimate monthly payments, total repayment, and total interest for student loans. Does not account for different repayment plans (e.g., income-driven) or loan forgiveness programs.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your student loan details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="loanAmountSL">Loan Amount ($)</Label><Input id="loanAmountSL" type="number" value={loanAmount} onChange={(e) => setLoanAmount(e.target.value)} placeholder="e.g., 30000"/></div>
            <div><Label htmlFor="interestRateSL">Annual Interest Rate (%)</Label><Input id="interestRateSL" type="number" value={interestRate} onChange={(e) => setInterestRate(e.target.value)} placeholder="e.g., 5.8"/></div>
            <div><Label htmlFor="loanTermYearsSL">Loan Term (Years)</Label><Input id="loanTermYearsSL" type="number" value={loanTermYears} onChange={(e) => setLoanTermYears(e.target.value)} placeholder="e.g., 10 or 20"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateLoan}>Calculate Loan</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(monthlyPayment || error) && (
          <Card>
            <CardHeader><CardDescription>Loan Estimates</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {monthlyPayment && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Monthly Payment</p><p className="text-2xl font-bold text-primary">${monthlyPayment}</p></div>
                  <CopyButton textToCopy={monthlyPayment} />
                </div>
              )}
              {totalRepayment && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Repayment</p><p className="font-semibold">${totalRepayment}</p></div>)}
              {totalInterest && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Interest Paid</p><p className="font-semibold">${totalInterest}</p></div>)}
            </CardContent>
             <CardFooter><p className="text-xs text-muted-foreground">Actual loan terms may vary. Explore official student aid websites for federal loan details.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: StudentLoanCalculator.tsx ======
==================================================

// ====== START OF FILE: SubscriptionCostTracker.tsx ======
// File converted from TSX to TXT
// Original size: 5.11 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { PlusCircle, Trash2 } from 'lucide-react';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, ListChecks } from "lucide-react";

interface Subscription {
  id: string;
  name: string;
  monthlyCost: number;
}

export default function SubscriptionCostTracker() {
  const [subscriptions, setSubscriptions] = useState<Subscription[]>([
    { id: crypto.randomUUID(), name: 'Netflix', monthlyCost: 15.49 },
    { id: crypto.randomUUID(), name: 'Spotify', monthlyCost: 10.99 },
  ]);
  const [totalMonthly, setTotalMonthly] = useState<string | null>(null);
  const [totalAnnual, setTotalAnnual] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleSubscriptionChange = (id: string, field: 'name' | 'monthlyCost', value: string) => {
    setSubscriptions(prev => prev.map(sub => sub.id === id ? { ...sub, [field]: field === 'monthlyCost' ? parseFloat(value) || 0 : value } : sub));
    setTotalMonthly(null); setTotalAnnual(null); // Recalculate on change
  };

  const addSubscription = () => {
    setSubscriptions(prev => [...prev, { id: crypto.randomUUID(), name: '', monthlyCost: 0 }]);
  };

  const removeSubscription = (id: string) => {
    if (subscriptions.length > 1) {
      setSubscriptions(prev => prev.filter(sub => sub.id !== id));
    } else if (subscriptions.length === 1) { // If only one left, clear it instead of removing row
       setSubscriptions([{ id: crypto.randomUUID(), name: '', monthlyCost: 0 }]);
    }
    setTotalMonthly(null); setTotalAnnual(null);
  };

  const calculateTotals = () => {
    setError(null);
    if (subscriptions.some(sub => sub.monthlyCost < 0)) {
      setError("Subscription costs cannot be negative.");
      return;
    }
    const monthly = subscriptions.reduce((sum, sub) => sum + sub.monthlyCost, 0);
    setTotalMonthly(monthly.toFixed(2));
    setTotalAnnual((monthly * 12).toFixed(2));
  };

  const resetTracker = () => {
    setSubscriptions([{ id: crypto.randomUUID(), name: 'Netflix', monthlyCost: 15.49 },{ id: crypto.randomUUID(), name: 'Spotify', monthlyCost: 10.99 }]);
    setTotalMonthly(null); setTotalAnnual(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Subscription Cost Tracker</AlertTitle><AlertDescription>List your monthly subscriptions to see your total monthly and annual spending.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardDescription>Manage Your Subscriptions</CardDescription></CardHeader>
          <CardContent className="space-y-3 max-h-[400px] overflow-y-auto pr-2">
            {subscriptions.map((sub, index) => (
              <div key={sub.id} className="flex items-center gap-2 p-2 border rounded-md">
                <Input type="text" placeholder={`Subscription ${index+1}`} value={sub.name} onChange={e=>handleSubscriptionChange(sub.id, 'name', e.target.value)} className="h-9 flex-grow"/>
                <Input type="number" placeholder="Monthly Cost ($)" value={sub.monthlyCost || ''} onChange={e=>handleSubscriptionChange(sub.id, 'monthlyCost', e.target.value)} className="h-9 w-32"/>
                <Button variant="ghost" size="icon" onClick={()=>removeSubscription(sub.id)} className="h-9 w-9 shrink-0"><Trash2 className="h-4 w-4 text-destructive"/></Button>
              </div>
            ))}
            <Button variant="outline" size="sm" onClick={addSubscription}><PlusCircle className="mr-2 h-4 w-4"/> Add Subscription</Button>
          </CardContent>
          <CardFooter><Button onClick={calculateTotals} className="w-full md:w-auto">Calculate Totals</Button></CardFooter>
        </Card>
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Cost Summary</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {totalMonthly && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Monthly Cost</p><p className="font-semibold">${totalMonthly}</p></div>)}
            {totalAnnual && (<div className="p-2 bg-primary/10 rounded-md"><p className="text-sm text-muted-foreground">Total Annual Cost</p><div className="flex justify-between items-center"><p className="text-xl font-bold text-primary">${totalAnnual}</p><CopyButton textToCopy={totalAnnual} size="sm" variant="ghost"/></div></div>)}
          </CardContent>
           <CardFooter><Button variant="outline" onClick={resetTracker} className="w-full">Reset Tracker</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: SubscriptionCostTracker.tsx ======
==================================================

// ====== START OF FILE: SuccessRateAndTrialsCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.58 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Target, Percent } from "lucide-react";

export default function SuccessRateAndTrialsCalculator() {
  const [successRate, setSuccessRate] = useState<string>(''); // as a percentage
  const [numTrials, setNumTrials] = useState<string>('');

  const [probabilityOfSuccess, setProbabilityOfSuccess] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateProbability = () => {
    setError(null);
    setProbabilityOfSuccess(null);

    const p = parseFloat(successRate) / 100;
    const n = parseInt(numTrials);

    if (isNaN(p) || p < 0 || p > 1 || isNaN(n) || n <= 0) {
      setError('Success Rate must be between 0-100%, and Number of Trials must be a positive integer.');
      return;
    }
    
    if (p === 0) {
      setProbabilityOfSuccess('0.00');
      return;
    }
    if (p === 1) {
      setProbabilityOfSuccess('100.00');
      return;
    }

    // Probability of failure in one trial
    const q = 1 - p;
    // Probability of failing in all n trials
    const q_n = Math.pow(q, n);
    // Probability of at least one success
    const probSuccess = (1 - q_n) * 100;

    setProbabilityOfSuccess(probSuccess.toFixed(2));
  };

  const resetForm = () => {
    setSuccessRate('');
    setNumTrials('');
    setProbabilityOfSuccess(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Success Rate & Trials Probability Calculator</AlertTitle>
        <AlertDescription>
          Calculate the probability of achieving at least one success over a number of independent trials.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter the parameters of the scenario.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="successRate">Success Rate per Trial (%)</Label>
              <Input
                id="successRate"
                type="number"
                value={successRate}
                onChange={(e) => setSuccessRate(e.target.value)}
                placeholder="e.g., 5 for 5%"
              />
            </div>
            <div>
              <Label htmlFor="numTrials">Number of Trials</Label>
              <Input
                id="numTrials"
                type="number"
                value={numTrials}
                onChange={(e) => setNumTrials(e.target.value)}
                placeholder="e.g., 20"
              />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateProbability}>Calculate Probability</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(probabilityOfSuccess || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Probability Result</CardDescription>
            </CardHeader>
            <CardContent>
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {probabilityOfSuccess !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Probability of at least one success</p>
                    <p className="text-2xl font-bold text-primary">{probabilityOfSuccess}%</p>
                  </div>
                  <CopyButton textToCopy={probabilityOfSuccess} />
                </div>
              )}
               <AlertDescription className="text-xs pt-2 mt-2">
                This calculation assumes each trial is independent of the others. Past outcomes do not influence future ones (Gambler's Fallacy).
              </AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SuccessRateAndTrialsCalculator.tsx ======
==================================================

// ====== START OF FILE: SunsetSunriseTimeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.54 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Sunrise, Sunset, ExternalLink } from "lucide-react";
import Link from 'next/link';

export default function SunsetSunriseTimeCalculator() {
  const [date, setDate] = useState<string>('');
  const [latitude, setLatitude] = useState<string>('');
  const [longitude, setLongitude] = useState<string>('');

  const [sunriseTime, setSunriseTime] = useState<string | null>(null);
  const [sunsetTime, setSunsetTime] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const getTimes = () => {
    setError("Sunrise/Sunset calculation requires complex astronomical algorithms. This feature is a placeholder. For accurate times, please use a dedicated weather or astronomical service like the one linked below.");
    setSunriseTime(null);
    setSunsetTime(null);
  };
  
  const resetForm = () => {
    setDate(''); setLatitude(''); setLongitude('');
    setSunriseTime(null); setSunsetTime(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4"/>
        <AlertTitle>Conceptual Tool - Complex Calculation</AlertTitle>
        <AlertDescription>
          Calculating precise sunrise and sunset times requires complex astronomical algorithms (based on date, latitude, longitude, and elevation) that are beyond the scope of a simple demonstration.
          <br/><br/>
          For accurate data, it's best to use a specialized API or an established online tool. A great free resource is the <Link href="https://sunrise-sunset.org/api" target="_blank" rel="noopener noreferrer" className="font-semibold underline">Sunrise-Sunset.org API <ExternalLink className="inline h-3 w-3 ml-0.5"/>.</Link>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter date and location for estimation.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="dateSS">Date</Label><Input id="dateSS" type="date" value={date} onChange={e=>setDate(e.target.value)}/></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="latitudeSS">Latitude</Label><Input id="latitudeSS" type="number" value={latitude} onChange={e=>setLatitude(e.target.value)} placeholder="e.g., 40.7128"/></div>
              <div><Label htmlFor="longitudeSS">Longitude</Label><Input id="longitudeSS" type="number" value={longitude} onChange={e=>setLongitude(e.target.value)} placeholder="e.g., -74.0060"/></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={getTimes}>Get Times (Conceptual)</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(error) && (
          <Card>
            <CardHeader><CardDescription>Information</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="default"><Info className="h-4 w-4"/><AlertTitle>Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SunsetSunriseTimeCalculator.tsx ======
==================================================

// ====== START OF FILE: SurfaceAreaCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.02 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Box } from "lucide-react";

type Shape3D = 'cube' | 'cuboid' | 'cylinder' | 'sphere' | 'cone' | 'pyramid_square_base';

export default function SurfaceAreaCalculator() {
  const [shape, setShape] = useState<Shape3D>('cuboid');
  // Dimensions (generic names, labels will change based on shape)
  const [dim1, setDim1] = useState<string>(''); // e.g., length, side, radius
  const [dim2, setDim2] = useState<string>(''); // e.g., width, height
  const [dim3, setDim3] = useState<string>(''); // e.g., height (for cuboid), slant height (for cone/pyramid)

  const [surfaceArea, setSurfaceArea] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateSurfaceArea = () => {
    setError(null);
    setSurfaceArea(null);
    const d1 = parseFloat(dim1);
    const d2 = parseFloat(dim2);
    const d3 = parseFloat(dim3);
    let area: number | null = null;

    try {
      switch (shape) {
        case 'cube': // d1 = side
          if (isNaN(d1) || d1 <= 0) throw new Error("Side length must be positive.");
          area = 6 * d1 * d1;
          break;
        case 'cuboid': // d1=length, d2=width, d3=height
          if (isNaN(d1) || d1 <= 0 || isNaN(d2) || d2 <= 0 || isNaN(d3) || d3 <= 0) throw new Error("Length, width, and height must be positive.");
          area = 2 * (d1*d2 + d1*d3 + d2*d3);
          break;
        case 'cylinder': // d1=radius, d2=height
          if (isNaN(d1) || d1 <= 0 || isNaN(d2) || d2 <= 0) throw new Error("Radius and height must be positive.");
          area = 2 * Math.PI * d1 * (d1 + d2); // 2πr(r+h)
          break;
        case 'sphere': // d1=radius
          if (isNaN(d1) || d1 <= 0) throw new Error("Radius must be positive.");
          area = 4 * Math.PI * d1 * d1;
          break;
        case 'cone': // d1=radius, d2=slant height (L)
          if (isNaN(d1) || d1 <= 0 || isNaN(d2) || d2 <= 0) throw new Error("Radius and slant height must be positive.");
          area = Math.PI * d1 * (d1 + d2); // πr(r+L)
          break;
        case 'pyramid_square_base': // d1=base side, d2=slant height of triangular face
            if (isNaN(d1) || d1 <= 0 || isNaN(d2) || d2 <= 0) throw new Error("Base side and slant height must be positive.");
            area = (d1 * d1) + (2 * d1 * d2); // Base Area + 4 * (0.5 * base * slant height)
            break;
        default: throw new Error("Invalid shape selected.");
      }
      if (area !== null && !isNaN(area) && isFinite(area)) {
        setSurfaceArea(area.toFixed(3));
      } else {
        throw new Error("Calculation resulted in an invalid number.");
      }
    } catch (e: any) { setError(e.message); }
  };

  const resetForm = () => {
    setDim1(''); setDim2(''); setDim3('');
    setSurfaceArea(null); setError(null);
  };

  const renderShapeInputs = () => {
    switch(shape) {
      case 'cube': return <div><Label htmlFor="dim1SA">Side Length</Label><Input id="dim1SA" type="number" value={dim1} onChange={e=>setDim1(e.target.value)} /></div>;
      case 'cuboid': return <><Label>Dimensions</Label><div className="grid grid-cols-3 gap-2"><Input type="number" value={dim1} onChange={e=>setDim1(e.target.value)} placeholder="Length"/><Input type="number" value={dim2} onChange={e=>setDim2(e.target.value)} placeholder="Width"/><Input type="number" value={dim3} onChange={e=>setDim3(e.target.value)} placeholder="Height"/></div></>;
      case 'cylinder': return <><Label>Dimensions</Label><div className="grid grid-cols-2 gap-2"><Input type="number" value={dim1} onChange={e=>setDim1(e.target.value)} placeholder="Radius"/><Input type="number" value={dim2} onChange={e=>setDim2(e.target.value)} placeholder="Height"/></div></>;
      case 'sphere': return <div><Label htmlFor="dim1SASphere">Radius</Label><Input id="dim1SASphere" type="number" value={dim1} onChange={e=>setDim1(e.target.value)} /></div>;
      case 'cone': return <><Label>Dimensions</Label><div className="grid grid-cols-2 gap-2"><Input type="number" value={dim1} onChange={e=>setDim1(e.target.value)} placeholder="Radius"/><Input type="number" value={dim2} onChange={e=>setDim2(e.target.value)} placeholder="Slant Height (L)"/></div></>;
      case 'pyramid_square_base': return <><Label>Dimensions</Label><div className="grid grid-cols-2 gap-2"><Input type="number" value={dim1} onChange={e=>setDim1(e.target.value)} placeholder="Base Side"/><Input type="number" value={dim2} onChange={e=>setDim2(e.target.value)} placeholder="Slant Height (face)"/></div></>;
      default: return null;
    }
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Surface Area Calculator</AlertTitle><AlertDescription>Calculate surface area of various 3D shapes. Ensure all dimensions use the same unit.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Select shape and enter dimensions.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="shapeSA">Shape</Label><Select value={shape} onValueChange={(v:Shape3D)=>{setShape(v);resetForm();}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                <SelectItem value="cube">Cube</SelectItem><SelectItem value="cuboid">Cuboid (Rect. Prism)</SelectItem><SelectItem value="cylinder">Cylinder</SelectItem>
                <SelectItem value="sphere">Sphere</SelectItem><SelectItem value="cone">Cone</SelectItem><SelectItem value="pyramid_square_base">Pyramid (Square Base)</SelectItem>
            </SelectContent></Select></div>
            {renderShapeInputs()}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateSurfaceArea}>Calculate Area</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(surfaceArea || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Surface Area</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {surfaceArea && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Surface Area</p><p className="text-2xl font-bold text-primary">{surfaceArea} units²</p></div><CopyButton textToCopy={surfaceArea} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SurfaceAreaCalculator.tsx ======
==================================================

// ====== START OF FILE: SwimmingLapTimeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 9.02 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Activity } from "lucide-react";

type SwimTarget = 'avg_lap_time' | 'total_time' | 'num_laps';
type SwimDistanceUnit = 'meters' | 'yards';

export default function SwimmingLapTimeCalculator() {
  const [target, setTarget] = useState<SwimTarget>('avg_lap_time');
  const [totalDistanceLaps, setTotalDistanceLaps] = useState<string>(''); // Can be total distance or number of laps
  const [lapLength, setLapLength] = useState<string>('25'); // e.g., 25m or 25yd pool
  const [unit, setUnit] = useState<SwimDistanceUnit>('meters');
  
  const [timeH, setTimeH] = useState<string>('');
  const [timeM, setTimeM] = useState<string>('');
  const [timeS, setTimeS] = useState<string>('');
  
  const [avgLapTimeM, setAvgLapTimeM] = useState<string>(''); // For input if calculating total time/distance
  const [avgLapTimeS, setAvgLapTimeS] = useState<string>('');

  const [result, setResult] = useState<string | null>(null);
  const [resultLabel, setResultLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const formatTimeSeconds = (totalSeconds: number): string => {
    const minutes = Math.floor(totalSeconds / 60);
    const seconds = Math.round(totalSeconds % 60);
    const millis = Math.round((totalSeconds - Math.floor(totalSeconds)) * 100); // Optional: milliseconds
    return `${minutes}:${seconds.toString().padStart(2, '0')}${millis > 0 ? `.${millis.toString().padStart(2, '0')}` : ''}`;
  };
  
  const formatTotalTime = (totalSeconds: number): string => {
    const h = Math.floor(totalSeconds / 3600);
    const m = Math.floor((totalSeconds % 3600) / 60);
    const s = Math.round(totalSeconds % 60);
    return `${h > 0 ? `${h}h ` : ''}${m}m ${s}s`;
  }

  const calculateSwim = () => {
    setError(null); setResult(null); setResultLabel('');
    const totalDistOrLaps = parseFloat(totalDistanceLaps);
    const lapLen = parseFloat(lapLength);
    const tH_val = parseFloat(timeH) || 0;
    const tM_val = parseFloat(timeM) || 0;
    const tS_val = parseFloat(timeS) || 0;
    const avgM_val = parseFloat(avgLapTimeM) || 0;
    const avgS_val = parseFloat(avgLapTimeS) || 0;

    try {
      let numLapsActual: number;
      // Determine number of laps. If totalDistanceLaps is distance, calculate laps. If it's laps, use it directly.
      // This logic depends on how "totalDistanceLaps" is interpreted - assuming it's number of laps for now for simplicity.
      // A better UI would have separate fields or a toggle.
      if (target === 'avg_lap_time' || target === 'total_time') { // Means totalDistanceLaps is number of laps
          if (isNaN(totalDistOrLaps) || totalDistOrLaps <= 0) throw new Error("Number of laps must be positive.");
          numLapsActual = totalDistOrLaps;
      } else { // calculating num_laps, totalDistOrLaps is total distance. This scenario is less common/harder with current inputs
          // To calculate number of laps, we'd need total distance and lap length.
          // For now, this path is simplified or might require re-thinking inputs if target is num_laps
          if(target === 'num_laps') throw new Error("Calculating number of laps requires total distance and lap length (feature to be refined).");
          numLapsActual = 0; // placeholder
      }


      if (target === 'avg_lap_time') {
        if (numLapsActual <= 0) throw new Error("Number of laps must be positive.");
        const totalSeconds = tH_val * 3600 + tM_val * 60 + tS_val;
        if (totalSeconds <= 0) throw new Error("Total swim time must be positive.");
        const avgTimePerLapSec = totalSeconds / numLapsActual;
        setResult(formatTimeSeconds(avgTimePerLapSec));
        setResultLabel(`Avg. Lap Time (per ${lapLen}${unit})`);
      } else if (target === 'total_time') {
        if (numLapsActual <= 0) throw new Error("Number of laps must be positive.");
        const avgLapSec = avgM_val * 60 + avgS_val;
        if (avgLapSec <= 0) throw new Error("Average lap time must be positive.");
        const totalSwimSeconds = numLapsActual * avgLapSec;
        setResult(formatTotalTime(totalSwimSeconds));
        setResultLabel('Total Swim Time');
      } else { // num_laps
        const totalSeconds = tH_val * 3600 + tM_val * 60 + tS_val;
        const avgLapSec = avgM_val * 60 + avgS_val;
        if (totalSeconds <= 0 || avgLapSec <= 0) throw new Error("Total time and average lap time must be positive.");
        const calculatedLaps = totalSeconds / avgLapSec;
        setResult(calculatedLaps.toFixed(1));
        setResultLabel('Number of Laps');
      }
    } catch (e: any) { setError(e.message); }
  };

  const resetForm = () => {
    setTotalDistanceLaps(''); setTimeH(''); setTimeM(''); setTimeS('');
    setAvgLapTimeM(''); setAvgLapTimeS('');
    setResult(null); setError(null); setResultLabel('');
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Swimming Pace & Time</AlertTitle><AlertDescription>Calculate average lap time, total time, or number of laps. Ensure lap length unit matches distance unit if applicable.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter swim details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="swimTarget">Calculate:</Label><Select value={target} onValueChange={(v:SwimTarget)=>{setTarget(v);resetForm();}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="avg_lap_time">Avg. Lap Time</SelectItem><SelectItem value="total_time">Total Time</SelectItem><SelectItem value="num_laps">Number of Laps</SelectItem></SelectContent></Select></div>
            
            {(target === 'avg_lap_time' || target === 'total_time') && <div><Label htmlFor="numLapsSwim">Number of Laps</Label><Input id="numLapsSwim" type="number" value={totalDistanceLaps} onChange={e=>setTotalDistanceLaps(e.target.value)} placeholder="e.g., 20"/></div>}
            {(target === 'num_laps') && <div><Label htmlFor="totalDistSwim">Total Distance (if calculating laps based on total distance, not fully implemented)</Label><Input id="totalDistSwim" type="number" value={totalDistanceLaps} onChange={e=>setTotalDistanceLaps(e.target.value)} placeholder="e.g., 1000"/></div>}


            <div className="grid grid-cols-2 gap-2">
                <div><Label htmlFor="lapLengthSwim">Lap Length</Label><Input id="lapLengthSwim" type="number" value={lapLength} onChange={e=>setLapLength(e.target.value)} placeholder="e.g., 25"/></div>
                <div><Label htmlFor="lapUnitSwim">Unit</Label><Select value={unit} onValueChange={(v:SwimDistanceUnit)=>setUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="meters">meters</SelectItem><SelectItem value="yards">yards</SelectItem></SelectContent></Select></div>
            </div>

            {(target === 'avg_lap_time' || target === 'num_laps') && <div><Label>Total Swim Time (HH:MM:SS)</Label><div className="grid grid-cols-3 gap-1"><Input type="number" value={timeH} onChange={e=>setTimeH(e.target.value)} placeholder="H"/><Input type="number" value={timeM} onChange={e=>setTimeM(e.target.value)} placeholder="M"/><Input type="number" value={timeS} onChange={e=>setTimeS(e.target.value)} placeholder="S"/></div></div>}
            
            {(target === 'total_time' || target === 'num_laps') && <div><Label>Average Lap Time (MM:SS)</Label><div className="grid grid-cols-2 gap-1"><Input type="number" value={avgLapTimeM} onChange={e=>setAvgLapTimeM(e.target.value)} placeholder="M"/><Input type="number" value={avgLapTimeS} onChange={e=>setAvgLapTimeS(e.target.value)} placeholder="S"/></div></div>}

          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateSwim}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Swim Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">{resultLabel}</p><p className="text-2xl font-bold text-primary">{result}</p></div><CopyButton textToCopy={result}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: SwimmingLapTimeCalculator.tsx ======
==================================================

// ====== START OF FILE: SystemOfEquationsSolver.tsx ======
// File converted from TSX to TXT
// Original size: 5.18 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, GitMerge } from "lucide-react";

// Solves a 2x2 system of linear equations:
// a1*x + b1*y = c1
// a2*x + b2*y = c2

export default function SystemOfEquationsSolver() {
  const [a1, setA1] = useState<string>(''); const [b1, setB1] = useState<string>(''); const [c1, setC1] = useState<string>('');
  const [a2, setA2] = useState<string>(''); const [b2, setB2] = useState<string>(''); const [c2, setC2] = useState<string>('');

  const [solutionX, setSolutionX] = useState<string | null>(null);
  const [solutionY, setSolutionY] = useState<string | null>(null);
  const [solutionType, setSolutionType] = useState<string | null>(null); // e.g., "Unique Solution", "No Solution", "Infinite Solutions"
  const [error, setError] = useState<string | null>(null);

  const solveSystem = () => {
    setError(null); setSolutionX(null); setSolutionY(null); setSolutionType(null);
    const valA1=parseFloat(a1); const valB1=parseFloat(b1); const valC1=parseFloat(c1);
    const valA2=parseFloat(a2); const valB2=parseFloat(b2); const valC2=parseFloat(c2);

    if ([valA1,valB1,valC1,valA2,valB2,valC2].some(isNaN)) { setError("All coefficients (a1,b1,c1,a2,b2,c2) must be valid numbers."); return; }

    const determinant = valA1 * valB2 - valA2 * valB1;

    if (determinant === 0) {
      if ((valA1 * valC2 - valA2 * valC1 === 0) && (valB1 * valC2 - valB2 * valC1 === 0)) { // Or check if lines are identical
        setSolutionType("Infinite Solutions (Lines are coincident)");
      } else {
        setSolutionType("No Solution (Lines are parallel and distinct)");
      }
    } else {
      const x = (valC1 * valB2 - valC2 * valB1) / determinant;
      const y = (valA1 * valC2 - valA2 * valC1) / determinant;
      setSolutionX(x.toFixed(4));
      setSolutionY(y.toFixed(4));
      setSolutionType("Unique Solution");
    }
  };

  const resetForm = () => {
    setA1('');setB1('');setC1('');setA2('');setB2('');setC2('');
    setSolutionX(null);setSolutionY(null);setSolutionType(null);setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>System of Linear Equations Solver (2x2)</AlertTitle><AlertDescription>Solve a system of two linear equations with two variables (x and y). Enter the coefficients.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter coefficients for the system:</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <Label className="font-medium">Equation 1: a₁x + b₁y = c₁</Label>
            <div className="grid grid-cols-3 gap-2">
              <Input type="number" value={a1} onChange={e=>setA1(e.target.value)} placeholder="a₁"/>
              <Input type="number" value={b1} onChange={e=>setB1(e.target.value)} placeholder="b₁"/>
              <Input type="number" value={c1} onChange={e=>setC1(e.target.value)} placeholder="c₁"/>
            </div>
            <Label className="font-medium">Equation 2: a₂x + b₂y = c₂</Label>
            <div className="grid grid-cols-3 gap-2">
              <Input type="number" value={a2} onChange={e=>setA2(e.target.value)} placeholder="a₂"/>
              <Input type="number" value={b2} onChange={e=>setB2(e.target.value)} placeholder="b₂"/>
              <Input type="number" value={c2} onChange={e=>setC2(e.target.value)} placeholder="c₂"/>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={solveSystem}>Solve System</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(solutionX || solutionType || error) && (
          <Card>
            <CardHeader><CardDescription>Solution</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {solutionType && (<div className="p-2 bg-muted rounded-md text-sm">Solution Type: <strong className="font-semibold">{solutionType}</strong></div>)}
              {solutionX && solutionY && solutionType === "Unique Solution" && (
                <div className="p-2 bg-primary/10 rounded-md">
                    <p className="text-sm text-muted-foreground">x = <span className="font-bold text-primary">{solutionX}</span></p>
                    <p className="text-sm text-muted-foreground">y = <span className="font-bold text-primary">{solutionY}</span></p>
                    <CopyButton textToCopy={`x = ${solutionX}, y = ${solutionY}`} className="mt-1" size="sm"/>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: SystemOfEquationsSolver.tsx ======
==================================================

// ====== START OF FILE: TakeHomePaycheckCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.61 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CircleDollarSign } from "lucide-react";

type PayFrequency = 'weekly' | 'biweekly' | 'semimonthly' | 'monthly' | 'annually';

export default function TakeHomePaycheckCalculator() {
  const [grossPay, setGrossPay] = useState<string>('');
  const [payFrequency, setPayFrequency] = useState<PayFrequency>('annually');
  // Simplified deductions - these are placeholders and not accurate for real tax situations
  const [federalTaxRate, setFederalTaxRate] = useState<string>('15'); // Example flat %
  const [stateTaxRate, setStateTaxRate] = useState<string>('5');    // Example flat %
  const [otherDeductions, setOtherDeductions] = useState<string>('0'); // Fixed amount per pay period

  const [netPay, setNetPay] = useState<string | null>(null);
  const [totalDeductionsAmount, setTotalDeductionsAmount] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateNetPay = () => {
    setError(null); setNetPay(null); setTotalDeductionsAmount(null);
    const gross = parseFloat(grossPay);
    const fedRate = parseFloat(federalTaxRate) / 100;
    const stateRate = parseFloat(stateTaxRate) / 100;
    const otherDed = parseFloat(otherDeductions);

    if (isNaN(gross) || gross < 0 || isNaN(fedRate) || fedRate < 0 || isNaN(stateRate) || stateRate < 0 || isNaN(otherDed) || otherDed < 0) {
      setError('Please enter valid non-negative numbers for gross pay and deductions/rates.');
      return;
    }

    const fedTaxAmount = gross * fedRate;
    const stateTaxAmount = gross * stateRate;
    // FICA (Social Security 6.2% + Medicare 1.45%) = 7.65% (on income up to SS wage base for SS part) - highly simplified as flat rate here
    const ficaRate = 0.0765; 
    const ficaTaxAmount = gross * ficaRate; 

    const totalDed = fedTaxAmount + stateTaxAmount + ficaTaxAmount + otherDed;
    const calculatedNetPay = gross - totalDed;

    setTotalDeductionsAmount(totalDed.toFixed(2));
    setNetPay(calculatedNetPay.toFixed(2));
  };

  const resetForm = () => {
    setGrossPay(''); setFederalTaxRate('15'); setStateTaxRate('5'); setOtherDeductions('0');
    setNetPay(null); setTotalDeductionsAmount(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Highly Simplified - For Illustration Only</AlertTitle>
        <AlertDescription>
          This paycheck calculator uses <strong className="font-semibold">placeholder flat tax rates and simplified FICA</strong>. It does NOT account for tax brackets, pre-tax deductions (401k, health insurance), specific state/local taxes, or other complex payroll factors. <strong className="font-semibold">Do NOT use for actual financial planning or tax purposes.</strong> Consult official payroll tools or a tax professional.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate your net take-home pay (simplified).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="grossPayTHP">Gross Pay ($)</Label><Input id="grossPayTHP" type="number" value={grossPay} onChange={e=>setGrossPay(e.target.value)} placeholder="e.g., 5000"/></div>
              <div><Label htmlFor="payFreqTHP">For Pay Period</Label><Select value={payFrequency} onValueChange={(v:PayFrequency)=>setPayFrequency(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                  <SelectItem value="weekly">Weekly</SelectItem><SelectItem value="biweekly">Bi-Weekly</SelectItem>
                  <SelectItem value="semimonthly">Semi-Monthly</SelectItem><SelectItem value="monthly">Monthly</SelectItem><SelectItem value="annually">Annually</SelectItem>
              </SelectContent></Select></div>
            </div>
            <p className="text-sm font-medium text-muted-foreground pt-2 border-t">Simplified Deductions (Placeholder Rates):</p>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="fedTaxTHP">Federal Tax Rate (%)</Label><Input id="fedTaxTHP" type="number" value={federalTaxRate} onChange={e=>setFederalTaxRate(e.target.value)} placeholder="e.g., 15"/></div>
              <div><Label htmlFor="stateTaxTHP">State Tax Rate (%)</Label><Input id="stateTaxTHP" type="number" value={stateTaxRate} onChange={e=>setStateTaxRate(e.target.value)} placeholder="e.g., 5"/></div>
            </div>
            <div><Label htmlFor="otherDedTHP">Other Deductions ($ per period)</Label><Input id="otherDedTHP" type="number" value={otherDeductions} onChange={e=>setOtherDeductions(e.target.value)} placeholder="e.g., 100 (health, retirement)"/></div>
            <AlertDescription className="text-xs">Assumes FICA at 7.65% of gross pay for this demo.</AlertDescription>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateNetPay}>Estimate Net Pay</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(netPay || error) && (
          <Card>
            <CardHeader><CardDescription>Paycheck Estimation (Simplified)</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalDeductionsAmount && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Est. Total Deductions</p><p className="font-semibold">${totalDeductionsAmount}</p></div>)}
              {netPay && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Net Take-Home Pay</p><p className="text-2xl font-bold text-primary">${netPay}</p></div>
                  <CopyButton textToCopy={netPay} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: TakeHomePaycheckCalculator.tsx ======
==================================================

// ====== START OF FILE: TakeHomePaycheckCalculatorSimplifiedUsStyle.tsx ======
// File converted from TSX to TXT
// Original size: 7.55 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, FileText } from "lucide-react";

// HIGHLY SIMPLIFIED - Placeholder rates. Real payroll taxes are complex.
const SS_RATE_EMPLOYEE = 0.062; // Social Security (up to wage base)
const MEDICARE_RATE_EMPLOYEE = 0.0145; // Medicare (no wage base for employee portion typically)
// Note: Does not include employer portion of FICA, federal/state income tax withholding, SUI, SDI, etc.

export default function TakeHomePaycheckCalculatorSimplifiedUsStyle() {
  const [grossPayPeriod, setGrossPayPeriod] = useState<string>('');
  const [ssWageBase, setSsWageBase] = useState<string>('168600'); // 2024 example
  const [yearToDateGross, setYearToDateGross] = useState<string>('0'); // To check against SS wage base

  // Simplified deductions - these are placeholders and not accurate for real tax situations
  const [federalTaxRate, setFederalTaxRate] = useState<string>('15'); // Example flat %
  const [stateTaxRate, setStateTaxRate] = useState<string>('5');    // Example flat %
  const [otherDeductions, setOtherDeductions] = useState<string>('0'); // Fixed amount per pay period

  const [netPay, setNetPay] = useState<string | null>(null);
  const [totalDeductionsAmount, setTotalDeductionsAmount] = useState<string | null>(null);
  const [socialSecurityTax, setSocialSecurityTax] = useState<string | null>(null);
  const [medicareTax, setMedicareTax] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculatePayrollTaxes = () => {
    setError(null); setSocialSecurityTax(null); setMedicareTax(null); setTotalDeductionsAmount(null); setNetPay(null);
    
    const gross = parseFloat(grossPayPeriod);
    const wageBase = parseFloat(ssWageBase);
    const ytdGross = parseFloat(yearToDateGross);
    const fedRate = parseFloat(federalTaxRate) / 100;
    const stateRate = parseFloat(stateTaxRate) / 100;
    const otherDed = parseFloat(otherDeductions);

    if (isNaN(gross) || gross < 0 || isNaN(wageBase) || wageBase <=0 || isNaN(ytdGross) || ytdGross < 0 || isNaN(fedRate) || fedRate < 0 || isNaN(stateRate) || stateRate < 0 || isNaN(otherDed) || otherDed < 0) {
      setError('Please enter valid non-negative numbers for all fields. SS Wage Base must be positive.'); 
      return;
    }

    let ssTaxable = gross;
    if (ytdGross >= wageBase) {
      ssTaxable = 0;
    } else if (ytdGross + gross > wageBase) {
      ssTaxable = wageBase - ytdGross;
    }
    
    const ssTax = ssTaxable * SS_RATE_EMPLOYEE;
    const medTax = gross * MEDICARE_RATE_EMPLOYEE;
    const fedTaxAmount = gross * fedRate;
    const stateTaxAmount = gross * stateRate;
    
    const totalDed = ssTax + medTax + fedTaxAmount + stateTaxAmount + otherDed;
    const calculatedNetPay = gross - totalDed;

    setSocialSecurityTax(ssTax.toFixed(2));
    setMedicareTax(medTax.toFixed(2));
    setTotalDeductionsAmount(totalDed.toFixed(2));
    setNetPay(calculatedNetPay.toFixed(2));
  };

  const resetForm = () => {
    setGrossPayPeriod(''); setSsWageBase('168600'); setYearToDateGross('0');
    setFederalTaxRate('15'); setStateTaxRate('5'); setOtherDeductions('0');
    setSocialSecurityTax(null); setMedicareTax(null); setTotalDeductionsAmount(null); setNetPay(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4"/>
        <AlertTitle>Highly Simplified Estimator - For Illustration Only</AlertTitle>
        <AlertDescription>
          This calculator uses <strong className="font-semibold">placeholder flat tax rates for income tax and simplified FICA</strong>. It does NOT account for tax brackets, filing status, pre-tax deductions (401k, health insurance), or other complex payroll factors. <strong className="font-semibold">NOT for actual payroll or tax planning. Consult a payroll specialist or tax advisor.</strong>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate take-home pay (employee share).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="grossPaySTHP">Gross Pay for this Period ($)</Label><Input id="grossPaySTHP" type="number" value={grossPayPeriod} onChange={e=>setGrossPayPeriod(e.target.value)}/></div>
            <div><Label htmlFor="ytdGrossSTHP">Year-to-Date Gross Pay ($) (Before this period)</Label><Input id="ytdGrossSTHP" type="number" value={yearToDateGross} onChange={e=>setYearToDateGross(e.target.value)}/></div>
            <div><Label htmlFor="ssWageBaseSTHP">Social Security Wage Base ($)</Label><Input id="ssWageBaseSTHP" type="number" value={ssWageBase} onChange={e=>setSsWageBase(e.target.value)} placeholder="e.g., 168600 for 2024"/></div>
            <p className="text-sm font-medium text-muted-foreground pt-2 border-t">Placeholder Deductions:</p>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="fedTaxSTHP">Federal Tax Rate (%)</Label><Input id="fedTaxSTHP" type="number" value={federalTaxRate} onChange={e=>setFederalTaxRate(e.target.value)} /></div>
              <div><Label htmlFor="stateTaxSTHP">State Tax Rate (%)</Label><Input id="stateTaxSTHP" type="number" value={stateTaxRate} onChange={e=>setStateTaxRate(e.target.value)} /></div>
            </div>
            <div><Label htmlFor="otherDedSTHP">Other Deductions ($ per period)</Label><Input id="otherDedSTHP" type="number" value={otherDeductions} onChange={e=>setOtherDeductions(e.target.value)} placeholder="e.g., Health, 401k post-tax"/></div>
             <AlertDescription className="text-xs">Assumes FICA at 7.65% (SS 6.2% + Medicare 1.45%) for this demo.</AlertDescription>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculatePayrollTaxes}>Estimate Pay</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(netPay || error) && (
          <Card>
            <CardHeader><CardDescription>Paycheck Estimation (Simplified)</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalDeductionsAmount !== null && (<div className="p-1 bg-muted rounded-md text-sm">Social Security Tax: <strong className="font-semibold">${socialSecurityTax}</strong></div>)}
              {medicareTax !== null && (<div className="p-1 bg-muted rounded-md text-sm">Medicare Tax: <strong className="font-semibold">${medicareTax}</strong></div>)}
              {totalDeductionsAmount !== null && (<div className="p-1 bg-muted rounded-md text-sm">Total Deductions: <strong className="font-semibold">${totalDeductionsAmount}</strong></div>)}
              {netPay !== null && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Estimated Net Pay</p><p className="text-2xl font-bold text-primary">${netPay}</p></div><CopyButton textToCopy={netPay}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: TakeHomePaycheckCalculatorSimplifiedUsStyle.tsx ======
==================================================

// ====== START OF FILE: TaylorSeriesCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.42 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Sigma } from "lucide-react";

export default function TaylorSeriesCalculator() {
  const [functionInputTS, setFunctionInputTS] = useState<string>(''); // e.g., "sin(x)" or "e^x"
  const [expansionPoint, setExpansionPoint] = useState<string>('0'); // 'a' in Taylor series
  const [numTermsOrder, setNumTermsOrder] = useState<string>('5'); // Number of terms (or order n)

  const [seriesOutput, setSeriesOutput] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTaylorSeries = () => {
    setError(null);
    setSeriesOutput(null);

    if (!functionInputTS.trim() || !expansionPoint.trim() || !numTermsOrder.trim()) {
      setError('Please enter the function, point of expansion (a), and number of terms (order n).');
      return;
    }
    
    // Symbolic differentiation and series generation are very complex.
    // This is a placeholder for the UI.
    const placeholderMessage = `Generating Taylor series for "${functionInputTS}" around a=${expansionPoint} up to order ${numTermsOrder} requires symbolic differentiation, which is not implemented in this demo.
    Example (sin(x) around 0): x - x^3/3! + x^5/5! - ...`;
    setError(placeholderMessage);
    setSeriesOutput("Symbolic calculation placeholder.");
  };

  const resetForm = () => {
    setFunctionInputTS('');
    setExpansionPoint('0');
    setNumTermsOrder('5');
    setSeriesOutput(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Advanced Calculus - Placeholder Logic</AlertTitle>
        <AlertDescription>
          Calculating Taylor Series expansions symbolically requires a sophisticated math engine capable of repeated differentiation. This calculator provides a UI concept but <strong className="font-semibold">does not implement the full symbolic calculation logic.</strong>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter function and parameters for Taylor Series expansion.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="funcInputTS">Function f(x) =</Label><Input id="funcInputTS" value={functionInputTS} onChange={e=>setFunctionInputTS(e.target.value)} placeholder="e.g., sin(x) or exp(x) or 1/(1-x)"/></div>
            <div><Label htmlFor="expPointTS">Point of Expansion (a)</Label><Input id="expPointTS" type="number" value={expansionPoint} onChange={e=>setExpansionPoint(e.target.value)} placeholder="e.g., 0"/></div>
            <div><Label htmlFor="numTermsTS">Number of Terms / Order (n)</Label><Input id="numTermsTS" type="number" value={numTermsOrder} onChange={e=>setNumTermsOrder(e.target.value)} placeholder="e.g., 5"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTaylorSeries}>Expand Series</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(seriesOutput || error) && (
          <Card>
            <CardHeader><CardDescription>Taylor Series Expansion (Placeholder)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {seriesOutput && (
                <div className="p-3 bg-muted rounded-md">
                  <Label className="text-sm font-semibold text-primary">Result:</Label>
                  <Textarea value={seriesOutput} readOnly rows={5} className="mt-1 font-mono text-xs bg-background/50"/>
                  <CopyButton textToCopy={seriesOutput} className="mt-2 w-full" buttonText="Copy Series"/>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: TaylorSeriesCalculator.tsx ======
==================================================

// ====== START OF FILE: TaylorSeriesCalculatorSimplified.tsx ======
// File converted from TSX to TXT
// Original size: 4.42 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Sigma } from "lucide-react";

export default function TaylorSeriesCalculatorSimplified() {
  const [functionInputTS, setFunctionInputTS] = useState<string>(''); // e.g., "sin(x)" or "e^x"
  const [expansionPoint, setExpansionPoint] = useState<string>('0'); // 'a' in Taylor series
  const [numTermsOrder, setNumTermsOrder] = useState<string>('5'); // Number of terms (or order n)

  const [seriesOutput, setSeriesOutput] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTaylorSeries = () => {
    setError(null);
    setSeriesOutput(null);

    if (!functionInputTS.trim() || !expansionPoint.trim() || !numTermsOrder.trim()) {
      setError('Please enter the function, point of expansion (a), and number of terms (order n).');
      return;
    }
    
    // Symbolic differentiation and series generation are very complex.
    // This is a placeholder for the UI.
    const placeholderMessage = `Generating Taylor series for "${functionInputTS}" around a=${expansionPoint} up to order ${numTermsOrder} requires symbolic differentiation, which is not implemented in this demo.
    Example (sin(x) around 0): x - x^3/3! + x^5/5! - ...`;
    setError(placeholderMessage);
    setSeriesOutput("Symbolic calculation placeholder.");
  };

  const resetForm = () => {
    setFunctionInputTS('');
    setExpansionPoint('0');
    setNumTermsOrder('5');
    setSeriesOutput(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Advanced Calculus - Placeholder Logic</AlertTitle>
        <AlertDescription>
          Calculating Taylor Series expansions symbolically requires a sophisticated math engine capable of repeated differentiation. This calculator provides a UI concept but <strong className="font-semibold">does not implement the full symbolic calculation logic.</strong>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter function and parameters for Taylor Series expansion.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="funcInputTS">Function f(x) =</Label><Input id="funcInputTS" value={functionInputTS} onChange={e=>setFunctionInputTS(e.target.value)} placeholder="e.g., sin(x) or exp(x) or 1/(1-x)"/></div>
            <div><Label htmlFor="expPointTS">Point of Expansion (a)</Label><Input id="expPointTS" type="number" value={expansionPoint} onChange={e=>setExpansionPoint(e.target.value)} placeholder="e.g., 0"/></div>
            <div><Label htmlFor="numTermsTS">Number of Terms / Order (n)</Label><Input id="numTermsTS" type="number" value={numTermsOrder} onChange={e=>setNumTermsOrder(e.target.value)} placeholder="e.g., 5"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTaylorSeries}>Expand Series</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(seriesOutput || error) && (
          <Card>
            <CardHeader><CardDescription>Taylor Series Expansion (Placeholder)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {seriesOutput && (
                <div className="p-3 bg-muted rounded-md">
                  <Label className="text-sm font-semibold text-primary">Result:</Label>
                  <Textarea value={seriesOutput} readOnly rows={5} className="mt-1 font-mono text-xs bg-background/50"/>
                  <CopyButton textToCopy={seriesOutput} className="mt-2 w-full" buttonText="Copy Series"/>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: TaylorSeriesCalculatorSimplified.tsx ======
==================================================

// ====== START OF FILE: TdeeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.98 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Apple, Weight } from "lucide-react";

// Mifflin-St Jeor for BMR:
// Male: BMR = 10W + 6.25H - 5A + 5
// Female: BMR = 10W + 6.25H - 5A - 161
// W=weight(kg), H=height(cm), A=age(years)
// TDEE = BMR * Activity Factor

const activityLevelsTDEE = [
  { name: "Sedentary (little/no exercise)", factor: 1.2 },
  { name: "Lightly Active (1-3 days/week)", factor: 1.375 },
  { name: "Moderately Active (3-5 days/week)", factor: 1.55 },
  { name: "Very Active (6-7 days/week)", factor: 1.725 },
  { name: "Extremely Active (hard daily exercise/physical job)", factor: 1.9 },
];

export default function TdeeCalculator() {
  const [age, setAge] = useState<string>('');
  const [gender, setGender] = useState<'male' | 'female'>('male');
  const [heightCm, setHeightCm] = useState<string>(''); // Height in cm
  const [weightKg, setWeightKg] = useState<string>(''); // Weight in kg
  const [activityFactor, setActivityFactor] = useState<string>(activityLevelsTDEE[1].factor.toString());

  const [bmrResult, setBmrResult] = useState<string | null>(null);
  const [tdeeResult, setTdeeResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTdee = () => {
    setError(null); setBmrResult(null); setTdeeResult(null);
    const ageVal = parseInt(age);
    const hCm = parseFloat(heightCm);
    const wKg = parseFloat(weightKg);
    const actFact = parseFloat(activityFactor);

    if (isNaN(ageVal) || ageVal <=0 || isNaN(hCm) || hCm <=0 || isNaN(wKg) || wKg <=0 || isNaN(actFact)) {
      setError('Please enter valid positive numbers for age, height (cm), weight (kg), and select activity level.');
      return;
    }

    let bmr: number;
    if (gender === 'male') bmr = (10 * wKg) + (6.25 * hCm) - (5 * ageVal) + 5;
    else bmr = (10 * wKg) + (6.25 * hCm) - (5 * ageVal) - 161;
    
    if (bmr <=0) { setError("Calculated BMR is too low or invalid based on inputs."); return; }
    setBmrResult(bmr.toFixed(0));
    
    const tdee = bmr * actFact;
    setTdeeResult(tdee.toFixed(0));
  };

  const resetForm = () => {
    setAge(''); setHeightCm(''); setWeightKg(''); setActivityFactor(activityLevelsTDEE[1].factor.toString());
    setBmrResult(null); setTdeeResult(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>TDEE Calculator</AlertTitle><AlertDescription>Estimate your Total Daily Energy Expenditure (TDEE) - the total calories your body burns in a day, including activity. Uses Mifflin-St Jeor for BMR.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your details to estimate TDEE.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="ageTDEE">Age (Years)</Label><Input id="ageTDEE" type="number" value={age} onChange={e=>setAge(e.target.value)} placeholder="e.g., 30"/></div>
              <div><Label htmlFor="genderTDEE">Biological Gender</Label><Select value={gender} onValueChange={(v:'male'|'female')=>setGender(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="male">Male</SelectItem><SelectItem value="female">Female</SelectItem></SelectContent></Select></div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="heightCmTDEE">Height (cm)</Label><Input id="heightCmTDEE" type="number" value={heightCm} onChange={e=>setHeightCm(e.target.value)} placeholder="e.g., 175"/></div>
              <div><Label htmlFor="weightKgTDEE">Weight (kg)</Label><Input id="weightKgTDEE" type="number" value={weightKg} onChange={e=>setWeightKg(e.target.value)} placeholder="e.g., 70"/></div>
            </div>
            <div><Label htmlFor="activityTDEE">Activity Level</Label><Select value={activityFactor} onValueChange={setActivityFactor}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{activityLevelsTDEE.map(l=><SelectItem key={l.name} value={l.factor.toString()}>{l.name}</SelectItem>)}</SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTdee}>Calculate TDEE</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(tdeeResult || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Caloric Needs</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {bmrResult && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Basal Metabolic Rate (BMR)</p><p className="font-semibold">{bmrResult} Calories/day</p></div>)}
              {tdeeResult && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Total Daily Energy Expenditure (TDEE)</p><p className="text-xl font-bold text-primary">{tdeeResult} Calories/day</p></div><CopyButton textToCopy={tdeeResult}/></div>)}
              <AlertDescription className="text-xs pt-2">TDEE is an estimate for weight maintenance. Adjust calories up or down for weight gain or loss goals.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: TdeeCalculator.tsx ======
==================================================

// ====== START OF FILE: TemperatureCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.42 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState, ChangeEvent } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Thermometer } from "lucide-react";

type TempUnit = 'C' | 'F' | 'K';

export default function TemperatureCalculator() {
  const [inputValue, setInputValue] = useState<string>('');
  const [fromUnit, setFromUnit] = useState<TempUnit>('C');
  const [toUnit, setToUnit] = useState<TempUnit>('F');
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const convertTemperature = () => {
    setError(null); setResult(null);
    const val = parseFloat(inputValue);
    if (isNaN(val)) { setError('Please enter a valid number for temperature.'); return; }

    let convertedVal: number;
    if (fromUnit === toUnit) {
      convertedVal = val;
    } else if (fromUnit === 'C') {
      if (toUnit === 'F') convertedVal = (val * 9/5) + 32;
      else convertedVal = val + 273.15; // to K
    } else if (fromUnit === 'F') {
      if (toUnit === 'C') convertedVal = (val - 32) * 5/9;
      else convertedVal = ((val - 32) * 5/9) + 273.15; // to K
    } else { // from K
      if (toUnit === 'C') convertedVal = val - 273.15;
      else convertedVal = ((val - 273.15) * 9/5) + 32; // to F
    }
    setResult(convertedVal.toFixed(2));
  };

  const resetForm = () => {
    setInputValue(''); setFromUnit('C'); setToUnit('F');
    setResult(null); setError(null);
  };

  const tempUnits: {value: TempUnit, label: string}[] = [
    { value: 'C', label: 'Celsius (°C)'},
    { value: 'F', label: 'Fahrenheit (°F)'},
    { value: 'K', label: 'Kelvin (K)'},
  ];

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Temperature Converter</AlertTitle><AlertDescription>Convert temperatures between Celsius (°C), Fahrenheit (°F), and Kelvin (K).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter temperature and select units.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="inputValueTemp">Temperature Value</Label><Input id="inputValueTemp" type="number" value={inputValue} onChange={e=>setInputValue(e.target.value)} placeholder="e.g., 25"/></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="fromUnitTemp">From Unit</Label><Select value={fromUnit} onValueChange={(v:TempUnit)=>setFromUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{tempUnits.map(u=><SelectItem key={`from-${u.value}`} value={u.value}>{u.label}</SelectItem>)}</SelectContent></Select></div>
              <div><Label htmlFor="toUnitTemp">To Unit</Label><Select value={toUnit} onValueChange={(v:TempUnit)=>setToUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{tempUnits.map(u=><SelectItem key={`to-${u.value}`} value={u.value}>{u.label}</SelectItem>)}</SelectContent></Select></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={convertTemperature}>Convert</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Converted Temperature</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">{inputValue}{fromUnit} is</p><p className="text-2xl font-bold text-primary">{result} {tempUnits.find(u=>u.value===toUnit)?.label.match(/\(([^)]+)\)/)?.[1] || toUnit}</p></div><CopyButton textToCopy={`${result} ${toUnit}`}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: TemperatureCalculator.tsx ======
==================================================

// ====== START OF FILE: TermLifeInsuranceCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.5 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Umbrella } from "lucide-react";

export default function TermLifeInsuranceCalculator() {
  const [monthlyPremium, setMonthlyPremium] = useState<string>('');
  const [termYears, setTermYears] = useState<string>('');

  const [totalPremiumsPaid, setTotalPremiumsPaid] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTotalPremiums = () => {
    setError(null); setTotalPremiumsPaid(null);
    const premiumM = parseFloat(monthlyPremium);
    const termY = parseInt(termYears);

    if (isNaN(premiumM) || premiumM <= 0 || isNaN(termY) || termY <= 0) {
      setError('Monthly Premium and Term (Years) must be positive numbers.');
      return;
    }
    const totalPaid = premiumM * 12 * termY;
    setTotalPremiumsPaid(totalPaid.toFixed(2));
  };

  const resetForm = () => {
    setMonthlyPremium(''); setTermYears('');
    setTotalPremiumsPaid(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Term Life Insurance Premium Calculator (Total)</AlertTitle><AlertDescription>Estimate the total amount of premiums paid over the life of a term life insurance policy. Does not estimate actual premium rates, only sums them up.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your policy details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="monthlyPremiumTLI">Monthly Premium ($)</Label><Input id="monthlyPremiumTLI" type="number" value={monthlyPremium} onChange={e=>setMonthlyPremium(e.target.value)} placeholder="e.g., 50"/></div>
            <div><Label htmlFor="termYearsTLI">Policy Term (Years)</Label><Input id="termYearsTLI" type="number" value={termYears} onChange={e=>setTermYears(e.target.value)} placeholder="e.g., 20"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTotalPremiums}>Calculate Total Premiums</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(totalPremiumsPaid || error) && (
          <Card>
            <CardHeader><CardDescription>Total Premiums Paid</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalPremiumsPaid && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Total Premiums Paid Over Term</p><p className="text-2xl font-bold text-primary">${totalPremiumsPaid}</p></div><CopyButton textToCopy={totalPremiumsPaid}/></div>)}
              <AlertDescription className="text-xs pt-2">This does not reflect the policy's death benefit or cash value (if any). Term life typically has no cash value.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
    

// ====== END OF FILE: TermLifeInsuranceCalculator.tsx ======
==================================================

// ====== START OF FILE: TermLifeInsurancePremiumEstimatorConceptual.tsx ======
// File converted from TSX to TXT
// Original size: 5.62 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Info, Umbrella } from "lucide-react";
import CopyButton from '@/components/shared/CopyButton';

// Placeholder data for conceptual estimation
const ageFactors = { "20-30": 1, "31-40": 1.5, "41-50": 2.5, "51-60": 4 };
const healthFactors = { "excellent": 1, "good": 1.2, "average": 1.5, "below_average": 2.5 };
const coverageFactors = { "250k": 1, "500k": 1.8, "1m": 3.2 };

export default function TermLifeInsurancePremiumEstimatorConceptual() {
  const [ageRange, setAgeRange] = useState<string>('31-40');
  const [healthStatus, setHealthStatus] = useState<string>('good');
  const [coverageAmount, setCoverageAmount] = useState<string>('500k');

  const [estimatedPremium, setEstimatedPremium] = useState<string | null>(null);
  
  const calculatePremium = () => {
    // This is a highly simplified, arbitrary formula for demonstration.
    const basePremium = 20; // A base monthly premium
    const ageFactor = ageFactors[ageRange as keyof typeof ageFactors] || 1;
    const healthFactor = healthFactors[healthStatus as keyof typeof healthFactors] || 1;
    const coverageFactor = coverageFactors[coverageAmount as keyof typeof coverageFactors] || 1;

    const premium = basePremium * ageFactor * healthFactor * coverageFactor;
    setEstimatedPremium(premium.toFixed(2));
  };
  
  const resetForm = () => {
      setAgeRange('31-40');
      setHealthStatus('good');
      setCoverageAmount('500k');
      setEstimatedPremium(null);
  }

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle className="font-bold text-lg">Conceptual Estimator - Not a Quote</AlertTitle>
        <AlertDescription className="text-base">
          <p>Life insurance premiums are highly personalized and depend on detailed underwriting, including specific age, health history, occupation, lifestyle, and chosen term length. This calculator uses <strong className="font-semibold">grossly simplified, illustrative factors and does NOT provide a real insurance quote.</strong></p>
          <p className="mt-2"><strong className="font-semibold">ALWAYS consult a licensed insurance professional</strong> for accurate quotes and advice tailored to your needs.</p>
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Select factors to see an illustrative premium estimate.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="ageRangeTLI">Age Range</Label>
              <Select value={ageRange} onValueChange={setAgeRange}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  {Object.keys(ageFactors).map(age => <SelectItem key={age} value={age}>{age}</SelectItem>)}
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="healthStatusTLI">General Health Status</Label>
              <Select value={healthStatus} onValueChange={setHealthStatus}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="excellent">Excellent</SelectItem>
                  <SelectItem value="good">Good</SelectItem>
                  <SelectItem value="average">Average</SelectItem>
                  <SelectItem value="below_average">Below Average / Smoker</SelectItem>
                </SelectContent>
              </Select>
            </div>
             <div>
              <Label htmlFor="coverageAmountTLI">Desired Coverage Amount ($)</Label>
              <Select value={coverageAmount} onValueChange={setCoverageAmount}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                   <SelectItem value="250k">$250,000</SelectItem>
                   <SelectItem value="500k">$500,000</SelectItem>
                   <SelectItem value="1m">$1,000,000</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculatePremium}>Estimate Premium</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>
        {estimatedPremium && (
            <Card>
            <CardHeader><CardDescription>Illustrative Premium Estimate</CardDescription></CardHeader>
            <CardContent>
              <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                <div>
                  <p className="text-sm text-muted-foreground">Illustrative Monthly Premium</p>
                  <p className="text-2xl font-bold text-primary">${estimatedPremium}</p>
                </div>
                <CopyButton textToCopy={estimatedPremium} />
              </div>
              <AlertDescription className="text-xs pt-2 mt-2">
                This is a conceptual estimate. Actual quotes will vary widely.
              </AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: TermLifeInsurancePremiumEstimatorConceptual.tsx ======
==================================================

// ====== START OF FILE: TextReadabilityScoreCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.41 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Info, FileText, Terminal } from "lucide-react";

export default function TextReadabilityScoreCalculator() {
  const [textInput, setTextInput] = useState<string>('');
  const [wordCount, setWordCount] = useState<number | null>(null);
  const [sentenceCount, setSentenceCount] = useState<number | null>(null);
  const [readabilityScore, setReadabilityScore] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateReadability = () => {
    setError(null);
    setWordCount(null);
    setSentenceCount(null);
    setReadabilityScore(null);
    
    if (!textInput.trim()) {
      setError("Please enter some text to analyze.");
      return;
    }

    const words = textInput.match(/\b\w+\b/g) || [];
    const sentences = textInput.match(/[^.!?]+[.!?]+/g) || [];
    
    setWordCount(words.length);
    setSentenceCount(sentences.length);
    
    // Flesch-Kincaid and other readability scores require syllable counting, which is complex.
    // This part will be a placeholder.
    if (words.length > 0 && sentences.length > 0) {
      setError("Note: Full readability score calculation requires complex syllable counting, which is not implemented in this demo. Basic stats are provided.");
      setReadabilityScore("Score calculation placeholder.");
    } else {
       setError("Not enough text to calculate a meaningful score.");
    }

  };

  const resetForm = () => {
    setTextInput('');
    setWordCount(null);
    setSentenceCount(null);
    setReadabilityScore(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle className="font-bold">Conceptual Tool - Placeholder Logic</AlertTitle>
        <AlertDescription>
          Calculating text readability scores (e.g., Flesch-Kincaid) involves complex linguistic analysis. This calculator provides basic stats but <strong className="font-semibold">does not implement the full readability score algorithms.</strong> For accurate analysis, please use dedicated writing and SEO tools.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter text to analyze its readability (Conceptual).</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="textInputReadability">Text to Analyze</Label>
              <Textarea
                id="textInputReadability"
                value={textInput}
                onChange={(e) => setTextInput(e.target.value)}
                placeholder="Paste or type your text here..."
                rows={10}
              />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateReadability}>Analyze Text</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        <Card>
            <CardHeader>
              <CardDescription>Analysis Results</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Info className="h-4 w-4" /><AlertDescription>{error}</AlertDescription></Alert>)}
              {wordCount !== null && (
                <div className="p-2 bg-muted rounded-md text-sm">Word Count: <strong className="font-semibold">{wordCount}</strong></div>
              )}
               {sentenceCount !== null && (
                <div className="p-2 bg-muted rounded-md text-sm">Sentence Count: <strong className="font-semibold">{sentenceCount}</strong></div>
              )}
               {readabilityScore && (
                <div className="p-2 bg-primary/10 rounded-md text-sm">Readability Score (e.g., Flesch-Kincaid Grade Level): <strong className="font-semibold text-primary">{readabilityScore}</strong></div>
              )}
            </CardContent>
          </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: TextReadabilityScoreCalculator.tsx ======
==================================================

// ====== START OF FILE: ThreeDDistanceCalculatorArPoints.tsx ======
// File converted from TSX to TXT
// Original size: 4.95 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Ruler } from "lucide-react";

export default function ThreeDDistanceCalculatorArPoints() {
  const [x1, setX1] = useState<string>('');
  const [y1, setY1] = useState<string>('');
  const [z1, setZ1] = useState<string>('');
  const [x2, setX2] = useState<string>('');
  const [y2, setY2] = useState<string>('');
  const [z2, setZ2] = useState<string>('');

  const [distance, setDistance] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateDistance = () => {
    setError(null);
    setDistance(null);

    const p1x = parseFloat(x1);
    const p1y = parseFloat(y1);
    const p1z = parseFloat(z1);
    const p2x = parseFloat(x2);
    const p2y = parseFloat(y2);
    const p2z = parseFloat(z2);

    if (isNaN(p1x) || isNaN(p1y) || isNaN(p1z) || isNaN(p2x) || isNaN(p2y) || isNaN(p2z)) {
      setError('Please enter valid numbers for all coordinates.');
      return;
    }

    const deltaX = p2x - p1x;
    const deltaY = p2y - p1y;
    const deltaZ = p2z - p1z;

    const calculatedDistance = Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);
    
    if (isNaN(calculatedDistance)) {
        setError("Could not calculate distance. Please check your inputs.");
        return;
    }

    setDistance(calculatedDistance.toFixed(4));
  };
  
  const resetForm = () => {
    setX1(''); setY1(''); setZ1('');
    setX2(''); setY2(''); setZ2('');
    setDistance(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>3D Distance Calculator</AlertTitle>
        <AlertDescription>
          Calculate the Euclidean distance between two points in three-dimensional space.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter the coordinates for two points.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label className="font-medium">Point 1 (x₁, y₁, z₁)</Label>
              <div className="grid grid-cols-3 gap-2">
                <Input type="number" value={x1} onChange={(e) => setX1(e.target.value)} placeholder="x₁" />
                <Input type="number" value={y1} onChange={(e) => setY1(e.target.value)} placeholder="y₁" />
                <Input type="number" value={z1} onChange={(e) => setZ1(e.target.value)} placeholder="z₁" />
              </div>
            </div>
             <div>
              <Label className="font-medium">Point 2 (x₂, y₂, z₂)</Label>
              <div className="grid grid-cols-3 gap-2">
                <Input type="number" value={x2} onChange={(e) => setX2(e.target.value)} placeholder="x₂" />
                <Input type="number" value={y2} onChange={(e) => setY2(e.target.value)} placeholder="y₂" />
                <Input type="number" value={z2} onChange={(e) => setZ2(e.target.value)} placeholder="z₂" />
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateDistance}>Calculate Distance</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(distance !== null || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Calculated Distance</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {distance !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Distance</p>
                    <p className="text-3xl font-bold text-primary">{distance} units</p>
                  </div>
                  <CopyButton textToCopy={distance} />
                </div>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    Based on the formula: √((x₂-x₁)² + (y₂-y₁)² + (z₂-z₁)²).
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ThreeDDistanceCalculatorArPoints.tsx ======
==================================================

// ====== START OF FILE: ThreeDPrintingMaterialCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.66 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Cuboid } from "lucide-react";

export default function ThreeDPrintingMaterialCalculator() {
  const [spoolWeight, setSpoolWeight] = useState<string>('1000'); // grams
  const [spoolCost, setSpoolCost] = useState<string>('');
  const [objectWeight, setObjectWeight] = useState<string>(''); // grams
  const [wastagePercent, setWastagePercent] = useState<string>('5'); // e.g., for supports, skirts

  const [filamentCost, setFilamentCost] = useState<string | null>(null);
  const [printsPerSpool, setPrintsPerSpool] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateMaterial = () => {
    setError(null);
    setFilamentCost(null);
    setPrintsPerSpool(null);

    const spoolW = parseFloat(spoolWeight);
    const cost = parseFloat(spoolCost);
    const objW = parseFloat(objectWeight);
    const waste = parseFloat(wastagePercent) / 100;

    if (isNaN(spoolW) || spoolW <= 0 || isNaN(cost) || cost < 0 || isNaN(objW) || objW <= 0 || isNaN(waste) || waste < 0) {
      setError('Please enter valid positive numbers for weights and cost. Wastage can be zero.');
      return;
    }

    const costPerGram = cost / spoolW;
    const objectWeightWithWastage = objW * (1 + waste);
    
    const calculatedFilamentCost = objectWeightWithWastage * costPerGram;
    setFilamentCost(calculatedFilamentCost.toFixed(2));

    const printsPossible = Math.floor(spoolW / objectWeightWithWastage);
    setPrintsPerSpool(printsPossible.toString());
  };

  const resetForm = () => {
    setSpoolWeight('1000');
    setSpoolCost('');
    setObjectWeight('');
    setWastagePercent('5');
    setFilamentCost(null);
    setPrintsPerSpool(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>3D Printing Material Cost Calculator</AlertTitle>
        <AlertDescription>
          Estimate the filament cost for a 3D print and how many prints you can get from a single spool.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter spool and object details.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="spoolWeight">Filament Spool Weight (g)</Label>
                <Input id="spoolWeight" type="number" value={spoolWeight} onChange={(e) => setSpoolWeight(e.target.value)} placeholder="e.g., 1000 for 1kg" />
              </div>
              <div>
                <Label htmlFor="spoolCost">Spool Cost ($)</Label>
                <Input id="spoolCost" type="number" value={spoolCost} onChange={(e) => setSpoolCost(e.target.value)} placeholder="e.g., 25" />
              </div>
            </div>
            <div>
              <Label htmlFor="objectWeight">Printed Object Weight (g)</Label>
              <Input id="objectWeight" type="number" value={objectWeight} onChange={(e) => setObjectWeight(e.target.value)} placeholder="Get from your slicer software" />
            </div>
            <div>
              <Label htmlFor="wastagePercent3D">Wastage Factor (%)</Label>
              <Input id="wastagePercent3D" type="number" value={wastagePercent} onChange={(e) => setWastagePercent(e.target.value)} placeholder="e.g., 5 for supports/brims" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateMaterial}>Calculate</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(filamentCost || printsPerSpool || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Print Cost Estimation</CardDescription>
            </CardHeader>
            <CardContent>
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {filamentCost !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Filament Cost per Print</p>
                    <p className="text-2xl font-bold text-primary">${filamentCost}</p>
                  </div>
                  <CopyButton textToCopy={filamentCost} />
                </div>
              )}
              {printsPerSpool !== null && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Prints per Spool (approx.)</p>
                  <p className="font-semibold">{printsPerSpool}</p>
                </div>
              )}
            </CardContent>
             <CardFooter>
                <p className="text-xs text-muted-foreground">
                    Object weight should include any supports, skirts, or brims if not accounted for in wastage.
                </p>
             </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ThreeDPrintingMaterialCalculator.tsx ======
==================================================

// ====== START OF FILE: ThreeDShapeSurfaceAreaCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.03 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Box } from "lucide-react";

type Shape3D = 'cube' | 'cuboid' | 'cylinder' | 'sphere' | 'cone' | 'pyramid_square_base';

export default function ThreeDShapeSurfaceAreaCalculator() {
  const [shape, setShape] = useState<Shape3D>('cuboid');
  // Dimensions (generic names, labels will change based on shape)
  const [dim1, setDim1] = useState<string>(''); // e.g., length, side, radius
  const [dim2, setDim2] = useState<string>(''); // e.g., width, height
  const [dim3, setDim3] = useState<string>(''); // e.g., height (for cuboid), slant height (for cone/pyramid)

  const [surfaceArea, setSurfaceArea] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateSurfaceArea = () => {
    setError(null);
    setSurfaceArea(null);
    const d1 = parseFloat(dim1);
    const d2 = parseFloat(dim2);
    const d3 = parseFloat(dim3);
    let area: number | null = null;

    try {
      switch (shape) {
        case 'cube': // d1 = side
          if (isNaN(d1) || d1 <= 0) throw new Error("Side length must be positive.");
          area = 6 * d1 * d1;
          break;
        case 'cuboid': // d1=length, d2=width, d3=height
          if (isNaN(d1) || d1 <= 0 || isNaN(d2) || d2 <= 0 || isNaN(d3) || d3 <= 0) throw new Error("Length, width, and height must be positive.");
          area = 2 * (d1*d2 + d1*d3 + d2*d3);
          break;
        case 'cylinder': // d1=radius, d2=height
          if (isNaN(d1) || d1 <= 0 || isNaN(d2) || d2 <= 0) throw new Error("Radius and height must be positive.");
          area = 2 * Math.PI * d1 * (d1 + d2); // 2πr(r+h)
          break;
        case 'sphere': // d1=radius
          if (isNaN(d1) || d1 <= 0) throw new Error("Radius must be positive.");
          area = 4 * Math.PI * d1 * d1;
          break;
        case 'cone': // d1=radius, d2=slant height (L)
          if (isNaN(d1) || d1 <= 0 || isNaN(d2) || d2 <= 0) throw new Error("Radius and slant height must be positive.");
          area = Math.PI * d1 * (d1 + d2); // πr(r+L)
          break;
        case 'pyramid_square_base': // d1=base side, d2=slant height of triangular face
            if (isNaN(d1) || d1 <= 0 || isNaN(d2) || d2 <= 0) throw new Error("Base side and slant height must be positive.");
            area = (d1 * d1) + (2 * d1 * d2); // Base Area + 4 * (0.5 * base * slant height)
            break;
        default: throw new Error("Invalid shape selected.");
      }
      if (area !== null && !isNaN(area) && isFinite(area)) {
        setSurfaceArea(area.toFixed(3));
      } else {
        throw new Error("Calculation resulted in an invalid number.");
      }
    } catch (e: any) { setError(e.message); }
  };

  const resetForm = () => {
    setDim1(''); setDim2(''); setDim3('');
    setSurfaceArea(null); setError(null);
  };

  const renderShapeInputs = () => {
    switch(shape) {
      case 'cube': return <div><Label htmlFor="dim1SA">Side Length</Label><Input id="dim1SA" type="number" value={dim1} onChange={e=>setDim1(e.target.value)} /></div>;
      case 'cuboid': return <><Label>Dimensions</Label><div className="grid grid-cols-3 gap-2"><Input type="number" value={dim1} onChange={e=>setDim1(e.target.value)} placeholder="Length"/><Input type="number" value={dim2} onChange={e=>setDim2(e.target.value)} placeholder="Width"/><Input type="number" value={dim3} onChange={e=>setDim3(e.target.value)} placeholder="Height"/></div></>;
      case 'cylinder': return <><Label>Dimensions</Label><div className="grid grid-cols-2 gap-2"><Input type="number" value={dim1} onChange={e=>setDim1(e.target.value)} placeholder="Radius"/><Input type="number" value={dim2} onChange={e=>setDim2(e.target.value)} placeholder="Height"/></div></>;
      case 'sphere': return <div><Label htmlFor="dim1SASphere">Radius</Label><Input id="dim1SASphere" type="number" value={dim1} onChange={e=>setDim1(e.target.value)} /></div>;
      case 'cone': return <><Label>Dimensions</Label><div className="grid grid-cols-2 gap-2"><Input type="number" value={dim1} onChange={e=>setDim1(e.target.value)} placeholder="Radius"/><Input type="number" value={dim2} onChange={e=>setDim2(e.target.value)} placeholder="Slant Height (L)"/></div></>;
      case 'pyramid_square_base': return <><Label>Dimensions</Label><div className="grid grid-cols-2 gap-2"><Input type="number" value={dim1} onChange={e=>setDim1(e.target.value)} placeholder="Base Side"/><Input type="number" value={dim2} onChange={e=>setDim2(e.target.value)} placeholder="Slant Height (face)"/></div></>;
      default: return null;
    }
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Surface Area Calculator</AlertTitle><AlertDescription>Calculate surface area of various 3D shapes. Ensure all dimensions use the same unit.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Select shape and enter dimensions.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="shapeSA">Shape</Label><Select value={shape} onValueChange={(v:Shape3D)=>{setShape(v);resetForm();}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                <SelectItem value="cube">Cube</SelectItem><SelectItem value="cuboid">Cuboid (Rect. Prism)</SelectItem><SelectItem value="cylinder">Cylinder</SelectItem>
                <SelectItem value="sphere">Sphere</SelectItem><SelectItem value="cone">Cone</SelectItem><SelectItem value="pyramid_square_base">Pyramid (Square Base)</SelectItem>
            </SelectContent></Select></div>
            {renderShapeInputs()}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateSurfaceArea}>Calculate Area</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(surfaceArea || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Surface Area</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {surfaceArea && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Surface Area</p><p className="text-2xl font-bold text-primary">{surfaceArea} units²</p></div><CopyButton textToCopy={surfaceArea} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ThreeDShapeSurfaceAreaCalculator.tsx ======
==================================================

// ====== START OF FILE: ThreeDShapeVolumeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.76 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Cuboid } from "lucide-react";

type Shape3DVolume = 'cube' | 'cuboid' | 'cylinder' | 'sphere' | 'cone' | 'pyramid_square_base';

export default function ThreeDShapeVolumeCalculator() {
  const [shape, setShape] = useState<Shape3DVolume>('cuboid');
  // Dimensions (generic names, labels will change based on shape)
  const [dim1, setDim1] = useState<string>(''); // e.g., length, side, radius
  const [dim2, setDim2] = useState<string>(''); // e.g., width, height
  const [dim3, setDim3] = useState<string>(''); // e.g., height (cuboid/pyramid), not used for all

  const [volume, setVolume] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateVolume = () => {
    setError(null); setVolume(null);
    const d1 = parseFloat(dim1); const d2 = parseFloat(dim2); const d3 = parseFloat(dim3);
    let vol: number | null = null;

    try {
      switch (shape) {
        case 'cube': // d1 = side
          if (isNaN(d1) || d1 <= 0) throw new Error("Side length must be positive.");
          vol = d1 * d1 * d1;
          break;
        case 'cuboid': // d1=length, d2=width, d3=height
          if (isNaN(d1)||d1<=0||isNaN(d2)||d2<=0||isNaN(d3)||d3<=0) throw new Error("L, W, H must be positive.");
          vol = d1 * d2 * d3;
          break;
        case 'cylinder': // d1=radius, d2=height
          if (isNaN(d1)||d1<=0||isNaN(d2)||d2<=0) throw new Error("Radius and height must be positive.");
          vol = Math.PI * d1 * d1 * d2;
          break;
        case 'sphere': // d1=radius
          if (isNaN(d1)||d1<=0) throw new Error("Radius must be positive.");
          vol = (4/3) * Math.PI * Math.pow(d1, 3);
          break;
        case 'cone': // d1=radius, d2=height
          if (isNaN(d1)||d1<=0||isNaN(d2)||d2<=0) throw new Error("Radius and height must be positive.");
          vol = (1/3) * Math.PI * d1 * d1 * d2;
          break;
        case 'pyramid_square_base': // d1=base side, d2=height (perpendicular)
            if (isNaN(d1)||d1<=0||isNaN(d2)||d2<=0) throw new Error("Base side and height must be positive.");
            vol = (1/3) * (d1 * d1) * d2; // (1/3) * BaseArea * Height
            break;
        default: throw new Error("Invalid shape.");
      }
      if (vol !== null && !isNaN(vol) && isFinite(vol)) {
        setVolume(vol.toFixed(3));
      } else {
        throw new Error("Calculation resulted in an invalid number.");
      }
    } catch (e:any) { setError(e.message); }
  };
  
  const resetForm = () => {
    setDim1(''); setDim2(''); setDim3('');
    setVolume(null); setError(null);
  };

  const renderShapeInputsVol = () => {
    switch(shape) {
      case 'cube': return <div><Label htmlFor="dim1VolCube">Side Length</Label><Input id="dim1VolCube" type="number" value={dim1} onChange={e=>setDim1(e.target.value)}/></div>;
      case 'cuboid': return <><Label>Dimensions</Label><div className="grid grid-cols-3 gap-2"><Input type="number" value={dim1} onChange={e=>setDim1(e.target.value)} placeholder="Length"/><Input type="number" value={dim2} onChange={e=>setDim2(e.target.value)} placeholder="Width"/><Input type="number" value={dim3} onChange={e=>setDim3(e.target.value)} placeholder="Height"/></div></>;
      case 'cylinder': return <><Label>Dimensions</Label><div className="grid grid-cols-2 gap-2"><Input type="number" value={dim1} onChange={e=>setDim1(e.target.value)} placeholder="Radius"/><Input type="number" value={dim2} onChange={e=>setDim2(e.target.value)} placeholder="Height"/></div></>;
      case 'sphere': return <div><Label htmlFor="dim1VolSphere">Radius</Label><Input id="dim1VolSphere" type="number" value={dim1} onChange={e=>setDim1(e.target.value)}/></div>;
      case 'cone': return <><Label>Dimensions</Label><div className="grid grid-cols-2 gap-2"><Input type="number" value={dim1} onChange={e=>setDim1(e.target.value)} placeholder="Base Radius"/><Input type="number" value={dim2} onChange={e=>setDim2(e.target.value)} placeholder="Height"/></div></>;
      case 'pyramid_square_base': return <><Label>Dimensions</Label><div className="grid grid-cols-2 gap-2"><Input type="number" value={dim1} onChange={e=>setDim1(e.target.value)} placeholder="Base Side"/><Input type="number" value={dim2} onChange={e=>setDim2(e.target.value)} placeholder="Height"/></div></>;
      default: return null;
    }
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Volume Calculator</AlertTitle><AlertDescription>Calculate volume of various 3D shapes. Ensure all dimensions use the same unit.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Select shape and enter dimensions.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="shapeVol">Shape</Label><Select value={shape} onValueChange={(v:Shape3DVolume)=>{setShape(v);resetForm();}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                <SelectItem value="cube">Cube</SelectItem><SelectItem value="cuboid">Cuboid</SelectItem><SelectItem value="cylinder">Cylinder</SelectItem>
                <SelectItem value="sphere">Sphere</SelectItem><SelectItem value="cone">Cone</SelectItem><SelectItem value="pyramid_square_base">Pyramid (Sq. Base)</SelectItem>
            </SelectContent></Select></div>
            {renderShapeInputsVol()}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateVolume}>Calculate Volume</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(volume || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Volume</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {volume && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Volume</p><p className="text-2xl font-bold text-primary">{volume} units³</p></div><CopyButton textToCopy={volume}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ThreeDShapeVolumeCalculator.tsx ======
==================================================

// ====== START OF FILE: TileCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.34 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Grid } from "lucide-react";

type UnitSystemTile = 'imperial' | 'metric'; // imperial (inches/feet), metric (cm/meters)

export default function TileCalculator() {
  const [units, setUnits] = useState<UnitSystemTile>('imperial');
  // Area dimensions
  const [areaLength, setAreaLength] = useState<string>('');
  const [areaWidth, setAreaWidth] = useState<string>('');
  // Tile dimensions
  const [tileLength, setTileLength] = useState<string>('');
  const [tileWidth, setTileWidth] = useState<string>('');
  const [groutWidth, setGroutWidth] = useState<string>('0.125'); // Default 1/8 inch or approx 3mm
  const [wastage, setWastage] = useState<string>('10'); // %

  const [numTiles, setNumTiles] = useState<string | null>(null);
  const [totalAreaToCover, setTotalAreaToCover] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTiles = () => {
    setError(null); setNumTiles(null); setTotalAreaToCover(null);
    let aL = parseFloat(areaLength);
    let aW = parseFloat(areaWidth);
    let tL = parseFloat(tileLength);
    let tW = parseFloat(tileWidth);
    let gW = parseFloat(groutWidth) || 0;
    const wasteFactor = 1 + (parseFloat(wastage) / 100);

    if (isNaN(aL) || aL <=0 || isNaN(aW) || aW <=0 || isNaN(tL) || tL <=0 || isNaN(tW) || tW <=0 || isNaN(gW) || gW <0 || isNaN(wasteFactor-1) || (wasteFactor-1) <0) {
      setError("Please enter valid positive numbers for all dimensions. Grout/Wastage can be zero.");
      return;
    }

    // Convert all to a base unit (e.g., inches for imperial, cm for metric) to avoid mixing.
    // For imperial, area in ft, tiles in inches. For metric, area in m, tiles in cm.
    let totalAreaCalc: number, tileAreaWithGrout: number;
    let areaUnitLabel = units === 'imperial' ? 'sq ft' : 'sq m';

    if (units === 'imperial') { // Area L/W in feet, Tile L/W/Grout in inches
      totalAreaCalc = aL * aW; // sq ft
      const effTileL_in = tL + gW;
      const effTileW_in = tW + gW;
      tileAreaWithGrout = (effTileL_in * effTileW_in) / 144; // Convert tile area to sq ft
    } else { // Metric: Area L/W in meters, Tile L/W/Grout in cm
      totalAreaCalc = aL * aW; // sq m
      const effTileL_m = (tL + gW) / 100;
      const effTileW_m = (tW + gW) / 100;
      tileAreaWithGrout = effTileL_m * effTileW_m; // tile area in sq m
    }
    
    if (tileAreaWithGrout <= 0) { setError("Effective tile area (with grout) is zero or negative."); return; }

    const tilesNeededRaw = totalAreaCalc / tileAreaWithGrout;
    const tilesWithWastage = Math.ceil(tilesNeededRaw * wasteFactor);
    
    setTotalAreaToCover(`${totalAreaCalc.toFixed(2)} ${areaUnitLabel}`);
    setNumTiles(tilesWithWastage.toString());
  };

  const resetForm = () => {
    setAreaLength(''); setAreaWidth(''); setTileLength(''); setTileWidth(''); setGroutWidth(units === 'imperial' ? '0.125' : '0.3'); setWastage('10');
    setNumTiles(null); setTotalAreaToCover(null); setError(null);
  };
  
  // Update default grout width when units change
  useState(() => { setGroutWidth(units === 'imperial' ? '0.125' : '0.3'); }, [units]);

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Tile Calculator</AlertTitle><AlertDescription>Estimate the number of tiles needed for your project. Includes grout and wastage considerations.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter area and tile dimensions.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="unitSystemTile">Unit System</Label><Select value={units} onValueChange={(v:UnitSystemTile)=>{setUnits(v); resetForm();}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Imperial (Area in Feet, Tiles/Grout in Inches)</SelectItem><SelectItem value="metric">Metric (Area in Meters, Tiles/Grout in CM)</SelectItem></SelectContent></Select></div>
            <p className="text-sm font-medium text-muted-foreground">Area Dimensions:</p>
            <div className="grid grid-cols-2 gap-2">
              <div><Label htmlFor="areaLTile">Length ({units==='imperial'?'ft':'m'})</Label><Input id="areaLTile" type="number" value={areaLength} onChange={e=>setAreaLength(e.target.value)}/></div>
              <div><Label htmlFor="areaWTile">Width ({units==='imperial'?'ft':'m'})</Label><Input id="areaWTile" type="number" value={areaWidth} onChange={e=>setAreaWidth(e.target.value)}/></div>
            </div>
            <p className="text-sm font-medium text-muted-foreground">Tile & Grout Dimensions:</p>
            <div className="grid grid-cols-3 gap-2">
              <div><Label htmlFor="tileLTile">Tile Length ({units==='imperial'?'in':'cm'})</Label><Input id="tileLTile" type="number" value={tileLength} onChange={e=>setTileLength(e.target.value)}/></div>
              <div><Label htmlFor="tileWTile">Tile Width ({units==='imperial'?'in':'cm'})</Label><Input id="tileWTile" type="number" value={tileWidth} onChange={e=>setTileWidth(e.target.value)}/></div>
              <div><Label htmlFor="groutWTile">Grout Width ({units==='imperial'?'in':'cm'})</Label><Input id="groutWTile" type="number" value={groutWidth} onChange={e=>setGroutWidth(e.target.value)} placeholder={units==='imperial'?'0.125':'0.3'}/></div>
            </div>
            <div><Label htmlFor="wastageTile">Wastage (%)</Label><Input id="wastageTile" type="number" value={wastage} onChange={e=>setWastage(e.target.value)} placeholder="e.g., 10"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTiles}>Calculate Tiles</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(numTiles || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Tiles Needed</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalAreaToCover && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Area to Cover</p><p className="font-semibold">{totalAreaToCover}</p></div>)}
              {numTiles && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Number of Tiles (incl. wastage)</p><p className="text-2xl font-bold text-primary">{numTiles} tiles</p></div><CopyButton textToCopy={numTiles}/></div>)}
            </CardContent>
            <CardFooter><p className="text-xs text-muted-foreground">Always round up to the nearest whole tile/box when purchasing.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: TileCalculator.tsx ======
==================================================

// ====== START OF FILE: TimeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.71 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { PlusCircle, MinusCircle, Trash2 } from 'lucide-react';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Watch } from "lucide-react";

interface TimeEntry {
  id: string;
  hours: string;
  minutes: string;
  seconds: string;
  operation: 'add' | 'subtract';
}

export default function TimeCalculator() {
  const [timeEntries, setTimeEntries] = useState<TimeEntry[]>([
    { id: crypto.randomUUID(), hours: '', minutes: '', seconds: '', operation: 'add' },
  ]);
  const [baseTime, setBaseTime] = useState<TimeEntry>({id: 'base', hours: '0', minutes: '0', seconds: '0', operation: 'add'});

  const [resultTime, setResultTime] = useState<string | null>(null); // HH:MM:SS format
  const [totalSecondsResult, setTotalSecondsResult] = useState<number | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleBaseTimeChange = (field: 'hours' | 'minutes' | 'seconds', value: string) => {
    setBaseTime(prev => ({ ...prev, [field]: value }));
  };
  
  const handleTimeEntryChange = (id: string, field: 'hours' | 'minutes' | 'seconds' | 'operation', value: string) => {
    setTimeEntries(prev => prev.map(entry => 
      entry.id === id ? { ...entry, [field]: value } : entry
    ));
  };

  const addTimeEntry = () => {
    setTimeEntries(prev => [...prev, { id: crypto.randomUUID(), hours: '', minutes: '', seconds: '', operation: 'add' }]);
  };
  const removeTimeEntry = (id: string) => {
    if (timeEntries.length > 0) { // Allow removing up to an empty list if base time is used, or keep 1 if no base time
      setTimeEntries(prev => prev.filter(entry => entry.id !== id));
    }
  };
  
  const timeToSeconds = (h: string, m: string, s: string): number => {
    return (parseInt(h) || 0) * 3600 + (parseInt(m) || 0) * 60 + (parseInt(s) || 0);
  };

  const secondsToHMS = (totalSecs: number): string => {
    const sign = totalSecs < 0 ? "-" : "";
    const absSecs = Math.abs(totalSecs);
    const h = Math.floor(absSecs / 3600);
    const m = Math.floor((absSecs % 3600) / 60);
    const s = absSecs % 60;
    return `${sign}${String(h).padStart(2, '0')}:${String(m).padStart(2, '0')}:${String(s).padStart(2, '0')}`;
  };

  const calculateTotalTime = () => {
    setError(null); setResultTime(null); setTotalSecondsResult(null);
    let currentTotalSeconds = timeToSeconds(baseTime.hours, baseTime.minutes, baseTime.seconds);

    for (const entry of timeEntries) {
      if(entry.hours === '' && entry.minutes === '' && entry.seconds === '') continue; // Skip empty entries
      const entrySeconds = timeToSeconds(entry.hours, entry.minutes, entry.seconds);
      if (isNaN(entrySeconds)) { setError("Invalid time input in one of the entries."); return; }
      
      if (entry.operation === 'add') currentTotalSeconds += entrySeconds;
      else currentTotalSeconds -= entrySeconds;
    }
    
    setTotalSecondsResult(currentTotalSeconds);
    setResultTime(secondsToHMS(currentTotalSeconds));
  };

  const resetForm = () => {
    setBaseTime({id: 'base', hours: '0', minutes: '0', seconds: '0', operation: 'add'});
    setTimeEntries([{ id: crypto.randomUUID(), hours: '', minutes: '', seconds: '', operation: 'add' }]);
    setResultTime(null); setTotalSecondsResult(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Time Duration Calculator</AlertTitle><AlertDescription>Add or subtract multiple time durations (HH:MM:SS). Start from a base time (default 00:00:00) or just sum/subtract durations.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardDescription>Enter time durations to add or subtract.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label className="font-medium">Base Time (Optional Start Time)</Label>
              <div className="grid grid-cols-3 gap-2 mt-1">
                <Input type="number" value={baseTime.hours} onChange={e=>handleBaseTimeChange('hours',e.target.value)} placeholder="HH"/>
                <Input type="number" value={baseTime.minutes} onChange={e=>handleBaseTimeChange('minutes',e.target.value)} placeholder="MM"/>
                <Input type="number" value={baseTime.seconds} onChange={e=>handleBaseTimeChange('seconds',e.target.value)} placeholder="SS"/>
              </div>
            </div>
            <CardTitle className="font-headline text-lg border-t pt-4">Time Durations to Add/Subtract</CardTitle>
            <div className="space-y-3 max-h-[300px] overflow-y-auto pr-2">
              {timeEntries.map((entry, index) => (
                <div key={entry.id} className="flex items-center gap-2 p-2 border rounded-md">
                  <Select value={entry.operation} onValueChange={(v:'add'|'subtract') => handleTimeEntryChange(entry.id, 'operation', v)}>
                    <SelectTrigger className="w-[80px] h-9"><SelectValue/></SelectTrigger>
                    <SelectContent><SelectItem value="add"><PlusCircle className="inline h-4 w-4 mr-1"/>Add</SelectItem><SelectItem value="subtract"><MinusCircle className="inline h-4 w-4 mr-1"/>Sub</SelectItem></SelectContent>
                  </Select>
                  <Input type="number" value={entry.hours} onChange={e=>handleTimeEntryChange(entry.id,'hours',e.target.value)} placeholder="HH" className="h-9"/>
                  <Input type="number" value={entry.minutes} onChange={e=>handleTimeEntryChange(entry.id,'minutes',e.target.value)} placeholder="MM" className="h-9"/>
                  <Input type="number" value={entry.seconds} onChange={e=>handleTimeEntryChange(entry.id,'seconds',e.target.value)} placeholder="SS" className="h-9"/>
                  <Button variant="ghost" size="icon" onClick={()=>removeTimeEntry(entry.id)} disabled={timeEntries.length === 0 && baseTime.hours==='0' && baseTime.minutes==='0' && baseTime.seconds==='0'} className="h-9 w-9 shrink-0"><Trash2 className="h-4 w-4 text-destructive"/></Button>
                </div>
              ))}
            </div>
             <Button variant="outline" size="sm" onClick={addTimeEntry}><PlusCircle className="mr-2 h-4 w-4"/> Add Duration</Button>
          </CardContent>
          <CardFooter><Button onClick={calculateTotalTime} className="w-full md:w-auto">Calculate Total Time</Button></CardFooter>
        </Card>
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {resultTime && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Resulting Time</p><p className="text-2xl font-bold text-primary">{resultTime}</p></div><CopyButton textToCopy={resultTime}/></div>)}
            {totalSecondsResult !== null && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total in Seconds</p><p className="font-semibold">{totalSecondsResult.toLocaleString()} seconds</p></div>)}
          </CardContent>
           <CardFooter><Button variant="outline" onClick={resetForm} className="w-full">Reset All</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: TimeCalculator.tsx ======
==================================================

// ====== START OF FILE: TimeCardCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.91 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { PlusCircle, Trash2 } from 'lucide-react';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, ClipboardEdit } from "lucide-react";

interface DailyEntry {
  id: string;
  day: string;
  startTime: string; // HH:MM
  endTime: string;   // HH:MM
  breakMinutes: string; // Minutes
  dailyTotalHours: string | null;
}

const daysOfWeek = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];

export default function TimeCardCalculator() {
  const initialEntries = daysOfWeek.slice(0,5).map(day => ({ // Default to Mon-Fri
    id: crypto.randomUUID(), day, startTime: '', endTime: '', breakMinutes: '0', dailyTotalHours: null
  }));
  const [timeEntries, setTimeEntries] = useState<DailyEntry[]>(initialEntries);
  const [weekTotalHours, setWeekTotalHours] = useState<string | null>(null);
  const [weekDecimalHours, setWeekDecimalHours] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const parseTimeToMinutesSinceMidnight = (timeStr: string): number | null => {
    if (!timeStr) return 0; // Treat empty as 0 for easier calculation if one field is blank
    const parts = timeStr.split(':');
    if (parts.length !== 2) return null;
    const hours = parseInt(parts[0]);
    const minutes = parseInt(parts[1]);
    if (isNaN(hours) || hours < 0 || hours > 23 || isNaN(minutes) || minutes < 0 || minutes > 59) return null;
    return hours * 60 + minutes;
  };

  const formatMinutesToHM = (totalMinutes: number): string => {
    if (totalMinutes < 0) totalMinutes = 0; // Avoid negative display for daily total
    const hours = Math.floor(totalMinutes / 60);
    const minutes = totalMinutes % 60;
    return `${hours}h ${minutes}m`;
  };

  const handleEntryChange = (id: string, field: keyof Omit<DailyEntry, 'id'|'day'|'dailyTotalHours'>, value: string) => {
    setTimeEntries(prev => prev.map(entry => {
      if (entry.id === id) {
        const updatedEntry = { ...entry, [field]: value };
        // Auto-calculate daily total for this entry if start and end times are valid
        const startMins = parseTimeToMinutesSinceMidnight(updatedEntry.startTime);
        const endMins = parseTimeToMinutesSinceMidnight(updatedEntry.endTime);
        const breakMinsNum = parseInt(updatedEntry.breakMinutes) || 0;
        if (startMins !== null && endMins !== null && endMins >= startMins) {
          const duration = endMins - startMins - breakMinsNum;
          updatedEntry.dailyTotalHours = duration > 0 ? formatMinutesToHM(duration) : "0h 0m";
        } else if (startMins !== null && endMins !== null && endMins < startMins) { // Overnight logic
            const duration = (endMins + 24*60) - startMins - breakMinsNum;
            updatedEntry.dailyTotalHours = duration > 0 ? formatMinutesToHM(duration) : "0h 0m";
        }
         else {
          updatedEntry.dailyTotalHours = null;
        }
        return updatedEntry;
      }
      return entry;
    }));
    setWeekTotalHours(null); // Reset week total when individual entries change
    setWeekDecimalHours(null);
  };

  const calculateWeeklyTotal = () => {
    setError(null);
    let totalMinutesWeek = 0;
    for (const entry of timeEntries) {
      if (entry.startTime && entry.endTime) {
        const startMins = parseTimeToMinutesSinceMidnight(entry.startTime);
        const endMins = parseTimeToMinutesSinceMidnight(entry.endTime);
        const breakMinsNum = parseInt(entry.breakMinutes) || 0;
        if (startMins === null || endMins === null) {
          setError(`Invalid time format for ${entry.day}. Please use HH:MM.`); return;
        }
        let duration = endMins - startMins;
        if (duration < 0) duration += 24 * 60; // Overnight shift
        totalMinutesWeek += Math.max(0, duration - breakMinsNum);
      }
    }
    setWeekTotalHours(formatMinutesToHM(totalMinutesWeek));
    setWeekDecimalHours((totalMinutesWeek / 60).toFixed(2));
  };

  const addDayEntry = () => { // Simplified: adds a generic "Day X" if more than 7
    const dayName = timeEntries.length < daysOfWeek.length ? daysOfWeek[timeEntries.length] : `Day ${timeEntries.length + 1}`;
    setTimeEntries(prev => [...prev, { id: crypto.randomUUID(), day: dayName, startTime: '', endTime: '', breakMinutes: '0', dailyTotalHours: null }]);
  };
  const removeDayEntry = (id: string) => {
    if (timeEntries.length > 1) setTimeEntries(prev => prev.filter(entry => entry.id !== id));
  };
  
  const resetForm = () => {
    setTimeEntries(initialEntries);
    setWeekTotalHours(null); setWeekDecimalHours(null); setError(null);
  };


  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Time Card Calculator</AlertTitle><AlertDescription>Calculate total work hours for a week. Enter start time, end time, and break duration for each day. Use 24-hour format (HH:MM).</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader><CardDescription>Enter daily work hours.</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {timeEntries.map((entry) => (
              <div key={entry.id} className="grid grid-cols-[80px_1fr_1fr_1fr_auto_auto] gap-2 items-center p-2 border rounded-md">
                <Label className="font-medium text-sm self-center">{entry.day}</Label>
                <Input type="time" value={entry.startTime} onChange={e=>handleEntryChange(entry.id,'startTime',e.target.value)} aria-label={`${entry.day} Start Time`} className="h-9"/>
                <Input type="time" value={entry.endTime} onChange={e=>handleEntryChange(entry.id,'endTime',e.target.value)} aria-label={`${entry.day} End Time`} className="h-9"/>
                <Input type="number" value={entry.breakMinutes} onChange={e=>handleEntryChange(entry.id,'breakMinutes',e.target.value)} placeholder="Break (min)" aria-label={`${entry.day} Break Minutes`} className="h-9"/>
                <span className="text-xs text-muted-foreground w-[60px] text-right">{entry.dailyTotalHours || '-'}</span>
                <Button variant="ghost" size="icon" onClick={()=>removeDayEntry(entry.id)} disabled={timeEntries.length === 1} className="h-8 w-8"><Trash2 className="h-4 w-4 text-destructive"/></Button>
              </div>
            ))}
             <Button variant="outline" size="sm" onClick={addDayEntry}><PlusCircle className="mr-2 h-4 w-4"/> Add Day</Button>
          </CardContent>
          <CardFooter><Button onClick={calculateWeeklyTotal} className="w-full md:w-auto">Calculate Weekly Total</Button></CardFooter>
        </Card>
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Weekly Summary</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {weekTotalHours && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Total Weekly Hours</p><p className="text-2xl font-bold text-primary">{weekTotalHours}</p></div><CopyButton textToCopy={weekTotalHours}/></div>)}
            {weekDecimalHours && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total in Decimal Hours</p><p className="font-semibold">{weekDecimalHours} hours</p></div>)}
          </CardContent>
          <CardFooter><Button variant="outline" onClick={resetForm} className="w-full">Reset All</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: TimeCardCalculator.tsx ======
==================================================

// ====== START OF FILE: TimeDurationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.1 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Hourglass } from "lucide-react";

type InputTimeUnit = 'seconds' | 'minutes' | 'hours' | 'hhmmss';
type OutputFormat = 'total_seconds' | 'total_minutes' | 'total_hours' | 'hhmmss_format';

export default function TimeDurationConverter() {
  const [inputValue, setInputValue] = useState<string>('');
  const [inputUnit, setInputUnit] = useState<InputTimeUnit>('hhmmss');
  // For HHMMSS input specifically
  const [inputH, setInputH] = useState<string>('');
  const [inputM, setInputM] = useState<string>('');
  const [inputS, setInputS] = useState<string>('');

  const [results, setResults] = useState<Record<OutputFormat, string> | null>(null);
  const [error, setError] = useState<string | null>(null);

  const convertDuration = () => {
    setError(null); setResults(null);
    let totalSecondsInput: number;

    if (inputUnit === 'hhmmss') {
      const h = parseInt(inputH) || 0;
      const m = parseInt(inputM) || 0;
      const s = parseInt(inputS) || 0;
      if (h < 0 || m < 0 || m > 59 || s < 0 || s > 59) { setError("Invalid HH:MM:SS input. Minutes/Seconds must be 0-59."); return;}
      totalSecondsInput = h * 3600 + m * 60 + s;
    } else {
      const val = parseFloat(inputValue);
      if (isNaN(val) || val < 0) { setError("Input value must be a non-negative number."); return; }
      if (inputUnit === 'seconds') totalSecondsInput = val;
      else if (inputUnit === 'minutes') totalSecondsInput = val * 60;
      else totalSecondsInput = val * 3600; // hours
    }
    
    if(isNaN(totalSecondsInput)){ setError("Could not parse input time."); return;}

    const h_out = Math.floor(totalSecondsInput / 3600);
    const m_out = Math.floor((totalSecondsInput % 3600) / 60);
    const s_out = Math.round(totalSecondsInput % 60); // Round seconds for HHMMSS display

    setResults({
      total_seconds: totalSecondsInput.toFixed(0),
      total_minutes: (totalSecondsInput / 60).toFixed(2),
      total_hours: (totalSecondsInput / 3600).toFixed(3),
      hhmmss_format: `${String(h_out).padStart(2,'0')}:${String(m_out).padStart(2,'0')}:${String(s_out).padStart(2,'0')}`
    });
  };

  const resetForm = () => {
    setInputValue(''); setInputH(''); setInputM(''); setInputS('');
    setResults(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Time Duration Converter</AlertTitle><AlertDescription>Convert time durations between total seconds, minutes, hours, and HH:MM:SS format.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter duration to convert.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="inputUnitTDC">Input Unit</Label><Select value={inputUnit} onValueChange={(v:InputTimeUnit)=>{setInputUnit(v); setInputValue(''); setInputH(''); setInputM(''); setInputS('');}}>
                <SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                    <SelectItem value="hhmmss">HH:MM:SS Format</SelectItem><SelectItem value="seconds">Total Seconds</SelectItem>
                    <SelectItem value="minutes">Total Minutes</SelectItem><SelectItem value="hours">Total Hours</SelectItem>
                </SelectContent></Select>
            </div>
            {inputUnit === 'hhmmss' ? (
              <div><Label>Enter Time (HH:MM:SS)</Label><div className="grid grid-cols-3 gap-2">
                  <Input type="number" value={inputH} onChange={e=>setInputH(e.target.value)} placeholder="HH"/>
                  <Input type="number" value={inputM} onChange={e=>setInputM(e.target.value)} placeholder="MM"/>
                  <Input type="number" value={inputS} onChange={e=>setInputS(e.target.value)} placeholder="SS"/>
              </div></div>
            ) : (
              <div><Label htmlFor="inputValueTDC">Enter Duration Value</Label><Input id="inputValueTDC" type="number" value={inputValue} onChange={e=>setInputValue(e.target.value)} placeholder={`e.g., 3661 for seconds`}/></div>
            )}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={convertDuration}>Convert Duration</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(results || error) && (
          <Card>
            <CardHeader><CardDescription>Converted Durations</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {results?.hhmmss_format && (<div className="p-1 bg-primary/10 rounded-md text-sm">HH:MM:SS: <strong className="font-semibold text-primary">{results.hhmmss_format}</strong></div>)}
              {results?.total_hours && (<div className="p-1 bg-muted rounded-md text-sm">Total Hours: <strong className="font-semibold">{results.total_hours}</strong></div>)}
              {results?.total_minutes && (<div className="p-1 bg-muted rounded-md text-sm">Total Minutes: <strong className="font-semibold">{results.total_minutes}</strong></div>)}
              {results?.total_seconds && (<div className="p-1 bg-muted rounded-md text-sm">Total Seconds: <strong className="font-semibold">{results.total_seconds}</strong></div>)}
              {results && <CopyButton textToCopy={Object.entries(results).map(([key,val]) => `${key.replace('_',' ')}: ${val}`).join('\n')} buttonText="Copy All" className="w-full mt-2"/>}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: TimeDurationCalculator.tsx ======
==================================================

// ====== START OF FILE: TimeToRetirementCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.22 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CalendarClock, TargetIcon } from "lucide-react";

export default function TimeToRetirementCalculator() {
  const [currentSavings, setCurrentSavings] = useState<string>('0');
  const [annualContribution, setAnnualContribution] = useState<string>('');
  const [targetNestEgg, setTargetNestEgg] = useState<string>('');
  const [annualReturnRate, setAnnualReturnRate] = useState<string>(''); // Nominal %
  const [annualInflationRate, setAnnualInflationRate] = useState<string>('2.5'); // %

  const [yearsToRetirement, setYearsToRetirement] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTimeToGoal = () => {
    setError(null); setYearsToRetirement(null);
    const P0 = parseFloat(currentSavings);
    const PMT = parseFloat(annualContribution);
    const FV_target_nominal = parseFloat(targetNestEgg); // Target is nominal future value
    const r_nominal = parseFloat(annualReturnRate) / 100;
    const i_inflation = parseFloat(annualInflationRate) / 100;

    if (isNaN(P0)||P0<0||isNaN(PMT)||PMT<0||isNaN(FV_target_nominal)||FV_target_nominal<=P0||isNaN(r_nominal)||r_nominal<0||isNaN(i_inflation)||i_inflation<0) {
      setError("Valid inputs required: Savings(>=0), Contribution(>=0), Target Nest Egg(>Current Savings), Return Rate(>=0), Inflation(>=0)."); return;
    }
    if (PMT === 0 && P0 * Math.pow(1+r_nominal, 50) < FV_target_nominal && r_nominal <= i_inflation && P0 < FV_target_nominal) { // Heuristic for stagnation
        setError("With zero contributions and low/negative real returns, target may not be reachable or will take extremely long."); return;
    }


    // Iterative approach to find years (simplified)
    // For each year, calculate FV = (PreviousFV + PMT) * (1 + r_nominal)
    // This is a simple loop rather than solving complex log formula for 't' with periodic payments.
    let years = 0;
    let currentVal = P0;
    const MAX_YEARS = 70; // Safety break for loop

    while (currentVal < FV_target_nominal && years < MAX_YEARS) {
      currentVal = (currentVal + PMT) * (1 + r_nominal); // Contribution at start of year, then growth
      years++;
    }

    if (years >= MAX_YEARS && currentVal < FV_target_nominal) {
      setYearsToRetirement(`Over ${MAX_YEARS} years (target may be too high or contributions/returns too low)`);
    } else if (currentVal >= FV_target_nominal) {
      // Refine to find fractional year (more complex, for simplicity show integer years)
      setYearsToRetirement(years.toString());
    } else {
      setError("Could not determine time to reach target with current inputs.");
    }
  };

  const resetForm = () => {
    setCurrentSavings('0'); setAnnualContribution(''); setTargetNestEgg('');
    setAnnualReturnRate(''); setAnnualInflationRate('2.5');
    setYearsToRetirement(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Time to Retirement Goal Calculator</AlertTitle><AlertDescription>Estimate how many years it might take to reach your target retirement nest egg. Assumes annual contributions and nominal returns/inflation. This is a simplified model.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your financial details and goals.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="currentSavingsTTR">Current Retirement Savings ($)</Label><Input id="currentSavingsTTR" type="number" value={currentSavings} onChange={e=>setCurrentSavings(e.target.value)} placeholder="e.g., 50000"/></div>
            <div><Label htmlFor="annualContribTTR">Annual Contribution ($)</Label><Input id="annualContribTTR" type="number" value={annualContribution} onChange={e=>setAnnualContribution(e.target.value)} placeholder="e.g., 10000"/></div>
            <div><Label htmlFor="targetNestEggTTR">Target Nest Egg ($) (Nominal Future Value)</Label><Input id="targetNestEggTTR" type="number" value={targetNestEgg} onChange={e=>setTargetNestEgg(e.target.value)} placeholder="e.g., 1000000"/></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="returnRateTTR">Avg. Annual Return (%)</Label><Input id="returnRateTTR" type="number" value={annualReturnRate} onChange={e=>setAnnualReturnRate(e.target.value)} placeholder="e.g., 7"/></div>
              <div><Label htmlFor="inflationRateTTR">Avg. Annual Inflation (%)</Label><Input id="inflationRateTTR" type="number" value={annualInflationRate} onChange={e=>setAnnualInflationRate(e.target.value)} placeholder="e.g., 2.5"/></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTimeToGoal}>Calculate Time</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(yearsToRetirement || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Time to Reach Goal</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {yearsToRetirement && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Years to Reach Target Nest Egg</p><p className="text-2xl font-bold text-primary">{yearsToRetirement} years</p></div><CopyButton textToCopy={yearsToRetirement}/></div>)}
              <AlertDescription className="text-xs pt-2">This is a simplified estimate. Real returns and inflation vary. Assumes contributions are made at the start of each year.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
    

// ====== END OF FILE: TimeToRetirementCalculator.tsx ======
==================================================

// ====== START OF FILE: TimeToRetirementSavingsGoal.tsx ======
// File converted from TSX to TXT
// Original size: 6.22 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CalendarClock, TargetIcon } from "lucide-react";

export default function TimeToRetirementSavingsGoal() {
  const [currentSavings, setCurrentSavings] = useState<string>('0');
  const [annualContribution, setAnnualContribution] = useState<string>('');
  const [targetNestEgg, setTargetNestEgg] = useState<string>('');
  const [annualReturnRate, setAnnualReturnRate] = useState<string>(''); // Nominal %
  const [annualInflationRate, setAnnualInflationRate] = useState<string>('2.5'); // %

  const [yearsToRetirement, setYearsToRetirement] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTimeToGoal = () => {
    setError(null); setYearsToRetirement(null);
    const P0 = parseFloat(currentSavings);
    const PMT = parseFloat(annualContribution);
    const FV_target_nominal = parseFloat(targetNestEgg); // Target is nominal future value
    const r_nominal = parseFloat(annualReturnRate) / 100;
    const i_inflation = parseFloat(annualInflationRate) / 100;

    if (isNaN(P0)||P0<0||isNaN(PMT)||PMT<0||isNaN(FV_target_nominal)||FV_target_nominal<=P0||isNaN(r_nominal)||r_nominal<0||isNaN(i_inflation)||i_inflation<0) {
      setError("Valid inputs required: Savings(>=0), Contribution(>=0), Target Nest Egg(>Current Savings), Return Rate(>=0), Inflation(>=0)."); return;
    }
    if (PMT === 0 && P0 * Math.pow(1+r_nominal, 50) < FV_target_nominal && r_nominal <= i_inflation && P0 < FV_target_nominal) { // Heuristic for stagnation
        setError("With zero contributions and low/negative real returns, target may not be reachable or will take extremely long."); return;
    }


    // Iterative approach to find years (simplified)
    // For each year, calculate FV = (PreviousFV + PMT) * (1 + r_nominal)
    // This is a simple loop rather than solving complex log formula for 't' with periodic payments.
    let years = 0;
    let currentVal = P0;
    const MAX_YEARS = 70; // Safety break for loop

    while (currentVal < FV_target_nominal && years < MAX_YEARS) {
      currentVal = (currentVal + PMT) * (1 + r_nominal); // Contribution at start of year, then growth
      years++;
    }

    if (years >= MAX_YEARS && currentVal < FV_target_nominal) {
      setYearsToRetirement(`Over ${MAX_YEARS} years (target may be too high or contributions/returns too low)`);
    } else if (currentVal >= FV_target_nominal) {
      // Refine to find fractional year (more complex, for simplicity show integer years)
      setYearsToRetirement(years.toString());
    } else {
      setError("Could not determine time to reach target with current inputs.");
    }
  };

  const resetForm = () => {
    setCurrentSavings('0'); setAnnualContribution(''); setTargetNestEgg('');
    setAnnualReturnRate(''); setAnnualInflationRate('2.5');
    setYearsToRetirement(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Time to Retirement Goal Calculator</AlertTitle><AlertDescription>Estimate how many years it might take to reach your target retirement nest egg. Assumes annual contributions and nominal returns/inflation. This is a simplified model.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your financial details and goals.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="currentSavingsTTR">Current Retirement Savings ($)</Label><Input id="currentSavingsTTR" type="number" value={currentSavings} onChange={e=>setCurrentSavings(e.target.value)} placeholder="e.g., 50000"/></div>
            <div><Label htmlFor="annualContribTTR">Annual Contribution ($)</Label><Input id="annualContribTTR" type="number" value={annualContribution} onChange={e=>setAnnualContribution(e.target.value)} placeholder="e.g., 10000"/></div>
            <div><Label htmlFor="targetNestEggTTR">Target Nest Egg ($) (Nominal Future Value)</Label><Input id="targetNestEggTTR" type="number" value={targetNestEgg} onChange={e=>setTargetNestEgg(e.target.value)} placeholder="e.g., 1000000"/></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="returnRateTTR">Avg. Annual Return (%)</Label><Input id="returnRateTTR" type="number" value={annualReturnRate} onChange={e=>setAnnualReturnRate(e.target.value)} placeholder="e.g., 7"/></div>
              <div><Label htmlFor="inflationRateTTR">Avg. Annual Inflation (%)</Label><Input id="inflationRateTTR" type="number" value={annualInflationRate} onChange={e=>setAnnualInflationRate(e.target.value)} placeholder="e.g., 2.5"/></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTimeToGoal}>Calculate Time</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(yearsToRetirement || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Time to Reach Goal</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {yearsToRetirement && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Years to Reach Target Nest Egg</p><p className="text-2xl font-bold text-primary">{yearsToRetirement} years</p></div><CopyButton textToCopy={yearsToRetirement}/></div>)}
              <AlertDescription className="text-xs pt-2">This is a simplified estimate. Real returns and inflation vary. Assumes contributions are made at the start of each year.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: TimeToRetirementSavingsGoal.tsx ======
==================================================

// ====== START OF FILE: TimeUnitConverter.tsx ======
// File converted from TSX to TXT
// Original size: 4.8 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Hourglass } from "lucide-react";

type TimeUnit = 'seconds' | 'minutes' | 'hours' | 'days';

const toSecondsFactors: Record<TimeUnit, number> = {
  seconds: 1,
  minutes: 60,
  hours: 3600,
  days: 86400,
};

const fromSecondsFactors: Record<TimeUnit, number> = {
  seconds: 1,
  minutes: 1 / 60,
  hours: 1 / 3600,
  days: 1 / 86400,
};

const unitLabels: Record<TimeUnit, string> = {
    seconds: "Seconds",
    minutes: "Minutes",
    hours: "Hours",
    days: "Days"
}

export default function TimeUnitConverter() {
  const [inputValue, setInputValue] = useState<string>('1');
  const [fromUnit, setFromUnit] = useState<TimeUnit>('hours');
  const [toUnit, setToUnit] = useState<TimeUnit>('minutes');
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const convertTime = () => {
    setError(null);
    setResult(null);
    const val = parseFloat(inputValue);
    if (isNaN(val) || val < 0) {
      setError('Input value must be a non-negative number.');
      return;
    }
    if (fromUnit === toUnit) {
      setResult(val.toPrecision(5));
      return;
    }

    const valueInSeconds = val * toSecondsFactors[fromUnit];
    const convertedValue = valueInSeconds * fromSecondsFactors[toUnit];
    setResult(convertedValue.toPrecision(5));
  };

  const resetForm = () => {
    setInputValue('1');
    setFromUnit('hours');
    setToUnit('minutes');
    setResult(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Time Unit Converter</AlertTitle><AlertDescription>Convert between various time units like seconds, minutes, hours, and days.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter value and select units to convert.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="inputValueTime">Value</Label>
              <Input id="inputValueTime" type="number" value={inputValue} onChange={e => setInputValue(e.target.value)} placeholder="e.g., 60" />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="fromUnitTime">From</Label>
                <Select value={fromUnit} onValueChange={(v: TimeUnit) => setFromUnit(v)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>{Object.entries(unitLabels).map(([key, label]) => <SelectItem key={`from-${key}`} value={key}>{label}</SelectItem>)}</SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="toUnitTime">To</Label>
                <Select value={toUnit} onValueChange={(v: TimeUnit) => setToUnit(v)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>{Object.entries(unitLabels).map(([key, label]) => <SelectItem key={`to-${key}`} value={key}>{label}</SelectItem>)}</SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={convertTime}>Convert</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Conversion Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">{inputValue} {unitLabels[fromUnit]} is</p>
                    <p className="text-2xl font-bold text-primary">{result} {unitLabels[toUnit]}</p>
                  </div>
                  <CopyButton textToCopy={`${result} ${unitLabels[toUnit]}`} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: TimeUnitConverter.tsx ======
==================================================

// ====== START OF FILE: TimeZoneCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.52 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Globe2, ArrowRightLeft } from "lucide-react";
import { format, toZonedTime, toDate } from 'date-fns-tz'; // Corrected import: using toDate

// Get a list of common time zones. Intl.supportedValuesOf('timeZone') is good.
const timeZoneIdentifiers = Intl.supportedValuesOf('timeZone').filter(tz => 
  tz.includes('/') && !tz.startsWith('Etc/') && !tz.startsWith('SystemV/') && !tz.startsWith('US/') && !tz.startsWith('Canada/') && !tz.startsWith('Brazil/') && !tz.startsWith('Mexico/') && !tz.startsWith('Chile/') // Basic filtering
).sort();


export default function TimeZoneCalculator() {
  const [fromTimeZone, setFromTimeZone] = useState<string>(Intl.DateTimeFormat().resolvedOptions().timeZone);
  const [toTimeZone, setToTimeZone] = useState<string>('America/New_York');
  const [inputTime, setInputTime] = useState<string>(format(new Date(), "HH:mm")); // Default to current time
  const [inputDate, setInputDate] = useState<string>(format(new Date(), "yyyy-MM-dd")); // Default to current date

  const [convertedTime, setConvertedTime] = useState<string | null>(null);
  const [currentTimeInFromZone, setCurrentTimeInFromZone] = useState<string>('');
  const [currentTimeInToZone, setCurrentTimeInToZone] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  const getCurrentTimes = () => {
    try {
      const now = new Date();
      setCurrentTimeInFromZone(format(toZonedTime(now, fromTimeZone), "PPP HH:mm:ss zzz", { timeZone: fromTimeZone }));
      setCurrentTimeInToZone(format(toZonedTime(now, toTimeZone), "PPP HH:mm:ss zzz", { timeZone: toTimeZone }));
    } catch (e: any) {
      setError("Failed to get current times: " + e.message);
    }
  };
  
  useEffect(() => {
    getCurrentTimes();
    const intervalId = setInterval(getCurrentTimes, 1000); // Update every second
    return () => clearInterval(intervalId);
  }, [fromTimeZone, toTimeZone]);


  const convertTime = () => {
    setError(null);
    setConvertedTime(null);
    try {
      if (!inputDate || !inputTime) {
        throw new Error("Please select a valid date and time.");
      }
      const dateTimeString = `${inputDate}T${inputTime}:00`;
      // Use toDate with the fromTimeZone option to interpret the string correctly
      const dateInFromZoneAsUtcEquivalent = toDate(dateTimeString, { timeZone: fromTimeZone });
      // Now convert this Date object (which is UTC internally) to the target time zone
      const dateInToZone = toZonedTime(dateInFromZoneAsUtcEquivalent, toTimeZone); 
      setConvertedTime(format(dateInToZone, "PPP HH:mm:ss zzz", { timeZone: toTimeZone }));
    } catch (e: any) {
      setError("Error converting time: " + e.message + ". Ensure date/time are valid for the 'From' timezone.");
    }
  };

  const resetForm = () => {
    setInputTime(format(new Date(), "HH:mm"));
    setInputDate(format(new Date(), "yyyy-MM-dd"));
    setConvertedTime(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Time Zone Converter</AlertTitle><AlertDescription>Convert time between different time zones or see current times. Uses your system's timezone database via JavaScript Intl API.</AlertDescription></Alert>
      
      <Card>
        <CardHeader><CardDescription>Current Times</CardDescription></CardHeader>
        <CardContent className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div className="p-3 bg-muted rounded-md">
            <Label className="text-sm text-muted-foreground block mb-1">Current time in {fromTimeZone}</Label>
            <p className="font-semibold text-lg">{currentTimeInFromZone || "Loading..."}</p>
          </div>
           <div className="p-3 bg-muted rounded-md">
            <Label className="text-sm text-muted-foreground block mb-1">Current time in {toTimeZone}</Label>
            <p className="font-semibold text-lg">{currentTimeInToZone || "Loading..."}</p>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader><CardDescription>Convert Specific Time</CardDescription></CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div><Label htmlFor="inputDateTZ">Date</Label><Input id="inputDateTZ" type="date" value={inputDate} onChange={e=>setInputDate(e.target.value)}/></div>
            <div><Label htmlFor="inputTimeTZ">Time (HH:MM)</Label><Input id="inputTimeTZ" type="time" value={inputTime} onChange={e=>setInputTime(e.target.value)}/></div>
          </div>
          <div className="grid grid-cols-1 sm:grid-cols-[1fr_auto_1fr] gap-2 items-center">
            <div><Label htmlFor="fromTimeZone">From Time Zone</Label><Select value={fromTimeZone} onValueChange={setFromTimeZone}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent className="max-h-60">{timeZoneIdentifiers.map(tz=><SelectItem key={tz} value={tz}>{tz}</SelectItem>)}</SelectContent></Select></div>
            <ArrowRightLeft className="h-5 w-5 text-muted-foreground self-end mb-2 hidden sm:block"/>
            <div><Label htmlFor="toTimeZone">To Time Zone</Label><Select value={toTimeZone} onValueChange={setToTimeZone}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent className="max-h-60">{timeZoneIdentifiers.map(tz=><SelectItem key={tz} value={tz}>{tz}</SelectItem>)}</SelectContent></Select></div>
          </div>
           {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
          {convertedTime && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Converted Time</p><p className="text-xl font-bold text-primary">{convertedTime}</p></div><CopyButton textToCopy={convertedTime}/></div>)}
        </CardContent>
        <CardFooter className="flex justify-between"><Button onClick={convertTime}>Convert Time</Button><Button variant="outline" onClick={resetForm}>Reset Converter</Button></CardFooter>
      </Card>
    </div>
  );
}


// ====== END OF FILE: TimeZoneCalculator.tsx ======
==================================================

// ====== START OF FILE: TipCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.71 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Slider } from "@/components/ui/slider";
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, HandCoins } from "lucide-react";

export default function TipCalculator() {
  const [billAmount, setBillAmount] = useState<string>('');
  const [tipPercentage, setTipPercentage] = useState<number>(18);
  const [numPeople, setNumPeople] = useState<string>('1');

  const [tipAmount, setTipAmount] = useState<string | null>(null);
  const [totalAmount, setTotalAmount] = useState<string | null>(null);
  const [amountPerPerson, setAmountPerPerson] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTip = () => {
    setError(null); setTipAmount(null); setTotalAmount(null); setAmountPerPerson(null);
    const bill = parseFloat(billAmount);
    const people = parseInt(numPeople);

    if (isNaN(bill) || bill < 0 || isNaN(tipPercentage) || tipPercentage < 0 || isNaN(people) || people <= 0) {
      setError('Please enter valid numbers: Bill Amount (>=0), Tip % (>=0), and Number of People (>0).');
      return;
    }

    const tip = bill * (tipPercentage / 100);
    const total = bill + tip;
    const perPerson = total / people;

    setTipAmount(tip.toFixed(2));
    setTotalAmount(total.toFixed(2));
    setAmountPerPerson(perPerson.toFixed(2));
  };

  const resetForm = () => {
    setBillAmount(''); setTipPercentage(18); setNumPeople('1');
    setTipAmount(null); setTotalAmount(null); setAmountPerPerson(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Tip & Bill Split Calculator</AlertTitle><AlertDescription>Calculate tip amount, total bill, and amount per person if splitting with a group.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter bill details.</CardDescription></CardHeader>
          <CardContent className="space-y-6">
            <div><Label htmlFor="billAmountTip">Bill Amount ($)</Label><Input id="billAmountTip" type="number" value={billAmount} onChange={e=>setBillAmount(e.target.value)} placeholder="e.g., 120.50"/></div>
            <div><Label htmlFor="tipPercentSlider">Tip Percentage: {tipPercentage}%</Label><Slider id="tipPercentSlider" defaultValue={[tipPercentage]} value={[tipPercentage]} min={0} max={50} step={1} onValueChange={(val)=>setTipPercentage(val[0])}/></div>
            <div className="flex gap-2"><Button variant="outline" size="sm" onClick={()=>setTipPercentage(15)}>15%</Button><Button variant="outline" size="sm" onClick={()=>setTipPercentage(18)}>18%</Button><Button variant="outline" size="sm" onClick={()=>setTipPercentage(20)}>20%</Button><Button variant="outline" size="sm" onClick={()=>setTipPercentage(25)}>25%</Button></div>
            <div><Label htmlFor="numPeopleTip">Split Between How Many People?</Label><Input id="numPeopleTip" type="number" value={numPeople} onChange={e=>setNumPeople(e.target.value)} placeholder="e.g., 4" min="1"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTip}>Calculate Split</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(totalAmount || error) && (
          <Card>
            <CardHeader><CardDescription>Gratuity Calculation</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {tipAmount && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Tip Amount</p><p className="font-semibold">${tipAmount}</p></div>)}
              {totalAmount && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Total Bill (with Tip)</p><p className="font-semibold">${totalAmount}</p></div>)}
              {amountPerPerson && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Amount Per Person</p><p className="text-2xl font-bold text-primary">${amountPerPerson}</p></div><CopyButton textToCopy={amountPerPerson} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: TipCalculator.tsx ======
==================================================

// ====== START OF FILE: TireSizeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.3 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CircleDot } from "lucide-react";

interface TireInfo {
  diameterInches: number;
  diameterCm: number;
  sidewallHeightInches: number;
  sidewallHeightCm: number;
  circumferenceInches: number;
  circumferenceCm: number;
  revsPerMile: number;
  revsPerKm: number;
}

export default function TireSizeCalculator() {
  const [tireCodeP, setTireCodeP] = useState<string>(''); // e.g., 225
  const [tireCodeAR, setTireCodeAR] = useState<string>(''); // e.g., 75
  const [tireCodeD, setTireCodeD] = useState<string>(''); // e.g., 16

  const [tireInfo, setTireInfo] = useState<TireInfo | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTireSize = () => {
    setError(null);
    setTireInfo(null);

    const P = parseInt(tireCodeP); // Width in mm
    const AR = parseInt(tireCodeAR); // Aspect Ratio (%)
    const D = parseInt(tireCodeD); // Rim Diameter in inches

    if (isNaN(P) || P <= 0 || isNaN(AR) || AR <= 0 || isNaN(D) || D <= 0) {
      setError('Please enter valid positive numbers for tire width, aspect ratio, and rim diameter.');
      return;
    }

    const sidewallHeightMm = P * (AR / 100);
    const sidewallHeightInches = sidewallHeightMm / 25.4;
    const sidewallHeightCm = sidewallHeightMm / 10;

    const diameterInches = (sidewallHeightInches * 2) + D;
    const diameterCm = diameterInches * 2.54;
    
    const circumferenceInches = diameterInches * Math.PI;
    const circumferenceCm = diameterCm * Math.PI;

    const revsPerMile = 63360 / circumferenceInches; // Inches in a mile / circumference in inches
    const revsPerKm = 100000 / circumferenceCm;   // Cm in a km / circumference in cm

    setTireInfo({
      diameterInches, diameterCm,
      sidewallHeightInches, sidewallHeightCm,
      circumferenceInches, circumferenceCm,
      revsPerMile, revsPerKm
    });
  };
  
  const resetForm = () => {
    setTireCodeP(''); setTireCodeAR(''); setTireCodeD('');
    setTireInfo(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Tire Size Calculator</AlertTitle><AlertDescription>Understand tire dimensions from codes like P225/75R16. Calculates diameter, sidewall height, circumference, and revs per mile/km.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter tire code (e.g., P<span className="font-bold text-primary">225</span>/<span className="font-bold text-primary">75</span>R<span className="font-bold text-primary">16</span>).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-3 gap-2 items-end">
              <div><Label htmlFor="tireP">Width (mm)</Label><Input id="tireP" type="number" value={tireCodeP} onChange={e=>setTireCodeP(e.target.value)} placeholder="225"/></div>
              <div className="self-center text-2xl text-muted-foreground">/</div>
              <div><Label htmlFor="tireAR">Aspect Ratio (%)</Label><Input id="tireAR" type="number" value={tireCodeAR} onChange={e=>setTireCodeAR(e.target.value)} placeholder="75"/></div>
            </div>
             <div><Label htmlFor="tireD">Rim Diameter (in)</Label><Input id="tireD" type="number" value={tireCodeD} onChange={e=>setTireCodeD(e.target.value)} placeholder="16"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTireSize}>Calculate Tire Size</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {tireInfo || error ? (
          <Card>
            <CardHeader><CardDescription>Tire Dimensions</CardDescription></CardHeader>
            <CardContent className="space-y-2 text-sm">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {tireInfo && (
                <>
                  <div className="p-1 bg-muted rounded-md">Overall Diameter: <strong className="font-semibold">{tireInfo.diameterInches.toFixed(2)} in / {tireInfo.diameterCm.toFixed(2)} cm</strong></div>
                  <div className="p-1 bg-muted rounded-md">Sidewall Height: <strong className="font-semibold">{tireInfo.sidewallHeightInches.toFixed(2)} in / {tireInfo.sidewallHeightCm.toFixed(2)} cm</strong></div>
                  <div className="p-1 bg-muted rounded-md">Circumference: <strong className="font-semibold">{tireInfo.circumferenceInches.toFixed(2)} in / {tireInfo.circumferenceCm.toFixed(2)} cm</strong></div>
                  <div className="p-1 bg-muted rounded-md">Revolutions: <strong className="font-semibold">{tireInfo.revsPerMile.toFixed(0)}/mile | {tireInfo.revsPerKm.toFixed(0)}/km</strong></div>
                </>
              )}
            </CardContent>
          </Card>
        ) : null}
      </div>
    </div>
  );
}


// ====== END OF FILE: TireSizeCalculator.tsx ======
==================================================

// ====== START OF FILE: TireSizeCalculatorAndComparison.tsx ======
// File converted from TSX to TXT
// Original size: 5.33 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CircleDot } from "lucide-react";

interface TireInfo {
  diameterInches: number;
  diameterCm: number;
  sidewallHeightInches: number;
  sidewallHeightCm: number;
  circumferenceInches: number;
  circumferenceCm: number;
  revsPerMile: number;
  revsPerKm: number;
}

export default function TireSizeCalculatorAndComparison() {
  const [tireCodeP, setTireCodeP] = useState<string>(''); // e.g., 225
  const [tireCodeAR, setTireCodeAR] = useState<string>(''); // e.g., 75
  const [tireCodeD, setTireCodeD] = useState<string>(''); // e.g., 16

  const [tireInfo, setTireInfo] = useState<TireInfo | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTireSize = () => {
    setError(null);
    setTireInfo(null);

    const P = parseInt(tireCodeP); // Width in mm
    const AR = parseInt(tireCodeAR); // Aspect Ratio (%)
    const D = parseInt(tireCodeD); // Rim Diameter in inches

    if (isNaN(P) || P <= 0 || isNaN(AR) || AR <= 0 || isNaN(D) || D <= 0) {
      setError('Please enter valid positive numbers for tire width, aspect ratio, and rim diameter.');
      return;
    }

    const sidewallHeightMm = P * (AR / 100);
    const sidewallHeightInches = sidewallHeightMm / 25.4;
    const sidewallHeightCm = sidewallHeightMm / 10;

    const diameterInches = (sidewallHeightInches * 2) + D;
    const diameterCm = diameterInches * 2.54;
    
    const circumferenceInches = diameterInches * Math.PI;
    const circumferenceCm = diameterCm * Math.PI;

    const revsPerMile = 63360 / circumferenceInches; // Inches in a mile / circumference in inches
    const revsPerKm = 100000 / circumferenceCm;   // Cm in a km / circumference in cm

    setTireInfo({
      diameterInches, diameterCm,
      sidewallHeightInches, sidewallHeightCm,
      circumferenceInches, circumferenceCm,
      revsPerMile, revsPerKm
    });
  };
  
  const resetForm = () => {
    setTireCodeP(''); setTireCodeAR(''); setTireCodeD('');
    setTireInfo(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Tire Size Calculator & Comparison</AlertTitle><AlertDescription>Understand tire dimensions from codes like P225/75R16. Calculates diameter, sidewall height, circumference, and revs per mile/km.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter tire code (e.g., P<span className="font-bold text-primary">225</span>/<span className="font-bold text-primary">75</span>R<span className="font-bold text-primary">16</span>).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-3 gap-2 items-end">
              <div><Label htmlFor="tireP">Width (mm)</Label><Input id="tireP" type="number" value={tireCodeP} onChange={e=>setTireCodeP(e.target.value)} placeholder="225"/></div>
              <div className="self-center text-2xl text-muted-foreground">/</div>
              <div><Label htmlFor="tireAR">Aspect Ratio (%)</Label><Input id="tireAR" type="number" value={tireCodeAR} onChange={e=>setTireCodeAR(e.target.value)} placeholder="75"/></div>
            </div>
             <div><Label htmlFor="tireD">Rim Diameter (in)</Label><Input id="tireD" type="number" value={tireCodeD} onChange={e=>setTireCodeD(e.target.value)} placeholder="16"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTireSize}>Calculate Tire Size</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {tireInfo || error ? (
          <Card>
            <CardHeader><CardDescription>Tire Dimensions</CardDescription></CardHeader>
            <CardContent className="space-y-2 text-sm">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {tireInfo && (
                <>
                  <div className="p-1 bg-muted rounded-md">Overall Diameter: <strong className="font-semibold">{tireInfo.diameterInches.toFixed(2)} in / {tireInfo.diameterCm.toFixed(2)} cm</strong></div>
                  <div className="p-1 bg-muted rounded-md">Sidewall Height: <strong className="font-semibold">{tireInfo.sidewallHeightInches.toFixed(2)} in / {tireInfo.sidewallHeightCm.toFixed(2)} cm</strong></div>
                  <div className="p-1 bg-muted rounded-md">Circumference: <strong className="font-semibold">{tireInfo.circumferenceInches.toFixed(2)} in / {tireInfo.circumferenceCm.toFixed(2)} cm</strong></div>
                  <div className="p-1 bg-muted rounded-md">Revolutions: <strong className="font-semibold">{tireInfo.revsPerMile.toFixed(0)}/mile | {tireInfo.revsPerKm.toFixed(0)}/km</strong></div>
                </>
              )}
            </CardContent>
          </Card>
        ) : null}
      </div>
    </div>
  );
}


// ====== END OF FILE: TireSizeCalculatorAndComparison.tsx ======
==================================================

// ====== START OF FILE: TorqueCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.71 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, GitCommitVertical } from "lucide-react";

// Torque (τ) = Force (F) * Radius (r) (perpendicular distance from axis of rotation to line of action of force)
// Or Torque (τ) = Power (P) / Angular Velocity (ω)
// For this, let's do T = F * r.

type ForceUnit = 'N' | 'lbf'; // Newtons, Pound-force
type DistanceUnitTorque = 'm' | 'ft' | 'in' | 'cm'; // For radius/lever arm
type TorqueUnit = 'Nm' | 'lbfft' | 'lbfin'; // Newton-meters, Pound-feet, Pound-inches

export default function TorqueCalculator() {
  const [force, setForce] = useState<string>('');
  const [radius, setRadius] = useState<string>(''); // Lever arm distance
  const [forceUnit, setForceUnit] = useState<ForceUnit>('N');
  const [radiusUnit, setRadiusUnit] = useState<DistanceUnitTorque>('m');
  const [resultTorqueUnit, setResultTorqueUnit] = useState<TorqueUnit>('Nm');

  const [torqueResult, setTorqueResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Conversion factors to base: Newtons and Meters
  const forceToN: Record<ForceUnit, number> = { N: 1, lbf: 4.44822 };
  const distToM: Record<DistanceUnitTorque, number> = { m: 1, ft: 0.3048, 'in': 0.0254, cm: 0.01 };
  const torqueFromNm: Record<TorqueUnit, { factor: number, label: string }> = {
    Nm: { factor: 1, label: 'N·m' },
    lbfft: { factor: 0.73756, label: 'lb·ft' }, // 1 Nm = 0.73756 lb·ft
    lbfin: { factor: 8.85075, label: 'lb·in' }, // 1 Nm = 8.85075 lb·in
  };


  const calculateTorque = () => {
    setError(null);
    setTorqueResult(null);
    const F = parseFloat(force);
    const r = parseFloat(radius);

    if (isNaN(F) || F < 0 || isNaN(r) || r <= 0) {
      setError('Please enter valid force (>=0) and radius/lever arm (>0).');
      return;
    }

    const forceInN = F * forceToN[forceUnit];
    const radiusInM = r * distToM[radiusUnit];
    const torqueInNm = forceInN * radiusInM; // Base torque in N·m
    const finalTorque = torqueInNm * torqueFromNm[resultTorqueUnit].factor;

    setTorqueResult(`${finalTorque.toFixed(3)} ${torqueFromNm[resultTorqueUnit].label}`);
  };

  const resetForm = () => {
    setForce(''); setRadius('');
    setTorqueResult(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Torque Calculator (τ = F × r)</AlertTitle><AlertDescription>Calculate torque given force and lever arm radius/distance. Supports various units.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter force and radius/distance.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="forceTorque">Force (F)</Label><Input id="forceTorque" type="number" value={force} onChange={e=>setForce(e.target.value)}/></div>
              <div><Label htmlFor="forceUnitTorque">Unit</Label><Select value={forceUnit} onValueChange={(v:ForceUnit)=>setForceUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.keys(forceToN).map(u=><SelectItem key={u} value={u}>{u}</SelectItem>)}</SelectContent></Select></div>
            </div>
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="radiusTorque">Radius / Lever Arm (r)</Label><Input id="radiusTorque" type="number" value={radius} onChange={e=>setRadius(e.target.value)}/></div>
              <div><Label htmlFor="radiusUnitTorque">Unit</Label><Select value={radiusUnit} onValueChange={(v:DistanceUnitTorque)=>setRadiusUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.keys(distToM).map(u=><SelectItem key={u} value={u}>{u}</SelectItem>)}</SelectContent></Select></div>
            </div>
            <div><Label htmlFor="resultTorqueUnit">Desired Torque Unit</Label><Select value={resultTorqueUnit} onValueChange={(v:TorqueUnit)=>setResultTorqueUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.entries(torqueFromNm).map(([key,val])=><SelectItem key={key} value={key}>{val.label}</SelectItem>)}</SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTorque}>Calculate Torque</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(torqueResult || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Torque</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {torqueResult && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Torque (τ)</p><p className="text-2xl font-bold text-primary">{torqueResult}</p></div><CopyButton textToCopy={torqueResult}/></div>)}
            </CardContent>
             <CardFooter><p className="text-xs text-muted-foreground">Assumes force is perpendicular to the lever arm.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: TorqueCalculator.tsx ======
==================================================

// ====== START OF FILE: TorqueConverter.tsx ======
// File converted from TSX to TXT
// Original size: 4.73 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, RefreshCw } from "lucide-react";

type TorqueUnit = 'Nm' | 'lbfft' | 'lbfin';

const toNmFactors: Record<TorqueUnit, number> = {
  Nm: 1,
  lbfft: 1.35582,
  lbfin: 0.112985,
};

const unitLabels: Record<TorqueUnit, string> = {
    Nm: "Newton-meters (N·m)",
    lbfft: "Pound-feet (lb·ft)",
    lbfin: "Pound-inches (lb·in)"
};

export default function TorqueConverter() {
  const [inputValue, setInputValue] = useState<string>('1');
  const [fromUnit, setFromUnit] = useState<TorqueUnit>('Nm');
  const [toUnit, setToUnit] = useState<TorqueUnit>('lbfft');
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const convertTorque = () => {
    setError(null);
    setResult(null);
    const val = parseFloat(inputValue);
    if (isNaN(val) || val < 0) {
      setError('Input value must be a non-negative number.');
      return;
    }
    if (fromUnit === toUnit) {
      setResult(val.toFixed(4));
      return;
    }

    const valueInNm = val * toNmFactors[fromUnit];
    const convertedValue = valueInNm / toNmFactors[toUnit]; // Simplified conversion logic
    setResult(convertedValue.toFixed(4));
  };

  const resetForm = () => {
    setInputValue('1');
    setFromUnit('Nm');
    setToUnit('lbfft');
    setResult(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>Torque Unit Converter</AlertTitle><AlertDescription>Convert between different units of torque, such as Newton-meters (N·m), pound-feet (lb·ft), and pound-inches (lb·in).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter value and select units to convert.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="inputValueTorque">Value</Label>
              <Input id="inputValueTorque" type="number" value={inputValue} onChange={e => setInputValue(e.target.value)} placeholder="e.g., 100" />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="fromUnitTorque">From</Label>
                <Select value={fromUnit} onValueChange={(v: TorqueUnit) => setFromUnit(v)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>{Object.entries(unitLabels).map(([key, label]) => <SelectItem key={`from-${key}`} value={key}>{label}</SelectItem>)}</SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="toUnitTorque">To</Label>
                <Select value={toUnit} onValueChange={(v: TorqueUnit) => setToUnit(v)}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>{Object.entries(unitLabels).map(([key, label]) => <SelectItem key={`to-${key}`} value={key}>{label}</SelectItem>)}</SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={convertTorque}>Convert</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Conversion Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">{inputValue} {unitLabels[fromUnit]} is approx.</p>
                    <p className="text-2xl font-bold text-primary">{result} {unitLabels[toUnit]}</p>
                  </div>
                  <CopyButton textToCopy={`${result} ${unitLabels[toUnit]}`} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: TorqueConverter.tsx ======
==================================================

// ====== START OF FILE: TriangleCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 9.13 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Triangle as TriangleIcon } from "lucide-react";

type SolveMode = 'SSS' | 'SAS' | 'ASA' | 'AAS'; // S=Side, A=Angle

export default function TriangleCalculator() {
  const [mode, setMode] = useState<SolveMode>('SSS');
  // Inputs - might enable/disable based on mode
  const [sideA, setSideA] = useState<string>('');
  const [sideB, setSideB] = useState<string>('');
  const [sideC, setSideC] = useState<string>('');
  const [angleA_deg, setAngleA_deg] = useState<string>(''); // Degrees
  const [angleB_deg, setAngleB_deg] = useState<string>(''); // Degrees
  const [angleC_deg, setAngleC_deg] = useState<string>(''); // Degrees

  const [results, setResults] = useState<Record<string, string | number> | null>(null);
  const [error, setError] = useState<string | null>(null);

  const toRad = (deg: number) => deg * Math.PI / 180;
  const toDeg = (rad: number) => rad * 180 / Math.PI;

  const calculateTriangle = () => {
    setError(null); setResults(null);
    const a = parseFloat(sideA); const b = parseFloat(sideB); const c = parseFloat(sideC);
    const A_d = parseFloat(angleA_deg); const B_d = parseFloat(angleB_deg); const C_d = parseFloat(angleC_deg);
    let res: Record<string, number> = {}; // Store results: a,b,c,A,B,C,area,perimeter

    try {
      if (mode === 'SSS') {
        if (isNaN(a)||a<=0||isNaN(b)||b<=0||isNaN(c)||c<=0) throw new Error("Sides a, b, c must be positive.");
        if (a+b<=c || a+c<=b || b+c<=a) throw new Error("Triangle inequality violated (sum of two sides must be > third).");
        res.a=a; res.b=b; res.c=c;
        res.A = toDeg(Math.acos((b*b + c*c - a*a) / (2*b*c)));
        res.B = toDeg(Math.acos((a*a + c*c - b*b) / (2*a*c)));
        res.C = 180 - res.A - res.B;
      } else if (mode === 'SAS') { // side b, angle A, side c
        if (isNaN(b)||b<=0||isNaN(A_d)||A_d<=0||A_d>=180||isNaN(c)||c<=0) throw new Error("Side b, Angle A (0-180), Side c must be valid & positive.");
        res.b=b; res.A=A_d; res.c=c;
        const A_r = toRad(A_d);
        res.a = Math.sqrt(b*b + c*c - 2*b*c*Math.cos(A_r));
        if (res.a === 0) throw new Error("Calculated side 'a' is zero, invalid triangle.");
        res.B = toDeg(Math.acos((res.a*res.a + c*c - b*b) / (2*res.a*c)));
        res.C = 180 - res.A - res.B;
      } else if (mode === 'ASA') { // angle A, side c, angle B
        if (isNaN(A_d)||A_d<=0||isNaN(c)||c<=0||isNaN(B_d)||B_d<=0) throw new Error("Angle A, Side c, Angle B must be valid & positive.");
        if (A_d + B_d >= 180) throw new Error("Sum of Angle A and Angle B must be less than 180°.");
        res.A=A_d; res.c=c; res.B=B_d;
        res.C = 180 - A_d - B_d;
        const C_r = toRad(res.C); const A_r = toRad(A_d); const B_r = toRad(B_d);
        if (Math.sin(C_r) === 0) throw new Error("Angle C cannot be 0 or 180 for valid triangle (sin(C) is zero).");
        res.a = (c * Math.sin(A_r)) / Math.sin(C_r);
        res.b = (c * Math.sin(B_r)) / Math.sin(C_r);
      } else { // AAS - angle A, angle B, side a
        if (isNaN(A_d)||A_d<=0||isNaN(B_d)||B_d<=0||isNaN(a)||a<=0) throw new Error("Angle A, Angle B, Side a must be valid & positive.");
        if (A_d + B_d >= 180) throw new Error("Sum of Angle A and Angle B must be less than 180°.");
        res.A=A_d; res.B=B_d; res.a=a;
        res.C = 180 - A_d - B_d;
        const C_r = toRad(res.C); const A_r = toRad(A_d); const B_r = toRad(B_d);
        if (Math.sin(A_r) === 0) throw new Error("Angle A cannot be 0 or 180 for valid triangle (sin(A) is zero).");
        res.b = (a * Math.sin(B_r)) / Math.sin(A_r);
        res.c = (a * Math.sin(C_r)) / Math.sin(A_r);
      }
      
      // Calculate Area (Heron's if SSS, 0.5*b*c*sinA if SAS, etc.) & Perimeter
      const s = (res.a + res.b + res.c) / 2; // Semi-perimeter
      res.area = Math.sqrt(s * (s-res.a) * (s-res.b) * (s-res.c));
      res.perimeter = res.a + res.b + res.c;

      // Format results
      const formattedRes: Record<string, string> = {};
      for (const key in res) {
        formattedRes[key] = (res[key] as number).toFixed(3);
      }
      setResults(formattedRes);

    } catch (e:any) { setError(e.message); }
  };
  
  const resetForm = () => {
    setSideA(''); setSideB(''); setSideC(''); setAngleA_deg(''); setAngleB_deg(''); setAngleC_deg('');
    setResults(null); setError(null);
  };

  const renderInputsByMode = () => {
    const commonInputClass = "w-full";
    const disabledInputClass = "bg-muted/50 cursor-not-allowed";
    return <>
      <div><Label htmlFor="sideAIn">Side a</Label><Input id="sideAIn" type="number" value={sideA} onChange={e=>setSideA(e.target.value)} disabled={!(mode==='SSS' || mode==='AAS')} className={cn(commonInputClass, (mode!=='SSS' && mode!=='AAS') && disabledInputClass)}/></div>
      <div><Label htmlFor="sideBIn">Side b</Label><Input id="sideBIn" type="number" value={sideB} onChange={e=>setSideB(e.target.value)} disabled={!(mode==='SSS' || mode==='SAS')} className={cn(commonInputClass, (mode!=='SSS' && mode!=='SAS') && disabledInputClass)}/></div>
      <div><Label htmlFor="sideCIn">Side c</Label><Input id="sideCIn" type="number" value={sideC} onChange={e=>setSideC(e.target.value)} disabled={!(mode==='SSS' || mode==='SAS' || mode==='ASA')} className={cn(commonInputClass, (mode!=='SSS' && mode!=='SAS' && mode!=='ASA') && disabledInputClass)}/></div>
      <div><Label htmlFor="angleAIn">Angle A (°)</Label><Input id="angleAIn" type="number" value={angleA_deg} onChange={e=>setAngleA_deg(e.target.value)} disabled={!(mode==='SAS' || mode==='ASA' || mode==='AAS')} className={cn(commonInputClass, (mode!=='SAS' && mode!=='ASA' && mode!=='AAS') && disabledInputClass)}/></div>
      <div><Label htmlFor="angleBIn">Angle B (°)</Label><Input id="angleBIn" type="number" value={angleB_deg} onChange={e=>setAngleB_deg(e.target.value)} disabled={!(mode==='ASA' || mode==='AAS')} className={cn(commonInputClass, (mode!=='ASA' && mode!=='AAS') && disabledInputClass)}/></div>
      {/* Angle C is always derived, no input for it typically */}
    </>;
  }

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>General Triangle Solver</AlertTitle><AlertDescription>Solve for unknown sides and angles of any triangle given sufficient information (SSS, SAS, ASA, AAS). Provides area and perimeter.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="md:col-span-2">
          <CardHeader><CardDescription>Select method and enter known values.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="solveModeTriangle">Given Information (Solve Mode):</Label><Select value={mode} onValueChange={(v:SolveMode)=>{setMode(v);resetForm();}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                <SelectItem value="SSS">SSS (Three Sides)</SelectItem><SelectItem value="SAS">SAS (Two Sides, Included Angle)</SelectItem>
                <SelectItem value="ASA">ASA (Two Angles, Included Side)</SelectItem><SelectItem value="AAS">AAS (Two Angles, Non-included Side)</SelectItem>
            </SelectContent></Select></div>
            <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">{renderInputsByMode()}</div>
             <p className="text-xs text-muted-foreground">
                {mode === 'SSS' && "Enter lengths of sides a, b, and c."}
                {mode === 'SAS' && "Enter side b, Angle A (opposite a), and side c."}
                {mode === 'ASA' && "Enter Angle A, side c (between A&B), and Angle B."}
                {mode === 'AAS' && "Enter Angle A, Angle B, and side a (opposite A)."}
             </p>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTriangle}>Solve Triangle</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {results || error ? (
          <Card className="md:col-span-1">
            <CardHeader><CardDescription>Triangle Properties</CardDescription></CardHeader>
            <CardContent className="space-y-1 text-sm">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {results && Object.entries(results).map(([key, val]) => (
                <div key={key} className="flex justify-between p-0.5 bg-muted/50 rounded-sm"><span>{key.toUpperCase()}:</span><span className="font-semibold">{key === 'area' ? `${val} units²` : key === 'perimeter' ? `${val} units` : ['A','B','C'].includes(key) ? `${val}°` : `${val} units`}</span></div>
              ))}
            </CardContent>
          </Card>
        ) : null}
      </div>
    </div>
  );
}


// ====== END OF FILE: TriangleCalculator.tsx ======
==================================================

// ====== START OF FILE: TriangleSolver.tsx ======
// File converted from TSX to TXT
// Original size: 9.14 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Triangle } from "lucide-react";
import { cn } from '@/lib/utils';

type SolveMode = 'SSS' | 'SAS' | 'ASA' | 'AAS'; // S=Side, A=Angle

export default function TriangleSolver() {
  const [mode, setMode] = useState<SolveMode>('SSS');
  // Inputs - might enable/disable based on mode
  const [sideA, setSideA] = useState<string>('');
  const [sideB, setSideB] = useState<string>('');
  const [sideC, setSideC] = useState<string>('');
  const [angleA_deg, setAngleA_deg] = useState<string>(''); // Degrees
  const [angleB_deg, setAngleB_deg] = useState<string>(''); // Degrees
  const [angleC_deg, setAngleC_deg] = useState<string>(''); // Degrees

  const [results, setResults] = useState<Record<string, string | number> | null>(null);
  const [error, setError] = useState<string | null>(null);

  const toRad = (deg: number) => deg * Math.PI / 180;
  const toDeg = (rad: number) => rad * 180 / Math.PI;

  const solveTriangle = () => {
    setError(null); setResults(null);
    const a = parseFloat(sideA); const b = parseFloat(sideB); const c = parseFloat(sideC);
    const A_d = parseFloat(angleA_deg); const B_d = parseFloat(angleB_deg); const C_d = parseFloat(angleC_deg);
    let res: Record<string, number> = {}; // Store results: a,b,c,A,B,C,area,perimeter

    try {
      if (mode === 'SSS') {
        if (isNaN(a)||a<=0||isNaN(b)||b<=0||isNaN(c)||c<=0) throw new Error("Sides a, b, c must be positive.");
        if (a+b<=c || a+c<=b || b+c<=a) throw new Error("Triangle inequality violated (sum of two sides must be > third).");
        res.a=a; res.b=b; res.c=c;
        res.A = toDeg(Math.acos((b*b + c*c - a*a) / (2*b*c)));
        res.B = toDeg(Math.acos((a*a + c*c - b*b) / (2*a*c)));
        res.C = 180 - res.A - res.B;
      } else if (mode === 'SAS') { // side b, angle A, side c
        if (isNaN(b)||b<=0||isNaN(A_d)||A_d<=0||A_d>=180||isNaN(c)||c<=0) throw new Error("Side b, Angle A (0-180), Side c must be valid & positive.");
        res.b=b; res.A=A_d; res.c=c;
        const A_r = toRad(A_d);
        res.a = Math.sqrt(b*b + c*c - 2*b*c*Math.cos(A_r));
        if (res.a === 0) throw new Error("Calculated side 'a' is zero, invalid triangle.");
        res.B = toDeg(Math.acos((res.a*res.a + c*c - b*b) / (2*res.a*c)));
        res.C = 180 - res.A - res.B;
      } else if (mode === 'ASA') { // angle A, side c, angle B
        if (isNaN(A_d)||A_d<=0||isNaN(c)||c<=0||isNaN(B_d)||B_d<=0) throw new Error("Angle A, Side c, Angle B must be valid & positive.");
        if (A_d + B_d >= 180) throw new Error("Sum of Angle A and Angle B must be less than 180°.");
        res.A=A_d; res.c=c; res.B=B_d;
        res.C = 180 - A_d - B_d;
        const C_r = toRad(res.C); const A_r = toRad(A_d); const B_r = toRad(B_d);
        if (Math.sin(C_r) === 0) throw new Error("Angle C cannot be 0 or 180 for valid triangle (sin(C) is zero).");
        res.a = (c * Math.sin(A_r)) / Math.sin(C_r);
        res.b = (c * Math.sin(B_r)) / Math.sin(C_r);
      } else { // AAS - angle A, angle B, side a
        if (isNaN(A_d)||A_d<=0||isNaN(B_d)||B_d<=0||isNaN(a)||a<=0) throw new Error("Angle A, Angle B, Side a must be valid & positive.");
        if (A_d + B_d >= 180) throw new Error("Sum of Angle A and Angle B must be less than 180°.");
        res.A=A_d; res.B=B_d; res.a=a;
        res.C = 180 - A_d - B_d;
        const C_r = toRad(res.C); const A_r = toRad(A_d); const B_r = toRad(B_d);
        if (Math.sin(A_r) === 0) throw new Error("Angle A cannot be 0 or 180 for valid triangle (sin(A) is zero).");
        res.b = (a * Math.sin(B_r)) / Math.sin(A_r);
        res.c = (a * Math.sin(C_r)) / Math.sin(A_r);
      }
      
      // Calculate Area (Heron's if SSS, 0.5*b*c*sinA if SAS, etc.) & Perimeter
      const s = (res.a + res.b + res.c) / 2; // Semi-perimeter
      res.area = Math.sqrt(s * (s-res.a) * (s-res.b) * (s-res.c));
      res.perimeter = res.a + res.b + res.c;

      // Format results
      const formattedRes: Record<string, string> = {};
      for (const key in res) {
        formattedRes[key] = (res[key] as number).toFixed(3);
      }
      setResults(formattedRes);

    } catch (e:any) { setError(e.message); }
  };
  
  const resetForm = () => {
    setSideA(''); setSideB(''); setSideC(''); setAngleA_deg(''); setAngleB_deg(''); setAngleC_deg('');
    setResults(null); setError(null);
  };

  const renderInputsByMode = () => {
    const commonInputClass = "w-full";
    const disabledInputClass = "bg-muted/50 cursor-not-allowed";
    return <>
      <div><Label htmlFor="sideAIn">Side a</Label><Input id="sideAIn" type="number" value={sideA} onChange={e=>setSideA(e.target.value)} disabled={!(mode==='SSS' || mode==='AAS')} className={cn(commonInputClass, (mode!=='SSS' && mode!=='AAS') && disabledInputClass)}/></div>
      <div><Label htmlFor="sideBIn">Side b</Label><Input id="sideBIn" type="number" value={sideB} onChange={e=>setSideB(e.target.value)} disabled={!(mode==='SSS' || mode==='SAS')} className={cn(commonInputClass, (mode!=='SSS' && mode!=='SAS') && disabledInputClass)}/></div>
      <div><Label htmlFor="sideCIn">Side c</Label><Input id="sideCIn" type="number" value={sideC} onChange={e=>setSideC(e.target.value)} disabled={!(mode==='SSS' || mode==='SAS' || mode==='ASA')} className={cn(commonInputClass, (mode!=='SSS' && mode!=='SAS' && mode!=='ASA') && disabledInputClass)}/></div>
      <div><Label htmlFor="angleAIn">Angle A (°)</Label><Input id="angleAIn" type="number" value={angleA_deg} onChange={e=>setAngleA_deg(e.target.value)} disabled={!(mode==='SAS' || mode==='ASA' || mode==='AAS')} className={cn(commonInputClass, (mode!=='SAS' && mode!=='ASA' && mode!=='AAS') && disabledInputClass)}/></div>
      <div><Label htmlFor="angleBIn">Angle B (°)</Label><Input id="angleBIn" type="number" value={angleB_deg} onChange={e=>setAngleB_deg(e.target.value)} disabled={!(mode==='ASA' || mode==='AAS')} className={cn(commonInputClass, (mode!=='ASA' && mode!=='AAS') && disabledInputClass)}/></div>
      {/* Angle C is always derived, no input for it typically */}
    </>;
  }

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>General Triangle Solver</AlertTitle><AlertDescription>Solve for unknown sides and angles of any triangle given sufficient information (SSS, SAS, ASA, AAS). Provides area and perimeter.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="md:col-span-2">
          <CardHeader><CardDescription>Select method and enter known values.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="solveModeTriangle">Given Information (Solve Mode):</Label><Select value={mode} onValueChange={(v:SolveMode)=>{setMode(v);resetForm();}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                <SelectItem value="SSS">SSS (Three Sides)</SelectItem><SelectItem value="SAS">SAS (Two Sides, Included Angle)</SelectItem>
                <SelectItem value="ASA">ASA (Two Angles, Included Side)</SelectItem><SelectItem value="AAS">AAS (Two Angles, Non-included Side)</SelectItem>
            </SelectContent></Select></div>
            <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">{renderInputsByMode()}</div>
             <p className="text-xs text-muted-foreground">
                {mode === 'SSS' && "Enter lengths of sides a, b, and c."}
                {mode === 'SAS' && "Enter side b, Angle A (opposite a), and side c."}
                {mode === 'ASA' && "Enter Angle A, side c (between A&B), and Angle B."}
                {mode === 'AAS' && "Enter Angle A, Angle B, and side a (opposite A)."}
             </p>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={solveTriangle}>Solve Triangle</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {results || error ? (
          <Card className="md:col-span-1">
            <CardHeader><CardDescription>Triangle Properties</CardDescription></CardHeader>
            <CardContent className="space-y-1 text-sm">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {results && Object.entries(results).map(([key, val]) => (
                <div key={key} className="flex justify-between p-0.5 bg-muted/50 rounded-sm"><span>{key.toUpperCase()}:</span><span className="font-semibold">{key === 'area' ? `${val} units²` : key === 'perimeter' ? `${val} units` : ['A','B','C'].includes(key) ? `${val}°` : `${val} units`}</span></div>
              ))}
            </CardContent>
          </Card>
        ) : null}
      </div>
    </div>
  );
}


// ====== END OF FILE: TriangleSolver.tsx ======
==================================================

// ====== START OF FILE: TruthTableGenerator.tsx ======
// File converted from TSX to TXT
// Original size: 4.72 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Table2 } from "lucide-react";

export default function TruthTableGenerator() {
  const [expression, setExpression] = useState<string>('p AND q');
  const [variables, setVariables] = useState<string>('p,q');
  const [truthTable, setTruthTable] = useState<string[][] | null>(null);
  const [error, setError] = useState<string | null>(null);

  const generateTruthTable = () => {
    setError(null);
    setTruthTable(null);

    const vars = variables.split(',').map(v => v.trim()).filter(Boolean);
    if (vars.length === 0 || vars.length > 3) {
      setError('Please enter 1 to 3 unique variables (e.g., p, q, r).');
      return;
    }
    if (new Set(vars).size !== vars.length) {
      setError('Variable names must be unique.');
      return;
    }

    try {
      // Replace logical operators with JS equivalents
      const jsExpression = expression
        .replace(/\bAND\b/gi, '&&')
        .replace(/\bOR\b/gi, '||')
        .replace(/\bNOT\b/gi, '!')
        .replace(/<->/g, '===')
        .replace(/->/g, '<='); // Implication p->q is equivalent to !p || q. <= works for boolean logic.

      const table: string[][] = [];
      const numRows = Math.pow(2, vars.length);
      const header = [...vars, expression];
      table.push(header);

      for (let i = 0; i < numRows; i++) {
        const row: (string | boolean)[] = [];
        const scope: Record<string, boolean> = {};

        // Generate boolean combinations for variables
        for (let j = 0; j < vars.length; j++) {
          const val = (i >> (vars.length - 1 - j)) & 1;
          scope[vars[j]] = val === 1;
          row.push(val === 1 ? 'T' : 'F');
        }

        // Evaluate the expression
        const func = new Function(...vars, `return ${jsExpression}`);
        const result = func(...vars.map(v => scope[v]));
        row.push(result ? 'T' : 'F');

        table.push(row as string[]);
      }
      setTruthTable(table);
    } catch (e) {
      setError("Invalid expression format. Use variables defined and standard operators (AND, OR, NOT). Use parentheses for grouping.");
    }
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Truth Table Generator (Simplified)</AlertTitle>
        <AlertDescription>
          Generate a truth table for a logical expression with up to 3 variables. Supports AND, OR, NOT. Use parentheses for grouping.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter logical expression and variables.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="logicalExpr">Logical Expression</Label><Input id="logicalExpr" value={expression} onChange={e => setExpression(e.target.value)} placeholder="e.g., p AND (q OR NOT r)"/></div>
            <div><Label htmlFor="variablesTTG">Variables (comma-separated, case-sensitive)</Label><Input id="variablesTTG" value={variables} onChange={e => setVariables(e.target.value)} placeholder="e.g., p,q,r"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={generateTruthTable}>Generate Table</Button></CardFooter>
        </Card>
        {(truthTable || error) && (
          <Card>
            <CardHeader><CardDescription>Truth Table</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {truthTable && (
                <div className="font-mono text-sm overflow-x-auto">
                  <pre className="p-2 border rounded-md bg-muted/50">
                    {truthTable.map((row, rIdx) => (
                      <div key={rIdx} className={`flex ${rIdx === 0 ? 'border-b pb-1 mb-1 font-semibold' : ''}`}>
                        {row.map((cell, cIdx) => (
                          <span key={cIdx} className="w-16 text-center">{cell}</span>
                        ))}
                      </div>
                    ))}
                  </pre>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: TruthTableGenerator.tsx ======
==================================================

// ====== START OF FILE: TvmFinanceCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.08 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, DollarSign } from "lucide-react";

type TvmTarget = 'fv' | 'pv' | 'pmt' | 'nper' | 'rate';

export default function TvmFinanceCalculator() {
  const [target, setTarget] = useState<TvmTarget>('pmt');
  const [presentValue, setPresentValue] = useState<string>('');
  const [futureValue, setFutureValue] = useState<string>('0');
  const [payment, setPayment] = useState<string>('');
  const [annualRate, setAnnualRate] = useState<string>(''); // in %
  const [periods, setPeriods] = useState<string>('');
  const [compoundingPeriodsPerYear, setCompoundingPeriodsPerYear] = useState<string>('12');

  const [result, setResult] = useState<string | null>(null);
  const [resultLabel, setResultLabel] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateTvm = () => {
    setError(null); setResult(null); setResultLabel(null);
    const pv = parseFloat(presentValue) || 0;
    const fv = parseFloat(futureValue) || 0;
    const pmt = parseFloat(payment) || 0;
    const ratePercent = parseFloat(annualRate);
    const nper = parseInt(periods);
    const cppy = parseInt(compoundingPeriodsPerYear);

    if (isNaN(ratePercent) || isNaN(nper) || isNaN(cppy) || nper <= 0 || cppy <= 0) {
      setError("Rate, number of periods, and compounding frequency must be valid positive numbers.");
      return;
    }

    const i = ratePercent / 100 / cppy; // Rate per period

    let calculatedValue: number;

    try {
      switch (target) {
        case 'pmt':
          if (isNaN(pv) || isNaN(fv)) throw new Error("Present Value and Future Value must be entered.");
          if (i === 0) calculatedValue = (-fv - pv) / nper;
          else calculatedValue = (i * (fv + pv * Math.pow(1 + i, nper))) / (1 - Math.pow(1 + i, nper));
          setResultLabel("Payment per Period (PMT)");
          break;
        case 'pv':
          if (isNaN(pmt) || isNaN(fv)) throw new Error("Payment and Future Value must be entered.");
          if (i === 0) calculatedValue = -fv - pmt * nper;
          else calculatedValue = (pmt * (1 - Math.pow(1 + i, nper)) / i - fv) / Math.pow(1 + i, nper);
          setResultLabel("Present Value (PV)");
          break;
        case 'fv':
          if (isNaN(pmt) || isNaN(pv)) throw new Error("Payment and Present Value must be entered.");
          if (i === 0) calculatedValue = -pv - pmt * nper;
          else calculatedValue = -(pv * Math.pow(1 + i, nper) + pmt * (Math.pow(1 + i, nper) - 1) / i);
          setResultLabel("Future Value (FV)");
          break;
        case 'nper':
        case 'rate':
          throw new Error(`Calculating Number of Periods (NPER) or Interest Rate requires complex iterative methods not implemented in this simplified calculator.`);
        default:
          throw new Error("Invalid calculation target.");
      }

      if (isNaN(calculatedValue) || !isFinite(calculatedValue)) {
        throw new Error("Calculation resulted in an invalid number. Check your inputs.");
      }
      // Display result as a positive number for user friendliness
      setResult(Math.abs(calculatedValue).toFixed(2));
    } catch (e: any) {
      setError(e.message);
    }
  };

  const resetForm = () => {
    setPresentValue(''); setFutureValue('0'); setPayment(''); setAnnualRate(''); setPeriods('');
    setResult(null); setResultLabel(null); setError(null);
  };
  
  const renderInputs = () => (
    <>
      {target !== 'pv' && <div><Label>Present Value (PV)</Label><Input type="number" value={presentValue} onChange={e=>setPresentValue(e.target.value)} placeholder="e.g., 100000"/></div>}
      {target !== 'fv' && <div><Label>Future Value (FV)</Label><Input type="number" value={futureValue} onChange={e=>setFutureValue(e.target.value)} placeholder="e.g., 0"/></div>}
      {target !== 'pmt' && <div><Label>Payment per Period (PMT)</Label><Input type="number" value={payment} onChange={e=>setPayment(e.target.value)} placeholder="e.g., 500"/></div>}
      {target !== 'rate' && <div><Label>Annual Interest Rate (%)</Label><Input type="number" value={annualRate} onChange={e=>setAnnualRate(e.target.value)} placeholder="e.g., 5"/></div>}
      {target !== 'nper' && <div><Label>Number of Periods (e.g., months)</Label><Input type="number" value={periods} onChange={e=>setPeriods(e.target.value)} placeholder="e.g., 360"/></div>}
    </>
  );

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Time Value of Money (TVM) Calculator</AlertTitle><AlertDescription>Solve for PV, FV, or PMT. NPER and Rate calculations are complex and not supported in this version. Assumes end-of-period payments.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter 4 of 5 variables to solve for the 5th.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="tvmTarget">Calculate:</Label><Select value={target} onValueChange={(v: TvmTarget) => {setTarget(v);resetForm()}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
              <SelectItem value="pmt">Payment (PMT)</SelectItem><SelectItem value="pv">Present Value (PV)</SelectItem><SelectItem value="fv">Future Value (FV)</SelectItem>
              <SelectItem value="nper" disabled>Number of Periods (NPER) - Not Supported</SelectItem><SelectItem value="rate" disabled>Interest Rate (I/Y) - Not Supported</SelectItem>
            </SelectContent></Select></div>
            {renderInputs()}
            <div><Label>Compounding periods per year</Label><Input type="number" value={compoundingPeriodsPerYear} onChange={e=>setCompoundingPeriodsPerYear(e.target.value)} placeholder="e.g., 12 for monthly"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTvm}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Calculation Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">{resultLabel}</p><p className="text-2xl font-bold text-primary">${result}</p></div><CopyButton textToCopy={result}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: TvmFinanceCalculator.tsx ======
==================================================

// ====== START OF FILE: UnitPriceComparisonCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.37 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { PlusCircle, Trash2, Trophy } from 'lucide-react';
import { Card, CardContent, CardFooter, CardHeader, CardDescription, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info } from "lucide-react";
import { cn } from '@/lib/utils';

interface ComparisonItem {
  id: string;
  name: string;
  price: string;
  quantity: string;
  unit: string;
}

interface ResultItem {
  name: string;
  unitPrice: number;
  unit: string;
}

export default function UnitPriceComparisonCalculator() {
  const [items, setItems] = useState<ComparisonItem[]>([
    { id: crypto.randomUUID(), name: 'Brand A', price: '', quantity: '', unit: 'oz' },
    { id: crypto.randomUUID(), name: 'Brand B', price: '', quantity: '', unit: 'oz' },
  ]);
  const [results, setResults] = useState<ResultItem[] | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleItemChange = (id: string, field: keyof Omit<ComparisonItem, 'id'>, value: string) => {
    setItems(prev => prev.map(item => item.id === id ? { ...item, [field]: value } : item));
  };

  const addItem = () => {
    setItems(prev => [...prev, { id: crypto.randomUUID(), name: `Item ${prev.length + 1}`, price: '', quantity: '', unit: 'oz' }]);
  };

  const removeItem = (id: string) => {
    if (items.length > 2) {
      setItems(prev => prev.filter(item => item.id !== id));
    }
  };

  const calculateComparison = () => {
    setError(null);
    setResults(null);

    const calculatedResults: ResultItem[] = [];
    for (const item of items) {
      const price = parseFloat(item.price);
      const quantity = parseFloat(item.quantity);
      if (isNaN(price) || price < 0 || isNaN(quantity) || quantity <= 0) {
        setError(`Invalid input for ${item.name}. Price must be non-negative and quantity must be positive.`);
        return;
      }
      calculatedResults.push({
        name: item.name,
        unitPrice: price / quantity,
        unit: item.unit
      });
    }

    calculatedResults.sort((a, b) => a.unitPrice - b.unitPrice);
    setResults(calculatedResults);
  };
  
  const resetForm = () => {
    setItems([
      { id: crypto.randomUUID(), name: 'Brand A', price: '', quantity: '', unit: 'oz' },
      { id: crypto.randomUUID(), name: 'Brand B', price: '', quantity: '', unit: 'oz' },
    ]);
    setResults(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Unit Price Comparison Calculator</AlertTitle>
        <AlertDescription>
          Compare items to find the best value. Enter the price and quantity for each item to see the cost per unit.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader>
            <CardDescription>Enter items to compare.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            {items.map((item, index) => (
              <div key={item.id} className="grid grid-cols-[1fr_auto_auto_auto] gap-2 items-center p-2 border rounded-md">
                <Input
                  type="text"
                  placeholder={`Item ${index + 1} Name`}
                  value={item.name}
                  onChange={e => handleItemChange(item.id, 'name', e.target.value)}
                  className="h-9"
                />
                <Input
                  type="number"
                  placeholder="Price ($)"
                  value={item.price}
                  onChange={e => handleItemChange(item.id, 'price', e.target.value)}
                  className="h-9 w-24"
                />
                <Input
                  type="number"
                  placeholder="Quantity"
                  value={item.quantity}
                  onChange={e => handleItemChange(item.id, 'quantity', e.target.value)}
                  className="h-9 w-24"
                />
                <div className="flex items-center">
                    <Input
                    type="text"
                    placeholder="Unit"
                    value={item.unit}
                    onChange={e => handleItemChange(item.id, 'unit', e.target.value)}
                    className="h-9 w-20"
                    />
                    <Button variant="ghost" size="icon" onClick={() => removeItem(item.id)} disabled={items.length <= 2} className="h-9 w-9 shrink-0">
                      <Trash2 className="h-4 w-4 text-destructive"/>
                    </Button>
                </div>
              </div>
            ))}
            <Button variant="outline" size="sm" onClick={addItem}><PlusCircle className="mr-2 h-4 w-4"/> Add Item</Button>
          </CardContent>
          <CardFooter>
            <Button onClick={calculateComparison} className="w-full md:w-auto">Compare Prices</Button>
          </CardFooter>
        </Card>
        
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Comparison Results</CardDescription></CardHeader>
          <CardContent className="space-y-3">
            {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {results && results.length > 0 ? (
              results.map((res, index) => (
                <Card key={index} className={cn("p-3", index === 0 ? "bg-green-500/10 border-green-500/50" : "bg-muted")}>
                  <div className="flex justify-between items-center">
                    <p className="font-semibold">{res.name}</p>
                    {index === 0 && <Trophy className="h-5 w-5 text-yellow-500" />}
                  </div>
                  <p className="text-sm">
                    <span className="font-bold text-primary">${res.unitPrice.toFixed(3)}</span> per {res.unit}
                  </p>
                </Card>
              ))
            ) : !error && <p className="text-muted-foreground text-sm">Results will appear here.</p>}
          </CardContent>
          <CardFooter><Button variant="outline" onClick={resetForm} className="w-full">Reset</Button></CardFooter>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: UnitPriceComparisonCalculator.tsx ======
==================================================

// ====== START OF FILE: UsFederalEstateTaxCalculatorConceptual.tsx ======
// File converted from TSX to TXT
// Original size: 5.41 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Landmark } from "lucide-react";

// Note: Estate tax laws are complex and vary by jurisdiction and year.
// This is a highly simplified placeholder.
// Key factors: Gross Estate Value, Deductions, Applicable Exclusion Amount, Tax Rates.

export default function UsFederalEstateTaxCalculatorConceptual() {
  const [grossEstateValue, setGrossEstateValue] = useState<string>('');
  const [deductions, setDeductions] = useState<string>('0'); // e.g., debts, funeral expenses, charitable contributions
  const [applicableExclusion, setApplicableExclusion] = useState<string>('13610000'); // Federal for 2024, as example
  
  const [taxableEstate, setTaxableEstate] = useState<string | null>(null);
  const [estimatedEstateTax, setEstimatedEstateTax] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Simplified progressive tax rate - placeholder
  const calculateSimplifiedTax = (taxableAmount: number): number => {
    if (taxableAmount <= 0) return 0;
    // This is extremely simplified. Real estate tax has multiple brackets.
    // Example: flat 40% on amount over exclusion (very rough)
    if (taxableAmount > 0) return taxableAmount * 0.40; 
    return 0;
  };

  const calculateTax = () => {
    setError(null);
    setTaxableEstate(null);
    setEstimatedEstateTax(null);

    const gev = parseFloat(grossEstateValue);
    const ded = parseFloat(deductions);
    const excl = parseFloat(applicableExclusion);

    if (isNaN(gev) || gev < 0 || isNaN(ded) || ded < 0 || isNaN(excl) || excl < 0) {
      setError('Please enter valid non-negative numbers for all fields.');
      return;
    }

    const netTaxableEstate = Math.max(0, gev - ded - excl);
    setTaxableEstate(netTaxableEstate.toFixed(2));
    
    const tax = calculateSimplifiedTax(netTaxableEstate);
    setEstimatedEstateTax(tax.toFixed(2));
  };
  
  const resetForm = () => {
    setGrossEstateValue('');
    setDeductions('0');
    setApplicableExclusion('13610000');
    setTaxableEstate(null);
    setEstimatedEstateTax(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>Simplified Estimator - For Informational Purposes Only</AlertTitle>
        <AlertDescription>
          Estate tax laws are extremely complex, vary significantly by jurisdiction (federal/state), and change frequently. This calculator uses highly simplified assumptions (e.g., a flat tax rate above exclusion and 2024 federal exclusion) and <strong className="font-semibold">should not be used for actual financial or legal planning</strong>. Consult with a qualified estate planning attorney or tax professional for advice.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate potential estate tax (highly simplified).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="grossEstateValue">Gross Estate Value ($)</Label><Input id="grossEstateValue" type="number" value={grossEstateValue} onChange={(e) => setGrossEstateValue(e.target.value)} placeholder="e.g., 15000000" /></div>
            <div><Label htmlFor="deductions">Allowable Deductions ($)</Label><Input id="deductions" type="number" value={deductions} onChange={(e) => setDeductions(e.target.value)} placeholder="e.g., 500000" /></div>
            <div><Label htmlFor="applicableExclusion">Applicable Exclusion Amount ($)</Label><Input id="applicableExclusion" type="number" value={applicableExclusion} onChange={(e) => setApplicableExclusion(e.target.value)} placeholder="e.g., 13610000 (2024 Federal)" /></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTax}>Estimate Tax</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>

        {(taxableEstate || estimatedEstateTax || error) && (
          <Card>
            <CardHeader><CardDescription>Estimation Results (Simplified)</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {taxableEstate && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Taxable Estate (After Excl.)</p><p className="font-semibold">${taxableEstate}</p></div>)}
              {estimatedEstateTax && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div><p className="text-sm text-muted-foreground">Estimated Estate Tax</p><p className="text-2xl font-bold text-primary">${estimatedEstateTax}</p></div>
                  <CopyButton textToCopy={estimatedEstateTax} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: UsFederalEstateTaxCalculatorConceptual.tsx ======
==================================================

// ====== START OF FILE: UvIndexCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 7.11 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Info, SunMedium } from "lucide-react";

interface UvInfo {
  level: string;
  risk: string;
  recommendation: string;
  colorClass: string;
}

const uvIndexData: Record<string, UvInfo> = {
  "0": { level: "0-2 Low", risk: "Low danger from the sun's UV rays for the average person.", recommendation: "Wear sunglasses on bright days. If you burn easily, cover up and use broad spectrum SPF 30+ sunscreen.", colorClass: "bg-green-500 text-white" },
  "1": { level: "0-2 Low", risk: "Low danger from the sun's UV rays for the average person.", recommendation: "Wear sunglasses on bright days. If you burn easily, cover up and use broad spectrum SPF 30+ sunscreen.", colorClass: "bg-green-500 text-white" },
  "2": { level: "0-2 Low", risk: "Low danger from the sun's UV rays for the average person.", recommendation: "Wear sunglasses on bright days. If you burn easily, cover up and use broad spectrum SPF 30+ sunscreen.", colorClass: "bg-green-500 text-white" },
  "3": { level: "3-5 Moderate", risk: "Moderate risk of harm from unprotected sun exposure.", recommendation: "Stay in shade near midday when the sun is strongest. If outdoors, wear protective clothing, a wide-brimmed hat, and UV-blocking sunglasses. Generously apply broad spectrum SPF 30+ sunscreen every 2 hours.", colorClass: "bg-yellow-400 text-black" },
  "4": { level: "3-5 Moderate", risk: "Moderate risk of harm from unprotected sun exposure.", recommendation: "Stay in shade near midday when the sun is strongest. If outdoors, wear protective clothing, a wide-brimmed hat, and UV-blocking sunglasses. Generously apply broad spectrum SPF 30+ sunscreen every 2 hours.", colorClass: "bg-yellow-400 text-black" },
  "5": { level: "3-5 Moderate", risk: "Moderate risk of harm from unprotected sun exposure.", recommendation: "Stay in shade near midday when the sun is strongest. If outdoors, wear protective clothing, a wide-brimmed hat, and UV-blocking sunglasses. Generously apply broad spectrum SPF 30+ sunscreen every 2 hours.", colorClass: "bg-yellow-400 text-black" },
  "6": { level: "6-7 High", risk: "High risk of harm from unprotected sun exposure.", recommendation: "Reduce time in the sun between 10 a.m. and 4 p.m. If outdoors, seek shade and wear protective clothing, a wide-brimmed hat, and UV-blocking sunglasses. Generously apply broad spectrum SPF 30+ sunscreen every 2 hours.", colorClass: "bg-orange-500 text-white" },
  "7": { level: "6-7 High", risk: "High risk of harm from unprotected sun exposure.", recommendation: "Reduce time in the sun between 10 a.m. and 4 p.m. If outdoors, seek shade and wear protective clothing, a wide-brimmed hat, and UV-blocking sunglasses. Generously apply broad spectrum SPF 30+ sunscreen every 2 hours.", colorClass: "bg-orange-500 text-white" },
  "8": { level: "8-10 Very High", risk: "Very high risk of harm from unprotected sun exposure.", recommendation: "Minimize sun exposure between 10 a.m. and 4 p.m. If outdoors, seek shade and wear protective clothing, a wide-brimmed hat, and UV-blocking sunglasses. Generously apply broad spectrum SPF 30+ sunscreen every 2 hours.", colorClass: "bg-red-600 text-white" },
  "9": { level: "8-10 Very High", risk: "Very high risk of harm from unprotected sun exposure.", recommendation: "Minimize sun exposure between 10 a.m. and 4 p.m. If outdoors, seek shade and wear protective clothing, a wide-brimmed hat, and UV-blocking sunglasses. Generously apply broad spectrum SPF 30+ sunscreen every 2 hours.", colorClass: "bg-red-600 text-white" },
  "10": { level: "8-10 Very High", risk: "Very high risk of harm from unprotected sun exposure.", recommendation: "Minimize sun exposure between 10 a.m. and 4 p.m. If outdoors, seek shade and wear protective clothing, a wide-brimmed hat, and UV-blocking sunglasses. Generously apply broad spectrum SPF 30+ sunscreen every 2 hours.", colorClass: "bg-red-600 text-white" },
  "11": { level: "11+ Extreme", risk: "Extreme risk of harm from unprotected sun exposure.", recommendation: "Try to avoid sun exposure between 10 a.m. and 4 p.m. If outdoors, seek shade and wear protective clothing, a wide-brimmed hat, and UV-blocking sunglasses. Generously apply broad spectrum SPF 30+ sunscreen every 2 hours.", colorClass: "bg-purple-600 text-white" },
};

export default function UvIndexCalculator() {
  const [selectedUvIndex, setSelectedUvIndex] = useState<string>('5');
  const [uvInfo, setUvInfo] = useState<UvInfo | null>(null);
  
  useEffect(() => {
    const indexKey = Math.min(11, Math.max(0, parseInt(selectedUvIndex))).toString();
    setUvInfo(uvIndexData[indexKey] || null);
  }, [selectedUvIndex]);

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>UV Index Information & Safety</AlertTitle>
        <AlertDescription>
          This tool provides information about UV Index levels and recommended safety precautions. It does not measure live UV Index. For current local UV Index, check your local weather forecast.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Select a UV Index value to see associated risks and recommendations.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="uvIndexSelect">UV Index Value (0-11+)</Label>
              <Select value={selectedUvIndex} onValueChange={setSelectedUvIndex}>
                <SelectTrigger id="uvIndexSelect">
                  <SelectValue placeholder="Select UV Index" />
                </SelectTrigger>
                <SelectContent>
                  {Object.keys(uvIndexData).map(indexVal => (
                     <SelectItem key={indexVal} value={indexVal} className={uvIndexData[indexVal]?.colorClass}>
                      {uvIndexData[indexVal]?.level || indexVal}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {uvInfo && (
          <Card className={`${uvInfo.colorClass} border-2 ${uvInfo.colorClass.replace('bg-','border-')}`}>
            <CardHeader>
              <CardDescription className="text-lg font-semibold opacity-90">{uvInfo.level}</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              <div>
                <h4 className="font-medium opacity-80">Risk Level:</h4>
                <p>{uvInfo.risk}</p>
              </div>
              <div>
                <h4 className="font-medium opacity-80">Recommended Precautions:</h4>
                <p>{uvInfo.recommendation}</p>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: UvIndexCalculator.tsx ======
==================================================

// ====== START OF FILE: UvIndexInformationTool.tsx ======
// File converted from TSX to TXT
// Original size: 7.25 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Info, SunMedium, ShieldCheck } from "lucide-react";

interface UvInfo {
  level: string;
  risk: string;
  recommendation: string;
  colorClass: string;
}

const uvIndexData: Record<string, UvInfo> = {
  "0": { level: "0-2 Low", risk: "Low danger from the sun's UV rays for the average person.", recommendation: "Wear sunglasses on bright days. If you burn easily, cover up and use broad spectrum SPF 30+ sunscreen.", colorClass: "bg-green-500 text-white" },
  "1": { level: "0-2 Low", risk: "Low danger from the sun's UV rays for the average person.", recommendation: "Wear sunglasses on bright days. If you burn easily, cover up and use broad spectrum SPF 30+ sunscreen.", colorClass: "bg-green-500 text-white" },
  "2": { level: "0-2 Low", risk: "Low danger from the sun's UV rays for the average person.", recommendation: "Wear sunglasses on bright days. If you burn easily, cover up and use broad spectrum SPF 30+ sunscreen.", colorClass: "bg-green-500 text-white" },
  "3": { level: "3-5 Moderate", risk: "Moderate risk of harm from unprotected sun exposure.", recommendation: "Stay in shade near midday when the sun is strongest. If outdoors, wear protective clothing, a wide-brimmed hat, and UV-blocking sunglasses. Generously apply broad spectrum SPF 30+ sunscreen every 2 hours.", colorClass: "bg-yellow-400 text-black" },
  "4": { level: "3-5 Moderate", risk: "Moderate risk of harm from unprotected sun exposure.", recommendation: "Stay in shade near midday when the sun is strongest. If outdoors, wear protective clothing, a wide-brimmed hat, and UV-blocking sunglasses. Generously apply broad spectrum SPF 30+ sunscreen every 2 hours.", colorClass: "bg-yellow-400 text-black" },
  "5": { level: "3-5 Moderate", risk: "Moderate risk of harm from unprotected sun exposure.", recommendation: "Stay in shade near midday when the sun is strongest. If outdoors, wear protective clothing, a wide-brimmed hat, and UV-blocking sunglasses. Generously apply broad spectrum SPF 30+ sunscreen every 2 hours.", colorClass: "bg-yellow-400 text-black" },
  "6": { level: "6-7 High", risk: "High risk of harm from unprotected sun exposure.", recommendation: "Reduce time in the sun between 10 a.m. and 4 p.m. If outdoors, seek shade and wear protective clothing, a wide-brimmed hat, and UV-blocking sunglasses. Generously apply broad spectrum SPF 30+ sunscreen every 2 hours.", colorClass: "bg-orange-500 text-white" },
  "7": { level: "6-7 High", risk: "High risk of harm from unprotected sun exposure.", recommendation: "Reduce time in the sun between 10 a.m. and 4 p.m. If outdoors, seek shade and wear protective clothing, a wide-brimmed hat, and UV-blocking sunglasses. Generously apply broad spectrum SPF 30+ sunscreen every 2 hours.", colorClass: "bg-orange-500 text-white" },
  "8": { level: "8-10 Very High", risk: "Very high risk of harm from unprotected sun exposure.", recommendation: "Minimize sun exposure between 10 a.m. and 4 p.m. If outdoors, seek shade and wear protective clothing, a wide-brimmed hat, and UV-blocking sunglasses. Generously apply broad spectrum SPF 30+ sunscreen every 2 hours.", colorClass: "bg-red-600 text-white" },
  "9": { level: "8-10 Very High", risk: "Very high risk of harm from unprotected sun exposure.", recommendation: "Minimize sun exposure between 10 a.m. and 4 p.m. If outdoors, seek shade and wear protective clothing, a wide-brimmed hat, and UV-blocking sunglasses. Generously apply broad spectrum SPF 30+ sunscreen every 2 hours.", colorClass: "bg-red-600 text-white" },
  "10": { level: "8-10 Very High", risk: "Very high risk of harm from unprotected sun exposure.", recommendation: "Minimize sun exposure between 10 a.m. and 4 p.m. If outdoors, seek shade and wear protective clothing, a wide-brimmed hat, and UV-blocking sunglasses. Generously apply broad spectrum SPF 30+ sunscreen every 2 hours.", colorClass: "bg-red-600 text-white" },
  "11": { level: "11+ Extreme", risk: "Extreme risk of harm from unprotected sun exposure.", recommendation: "Try to avoid sun exposure between 10 a.m. and 4 p.m. If outdoors, seek shade and wear protective clothing, a wide-brimmed hat, and UV-blocking sunglasses. Generously apply broad spectrum SPF 30+ sunscreen every 2 hours.", colorClass: "bg-purple-600 text-white" },
};


export default function UvIndexInformationTool() {
  const [selectedUvIndex, setSelectedUvIndex] = useState<string>('5'); // Default to a moderate value
  const [uvInfo, setUvInfo] = useState<UvInfo | null>(uvIndexData['5']);

  const handleUvIndexChange = (value: string) => {
    setSelectedUvIndex(value);
    const indexKey = Math.min(11, Math.max(0, parseInt(value))).toString(); // Clamp to 0-11
    setUvInfo(uvIndexData[indexKey] || null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>UV Index Information & Safety</AlertTitle>
        <AlertDescription>
          This tool provides information about UV Index levels and recommended safety precautions. It does not measure live UV Index. For current local UV Index, check your local weather forecast.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Select a UV Index value to see associated risks and recommendations.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="uvIndexSelect">UV Index Value (0-11+)</Label>
              <Select value={selectedUvIndex} onValueChange={handleUvIndexChange}>
                <SelectTrigger id="uvIndexSelect">
                  <SelectValue placeholder="Select UV Index" />
                </SelectTrigger>
                <SelectContent>
                  {Object.keys(uvIndexData).map(indexVal => (
                     <SelectItem key={indexVal} value={indexVal} className={uvIndexData[indexVal]?.colorClass}>
                      {uvIndexData[indexVal]?.level || indexVal}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {uvInfo && (
          <Card className={`${uvInfo.colorClass} border-2 ${uvInfo.colorClass.replace('bg-','border-')}`}>
            <CardHeader>
              <CardDescription className="text-lg font-semibold opacity-90">{uvInfo.level}</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              <div>
                <h4 className="font-medium opacity-80">Risk Level:</h4>
                <p>{uvInfo.risk}</p>
              </div>
              <div>
                <h4 className="font-medium opacity-80">Recommended Precautions:</h4>
                <p>{uvInfo.recommendation}</p>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: UvIndexInformationTool.tsx ======
==================================================

// ====== START OF FILE: VacationAccrualCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.67 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Plane } from "lucide-react";

type PayPeriod = 'weekly' | 'bi_weekly' | 'semi_monthly' | 'monthly';

const payPeriodsPerYear: Record<PayPeriod, number> = {
  weekly: 52,
  bi_weekly: 26,
  semi_monthly: 24,
  monthly: 12,
};

export default function VacationAccrualCalculator() {
  const [hoursAccrued, setHoursAccrued] = useState<string>('');
  const [payPeriod, setPayPeriod] = useState<PayPeriod>('bi_weekly');
  const [hoursPerDay, setHoursPerDay] = useState<string>('8'); // To convert hours to days

  const [totalHoursPerYear, setTotalHoursPerYear] = useState<string | null>(null);
  const [totalDaysPerYear, setTotalDaysPerYear] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateAccrual = () => {
    setError(null);
    setTotalHoursPerYear(null);
    setTotalDaysPerYear(null);

    const accrued = parseFloat(hoursAccrued);
    const hpd = parseFloat(hoursPerDay);

    if (isNaN(accrued) || accrued < 0 || isNaN(hpd) || hpd <= 0) {
      setError('Please enter valid, non-negative hours accrued and positive hours per work day.');
      return;
    }

    const periodsInYear = payPeriodsPerYear[payPeriod];
    const totalHours = accrued * periodsInYear;
    const totalDays = totalHours / hpd;

    setTotalHoursPerYear(totalHours.toFixed(2));
    setTotalDaysPerYear(totalDays.toFixed(2));
  };

  const resetForm = () => {
    setHoursAccrued('');
    setPayPeriod('bi_weekly');
    setHoursPerDay('8');
    setTotalHoursPerYear(null);
    setTotalDaysPerYear(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Vacation & PTO Accrual Calculator</AlertTitle>
        <AlertDescription>
          Estimate your total paid time off (PTO) accrued annually based on your accrual rate per pay period.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your accrual details.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="hoursAccrued">Hours Accrued per Pay Period</Label>
              <Input
                id="hoursAccrued"
                type="number"
                value={hoursAccrued}
                onChange={(e) => setHoursAccrued(e.target.value)}
                placeholder="e.g., 3.077"
              />
            </div>
            <div>
              <Label htmlFor="payPeriod">Pay Period Frequency</Label>
              <Select value={payPeriod} onValueChange={(v: PayPeriod) => setPayPeriod(v)}>
                <SelectTrigger id="payPeriod">
                  <SelectValue placeholder="Select frequency" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="weekly">Weekly</SelectItem>
                  <SelectItem value="bi_weekly">Bi-Weekly (every 2 weeks)</SelectItem>
                  <SelectItem value="semi_monthly">Semi-Monthly (twice a month)</SelectItem>
                  <SelectItem value="monthly">Monthly</SelectItem>
                </SelectContent>
              </Select>
            </div>
             <div>
              <Label htmlFor="hoursPerDay">Hours in a Work Day</Label>
              <Input
                id="hoursPerDay"
                type="number"
                value={hoursPerDay}
                onChange={(e) => setHoursPerDay(e.target.value)}
                placeholder="e.g., 8"
              />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateAccrual}>Calculate Annual Accrual</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(totalHoursPerYear || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Annual Accrual Summary</CardDescription>
            </CardHeader>
            <CardContent>
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {totalHoursPerYear && (
                <div className="p-2 bg-muted rounded-md">
                  <p className="text-sm text-muted-foreground">Total Hours Accrued Annually</p>
                  <p className="font-semibold">{totalHoursPerYear} hours</p>
                </div>
              )}
               {totalDaysPerYear && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md mt-2">
                  <div>
                    <p className="text-sm text-muted-foreground">Total Days Accrued Annually</p>
                    <p className="text-2xl font-bold text-primary">{totalDaysPerYear} days</p>
                  </div>
                  <CopyButton textToCopy={totalDaysPerYear} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: VacationAccrualCalculator.tsx ======
==================================================

// ====== START OF FILE: VaccineScheduleCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.92 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { Card, CardContent, CardHeader, CardDescription, CardTitle, CardFooter } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Info, ShieldCheck, ExternalLink } from "lucide-react";
import Link from 'next/link';

// This component will be purely informational due to the complexity and critical nature of vaccine schedules.

export default function VaccineScheduleCalculator() {
  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle className="font-bold text-lg">IMPORTANT MEDICAL INFORMATION - CONSULT PROFESSIONALS</AlertTitle>
        <AlertDescription className="text-base">
          <p>Vaccine schedules are critical for public and individual health and are determined by national health authorities (e.g., CDC in the US, NHS in the UK) based on age, health conditions, location, and specific vaccine characteristics. <strong className="font-semibold">This tool DOES NOT provide personalized vaccine schedules or medical advice.</strong></p>
          <p className="mt-2"><strong className="font-semibold">ALWAYS consult your doctor, pediatrician, or local health department for accurate and up-to-date vaccination schedules and recommendations.</strong> Do not rely on any online tool for critical medical decisions regarding vaccinations.</p>
        </AlertDescription>
      </Alert>
      
      <Card>
        <CardHeader>
          <CardTitle className="font-headline flex items-center"><ShieldCheck className="mr-2 h-6 w-6 text-primary"/>Official Vaccine Schedule Resources</CardTitle>
          <CardDescription>For accurate and current vaccine schedules, please refer to official health organizations:</CardDescription>
        </CardHeader>
        <CardContent className="space-y-3">
          <div>
            <h3 className="font-semibold">United States (CDC - Centers for Disease Control and Prevention):</h3>
            <ul className="list-disc pl-5 text-sm space-y-1 mt-1">
              <li><Link href="https://www.cdc.gov/vaccines/schedules/index.html" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">CDC Vaccine Schedules <ExternalLink className="inline h-3 w-3 ml-1"/></Link></li>
              <li><Link href="https://www.cdc.gov/vaccines/parents/index.html" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">Information for Parents <ExternalLink className="inline h-3 w-3 ml-1"/></Link></li>
            </ul>
          </div>
          <div>
            <h3 className="font-semibold">United Kingdom (NHS - National Health Service):</h3>
            <ul className="list-disc pl-5 text-sm space-y-1 mt-1">
              <li><Link href="https://www.nhs.uk/conditions/vaccinations/nhs-vaccinations-and-when-to-have-them/" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">NHS Vaccination Schedule <ExternalLink className="inline h-3 w-3 ml-1"/></Link></li>
            </ul>
          </div>
          <div>
            <h3 className="font-semibold">World Health Organization (WHO):</h3>
             <ul className="list-disc pl-5 text-sm space-y-1 mt-1">
              <li><Link href="https://www.who.int/teams/immunization-vaccines-and-biologicals/policies/position-papers" target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">WHO Vaccine Position Papers <ExternalLink className="inline h-3 w-3 ml-1"/></Link></li>
            </ul>
          </div>
          <p className="text-sm text-muted-foreground mt-4">
            For other countries, please consult your national or local Ministry of Health or public health agency.
          </p>
        </CardContent>
         <CardFooter>
            <p className="text-xs text-muted-foreground">This page is for informational purposes only to guide users to official resources.</p>
        </CardFooter>
      </Card>
    </div>
  );
}


// ====== END OF FILE: VaccineScheduleCalculator.tsx ======
==================================================

// ====== START OF FILE: ValueAtRiskCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.51 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, AlertTriangle } from "lucide-react";

// Simplified VaR using Historical Simulation (conceptual) or Parametric (Variance-Covariance) method
// Parametric VaR (1-day) = Portfolio Value * Z-score * Portfolio Volatility (daily standard deviation)
// Z-scores for VaR: 95% -> 1.645, 99% -> 2.326

const zScoresVaR: Record<string, number> = {
  '95': 1.645,
  '99': 2.326,
};

export default function ValueAtRiskCalculator() {
  const [portfolioValue, setPortfolioValue] = useState<string>('');
  const [portfolioVolatility, setPortfolioVolatility] = useState<string>(''); // Daily % std dev
  const [confidenceLevelVaR, setConfidenceLevelVaR] = useState<string>('95');
  const [timeHorizonDays, setTimeHorizonDays] = useState<string>('1'); // Typically 1 or 10 days

  const [valueAtRisk, setValueAtRisk] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateVaR = () => {
    setError(null); setValueAtRisk(null);
    const PV = parseFloat(portfolioValue);
    const volPercent = parseFloat(portfolioVolatility) / 100; // Convert daily % to decimal
    const Z = zScoresVaR[confidenceLevelVaR];
    const T_days = parseInt(timeHorizonDays);

    if (isNaN(PV) || PV <=0 || isNaN(volPercent) || volPercent <=0 || !Z || isNaN(T_days) || T_days <=0) {
      setError("Valid Portfolio Value (>0), Volatility (>0%), Confidence Level (95/99%), and Time Horizon (>0 days) required."); return;
    }
    
    // Parametric VaR for T days: VaR(T) = VaR(1-day) * sqrt(T)
    const varOneDay = PV * Z * volPercent;
    const varTDay = varOneDay * Math.sqrt(T_days);
    setValueAtRisk(varTDay.toFixed(2));
  };

  const resetForm = () => {
    setPortfolioValue(''); setPortfolioVolatility(''); setConfidenceLevelVaR('95'); setTimeHorizonDays('1');
    setValueAtRisk(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive"><Info className="h-4 w-4"/><AlertTitle>Simplified Value at Risk (VaR) Estimator</AlertTitle><AlertDescription>This calculator provides a <strong className="font-semibold">basic parametric VaR estimate</strong>. Actual VaR calculation is complex, involves various methodologies (Historical, Monte Carlo), and depends on many assumptions (e.g., normal distribution of returns). <strong className="font-semibold">NOT for actual risk management or investment decisions. Consult a financial risk professional.</strong></AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate potential portfolio loss (VaR).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="portfolioValueVaR">Portfolio Value ($)</Label><Input id="portfolioValueVaR" type="number" value={portfolioValue} onChange={e=>setPortfolioValue(e.target.value)}/></div>
            <div><Label htmlFor="volatilityVaR">Portfolio Daily Volatility (Standard Deviation %)</Label><Input id="volatilityVaR" type="number" value={portfolioVolatility} onChange={e=>setPortfolioVolatility(e.target.value)} placeholder="e.g., 1.5 for 1.5%"/></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="confidenceVaR">Confidence Level</Label><Select value={confidenceLevelVaR} onValueChange={setConfidenceLevelVaR}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.keys(zScoresVaR).map(lvl=><SelectItem key={lvl} value={lvl}>{lvl}%</SelectItem>)}</SelectContent></Select></div>
              <div><Label htmlFor="horizonVaR">Time Horizon (Days)</Label><Input id="horizonVaR" type="number" value={timeHorizonDays} onChange={e=>setTimeHorizonDays(e.target.value)} placeholder="e.g., 1 or 10"/></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateVaR}>Calculate VaR</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(valueAtRisk || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Value at Risk (VaR)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {valueAtRisk && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Max Potential Loss ({confidenceLevelVaR}% confidence, {timeHorizonDays}-day)</p><p className="text-2xl font-bold text-primary">${valueAtRisk}</p></div><CopyButton textToCopy={valueAtRisk}/></div>)}
              <AlertDescription className="text-xs pt-2">This means there is a {(100-parseFloat(confidenceLevelVaR)).toFixed(0)}% chance of losing at least ${valueAtRisk} over {timeHorizonDays} day(s) under normal market conditions, based on this simplified model.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
    

// ====== END OF FILE: ValueAtRiskCalculator.tsx ======
==================================================

// ====== START OF FILE: ValueAtRiskVarCalculatorConceptual.tsx ======
// File converted from TSX to TXT
// Original size: 5.52 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, AlertTriangle } from "lucide-react";

// Simplified VaR using Historical Simulation (conceptual) or Parametric (Variance-Covariance) method
// Parametric VaR (1-day) = Portfolio Value * Z-score * Portfolio Volatility (daily standard deviation)
// Z-scores for VaR: 95% -> 1.645, 99% -> 2.326

const zScoresVaR: Record<string, number> = {
  '95': 1.645,
  '99': 2.326,
};

export default function ValueAtRiskVarCalculatorConceptual() {
  const [portfolioValue, setPortfolioValue] = useState<string>('');
  const [portfolioVolatility, setPortfolioVolatility] = useState<string>(''); // Daily % std dev
  const [confidenceLevelVaR, setConfidenceLevelVaR] = useState<string>('95');
  const [timeHorizonDays, setTimeHorizonDays] = useState<string>('1'); // Typically 1 or 10 days

  const [valueAtRisk, setValueAtRisk] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateVaR = () => {
    setError(null); setValueAtRisk(null);
    const PV = parseFloat(portfolioValue);
    const volPercent = parseFloat(portfolioVolatility) / 100; // Convert daily % to decimal
    const Z = zScoresVaR[confidenceLevelVaR];
    const T_days = parseInt(timeHorizonDays);

    if (isNaN(PV) || PV <=0 || isNaN(volPercent) || volPercent <=0 || !Z || isNaN(T_days) || T_days <=0) {
      setError("Valid Portfolio Value (>0), Volatility (>0%), Confidence Level (95/99%), and Time Horizon (>0 days) required."); return;
    }
    
    // Parametric VaR for T days: VaR(T) = VaR(1-day) * sqrt(T)
    const varOneDay = PV * Z * volPercent;
    const varTDay = varOneDay * Math.sqrt(T_days);
    setValueAtRisk(varTDay.toFixed(2));
  };

  const resetForm = () => {
    setPortfolioValue(''); setPortfolioVolatility(''); setConfidenceLevelVaR('95'); setTimeHorizonDays('1');
    setValueAtRisk(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive"><Info className="h-4 w-4"/><AlertTitle>Simplified Value at Risk (VaR) Estimator</AlertTitle><AlertDescription>This calculator provides a <strong className="font-semibold">basic parametric VaR estimate</strong>. Actual VaR calculation is complex, involves various methodologies (Historical, Monte Carlo), and depends on many assumptions (e.g., normal distribution of returns). <strong className="font-semibold">NOT for actual risk management or investment decisions. Consult a financial risk professional.</strong></AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate potential portfolio loss (VaR).</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="portfolioValueVaR">Portfolio Value ($)</Label><Input id="portfolioValueVaR" type="number" value={portfolioValue} onChange={e=>setPortfolioValue(e.target.value)}/></div>
            <div><Label htmlFor="volatilityVaR">Portfolio Daily Volatility (Standard Deviation %)</Label><Input id="volatilityVaR" type="number" value={portfolioVolatility} onChange={e=>setPortfolioVolatility(e.target.value)} placeholder="e.g., 1.5 for 1.5%"/></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="confidenceVaR">Confidence Level</Label><Select value={confidenceLevelVaR} onValueChange={setConfidenceLevelVaR}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.keys(zScoresVaR).map(lvl=><SelectItem key={lvl} value={lvl}>{lvl}%</SelectItem>)}</SelectContent></Select></div>
              <div><Label htmlFor="horizonVaR">Time Horizon (Days)</Label><Input id="horizonVaR" type="number" value={timeHorizonDays} onChange={e=>setTimeHorizonDays(e.target.value)} placeholder="e.g., 1 or 10"/></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateVaR}>Calculate VaR</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(valueAtRisk || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Value at Risk (VaR)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {valueAtRisk && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Max Potential Loss ({confidenceLevelVaR}% confidence, {timeHorizonDays}-day)</p><p className="text-2xl font-bold text-primary">${valueAtRisk}</p></div><CopyButton textToCopy={valueAtRisk}/></div>)}
              <AlertDescription className="text-xs pt-2">This means there is a {(100-parseFloat(confidenceLevelVaR)).toFixed(0)}% chance of losing at least ${valueAtRisk} over {timeHorizonDays} day(s) under normal market conditions, based on this simplified model.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ValueAtRiskVarCalculatorConceptual.tsx ======
==================================================

// ====== START OF FILE: VaMortgageCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.58 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Home, Award } from "lucide-react";

export default function VaMortgageCalculator() {
  const [homePriceVA, setHomePriceVA] = useState<string>('');
  const [downPaymentVA, setDownPaymentVA] = useState<string>('0'); // VA loans often require no DP
  const [interestRateVA, setInterestRateVA] = useState<string>(''); // Annual %
  const [loanTermYearsVA, setLoanTermYearsVA] = useState<string>('30');
  const [vaFundingFeePercent, setVaFundingFeePercent] = useState<string>('2.15'); // Example, varies widely

  const [loanAmountVA, setLoanAmountVA] = useState<string | null>(null);
  const [fundingFeeAmount, setFundingFeeAmount] = useState<string | null>(null);
  const [totalLoanWithFee, setTotalLoanWithFee] = useState<string | null>(null);
  const [monthlyPandIVA, setMonthlyPandIVA] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateVaLoan = () => {
    setError(null); setLoanAmountVA(null); setFundingFeeAmount(null); setTotalLoanWithFee(null); setMonthlyPandIVA(null);
    const price = parseFloat(homePriceVA);
    const dp = parseFloat(downPaymentVA);
    const annualRate = parseFloat(interestRateVA) / 100;
    const termYrs = parseInt(loanTermYearsVA);
    const fundingFeeRate = parseFloat(vaFundingFeePercent) / 100;

    if (isNaN(price) || price <= 0 || isNaN(dp) || dp < 0 || isNaN(annualRate) || annualRate < 0 || isNaN(termYrs) || termYrs <= 0 || isNaN(fundingFeeRate) || fundingFeeRate < 0) {
      setError('Enter valid numbers for all fields. Price, term, rate must be positive. DP, fee can be zero.');
      return;
    }
    if (dp >= price && price > 0) { setError('Down payment cannot exceed home price.'); return; }

    const baseLoanAmount = price - dp;
    setLoanAmountVA(baseLoanAmount.toFixed(2));

    const feeAmount = baseLoanAmount * fundingFeeRate; // Funding fee often financed
    setFundingFeeAmount(feeAmount.toFixed(2));
    
    const P = baseLoanAmount + feeAmount; // Total loan principal including financed funding fee
    setTotalLoanWithFee(P.toFixed(2));

    const monthlyRate = annualRate / 12;
    const N = termYrs * 12;
    let M_PandI;
    if (P === 0) M_PandI = 0;
    else if (monthlyRate === 0) M_PandI = P / N;
    else M_PandI = P * (monthlyRate * Math.pow(1 + monthlyRate, N)) / (Math.pow(1 + monthlyRate, N) - 1);
    
    if (isNaN(M_PandI) || !isFinite(M_PandI)) { setError('Could not calculate P&I payment.'); return; }
    setMonthlyPandIVA(M_PandI.toFixed(2));
  };
  
  const resetForm = () => {
    setHomePriceVA(''); setDownPaymentVA('0'); setInterestRateVA(''); setLoanTermYearsVA('30'); setVaFundingFeePercent('2.15');
    setLoanAmountVA(null); setFundingFeeAmount(null); setTotalLoanWithFee(null); setMonthlyPandIVA(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="default"><Info className="h-4 w-4" /><AlertTitle>VA Mortgage P&I Estimator (Simplified)</AlertTitle><AlertDescription>Estimate Principal & Interest (P&I) for a VA loan. Includes a VA Funding Fee input. <strong className="font-semibold">Does not include property taxes or insurance (PITI).</strong> VA loan eligibility and funding fee rates vary. Consult a VA-approved lender.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate VA loan P&I.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="homePriceVA">Home Price ($)</Label><Input id="homePriceVA" type="number" value={homePriceVA} onChange={e=>setHomePriceVA(e.target.value)} placeholder="e.g., 300000" /></div>
            <div><Label htmlFor="dpVA">Down Payment ($) (Optional, often 0)</Label><Input id="dpVA" type="number" value={downPaymentVA} onChange={e=>setDownPaymentVA(e.target.value)} placeholder="e.g., 0"/></div>
            <div><Label htmlFor="rateVA">Interest Rate (Annual %)</Label><Input id="rateVA" type="number" value={interestRateVA} onChange={e=>setInterestRateVA(e.target.value)} placeholder="e.g., 6.0" /></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="termVA">Loan Term (Years)</Label><Input id="termVA" type="number" value={loanTermYearsVA} onChange={e=>setLoanTermYearsVA(e.target.value)} placeholder="e.g., 30" /></div>
              <div><Label htmlFor="fundingFeeVA">VA Funding Fee (%)</Label><Input id="fundingFeeVA" type="number" value={vaFundingFeePercent} onChange={e=>setVaFundingFeePercent(e.target.value)} placeholder="e.g., 2.15"/></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateVaLoan}>Calculate P&I</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(monthlyPandIVA || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated VA Loan Details (P&I)</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {loanAmountVA && (<div className="p-1 bg-muted rounded-md text-sm">Base Loan Amount: <strong className="font-semibold">${loanAmountVA}</strong></div>)}
              {fundingFeeAmount && (<div className="p-1 bg-muted rounded-md text-sm">VA Funding Fee Amount (Est.): <strong className="font-semibold">${fundingFeeAmount}</strong></div>)}
              {totalLoanWithFee && (<div className="p-1 bg-muted rounded-md text-sm">Total Loan (incl. Fee): <strong className="font-semibold">${totalLoanWithFee}</strong></div>)}
              {monthlyPandIVA && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Est. Monthly P&I Payment</p><p className="text-2xl font-bold text-primary">${monthlyPandIVA}</p></div><CopyButton textToCopy={monthlyPandIVA}/></div>)}
            </CardContent>
            <CardFooter><p className="text-xs text-muted-foreground">Actual payment higher with taxes/insurance. Funding fee varies.</p></CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: VaMortgageCalculator.tsx ======
==================================================

// ====== START OF FILE: VatCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.96 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, ReceiptText } from "lucide-react";

type VatCalculationMode = 'add_vat' | 'remove_vat';

export default function VatCalculator() {
  const [price, setPrice] = useState<string>('');
  const [vatRate, setVatRate] = useState<string>('20'); // Common VAT rate example
  const [calcMode, setCalcModeVat] = useState<VatCalculationMode>('add_vat');

  const [vatAmount, setVatAmount] = useState<string | null>(null);
  const [totalPriceWithVat, setTotalPriceWithVat] = useState<string | null>(null);
  const [originalPriceWithoutVat, setOriginalPriceWithoutVat] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateVat = () => {
    setError(null); setVatAmount(null); setTotalPriceWithVat(null); setOriginalPriceWithoutVat(null);
    const p = parseFloat(price);
    const rate = parseFloat(vatRate) / 100;

    if (isNaN(p) || p < 0 || isNaN(rate) || rate < 0) {
      setError('Please enter valid non-negative numbers for price and VAT rate.');
      return;
    }

    if (calcMode === 'add_vat') {
      const tax = p * rate;
      const total = p + tax;
      setVatAmount(tax.toFixed(2));
      setTotalPriceWithVat(total.toFixed(2));
      setOriginalPriceWithoutVat(p.toFixed(2));
    } else { // remove_vat
      if (rate === -1) {setError("Cannot remove VAT if rate implies price is zero after VAT."); return;}
      const originalP = p / (1 + rate);
      const taxAmt = p - originalP;
      setVatAmount(taxAmt.toFixed(2));
      setOriginalPriceWithoutVat(originalP.toFixed(2));
      setTotalPriceWithVat(p.toFixed(2));
    }
  };
  
  const resetForm = () => {
    setPrice(''); setVatRate('20');
    setVatAmount(null); setTotalPriceWithVat(null); setOriginalPriceWithoutVat(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4" /><AlertTitle>VAT Calculator</AlertTitle><AlertDescription>Calculate Value Added Tax (VAT) amount and total price, or extract VAT from a gross price.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter price and VAT rate.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="calcModeVat">Calculation Mode</Label><Select value={calcMode} onValueChange={(v: VatCalculationMode) => setCalcModeVat(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="add_vat">Add VAT to Net Price</SelectItem><SelectItem value="remove_vat">Extract VAT from Gross Price</SelectItem></SelectContent></Select></div>
            <div><Label htmlFor="priceVat">{calcMode === 'add_vat' ? 'Net Price (Before VAT)' : 'Gross Price (Including VAT)'} ($/£/€)</Label><Input id="priceVat" type="number" value={price} onChange={e=>setPrice(e.target.value)} placeholder="e.g., 100"/></div>
            <div><Label htmlFor="vatRateVat">VAT Rate (%)</Label><Input id="vatRateVat" type="number" value={vatRate} onChange={e=>setVatRate(e.target.value)} placeholder="e.g., 20"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateVat}>Calculate VAT</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(totalPriceWithVat || originalPriceWithoutVat || error) && (
          <Card>
            <CardHeader><CardDescription>VAT Calculation Results</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {originalPriceWithoutVat && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Price Before VAT</p><p className="font-semibold">${originalPriceWithoutVat}</p></div>)}
              {vatAmount && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">VAT Amount</p><p className="font-semibold">${vatAmount}</p></div>)}
              {totalPriceWithVat && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Total Price With VAT</p><p className="text-2xl font-bold text-primary">${totalPriceWithVat}</p></div><CopyButton textToCopy={totalPriceWithVat} /></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: VatCalculator.tsx ======
==================================================

// ====== START OF FILE: VehicleDepreciationCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.53 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, TrendingDown, Car } from "lucide-react";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { ScrollArea } from "@/components/ui/scroll-area";

interface DepreciationYear {
  year: number;
  value: string;
  depreciationAmount: string;
}

export default function VehicleDepreciationCalculator() {
  const [initialValue, setInitialValue] = useState<string>('');
  const [depreciationRate, setDepreciationRate] = useState<string>('15'); // Annual %
  const [numYears, setNumYears] = useState<string>('5');

  const [depreciationSchedule, setDepreciationSchedule] = useState<DepreciationYear[]>([]);
  const [finalValue, setFinalValue] = useState<string | null>(null);
  const [totalDepreciation, setTotalDepreciation] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateDepreciation = () => {
    setError(null); setDepreciationSchedule([]); setFinalValue(null); setTotalDepreciation(null);
    const P0 = parseFloat(initialValue);
    const rate = parseFloat(depreciationRate) / 100;
    const years = parseInt(numYears);

    if (isNaN(P0) || P0 <= 0 || isNaN(rate) || rate < 0 || rate > 1 || isNaN(years) || years <= 0) {
      setError('Initial Value (>0), Depreciation Rate (0-100%), and Years (>0) must be valid numbers.');
      return;
    }

    const schedule: DepreciationYear[] = [];
    let currentValue = P0;
    let cumulativeDepreciation = 0;

    for (let i = 1; i <= years; i++) {
      const yearDepreciation = currentValue * rate;
      currentValue -= yearDepreciation;
      cumulativeDepreciation += yearDepreciation;
      schedule.push({
        year: i,
        value: currentValue.toFixed(2),
        depreciationAmount: yearDepreciation.toFixed(2),
      });
    }
    setDepreciationSchedule(schedule);
    setFinalValue(currentValue.toFixed(2));
    setTotalDepreciation(cumulativeDepreciation.toFixed(2));
  };

  const resetForm = () => {
    setInitialValue(''); setDepreciationRate('15'); setNumYears('5');
    setDepreciationSchedule([]); setFinalValue(null); setTotalDepreciation(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Vehicle Depreciation Estimator</AlertTitle><AlertDescription>Estimate how a vehicle's value might depreciate over time using a simplified annual percentage model. Actual depreciation varies by make, model, condition, mileage, and market factors.</AlertDescription></Alert>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-1">
          <CardHeader><CardDescription>Enter vehicle details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="initialValueVD">Initial Vehicle Value ($)</Label><Input id="initialValueVD" type="number" value={initialValue} onChange={e=>setInitialValue(e.target.value)}/></div>
            <div><Label htmlFor="depRateVD">Annual Depreciation Rate (%)</Label><Input id="depRateVD" type="number" value={depreciationRate} onChange={e=>setDepreciationRate(e.target.value)} placeholder="e.g., 15-20 for first year"/></div>
            <div><Label htmlFor="numYearsVD">Number of Years to Estimate</Label><Input id="numYearsVD" type="number" value={numYears} onChange={e=>setNumYears(e.target.value)}/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateDepreciation}>Estimate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        <Card className="lg:col-span-2">
          <CardHeader><CardDescription>Depreciation Schedule &amp; Summary</CardDescription></CardHeader>
          <CardContent>
            {error && (<Alert variant="destructive" className="mb-4"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
            {finalValue && (<div className="p-2 bg-primary/10 rounded-md mb-3"><p className="text-sm text-muted-foreground">Est. Value after {numYears} years: <strong className="text-primary">${finalValue}</strong></p></div>)}
            {totalDepreciation && (<div className="p-2 bg-muted rounded-md mb-3"><p className="text-sm text-muted-foreground">Total Depreciation over {numYears} years: <strong className="font-semibold">${totalDepreciation}</strong></p></div>)}
            {depreciationSchedule.length > 0 && (
              <ScrollArea className="h-[250px] border rounded-md">
                <Table className="text-xs">
                  <TableHeader><TableRow><TableHead>Year</TableHead><TableHead>Depreciation Amount</TableHead><TableHead className="text-right">End of Year Value</TableHead></TableRow></TableHeader>
                  <TableBody>{depreciationSchedule.map(item=>(<TableRow key={item.year}><TableCell>{item.year}</TableCell><TableCell>${item.depreciationAmount}</TableCell><TableCell className="text-right">${item.value}</TableCell></TableRow>))}</TableBody>
                </Table>
              </ScrollArea>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

    

// ====== END OF FILE: VehicleDepreciationCalculator.tsx ======
==================================================

// ====== START OF FILE: VirtualRealityVrSpaceCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.79 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Cuboid, CheckCircle, XCircle } from "lucide-react";

type UnitSystemVR = 'imperial' | 'metric';

interface VrSpaceRequirement {
  name: string;
  minWidth: number; // in meters
  minLength: number; // in meters
  description: string;
}

const vrRequirements: VrSpaceRequirement[] = [
  { name: 'Room-Scale (Optimal)', minWidth: 2.5, minLength: 2.5, description: "Provides an excellent, unconstrained room-scale experience." },
  { name: 'Room-Scale (Minimum)', minWidth: 2, minLength: 2, description: "Meets the minimum requirements for most room-scale VR games." },
  { name: 'Standing/Seated Only', minWidth: 1, minLength: 1, description: "Sufficient for stationary or seated VR experiences." },
];

interface CheckResult {
  name: string;
  isCompatible: boolean;
  description: string;
}

export default function VirtualRealityVrSpaceCalculator() {
  const [units, setUnits] = useState<UnitSystemVR>('imperial');
  const [roomLength, setRoomLength] = useState<string>('');
  const [roomWidth, setRoomWidth] = useState<string>('');
  
  const [checkResults, setCheckResults] = useState<CheckResult[] | null>(null);
  const [error, setError] = useState<string | null>(null);

  const checkVrSpace = () => {
    setError(null);
    setCheckResults(null);
    
    let lengthM: number;
    let widthM: number;
    const len = parseFloat(roomLength);
    const wid = parseFloat(roomWidth);

    if (isNaN(len) || len <= 0 || isNaN(wid) || wid <= 0) {
      setError('Please enter valid positive numbers for room length and width.');
      return;
    }

    if (units === 'imperial') { // Convert feet to meters
      lengthM = len * 0.3048;
      widthM = wid * 0.3048;
    } else { // Already in meters
      lengthM = len;
      widthM = wid;
    }

    const results: CheckResult[] = vrRequirements.map(req => {
      // Allow user to enter length/width interchangeably
      const userMaxLength = Math.max(lengthM, widthM);
      const userMinWidth = Math.min(lengthM, widthM);
      const reqMaxLength = Math.max(req.minLength, req.minWidth);
      const reqMinWidth = Math.min(req.minLength, req.minWidth);

      return {
        name: req.name,
        isCompatible: userMaxLength >= reqMaxLength && userMinWidth >= reqMinWidth,
        description: req.description,
      };
    });
    setCheckResults(results);
  };

  const resetForm = () => {
    setRoomLength('');
    setRoomWidth('');
    setCheckResults(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>VR Space Requirements Calculator</AlertTitle>
        <AlertDescription>
          Check if your room has enough space for different types of Virtual Reality experiences. This is an estimate; always check your specific VR system's requirements.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your available, clear play space dimensions.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
             <div><Label htmlFor="vrUnits">Unit System</Label><Select value={units} onValueChange={(v:UnitSystemVR)=>setUnits(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Imperial (Feet)</SelectItem><SelectItem value="metric">Metric (Meters)</SelectItem></SelectContent></Select></div>
            <div className="grid grid-cols-2 gap-4">
                <div><Label htmlFor="roomLengthVR">Play Area Length ({units})</Label><Input id="roomLengthVR" type="number" value={roomLength} onChange={(e) => setRoomLength(e.target.value)} placeholder="e.g., 10"/></div>
                <div><Label htmlFor="roomWidthVR">Play Area Width ({units})</Label><Input id="roomWidthVR" type="number" value={roomWidth} onChange={(e) => setRoomWidth(e.target.value)} placeholder="e.g., 8"/></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={checkVrSpace}>Check Space</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        <Card>
            <CardHeader><CardDescription>Compatibility Check</CardDescription></CardHeader>
            <CardContent className="space-y-3">
                 {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
                 {checkResults ? (
                    checkResults.map(res => (
                        <div key={res.name} className="p-3 border rounded-md flex items-start gap-3">
                            {res.isCompatible ? <CheckCircle className="h-5 w-5 text-green-500 mt-0.5 shrink-0"/> : <XCircle className="h-5 w-5 text-red-500 mt-0.5 shrink-0"/>}
                            <div>
                                <p className="font-semibold">{res.name}</p>
                                <p className="text-xs text-muted-foreground">{res.description}</p>
                            </div>
                        </div>
                    ))
                 ) : !error && (
                    <p className="text-muted-foreground text-sm">Results will appear here.</p>
                 )}
            </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: VirtualRealityVrSpaceCalculator.tsx ======
==================================================

// ====== START OF FILE: Vo2MaxCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.43 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Lung } from "lucide-react";

// Simplified non-exercise VO2 Max formula: VO2max = 15.3 * (MHR/RHR)
// MHR (Max Heart Rate) = 220 - Age (very common, but can have wide variance)
// RHR = Resting Heart Rate

export default function Vo2MaxCalculator() {
  const [age, setAge] = useState<string>('');
  const [restingHeartRate, setRestingHeartRate] = useState<string>(''); // Beats per minute

  const [estimatedVo2Max, setEstimatedVo2Max] = useState<string | null>(null);
  const [maxHeartRate, setMaxHeartRate] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateVo2Max = () => {
    setError(null); setEstimatedVo2Max(null); setMaxHeartRate(null);
    const ageVal = parseInt(age);
    const rhrVal = parseInt(restingHeartRate);

    if (isNaN(ageVal) || ageVal <= 0 || ageVal > 120 || isNaN(rhrVal) || rhrVal <= 30 || rhrVal > 200) {
      setError('Please enter a valid age (1-120) and resting heart rate (e.g., 40-100 bpm).');
      return;
    }

    const mhr = 220 - ageVal;
    setMaxHeartRate(mhr.toString());

    if (rhrVal === 0) { setError("Resting Heart Rate cannot be zero."); return; }

    const vo2Max = 15.3 * (mhr / rhrVal);
    setEstimatedVo2Max(vo2Max.toFixed(1));
  };

  const resetForm = () => {
    setAge(''); setRestingHeartRate('');
    setEstimatedVo2Max(null); setMaxHeartRate(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>VO₂ Max Estimator (Non-Exercise)</AlertTitle>
        <AlertDescription>
          This calculator provides a <strong className="font-semibold">rough estimate of VO₂ Max</strong> using a non-exercise formula (based on age and resting heart rate). Actual VO₂ Max is best measured in a lab setting or through specific fitness tests. This is for informational purposes only and not a substitute for professional medical or fitness advice.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate your VO₂ Max.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="ageVo2">Age (Years)</Label><Input id="ageVo2" type="number" value={age} onChange={e=>setAge(e.target.value)} placeholder="e.g., 35"/></div>
            <div><Label htmlFor="rhrVo2">Resting Heart Rate (RHR - beats per minute)</Label><Input id="rhrVo2" type="number" value={restingHeartRate} onChange={e=>setRestingHeartRate(e.target.value)} placeholder="e.g., 60 (measure when calm)"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateVo2Max}>Estimate VO₂ Max</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(estimatedVo2Max || error) && (
          <Card>
            <CardHeader><CardDescription>VO₂ Max Estimation</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {maxHeartRate && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Max Heart Rate (220-Age)</p><p className="font-semibold">{maxHeartRate} bpm</p></div>)}
              {estimatedVo2Max && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Estimated VO₂ Max</p><p className="text-2xl font-bold text-primary">{estimatedVo2Max} mL/kg/min</p></div><CopyButton textToCopy={estimatedVo2Max}/></div>)}
              <AlertDescription className="text-xs pt-2">Higher VO₂ Max generally indicates better cardiovascular fitness. Consult fitness professionals for accurate assessments.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: Vo2MaxCalculator.tsx ======
==================================================

// ====== START OF FILE: Vo2MaxEstimatorConceptualNonExercise.tsx ======
// File converted from TSX to TXT
// Original size: 4.45 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Lung } from "lucide-react";

// Simplified non-exercise VO2 Max formula: VO2max = 15.3 * (MHR/RHR)
// MHR (Max Heart Rate) = 220 - Age (very common, but can have wide variance)
// RHR = Resting Heart Rate

export default function Vo2MaxEstimatorConceptualNonExercise() {
  const [age, setAge] = useState<string>('');
  const [restingHeartRate, setRestingHeartRate] = useState<string>(''); // Beats per minute

  const [estimatedVo2Max, setEstimatedVo2Max] = useState<string | null>(null);
  const [maxHeartRate, setMaxHeartRate] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateVo2Max = () => {
    setError(null); setEstimatedVo2Max(null); setMaxHeartRate(null);
    const ageVal = parseInt(age);
    const rhrVal = parseInt(restingHeartRate);

    if (isNaN(ageVal) || ageVal <= 0 || ageVal > 120 || isNaN(rhrVal) || rhrVal <= 30 || rhrVal > 200) {
      setError('Please enter a valid age (1-120) and resting heart rate (e.g., 40-100 bpm).');
      return;
    }

    const mhr = 220 - ageVal;
    setMaxHeartRate(mhr.toString());

    if (rhrVal === 0) { setError("Resting Heart Rate cannot be zero."); return; }

    const vo2Max = 15.3 * (mhr / rhrVal);
    setEstimatedVo2Max(vo2Max.toFixed(1));
  };

  const resetForm = () => {
    setAge(''); setRestingHeartRate('');
    setEstimatedVo2Max(null); setMaxHeartRate(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle>VO₂ Max Estimator (Non-Exercise)</AlertTitle>
        <AlertDescription>
          This calculator provides a <strong className="font-semibold">rough estimate of VO₂ Max</strong> using a non-exercise formula (based on age and resting heart rate). Actual VO₂ Max is best measured in a lab setting or through specific fitness tests. This is for informational purposes only and not a substitute for professional medical or fitness advice.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate your VO₂ Max.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="ageVo2">Age (Years)</Label><Input id="ageVo2" type="number" value={age} onChange={e=>setAge(e.target.value)} placeholder="e.g., 35"/></div>
            <div><Label htmlFor="rhrVo2">Resting Heart Rate (RHR - beats per minute)</Label><Input id="rhrVo2" type="number" value={restingHeartRate} onChange={e=>setRestingHeartRate(e.target.value)} placeholder="e.g., 60 (measure when calm)"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateVo2Max}>Estimate VO₂ Max</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(estimatedVo2Max || error) && (
          <Card>
            <CardHeader><CardDescription>VO₂ Max Estimation</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {maxHeartRate && (<div className="p-2 bg-muted rounded-md"><p className="text-sm text-muted-foreground">Estimated Max Heart Rate (220-Age)</p><p className="font-semibold">{maxHeartRate} bpm</p></div>)}
              {estimatedVo2Max && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Estimated VO₂ Max</p><p className="text-2xl font-bold text-primary">{estimatedVo2Max} mL/kg/min</p></div><CopyButton textToCopy={estimatedVo2Max}/></div>)}
              <AlertDescription className="text-xs pt-2">Higher VO₂ Max generally indicates better cardiovascular fitness. Consult fitness professionals for accurate assessments.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: Vo2MaxEstimatorConceptualNonExercise.tsx ======
==================================================

// ====== START OF FILE: VoltageDividerCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.2 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, CircuitBoard } from "lucide-react";

export default function VoltageDividerCalculator() {
  const [sourceVoltage, setSourceVoltage] = useState<string>('');
  const [resistor1, setResistor1] = useState<string>(''); // R1
  const [resistor2, setResistor2] = useState<string>(''); // R2

  const [outputVoltage, setOutputVoltage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateVoltageDivider = () => {
    setError(null);
    setOutputVoltage(null);

    const vIn = parseFloat(sourceVoltage);
    const r1 = parseFloat(resistor1);
    const r2 = parseFloat(resistor2);

    if (isNaN(vIn) || isNaN(r1) || r1 < 0 || isNaN(r2) || r2 < 0) {
      setError('Source Voltage and both resistor values must be valid, non-negative numbers.');
      return;
    }
    
    if (r1 + r2 === 0) {
        setError('Total resistance cannot be zero. At least one resistor must have a value greater than zero.');
        return;
    }

    // Formula: V_out = V_in * (R2 / (R1 + R2))
    const vOut = vIn * (r2 / (r1 + r2));
    setOutputVoltage(vOut.toFixed(4));
  };

  const resetForm = () => {
    setSourceVoltage('');
    setResistor1('');
    setResistor2('');
    setOutputVoltage(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Voltage Divider Calculator</AlertTitle>
        <AlertDescription>
          Calculate the output voltage of a resistive voltage divider circuit. Assumes no load on the output.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter circuit details (Vout = Vin * R2 / (R1 + R2)).</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="sourceVoltageVD">Source Voltage (Vin)</Label>
              <Input id="sourceVoltageVD" type="number" value={sourceVoltage} onChange={e => setSourceVoltage(e.target.value)} placeholder="e.g., 5" />
            </div>
            <div>
              <Label htmlFor="resistor1VD">Resistor 1 (R1) - Ohms (Ω)</Label>
              <Input id="resistor1VD" type="number" value={resistor1} onChange={e => setResistor1(e.target.value)} placeholder="e.g., 1000" />
            </div>
            <div>
              <Label htmlFor="resistor2VD">Resistor 2 (R2) - Ohms (Ω)</Label>
              <Input id="resistor2VD" type="number" value={resistor2} onChange={e => setResistor2(e.target.value)} placeholder="e.g., 1000" />
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateVoltageDivider}>Calculate Vout</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(outputVoltage || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Calculated Output Voltage</CardDescription>
            </CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4" /><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {outputVoltage && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md">
                  <div>
                    <p className="text-sm text-muted-foreground">Output Voltage (Vout)</p>
                    <p className="text-2xl font-bold text-primary">{outputVoltage} V</p>
                  </div>
                  <CopyButton textToCopy={outputVoltage} />
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: VoltageDividerCalculator.tsx ======
==================================================

// ====== START OF FILE: VoltageDropCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.77 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, ZapOff } from "lucide-react";

// Simplified Voltage Drop: V_drop = I * R_wire
// R_wire = ρ * (L / A), where ρ is resistivity, L is length, A is cross-sectional area.
// For AWG, we'd typically use lookup tables for R per 1000ft or per km.
// Simplified Approach: R_per_1000ft * (Total_Length_ft / 1000) * I
// Example R/1000ft for Copper: 10AWG ~1ohm, 12AWG ~1.6ohm, 14AWG ~2.5ohm (rough values)

const wireResistancePer1000FtCopper: Record<string, number> = { // Ohms per 1000 feet for copper
  "18": 6.51, "16": 4.09, "14": 2.58, "12": 1.62, "10": 1.02, "8": 0.64, "6": 0.40, "4": 0.25, "2": 0.16
};
const wireResistancePerKmCopper: Record<string, number> = { // Ohms per km for copper (approx from ft values)
    "18": 21.35, "16": 13.42, "14": 8.46, "12": 5.31, "10": 3.35, "8": 2.10, "6": 1.31, "4": 0.82, "2": 0.52
};


export default function VoltageDropCalculator() {
  const [current, setCurrent] = useState<string>(''); // Amperes
  const [wireLength, setWireLength] = useState<string>(''); 
  const [wireGauge, setWireGauge] = useState<string>('12'); // AWG
  const [sourceVoltage, setSourceVoltage] = useState<string>('');
  const [unitSystem, setUnitSystem] = useState<'imperial' | 'metric'>('imperial'); // Length in ft or m

  const [voltageDrop, setVoltageDrop] = useState<string | null>(null);
  const [voltageAtLoad, setVoltageAtLoad] = useState<string | null>(null);
  const [percentDrop, setPercentDrop] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateVoltageDrop = () => {
    setError(null); setVoltageDrop(null); setVoltageAtLoad(null); setPercentDrop(null);
    const I = parseFloat(current);
    const L = parseFloat(wireLength); // One-way length
    const Vs = parseFloat(sourceVoltage);
    const gauge = wireGauge;

    if (isNaN(I) || I < 0 || isNaN(L) || L <= 0 || isNaN(Vs) || Vs <= 0) {
      setError('Valid current (>=0A), wire length (>0), and source voltage (>0V) required.');
      return;
    }
    
    let R_per_unit_dist_table = unitSystem === 'imperial' ? wireResistancePer1000FtCopper : wireResistancePerKmCopper;
    let dist_unit_factor = unitSystem === 'imperial' ? 1000 : 1000; // per 1000ft or per km (1000m)

    const R_per_dist_unit = R_per_unit_dist_table[gauge];
    if (!R_per_dist_unit) { setError(`Resistance data for AWG ${gauge} (${unitSystem}) not available in this simplified calculator.`); return; }

    // Voltage drop for DC or single-phase AC (total length is 2 * one-way length for circuit)
    const totalWireResistance = R_per_dist_unit * ( (L * 2) / dist_unit_factor ); // L*2 for there-and-back
    const Vd = I * totalWireResistance;
    
    setVoltageDrop(Vd.toFixed(2));
    setVoltageAtLoad((Vs - Vd).toFixed(2));
    setPercentDrop(((Vd / Vs) * 100).toFixed(2));
  };

  const resetForm = () => {
    setCurrent(''); setWireLength(''); setSourceVoltage(''); setWireGauge('12');
    setVoltageDrop(null); setVoltageAtLoad(null); setPercentDrop(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Voltage Drop Calculator (Simplified)</AlertTitle><AlertDescription>Estimate voltage drop in a wire based on current, length, and gauge (AWG for copper). Uses simplified resistance values. For critical applications, consult electrical codes and detailed specs.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter circuit parameters.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="sourceVoltageVD">Source Voltage (Volts)</Label><Input id="sourceVoltageVD" type="number" value={sourceVoltage} onChange={e=>setSourceVoltage(e.target.value)} placeholder="e.g., 120 or 12"/></div>
            <div><Label htmlFor="currentVD">Current (Amperes)</Label><Input id="currentVD" type="number" value={current} onChange={e=>setCurrent(e.target.value)} placeholder="e.g., 15"/></div>
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="wireLengthVD">One-Way Wire Length</Label><Input id="wireLengthVD" type="number" value={wireLength} onChange={e=>setWireLength(e.target.value)} placeholder="e.g., 100"/></div>
              <div><Label htmlFor="lengthUnitVD">Unit</Label><Select value={unitSystem} onValueChange={(v:'imperial'|'metric')=>setUnitSystem(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="imperial">Feet</SelectItem><SelectItem value="metric">Meters</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="wireGaugeVD">Wire Gauge (AWG - Copper)</Label><Select value={wireGauge} onValueChange={setWireGauge}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{Object.keys(wireResistancePer1000FtCopper).map(g=><SelectItem key={g} value={g}>{g} AWG</SelectItem>)}</SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateVoltageDrop}>Calculate Drop</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(voltageDrop || error) && (
          <Card>
            <CardHeader><CardDescription>Voltage Drop Results</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {voltageDrop && (<div className="p-1 bg-primary/10 rounded-md text-sm">Est. Voltage Drop: <strong className="text-primary">{voltageDrop} V</strong></div>)}
              {voltageAtLoad && (<div className="p-1 bg-muted rounded-md text-sm">Voltage at Load: <strong className="font-semibold">{voltageAtLoad} V</strong></div>)}
              {percentDrop && (<div className="p-1 bg-muted rounded-md text-sm">Percentage Drop: <strong className="font-semibold">{percentDrop}%</strong></div>)}
              <AlertDescription className="text-xs pt-2">General guideline: Keep voltage drop below 3-5% for efficient operation. Total wire length (there and back) is used in calculation.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: VoltageDropCalculator.tsx ======
==================================================

// ====== START OF FILE: VolumeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.7 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Cuboid } from "lucide-react"; // Re-using Box or Cuboid

type Shape3DVolume = 'cube' | 'cuboid' | 'cylinder' | 'sphere' | 'cone' | 'pyramid_square_base';

export default function VolumeCalculator() {
  const [shape, setShape] = useState<Shape3DVolume>('cuboid');
  const [dim1, setDim1] = useState<string>(''); // length, side, radius
  const [dim2, setDim2] = useState<string>(''); // width, height
  const [dim3, setDim3] = useState<string>(''); // height (cuboid/pyramid), not used for all

  const [volume, setVolume] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateVolume = () => {
    setError(null); setVolume(null);
    const d1 = parseFloat(dim1); const d2 = parseFloat(dim2); const d3 = parseFloat(dim3);
    let vol: number | null = null;

    try {
      switch (shape) {
        case 'cube': // d1 = side
          if (isNaN(d1) || d1 <= 0) throw new Error("Side length must be positive.");
          vol = d1 * d1 * d1;
          break;
        case 'cuboid': // d1=length, d2=width, d3=height
          if (isNaN(d1)||d1<=0||isNaN(d2)||d2<=0||isNaN(d3)||d3<=0) throw new Error("L, W, H must be positive.");
          vol = d1 * d2 * d3;
          break;
        case 'cylinder': // d1=radius, d2=height
          if (isNaN(d1)||d1<=0||isNaN(d2)||d2<=0) throw new Error("Radius and height must be positive.");
          vol = Math.PI * d1 * d1 * d2;
          break;
        case 'sphere': // d1=radius
          if (isNaN(d1)||d1<=0) throw new Error("Radius must be positive.");
          vol = (4/3) * Math.PI * Math.pow(d1, 3);
          break;
        case 'cone': // d1=radius, d2=height
          if (isNaN(d1)||d1<=0||isNaN(d2)||d2<=0) throw new Error("Radius and height must be positive.");
          vol = (1/3) * Math.PI * d1 * d1 * d2;
          break;
        case 'pyramid_square_base': // d1=base side, d2=height (perpendicular)
            if (isNaN(d1)||d1<=0||isNaN(d2)||d2<=0) throw new Error("Base side and height must be positive.");
            vol = (1/3) * (d1 * d1) * d2; // (1/3) * BaseArea * Height
            break;
        default: throw new Error("Invalid shape.");
      }
      if (vol !== null && !isNaN(vol) && isFinite(vol)) {
        setVolume(vol.toFixed(3));
      } else {
        throw new Error("Calculation resulted in an invalid number.");
      }
    } catch (e:any) { setError(e.message); }
  };
  
  const resetForm = () => {
    setDim1(''); setDim2(''); setDim3('');
    setVolume(null); setError(null);
  };

  const renderShapeInputsVol = () => {
    switch(shape) {
      case 'cube': return <div><Label htmlFor="dim1VolCube">Side Length</Label><Input id="dim1VolCube" type="number" value={dim1} onChange={e=>setDim1(e.target.value)}/></div>;
      case 'cuboid': return <><Label>Dimensions</Label><div className="grid grid-cols-3 gap-2"><Input type="number" value={dim1} onChange={e=>setDim1(e.target.value)} placeholder="Length"/><Input type="number" value={dim2} onChange={e=>setDim2(e.target.value)} placeholder="Width"/><Input type="number" value={dim3} onChange={e=>setDim3(e.target.value)} placeholder="Height"/></div></>;
      case 'cylinder': return <><Label>Dimensions</Label><div className="grid grid-cols-2 gap-2"><Input type="number" value={dim1} onChange={e=>setDim1(e.target.value)} placeholder="Radius"/><Input type="number" value={dim2} onChange={e=>setDim2(e.target.value)} placeholder="Height"/></div></>;
      case 'sphere': return <div><Label htmlFor="dim1VolSphere">Radius</Label><Input id="dim1VolSphere" type="number" value={dim1} onChange={e=>setDim1(e.target.value)}/></div>;
      case 'cone': return <><Label>Dimensions</Label><div className="grid grid-cols-2 gap-2"><Input type="number" value={dim1} onChange={e=>setDim1(e.target.value)} placeholder="Base Radius"/><Input type="number" value={dim2} onChange={e=>setDim2(e.target.value)} placeholder="Height"/></div></>;
      case 'pyramid_square_base': return <><Label>Dimensions</Label><div className="grid grid-cols-2 gap-2"><Input type="number" value={dim1} onChange={e=>setDim1(e.target.value)} placeholder="Base Side"/><Input type="number" value={dim2} onChange={e=>setDim2(e.target.value)} placeholder="Height"/></div></>;
      default: return null;
    }
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Volume Calculator</AlertTitle><AlertDescription>Calculate volume of various 3D shapes. Ensure all dimensions use the same unit.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Select shape and enter dimensions.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="shapeVol">Shape</Label><Select value={shape} onValueChange={(v:Shape3DVolume)=>{setShape(v);resetForm();}}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                <SelectItem value="cube">Cube</SelectItem><SelectItem value="cuboid">Cuboid</SelectItem><SelectItem value="cylinder">Cylinder</SelectItem>
                <SelectItem value="sphere">Sphere</SelectItem><SelectItem value="cone">Cone</SelectItem><SelectItem value="pyramid_square_base">Pyramid (Sq. Base)</SelectItem>
            </SelectContent></Select></div>
            {renderShapeInputsVol()}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateVolume}>Calculate Volume</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(volume || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Volume</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {volume && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Volume</p><p className="text-2xl font-bold text-primary">{volume} units³</p></div><CopyButton textToCopy={volume}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: VolumeCalculator.tsx ======
==================================================

// ====== START OF FILE: WaistToHipRatioCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.63 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Ratio as RatioIcon, Users } from "lucide-react"; // Using Ratio Lucide icon

type UnitWHR = 'cm' | 'in';
type GenderWHR = 'male' | 'female';

// WHO Risk thresholds (example)
// Men: Low <0.9, Moderate 0.9-0.99, High >=1.0
// Women: Low <0.8, Moderate 0.8-0.84, High >=0.85

export default function WaistToHipRatioCalculator() {
  const [waistCircumference, setWaistCircumference] = useState<string>('');
  const [hipCircumference, setHipCircumference] = useState<string>('');
  const [unit, setUnit] = useState<UnitWHR>('cm');
  const [gender, setGender] = useState<GenderWHR>('female');

  const [whr, setWhr] = useState<string | null>(null);
  const [riskCategory, setRiskCategory] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateWHR = () => {
    setError(null); setWhr(null); setRiskCategory(null);
    const waist = parseFloat(waistCircumference);
    const hip = parseFloat(hipCircumference);

    if (isNaN(waist) || waist <= 0 || isNaN(hip) || hip <= 0) {
      setError('Please enter valid positive numbers for waist and hip circumference.');
      return;
    }
    // Units don't matter for ratio as long as they are consistent for waist & hip.

    const ratio = waist / hip;
    setWhr(ratio.toFixed(2));

    let risk = "N/A";
    if (gender === 'male') {
      if (ratio < 0.90) risk = "Low Health Risk";
      else if (ratio <= 0.99) risk = "Moderate Health Risk";
      else risk = "High Health Risk";
    } else { // female
      if (ratio < 0.80) risk = "Low Health Risk";
      else if (ratio <= 0.84) risk = "Moderate Health Risk";
      else risk = "High Health Risk";
    }
    setRiskCategory(risk);
  };

  const resetForm = () => {
    setWaistCircumference(''); setHipCircumference(''); setUnit('cm'); setGender('female');
    setWhr(null); setRiskCategory(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Waist-to-Hip Ratio (WHR) Calculator</AlertTitle><AlertDescription>Calculate your WHR, an indicator of body fat distribution and potential health risks. Ensure measurements are taken correctly and units are consistent.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your measurements.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="genderWHR">Biological Sex (for risk category)</Label><Select value={gender} onValueChange={(v:GenderWHR)=>setGender(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="female">Female</SelectItem><SelectItem value="male">Male</SelectItem></SelectContent></Select></div>
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="waistCirc">Waist Circumference</Label><Input id="waistCirc" type="number" value={waistCircumference} onChange={e=>setWaistCircumference(e.target.value)} placeholder="e.g., 70 or 28"/></div>
              <div><Label htmlFor="unitWHR">Unit</Label><Select value={unit} onValueChange={(v:UnitWHR)=>setUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="cm">cm</SelectItem><SelectItem value="in">inches</SelectItem></SelectContent></Select></div>
            </div>
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="hipCirc">Hip Circumference</Label><Input id="hipCirc" type="number" value={hipCircumference} onChange={e=>setHipCircumference(e.target.value)} placeholder="e.g., 95 or 38"/></div>
              <div className="self-end text-sm text-muted-foreground">({unit})</div>
            </div>
            <AlertDescription className="text-xs">Waist: narrowest point or navel level. Hip: widest part of buttocks/hips.</AlertDescription>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateWHR}>Calculate WHR</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(whr || error) && (
          <Card>
            <CardHeader><CardDescription>Waist-to-Hip Ratio & Risk</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {whr && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Waist-to-Hip Ratio (WHR)</p><p className="text-2xl font-bold text-primary">{whr}</p></div><CopyButton textToCopy={whr}/></div>)}
              {riskCategory && (<Alert className="mt-2"><Info className="h-4 w-4"/><AlertTitle>Health Risk Category (WHO based)</AlertTitle><AlertDescription>{riskCategory}</AlertDescription></Alert>)}
              <AlertDescription className="text-xs pt-2">WHR is one indicator. Consult a healthcare professional for comprehensive health assessment.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: WaistToHipRatioCalculator.tsx ======
==================================================

// ====== START OF FILE: WaterIntakeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 5.19 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, GlassWater } from "lucide-react";

type WeightUnitWater = 'kg' | 'lb';
type ActivityLevelWater = 'sedentary' | 'light' | 'moderate' | 'active' | 'very_active';

const activityFactors: Record<ActivityLevelWater, number> = {
  sedentary: 0,    // Base intake
  light: 350,      // Add ~350ml / ~12oz
  moderate: 700,   // Add ~700ml / ~24oz
  active: 1050,    // Add ~1050ml / ~35oz
  very_active: 1400// Add ~1400ml / ~47oz
};

export default function WaterIntakeCalculator() {
  const [weight, setWeight] = useState<string>('');
  const [weightUnit, setWeightUnit] = useState<WeightUnitWater>('kg');
  const [activityLevel, setActivityLevel] = useState<ActivityLevelWater>('light');

  const [recommendedIntakeMl, setRecommendedIntakeMl] = useState<string | null>(null);
  const [recommendedIntakeOz, setRecommendedIntakeOz] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateWaterIntake = () => {
    setError(null); setRecommendedIntakeMl(null); setRecommendedIntakeOz(null);
    const w = parseFloat(weight);
    if (isNaN(w) || w <= 0) {
      setError('Please enter a valid positive body weight.');
      return;
    }

    let weightInKg = w;
    if (weightUnit === 'lb') {
      weightInKg = w * 0.453592; // Convert lbs to kg
    }

    // General guideline: 30-35 ml per kg. Let's use 33ml/kg as a base.
    let baseIntakeMl = weightInKg * 33;
    baseIntakeMl += activityFactors[activityLevel];
    
    // Convert to ounces (1 fl oz = 29.5735 ml)
    const intakeOz = baseIntakeMl / 29.5735;

    setRecommendedIntakeMl(baseIntakeMl.toFixed(0));
    setRecommendedIntakeOz(intakeOz.toFixed(0));
  };

  const resetForm = () => {
    setWeight(''); setActivityLevel('light');
    setRecommendedIntakeMl(null); setRecommendedIntakeOz(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Daily Water Intake Estimator</AlertTitle><AlertDescription>Estimate your recommended daily water intake based on weight and activity level. These are general guidelines; individual needs may vary.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter your details.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="weightWater">Body Weight</Label><Input id="weightWater" type="number" value={weight} onChange={e=>setWeight(e.target.value)} placeholder="e.g., 70 or 154"/></div>
              <div><Label htmlFor="weightUnitWater">Unit</Label><Select value={weightUnit} onValueChange={(v:WeightUnitWater)=>setWeightUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="kg">Kilograms (kg)</SelectItem><SelectItem value="lb">Pounds (lb)</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="activityLevelWater">Activity Level</Label><Select value={activityLevel} onValueChange={(v:ActivityLevelWater)=>setActivityLevel(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                {Object.entries(activityFactors).map(([key, _]) => <SelectItem key={key} value={key} className="capitalize">{key.replace('_', ' ')}</SelectItem>)}
            </SelectContent></Select></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateWaterIntake}>Calculate Intake</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(recommendedIntakeMl || error) && (
          <Card>
            <CardHeader><CardDescription>Recommended Daily Water Intake</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {recommendedIntakeMl && recommendedIntakeOz && (
                <div className="p-3 bg-primary/10 rounded-md text-center">
                  <p className="text-sm text-muted-foreground">Estimated Daily Need</p>
                  <p className="text-2xl font-bold text-primary">{recommendedIntakeMl} mL / {recommendedIntakeOz} fl oz</p>
                  <CopyButton textToCopy={`${recommendedIntakeMl} mL / ${recommendedIntakeOz} fl oz`} className="mt-2"/>
                </div>
              )}
              <AlertDescription className="text-xs pt-2 mt-2">Needs can vary based on climate, health, and other factors. Listen to your body.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: WaterIntakeCalculator.tsx ======
==================================================

// ====== START OF FILE: WebFontSizeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.82 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState, ChangeEvent } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Baseline } from "lucide-react";

type FontUnit = 'px' | 'em' | 'rem' | 'pt';

const PX_PER_INCH = 96; // Common screen DPI assumption
const PT_PER_INCH = 72;

export default function WebFontSizeCalculator() {
  const [inputValue, setInputValue] = useState<string>('16');
  const [fromUnit, setFromUnit] = useState<FontUnit>('px');
  const [baseFontSizePx, setBaseFontSizePx] = useState<string>('16'); // For em/rem conversions

  const [results, setResults] = useState<Partial<Record<FontUnit, string>>>({});
  const [error, setError] = useState<string | null>(null);

  const convertFontSize = () => {
    setError(null); setResults({});
    const val = parseFloat(inputValue);
    const basePx = parseFloat(baseFontSizePx);

    if (isNaN(val) || val <= 0) { setError('Input font size must be a positive number.'); return; }
    if ( (fromUnit === 'em' || fromUnit === 'rem') && (isNaN(basePx) || basePx <=0) ) {
        setError('Base font size (px) must be positive for em/rem conversions.'); return;
    }

    let valueInPx: number;
    switch(fromUnit) {
        case 'px': valueInPx = val; break;
        case 'em': valueInPx = val * basePx; break;
        case 'rem': valueInPx = val * basePx; break; // Assuming base for rem is also the root font size here
        case 'pt': valueInPx = (val / PT_PER_INCH) * PX_PER_INCH; break;
        default: setError('Invalid input unit.'); return;
    }

    const newResults: Partial<Record<FontUnit, string>> = { px: valueInPx.toFixed(2) };
    if (basePx > 0) {
        newResults.em = (valueInPx / basePx).toFixed(3);
        newResults.rem = (valueInPx / basePx).toFixed(3); // Simplified
    }
    newResults.pt = ((valueInPx / PX_PER_INCH) * PT_PER_INCH).toFixed(2);
    
    setResults(newResults);
  };

  const resetForm = () => {
    setInputValue('16'); setFromUnit('px'); setBaseFontSizePx('16');
    setResults({}); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Web Font Size Converter</AlertTitle><AlertDescription>Convert font sizes between Pixels (px), EMs, REMs, and Points (pt). EM/REM conversions use a base font size.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter font size and units.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
                <div><Label htmlFor="inputValueFont">Font Size Value</Label><Input id="inputValueFont" type="number" value={inputValue} onChange={e=>setInputValue(e.target.value)} placeholder="e.g., 16"/></div>
                <div><Label htmlFor="fromUnitFont">Input Unit</Label><Select value={fromUnit} onValueChange={(v:FontUnit)=>setFromUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{['px','em','rem','pt'].map(u=><SelectItem key={u} value={u}>{u}</SelectItem>)}</SelectContent></Select></div>
            </div>
            {(fromUnit === 'em' || fromUnit === 'rem') && (<div><Label htmlFor="baseFontSizePx">Base Font Size (for em/rem) (px)</Label><Input id="baseFontSizePx" type="number" value={baseFontSizePx} onChange={e=>setBaseFontSizePx(e.target.value)} placeholder="Default: 16"/></div>)}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={convertFontSize}>Convert</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(Object.keys(results).length > 0 || error) && (
          <Card>
            <CardHeader><CardDescription>Converted Font Sizes</CardDescription></CardHeader>
            <CardContent className="space-y-2">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {Object.entries(results).map(([unit, value]) => value && (
                <div key={unit} className="flex justify-between items-center p-2 bg-muted rounded-md text-sm">
                  <span className="capitalize font-medium">{unit}:</span>
                  <div className="flex items-center gap-1"><strong className="font-mono">{value}</strong><CopyButton textToCopy={value} size="icon" variant="ghost" className="h-6 w-6"/></div>
                </div>
              ))}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: WebFontSizeCalculator.tsx ======
==================================================

// ====== START OF FILE: WebFontSizeCalculatorTypographicScale.tsx ======
// File converted from TSX to TXT
// Original size: 5.77 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Info, Baseline, Terminal } from "lucide-react";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { ScrollArea } from "@/components/ui/scroll-area";


interface ScaleStep {
  level: string;
  px: string;
  rem: string;
}

const scaleRatios: Record<string, {ratio: number, name: string}> = {
    "1.067": { ratio: 1.067, name: "Minor Second" },
    "1.125": { ratio: 1.125, name: "Major Second" },
    "1.200": { ratio: 1.200, name: "Minor Third" },
    "1.250": { ratio: 1.250, name: "Major Third" },
    "1.333": { ratio: 1.333, name: "Perfect Fourth" },
    "1.414": { ratio: 1.414, name: "Augmented Fourth" },
    "1.500": { ratio: 1.500, name: "Perfect Fifth" },
    "1.618": { ratio: 1.618, name: "Golden Ratio" },
};

export default function WebFontSizeCalculatorTypographicScale() {
  const [baseSize, setBaseSize] = useState<string>('16'); // px
  const [scaleFactor, setScaleFactor] = useState<string>('1.250');
  const [numSteps, setNumSteps] = useState<string>('5'); // Total steps in scale (e.g., p, h4, h3, h2, h1)
  
  const [scale, setScale] = useState<ScaleStep[] | null>(null);
  const [error, setError] = useState<string | null>(null);

  const generateScale = () => {
    setError(null);
    setScale(null);
    const base = parseFloat(baseSize);
    const ratio = parseFloat(scaleFactor);
    const steps = parseInt(numSteps);
    if (isNaN(base) || base <= 0 || isNaN(ratio) || ratio <= 1 || isNaN(steps) || steps <= 1) {
      setError("Base size (>0), Scale (>1), and Steps (>1) must be valid numbers.");
      return;
    }

    const generatedScale: ScaleStep[] = [];
    const stepNames = ['p (body)', 'h6', 'h5', 'h4', 'h3', 'h2', 'h1', 'jumbo', 'mega']; // Example names
    
    // Generate scale upwards from base
    for (let i = 0; i < steps; i++) {
        const pxValue = base * Math.pow(ratio, i);
        generatedScale.push({
            level: stepNames[i] || `Step ${i + 1}`,
            px: `${pxValue.toFixed(2)}px`,
            rem: `${(pxValue / 16).toFixed(3)}rem`, // Assuming root font size is 16px for rem conversion
        });
    }
    
    // Sort from largest to smallest for display
    setScale(generatedScale.reverse());
  };
  
  const resetForm = () => {
    setBaseSize('16');
    setScaleFactor('1.250');
    setNumSteps('5');
    setScale(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Typographic Scale Generator</AlertTitle><AlertDescription>Create a harmonious and consistent set of font sizes for your web project based on a base size and a musical or mathematical ratio.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Define your typographic scale.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="baseSizeScale">Base Font Size (px)</Label><Input id="baseSizeScale" type="number" value={baseSize} onChange={e=>setBaseSize(e.target.value)} placeholder="e.g., 16"/></div>
            <div><Label htmlFor="scaleFactorSelect">Scale Ratio</Label><Select value={scaleFactor} onValueChange={setScaleFactor}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>
                {Object.entries(scaleRatios).map(([key, val]) => <SelectItem key={key} value={key}>{val.name} ({key})</SelectItem>)}
            </SelectContent></Select></div>
             <div><Label htmlFor="numStepsScale">Number of Sizes to Generate</Label><Input id="numStepsScale" type="number" value={numSteps} onChange={e=>setNumSteps(e.target.value)} placeholder="e.g., 5"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={generateScale}>Generate Scale</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        
        <Card>
            <CardHeader><CardDescription>Generated Typographic Scale</CardDescription></CardHeader>
            <CardContent>
                {error && (<Alert variant="destructive" className="mb-4"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
                {scale && scale.length > 0 ? (
                    <ScrollArea className="h-[300px] border rounded-md">
                        <Table>
                            <TableHeader><TableRow><TableHead>Level</TableHead><TableHead>Pixels</TableHead><TableHead className="text-right">REM</TableHead></TableRow></TableHeader>
                            <TableBody>
                                {scale.map(item => (
                                    <TableRow key={item.level}>
                                        <TableCell className="font-medium">{item.level}</TableCell>
                                        <TableCell>{item.px}</TableCell>
                                        <TableCell className="text-right font-mono">{item.rem}</TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    </ScrollArea>
                ) : !error && <p className="text-sm text-muted-foreground">Your scale will appear here.</p>}
            </CardContent>
        </Card>
      </div>
    </div>
  );
}


// ====== END OF FILE: WebFontSizeCalculatorTypographicScale.tsx ======
==================================================

// ====== START OF FILE: WebsiteCarbonFootprintCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.02 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Globe, ExternalLink } from "lucide-react";
import Link from 'next/link';

// Based on Sustainable Web Design model: https://sustainablewebdesign.org/understanding-digital-carbon/
const KWH_PER_GB = 0.81; // Average energy per gigabyte transferred
const CO2E_PER_KWH_GRID = 442; // Global average grid carbon intensity (gCO2e/kWh)
const GREEN_HOSTING_FACTOR = 0.75; // 25% cleaner than grid average
const NEW_VISITOR_PERCENTAGE = 0.75; // Assume 75% of visits are new
const RETURNING_VISITOR_CACHING_FACTOR = 0.02; // Assume returning visitors load only 2% of data

export default function WebsiteCarbonFootprintCalculator() {
  const [dataTransferGb, setDataTransferGb] = useState<string>(''); // Per month
  const [isGreenHosting, setIsGreenHosting] = useState<boolean>(false);
  const [monthlyPageViews, setMonthlyPageViews] = useState<string>('');

  const [annualCo2e, setAnnualCo2e] = useState<string | null>(null);
  const [equivalentTrees, setEquivalentTrees] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateFootprint = () => {
    setError(null);
    setAnnualCo2e(null);
    setEquivalentTrees(null);

    const dataGb = parseFloat(dataTransferGb);
    const pageViews = parseInt(monthlyPageViews);
    if (isNaN(dataGb) || dataGb <= 0 || isNaN(pageViews) || pageViews <= 0) {
      setError("Please enter a valid page size (data transfer per view) and positive monthly page views.");
      return;
    }

    // 1. Energy per visit in kWh
    // E = (Data Transfer per New Visit * % New Visits + Data Transfer per Returning Visit * % Returning Visits) * Energy per GB
    const dataPerNewVisit = dataGb;
    const dataPerReturningVisit = dataGb * RETURNING_VISITOR_CACHING_FACTOR;
    const avgDataPerVisit = (dataPerNewVisit * NEW_VISITOR_PERCENTAGE) + (dataPerReturningVisit * (1 - NEW_VISITOR_PERCENTAGE));
    const energyPerVisit = avgDataPerVisit * KWH_PER_GB;

    // 2. Carbon per visit in grams CO2e
    const carbonIntensity = isGreenHosting ? CO2E_PER_KWH_GRID * GREEN_HOSTING_FACTOR : CO2E_PER_KWH_GRID;
    const co2ePerVisit = energyPerVisit * carbonIntensity;

    // 3. Annual Emissions
    const annualVisits = pageViews * 12;
    const totalAnnualCo2eGrams = co2ePerVisit * annualVisits;
    
    setAnnualCo2e(totalAnnualCo2eGrams.toFixed(2));
    
    // An average tree absorbs ~21,000 grams (21kg) of CO2 per year
    const treesEquivalent = totalAnnualCo2eGrams / 21000;
    setEquivalentTrees(treesEquivalent.toFixed(1));
  };

  const resetForm = () => {
    setDataTransferGb('');
    setMonthlyPageViews('');
    setIsGreenHosting(false);
    setAnnualCo2e(null);
    setEquivalentTrees(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Website Carbon Footprint Estimator (Simplified)</AlertTitle>
        <AlertDescription>
          Estimate your website's annual carbon footprint based on its data transfer per page view and monthly traffic. Uses the Sustainable Web Design model. This is an estimate, for more detailed analysis check out tools like{' '}
          <Link href="https://www.websitecarbon.com/" target="_blank" rel="noopener noreferrer" className="font-semibold underline">Website Carbon Calculator <ExternalLink className="inline h-3 w-3 ml-0.5"/></Link>.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your website's data.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="dataTransferGb">Data Transfer per Page View (GB)</Label><Input id="dataTransferGb" type="number" value={dataTransferGb} onChange={e => setDataTransferGb(e.target.value)} placeholder="e.g., 0.002 (for 2MB)"/></div>
            <div><Label htmlFor="monthlyPageViews">Monthly Page Views</Label><Input id="monthlyPageViews" type="number" value={monthlyPageViews} onChange={e => setMonthlyPageViews(e.target.value)} placeholder="e.g., 10000"/></div>
            <div className="flex items-center space-x-2"><Checkbox id="greenHosting" checked={isGreenHosting} onCheckedChange={(checked) => setIsGreenHosting(!!checked)} /><Label htmlFor="greenHosting">Hosted on a Green Provider?</Label></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateFootprint}>Estimate Footprint</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(annualCo2e || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Annual Carbon Footprint</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {annualCo2e && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Est. Annual CO₂e</p><p className="text-2xl font-bold text-primary">{(parseFloat(annualCo2e)/1000).toFixed(2)} kg</p></div><CopyButton textToCopy={`${(parseFloat(annualCo2e)/1000).toFixed(2)} kg`} /></div>)}
              {equivalentTrees && (<div className="mt-4 text-center"><p className="text-sm text-muted-foreground">Equivalent to the CO₂ absorbed by</p><p className="text-xl font-semibold">{equivalentTrees} trees in a year.</p></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: WebsiteCarbonFootprintCalculator.tsx ======
==================================================

// ====== START OF FILE: WebsiteLoadTimeEstimator.tsx ======
// File converted from TSX to TXT
// Original size: 5 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Timer } from "lucide-react";

type PageSizeUnit = 'KB' | 'MB';
type ConnectionSpeedUnit = 'Kbps' | 'Mbps';

export default function WebsiteLoadTimeEstimator() {
  const [pageSize, setPageSize] = useState<string>('');
  const [pageSizeUnit, setPageSizeUnit] = useState<PageSizeUnit>('MB');
  const [connectionSpeed, setConnectionSpeed] = useState<string>('');
  const [connectionSpeedUnit, setConnectionSpeedUnit] = useState<ConnectionSpeedUnit>('Mbps');

  const [estimatedLoadTime, setEstimatedLoadTime] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateLoadTime = () => {
    setError(null); setEstimatedLoadTime(null);
    const size = parseFloat(pageSize);
    const speed = parseFloat(connectionSpeed);

    if (isNaN(size) || size <= 0 || isNaN(speed) || speed <= 0) {
      setError('Page size and connection speed must be positive numbers.');
      return;
    }

    let pageSizeInBits: number;
    if (pageSizeUnit === 'KB') pageSizeInBits = size * 1024 * 8;
    else pageSizeInBits = size * 1024 * 1024 * 8; // MB

    let connectionSpeedInBps: number; // bits per second
    if (connectionSpeedUnit === 'Kbps') connectionSpeedInBps = speed * 1000;
    else connectionSpeedInBps = speed * 1000 * 1000; // Mbps

    if (connectionSpeedInBps === 0) {
        setError("Connection speed cannot be zero.");
        return;
    }

    const timeSeconds = pageSizeInBits / connectionSpeedInBps;
    setEstimatedLoadTime(timeSeconds.toFixed(2));
  };

  const resetForm = () => {
    setPageSize(''); setConnectionSpeed('');
    setEstimatedLoadTime(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive"><Info className="h-4 w-4"/><AlertTitle>Simplified Estimator</AlertTitle><AlertDescription>This calculator provides a VERY rough estimate of website load time based purely on page size and connection speed. Actual load times are affected by many other factors like server response time, latency, number of requests, rendering time, caching, and device performance.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Estimate website download time.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="pageSizeWLT">Page Size</Label><Input id="pageSizeWLT" type="number" value={pageSize} onChange={e=>setPageSize(e.target.value)} placeholder="e.g., 2"/></div>
              <div><Label htmlFor="pageSizeUnitWLT">Unit</Label><Select value={pageSizeUnit} onValueChange={(v:PageSizeUnit)=>setPageSizeUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="MB">MB</SelectItem><SelectItem value="KB">KB</SelectItem></SelectContent></Select></div>
            </div>
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="connSpeedWLT">Connection Speed</Label><Input id="connSpeedWLT" type="number" value={connectionSpeed} onChange={e=>setConnectionSpeed(e.target.value)} placeholder="e.g., 10"/></div>
              <div><Label htmlFor="connSpeedUnitWLT">Unit</Label><Select value={connectionSpeedUnit} onValueChange={(v:ConnectionSpeedUnit)=>setConnectionSpeedUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="Mbps">Mbps</SelectItem><SelectItem value="Kbps">Kbps</SelectItem></SelectContent></Select></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateLoadTime}>Estimate Time</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(estimatedLoadTime || error) && (
          <Card>
            <CardHeader><CardDescription>Estimated Load Time (Download Only)</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {estimatedLoadTime && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Est. Load Time</p><p className="text-2xl font-bold text-primary">{estimatedLoadTime} seconds</p></div><CopyButton textToCopy={estimatedLoadTime}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: WebsiteLoadTimeEstimator.tsx ======
==================================================

// ====== START OF FILE: WeightUnitConverter.tsx ======
// File converted from TSX to TXT
// Original size: 4.29 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Scale } from "lucide-react";

type WeightUnitConv = 'kg' | 'lb' | 'st' | 'g' | 'oz'; // Kilograms, Pounds, Stones, Grams, Ounces

// Conversion factors to Kilograms (base unit)
const toKgFactors: Record<WeightUnitConv, number> = {
  kg: 1,
  lb: 0.453592,
  st: 6.35029, // 1 stone = 14 lbs
  g: 0.001,
  oz: 0.0283495,
};
// Conversion factors from Kilograms
const fromKgFactors: Record<WeightUnitConv, number> = {
  kg: 1,
  lb: 2.20462,
  st: 0.157473,
  g: 1000,
  oz: 35.274,
};

export default function WeightUnitConverter() {
  const [inputValue, setInputValue] = useState<string>('');
  const [fromUnit, setFromUnit] = useState<WeightUnitConv>('kg');
  const [toUnit, setToUnit] = useState<WeightUnitConv>('lb');
  const [result, setResult] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const convertWeight = () => {
    setError(null); setResult(null);
    const val = parseFloat(inputValue);
    if (isNaN(val) || val < 0) { setError('Input weight must be a non-negative number.'); return; }

    if (fromUnit === toUnit) { setResult(val.toFixed(3)); return; }

    const valueInKg = val * toKgFactors[fromUnit];
    const convertedValue = valueInKg * fromKgFactors[toUnit];
    setResult(convertedValue.toFixed(3));
  };

  const resetForm = () => {
    setInputValue(''); setFromUnit('kg'); setToUnit('lb');
    setResult(null); setError(null);
  };
  
  const unitOptions = Object.keys(toKgFactors) as WeightUnitConv[];

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Weight Unit Converter</AlertTitle><AlertDescription>Convert weight measurements between Kilograms (kg), Pounds (lb), Stones (st), Grams (g), and Ounces (oz).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter weight and select units.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="inputValueWeight">Weight Value</Label><Input id="inputValueWeight" type="number" value={inputValue} onChange={e=>setInputValue(e.target.value)} placeholder="e.g., 70"/></div>
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="fromUnitWeight">From Unit</Label><Select value={fromUnit} onValueChange={(v:WeightUnitConv)=>setFromUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{unitOptions.map(u=><SelectItem key={`from-${u}`} value={u}>{u}</SelectItem>)}</SelectContent></Select></div>
              <div><Label htmlFor="toUnitWeight">To Unit</Label><Select value={toUnit} onValueChange={(v:WeightUnitConv)=>setToUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent>{unitOptions.map(u=><SelectItem key={`to-${u}`} value={u}>{u}</SelectItem>)}</SelectContent></Select></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={convertWeight}>Convert</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(result || error) && (
          <Card>
            <CardHeader><CardDescription>Converted Weight</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {result && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">{inputValue}{fromUnit} is</p><p className="text-2xl font-bold text-primary">{result} {toUnit}</p></div><CopyButton textToCopy={`${result} ${toUnit}`}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: WeightUnitConverter.tsx ======
==================================================

// ====== START OF FILE: WindChillCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 6.23 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, Wind as WindIcon } from "lucide-react";

type TempUnitWind = 'F' | 'C';
type SpeedUnitWind = 'mph' | 'kmh' | 'ms';

export default function WindChillCalculator() {
  const [temperature, setTemperature] = useState<string>('');
  const [windSpeed, setWindSpeed] = useState<string>('');
  const [tempUnit, setTempUnit] = useState<TempUnitWind>('F');
  const [speedUnit, setSpeedUnit] = useState<SpeedUnitWind>('mph');

  const [windChillF, setWindChillF] = useState<string | null>(null);
  const [windChillC, setWindChillC] = useState<string | null>(null);
  const [frostbiteTime, setFrostbiteTime] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateWindChill = () => {
    setError(null); setWindChillF(null); setWindChillC(null); setFrostbiteTime(null);
    let T_F = parseFloat(temperature); // Temperature in Fahrenheit
    let V_mph = parseFloat(windSpeed); // Wind speed in mph

    if (isNaN(T_F) || isNaN(V_mph) || V_mph < 0) {
      setError('Please enter a valid temperature and non-negative wind speed.');
      return;
    }

    // Convert inputs to F and mph if necessary
    if (tempUnit === 'C') T_F = (T_F * 9/5) + 32;
    if (speedUnit === 'kmh') V_mph = V_mph / 1.60934;
    else if (speedUnit === 'ms') V_mph = V_mph * 2.23694;

    // NWS Wind Chill Formula (valid for T_F <= 50°F and V_mph >= 3 mph)
    if (T_F > 50 || V_mph < 3) {
      setError("Wind chill formula is most accurate for temperatures at or below 50°F and wind speeds above 3 mph. Results may be approximate or not applicable.");
      // Optionally, still show calculation or just air temp
      const wc_f = T_F; // Or a simpler approximation for mild conditions
      const wc_c = (wc_f - 32) * 5/9;
      setWindChillF(wc_f.toFixed(1));
      setWindChillC(wc_c.toFixed(1));
      setFrostbiteTime("Low risk (or conditions outside typical wind chill calculation range)");
      return;
    }

    const WCT_F = 35.74 + (0.6215 * T_F) - (35.75 * Math.pow(V_mph, 0.16)) + (0.4275 * T_F * Math.pow(V_mph, 0.16));
    const WCT_C = (WCT_F - 32) * 5/9;

    setWindChillF(WCT_F.toFixed(1));
    setWindChillC(WCT_C.toFixed(1));

    // Simplified Frostbite Time (very approximate based on WCT_F)
    if (WCT_F <= -50) setFrostbiteTime("Less than 5 minutes");
    else if (WCT_F <= -35) setFrostbiteTime("5-10 minutes");
    else if (WCT_F <= -20) setFrostbiteTime("10-30 minutes");
    else if (WCT_F <= 0) setFrostbiteTime("30+ minutes (caution advised)");
    else setFrostbiteTime("Low risk");
  };

  const resetForm = () => {
    setTemperature(''); setWindSpeed('');
    setWindChillF(null); setWindChillC(null); setFrostbiteTime(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Wind Chill Calculator</AlertTitle><AlertDescription>Calculate the "feels like" temperature based on air temperature and wind speed using the NWS formula. Also provides an approximate frostbite risk time.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter weather conditions.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="tempWC">Air Temperature</Label><Input id="tempWC" type="number" value={temperature} onChange={e=>setTemperature(e.target.value)} placeholder="e.g., 30 or -5"/></div>
              <div><Label htmlFor="tempUnitWC">Unit</Label><Select value={tempUnit} onValueChange={(v:TempUnitWind)=>setTempUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="F">°F</SelectItem><SelectItem value="C">°C</SelectItem></SelectContent></Select></div>
            </div>
            <div className="grid grid-cols-[2fr_1fr] gap-2">
              <div><Label htmlFor="windSpeedWC">Wind Speed</Label><Input id="windSpeedWC" type="number" value={windSpeed} onChange={e=>setWindSpeed(e.target.value)} placeholder="e.g., 15"/></div>
              <div><Label htmlFor="speedUnitWC">Unit</Label><Select value={speedUnit} onValueChange={(v:SpeedUnitWind)=>setSpeedUnit(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="mph">mph</SelectItem><SelectItem value="kmh">km/h</SelectItem><SelectItem value="ms">m/s</SelectItem></SelectContent></Select></div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateWindChill}>Calculate Wind Chill</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(windChillF || error) && (
          <Card>
            <CardHeader><CardDescription>Wind Chill "Feels Like" Temperature</CardDescription></CardHeader>
            <CardContent className="space-y-3">
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error/Note</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {windChillF && windChillC && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Wind Chill</p><p className="text-2xl font-bold text-primary">{windChillF}°F / {windChillC}°C</p></div><CopyButton textToCopy={`${windChillF}°F / ${windChillC}°C`}/></div>)}
              {frostbiteTime && (<Alert variant={frostbiteTime.includes("minutes") && !frostbiteTime.includes("30+") ? "destructive" : "default"} className="mt-2"><Info className="h-4 w-4"/><AlertTitle>Approx. Frostbite Risk Time</AlertTitle><AlertDescription>{frostbiteTime}</AlertDescription></Alert>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: WindChillCalculator.tsx ======
==================================================

// ====== START OF FILE: WineServingCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.84 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, GlassWater as WineIcon } from "lucide-react";

const SERVINGS_PER_750ML_BOTTLE = 5; // Approx. 5 oz / 150 ml servings

export default function WineServingCalculator() {
  const [numGuests, setNumGuests] = useState<string>('');
  const [drinksPerGuest, setDrinksPerGuest] = useState<string>('2.5'); // Avg drinks per guest over event

  const [bottlesNeeded, setBottlesNeeded] = useState<string | null>(null);
  const [totalServings, setTotalServings] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateWine = () => {
    setError(null);
    setBottlesNeeded(null);
    setTotalServings(null);

    const guests = parseInt(numGuests);
    const dpg = parseFloat(drinksPerGuest);

    if (isNaN(guests) || guests <= 0 || isNaN(dpg) || dpg <= 0) {
      setError('Number of guests and drinks per guest must be positive numbers.');
      return;
    }

    const calculatedTotalServings = guests * dpg;
    const calculatedBottles = Math.ceil(calculatedTotalServings / SERVINGS_PER_750ML_BOTTLE);
    
    setTotalServings(calculatedTotalServings.toFixed(1));
    setBottlesNeeded(calculatedBottles.toString());
  };

  const resetForm = () => {
    setNumGuests('');
    setDrinksPerGuest('2.5');
    setBottlesNeeded(null);
    setTotalServings(null);
    setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>Wine Serving Calculator for Events</AlertTitle>
        <AlertDescription>
          Estimate how many standard 750ml bottles of wine you need for a party or event. This is a guideline; adjust based on your guests' preferences.
        </AlertDescription>
      </Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription>Enter your event details.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="numGuests">Number of Guests</Label>
              <Input
                id="numGuests"
                type="number"
                value={numGuests}
                onChange={(e) => setNumGuests(e.target.value)}
                placeholder="e.g., 20"
              />
            </div>
            <div>
              <Label htmlFor="drinksPerGuest">Average Drinks per Guest</Label>
              <Input
                id="drinksPerGuest"
                type="number"
                step="0.5"
                value={drinksPerGuest}
                onChange={(e) => setDrinksPerGuest(e.target.value)}
                placeholder="e.g., 2.5"
              />
              <p className="text-xs text-muted-foreground mt-1">A standard 750ml bottle has about 5 servings.</p>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button onClick={calculateWine}>Calculate Bottles</Button>
            <Button variant="outline" onClick={resetForm}>Reset</Button>
          </CardFooter>
        </Card>

        {(bottlesNeeded || error) && (
          <Card>
            <CardHeader>
              <CardDescription>Estimated Wine Needed</CardDescription>
            </CardHeader>
            <CardContent>
              {error && (
                <Alert variant="destructive">
                  <Terminal className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              {totalServings && (
                 <div className="p-2 bg-muted rounded-md text-sm">Total Servings Needed: <strong className="font-semibold">{totalServings}</strong></div>
              )}
              {bottlesNeeded !== null && (
                <div className="flex justify-between items-center p-3 bg-primary/10 rounded-md mt-2">
                  <div>
                    <p className="text-sm text-muted-foreground">Bottles Needed (750ml)</p>
                    <p className="text-2xl font-bold text-primary">{bottlesNeeded} bottles</p>
                  </div>
                  <CopyButton textToCopy={bottlesNeeded} />
                </div>
              )}
               <AlertDescription className="text-xs pt-2 mt-2">
                It's often wise to have a mix of red and white, and to round up.
              </AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: WineServingCalculator.tsx ======
==================================================

// ====== START OF FILE: WireGaugeAmpacityInformationConceptual.tsx ======
// File converted from TSX to TXT
// Original size: 4.82 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Info, Cable } from "lucide-react";

// VERY SIMPLIFIED - Placeholder ampacity data for common copper AWG.
// Actual ampacity depends on insulation type, temperature, bundling, ambient conditions, and NEC tables.
const awgAmpacityCopper: Record<string, { ampacity: string, commonUse: string }> = {
  "18": { ampacity: "~7-10A", commonUse: "Low voltage lighting, thermostats" },
  "16": { ampacity: "~10-13A", commonUse: "Extension cords (light duty)" },
  "14": { ampacity: "~15A", commonUse: "General lighting and receptacle circuits (15A breaker)" },
  "12": { ampacity: "~20A", commonUse: "Kitchen, bathroom, laundry circuits (20A breaker)" },
  "10": { ampacity: "~30A", commonUse: "Dryers, AC units, water heaters (30A breaker)" },
  "8": { ampacity: "~40-50A", commonUse: "Larger appliances, subpanels" },
  "6": { ampacity: "~55-65A", commonUse: "Electric ranges, larger AC units" },
  "4": { ampacity: "~70-85A", commonUse: "Service entrance, larger subpanels" },
  "2": { ampacity: "~95-115A", commonUse: "Service entrance" },
};

export default function WireGaugeAmpacityInformationConceptual() {
  const [selectedGauge, setSelectedGauge] = useState<string>('12');
  const [gaugeInfo, setGaugeInfo] = useState(awgAmpacityCopper['12']);

  const handleGaugeChange = (gauge: string) => {
    setSelectedGauge(gauge);
    setGaugeInfo(awgAmpacityCopper[gauge] || { ampacity: 'N/A', commonUse: 'Data not available for this gauge in simplified calculator.' });
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle className="font-bold text-lg">Critical Safety Warning - For Illustration Only</AlertTitle>
        <AlertDescription className="text-base">
          <p>This Wire Gauge Calculator provides <strong className="font-semibold">highly simplified, approximate ampacity information for common copper AWG sizes for illustrative purposes ONLY.</strong> Actual safe current carrying capacity (ampacity) of a wire is determined by many factors including wire material (copper/aluminum), insulation type, ambient temperature, number of conductors in a raceway (bundling/derating), and termination temperature ratings.</p>
          <p className="mt-2"><strong className="font-semibold">ALWAYS refer to the National Electrical Code (NEC) in the US, or your local electrical codes, and consult a qualified electrician for any electrical wiring or circuit design.</strong> Incorrect wire sizing can lead to overheating, fire, equipment damage, and serious injury or death.</p>
        </AlertDescription>
      </Alert>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription className="flex items-center"><Cable className="mr-2 h-5 w-5 text-primary"/>Select Wire Gauge (AWG Copper)</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="awgSelect">AWG Wire Gauge</Label>
              <Select value={selectedGauge} onValueChange={handleGaugeChange}>
                <SelectTrigger id="awgSelect"><SelectValue /></SelectTrigger>
                <SelectContent>
                  {Object.keys(awgAmpacityCopper).map(gauge => (
                    <SelectItem key={gauge} value={gauge}>{gauge} AWG</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {gaugeInfo && (
          <Card>
            <CardHeader>
              <CardDescription>Approximate Information for {selectedGauge} AWG Copper Wire</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="p-2 bg-muted rounded-md">
                <p className="text-sm text-muted-foreground">Approximate Ampacity</p>
                <p className="font-semibold text-lg">{gaugeInfo.ampacity}</p>
              </div>
              <div className="p-2 bg-muted rounded-md">
                <p className="text-sm text-muted-foreground">Common Uses (Examples)</p>
                <p className="font-semibold">{gaugeInfo.commonUse}</p>
              </div>
               <AlertDescription className="text-xs pt-2">Remember: This is simplified. Real-world application requires adherence to electrical codes and professional consultation.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: WireGaugeAmpacityInformationConceptual.tsx ======
==================================================

// ====== START OF FILE: WireGaugeCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 4.81 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Info, Cable } from "lucide-react";

// VERY SIMPLIFIED - Placeholder ampacity data for common copper AWG.
// Actual ampacity depends on insulation type, temperature, bundling, ambient conditions, and NEC tables.
const awgAmpacityCopper: Record<string, { ampacity: string, commonUse: string }> = {
  "18": { ampacity: "~7-10A", commonUse: "Low voltage lighting, thermostats" },
  "16": { ampacity: "~10-13A", commonUse: "Extension cords (light duty)" },
  "14": { ampacity: "~15A", commonUse: "General lighting and receptacle circuits (15A breaker)" },
  "12": { ampacity: "~20A", commonUse: "Kitchen, bathroom, laundry circuits (20A breaker)" },
  "10": { ampacity: "~30A", commonUse: "Dryers, AC units, water heaters (30A breaker)" },
  "8": { ampacity: "~40-50A", commonUse: "Larger appliances, subpanels" },
  "6": { ampacity: "~55-65A", commonUse: "Electric ranges, larger AC units" },
  "4": { ampacity: "~70-85A", commonUse: "Service entrance, larger subpanels" },
  "2": { ampacity: "~95-115A", commonUse: "Service entrance" },
};

export default function WireGaugeCalculator() {
  const [selectedGauge, setSelectedGauge] = useState<string>('12');
  const [gaugeInfo, setGaugeInfo] = useState(awgAmpacityCopper['12']);

  const handleGaugeChange = (gauge: string) => {
    setSelectedGauge(gauge);
    setGaugeInfo(awgAmpacityCopper[gauge] || { ampacity: 'N/A', commonUse: 'Data not available for this gauge in simplified calculator.' });
  };

  return (
    <div className="space-y-6">
      <Alert variant="destructive">
        <Info className="h-4 w-4" />
        <AlertTitle className="font-bold text-lg">Critical Safety Warning - For Illustration Only</AlertTitle>
        <AlertDescription className="text-base">
          <p>This Wire Gauge Calculator provides <strong className="font-semibold">highly simplified, approximate ampacity information for common copper AWG sizes for illustrative purposes ONLY.</strong> Actual safe current carrying capacity (ampacity) of a wire is determined by many factors including wire material (copper/aluminum), insulation type, ambient temperature, number of conductors in a raceway (bundling/derating), and termination temperature ratings.</p>
          <p className="mt-2"><strong className="font-semibold">ALWAYS refer to the National Electrical Code (NEC) in the US, or your local electrical codes, and consult a qualified electrician for any electrical wiring or circuit design.</strong> Incorrect wire sizing can lead to overheating, fire, equipment damage, and serious injury or death.</p>
        </AlertDescription>
      </Alert>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardDescription className="flex items-center"><Cable className="mr-2 h-5 w-5 text-primary"/>Select Wire Gauge (AWG Copper)</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="awgSelect">AWG Wire Gauge</Label>
              <Select value={selectedGauge} onValueChange={handleGaugeChange}>
                <SelectTrigger id="awgSelect"><SelectValue /></SelectTrigger>
                <SelectContent>
                  {Object.keys(awgAmpacityCopper).map(gauge => (
                    <SelectItem key={gauge} value={gauge}>{gauge} AWG</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {gaugeInfo && (
          <Card>
            <CardHeader>
              <CardDescription>Approximate Information for {selectedGauge} AWG Copper Wire</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="p-2 bg-muted rounded-md">
                <p className="text-sm text-muted-foreground">Approximate Ampacity</p>
                <p className="font-semibold text-lg">{gaugeInfo.ampacity}</p>
              </div>
              <div className="p-2 bg-muted rounded-md">
                <p className="text-sm text-muted-foreground">Common Uses (Examples)</p>
                <p className="font-semibold">{gaugeInfo.commonUse}</p>
              </div>
               <AlertDescription className="text-xs pt-2">Remember: This is simplified. Real-world application requires adherence to electrical codes and professional consultation.</AlertDescription>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

    

// ====== END OF FILE: WireGaugeCalculator.tsx ======
==================================================

// ====== START OF FILE: WorkWeekHoursCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.8 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, ClipboardEdit } from "lucide-react";

interface DailyHours {
  day: string;
  hours: string; // Can be decimal e.g., 7.5
}

const defaultDays: DailyHours[] = [
  { day: "Monday", hours: "" },
  { day: "Tuesday", hours: "" },
  { day: "Wednesday", hours: "" },
  { day: "Thursday", hours: "" },
  { day: "Friday", hours: "" },
  { day: "Saturday", hours: "0" },
  { day: "Sunday", hours: "0" },
];

export default function WorkWeekHoursCalculator() {
  const [dailyHours, setDailyHours] = useState<DailyHours[]>(defaultDays);
  const [totalWeeklyHours, setTotalWeeklyHours] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleHoursChange = (dayName: string, value: string) => {
    setDailyHours(prev => prev.map(d => d.day === dayName ? { ...d, hours: value } : d));
    setTotalWeeklyHours(null); // Reset total when individual hours change
  };

  const calculateTotal = () => {
    setError(null);
    let total = 0;
    for (const entry of dailyHours) {
      const h = parseFloat(entry.hours);
      if (entry.hours !== "" && (isNaN(h) || h < 0 || h > 24)) {
        setError(`Invalid hours for ${entry.day}. Must be between 0 and 24.`);
        return;
      }
      if (!isNaN(h) && h > 0) total += h;
    }
    setTotalWeeklyHours(total.toFixed(2));
  };

  const resetForm = () => {
    setDailyHours(defaultDays.map(d => ({...d, hours: d.day === "Saturday" || d.day === "Sunday" ? "0" : ""})));
    setTotalWeeklyHours(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Work Week Hours Calculator</AlertTitle><AlertDescription>Sum up your total hours worked over a week. Enter hours per day (can be decimal).</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter hours worked each day.</CardDescription></CardHeader>
          <CardContent className="space-y-2">
            {dailyHours.map(entry => (
              <div key={entry.day} className="grid grid-cols-[100px_1fr] gap-2 items-center">
                <Label htmlFor={`hours-${entry.day}`} className="font-medium">{entry.day}</Label>
                <Input id={`hours-${entry.day}`} type="number" step="0.25" value={entry.hours} onChange={e=>handleHoursChange(entry.day, e.target.value)} placeholder="e.g., 8 or 7.5"/>
              </div>
            ))}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateTotal}>Calculate Total Hours</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(totalWeeklyHours || error) && (
          <Card>
            <CardHeader><CardDescription>Total Weekly Hours</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {totalWeeklyHours && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Total Hours This Week</p><p className="text-2xl font-bold text-primary">{totalWeeklyHours} hours</p></div><CopyButton textToCopy={totalWeeklyHours}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: WorkWeekHoursCalculator.tsx ======
==================================================

// ====== START OF FILE: XpAndLevelProgressionCalculatorGaming.tsx ======
// File converted from TSX to TXT
// Original size: 8.58 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025

"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, ChevronsUp } from "lucide-react";

type ProgressionFormula = 'linear' | 'exponential';
type CalculationGoal = 'xp_for_level' | 'level_for_xp' | 'xp_to_next_level';

export default function XpAndLevelProgressionCalculatorGaming() {
  const [formula, setFormula] = useState<ProgressionFormula>('linear');
  const [goal, setGoal] = useState<CalculationGoal>('xp_for_level');
  
  const [baseXp, setBaseXp] = useState<string>('100'); // XP for level 1 or base for formula
  const [incrementOrFactor, setIncrementOrFactor] = useState<string>('50'); // Increment for linear, Factor for exponential
  const [targetLevel, setTargetLevel] = useState<string>('10');
  const [currentXp, setCurrentXp] = useState<string>('0');
  const [currentLevel, setCurrentLevel] = useState<string>('1'); // For 'xp_to_next_level' goal

  const [resultValue, setResultValue] = useState<string | null>(null);
  const [resultLabel, setResultLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  // Function to get total XP needed to REACH a specific level (sum of XP for all prior levels)
  const getTotalXpForLevel = (level: number, bXp: number, incOrFactor: number, form: ProgressionFormula): number => {
    let totalXp = 0;
    for (let i = 1; i < level; i++) { // XP to reach level L is sum of XP for levels 1 to L-1
      if (form === 'linear') {
        totalXp += bXp + (i - 1) * incOrFactor; // XP for level i
      } else { // exponential
        totalXp += bXp * Math.pow(incOrFactor, i - 1); // XP for level i
      }
    }
    return totalXp;
  };
  
  // XP required FOR a specific level (i.e., to pass from L-1 to L)
  const getXpRequiredForSingleLevel = (level: number, bXp: number, incOrFactor: number, form: ProgressionFormula): number => {
    if (level <= 0) return 0;
    if (form === 'linear') {
      return bXp + (level - 1) * incOrFactor;
    } else { // exponential
      return bXp * Math.pow(incOrFactor, level - 1);
    }
  };


  const calculateXp = () => {
    setError(null); setResultValue(null); setResultLabel('');
    const bXp = parseFloat(baseXp);
    const incFactor = parseFloat(incrementOrFactor);
    const tLvl = parseInt(targetLevel);
    const currXp = parseFloat(currentXp);
    const currLvl = parseInt(currentLevel);

    if (isNaN(bXp) || bXp < 0 || isNaN(incFactor) || (formula === 'linear' && incFactor < 0) || (formula === 'exponential' && incFactor <= 0) ) {
      setError('Base XP and Increment/Factor must be valid positive numbers (Factor > 0 for exponential).');
      return;
    }
    
    try {
      if (goal === 'xp_for_level') {
        if (isNaN(tLvl) || tLvl <= 0) throw new Error("Target Level must be a positive integer.");
        const xpNeeded = getTotalXpForLevel(tLvl, bXp, incFactor, formula);
        setResultValue(xpNeeded.toFixed(0));
        setResultLabel(`Total XP needed to reach Level ${tLvl}`);
      } else if (goal === 'level_for_xp') {
        if (isNaN(currXp) || currXp < 0) throw new Error("Current XP must be a non-negative number.");
        let level = 1;
        let accumulatedXp = 0;
        while (true) {
            const xpForThisLevel = getXpRequiredForSingleLevel(level, bXp, incFactor, formula);
            if (accumulatedXp + xpForThisLevel > currXp || level > 200) { // Cap at level 200 for safety
                 if (currXp < getTotalXpForLevel(1,bXp,incFactor,formula)) level = 0; // Not even level 1
                break;
            }
            accumulatedXp += xpForThisLevel;
            level++;
        }
        setResultValue(level.toString());
        setResultLabel(`Level achieved with ${currXp} total XP`);
      } else { // xp_to_next_level
        if (isNaN(currLvl) || currLvl <=0 || isNaN(currXp) || currXp < 0) throw new Error("Current Level and Current XP must be valid.");
        const xpForCurrentLevel = getTotalXpForLevel(currLvl, bXp, incFactor, formula);
        const xpForNextLevel = getTotalXpForLevel(currLvl + 1, bXp, incFactor, formula);
        const needed = xpForNextLevel - currXp;
        if(needed < 0) {
             setResultValue("0 (Already enough for next level or beyond)");
        } else {
            setResultValue(needed.toFixed(0));
        }
        setResultLabel(`XP needed for Level ${currLvl + 1}`);
      }
    } catch (e:any) { setError(e.message); }
  };
  
  const resetForm = () => {
    setBaseXp('100'); setIncrementOrFactor('50'); setTargetLevel('10'); setCurrentXp('0'); setCurrentLevel('1');
    setResultValue(null); setResultLabel(''); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>XP & Level Progression Calculator</AlertTitle><AlertDescription>Calculate XP requirements for levels, current level from total XP, or XP needed for the next level based on linear or exponential progression formulas.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Configure progression and goal.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="xpFormula">Progression Formula</Label><Select value={formula} onValueChange={(v:ProgressionFormula)=>setFormula(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="linear">Linear</SelectItem><SelectItem value="exponential">Exponential</SelectItem></SelectContent></Select></div>
              <div><Label htmlFor="xpGoal">Calculation Goal</Label><Select value={goal} onValueChange={(v:CalculationGoal)=>setGoal(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="xp_for_level">Total XP for Level</SelectItem><SelectItem value="level_for_xp">Level for Total XP</SelectItem><SelectItem value="xp_to_next_level">XP to Next Level</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="baseXp">Base XP (for Level 1 or initial value)</Label><Input id="baseXp" type="number" value={baseXp} onChange={e=>setBaseXp(e.target.value)}/></div>
            <div><Label htmlFor="incFactor">{formula==='linear' ? 'XP Increment per Level' : 'XP Factor per Level (e.g., 1.1 for 10% increase)'}</Label><Input id="incFactor" type="number" value={incrementOrFactor} onChange={e=>setIncrementOrFactor(e.target.value)}/></div>
            
            {goal === 'xp_for_level' && <div><Label htmlFor="targetLevelXP">Target Level</Label><Input id="targetLevelXP" type="number" value={targetLevel} onChange={e=>setTargetLevel(e.target.value)}/></div>}
            {goal === 'level_for_xp' && <div><Label htmlFor="currentXpXP">Current Total XP</Label><Input id="currentXpXP" type="number" value={currentXp} onChange={e=>setCurrentXp(e.target.value)}/></div>}
            {goal === 'xp_to_next_level' && <><div><Label htmlFor="currentLevelXP">Current Level</Label><Input id="currentLevelXP" type="number" value={currentLevel} onChange={e=>setCurrentLevel(e.target.value)}/></div><div><Label htmlFor="currentXpToNext">Current XP Progress in this Level</Label><Input id="currentXpToNext" type="number" value={currentXp} onChange={e=>setCurrentXp(e.target.value)} placeholder="Current total XP for better calc"/></div></>}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateXp}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(resultValue || error) && (
          <Card>
            <CardHeader><CardDescription>Progression Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {resultValue && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">{resultLabel}</p><p className="text-2xl font-bold text-primary">{resultValue}</p></div><CopyButton textToCopy={resultValue}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

// ====== END OF FILE: XpAndLevelProgressionCalculatorGaming.tsx ======
==================================================

// ====== START OF FILE: XpLevelProgressionCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 8.58 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, ChevronsUp } from "lucide-react";

type ProgressionFormula = 'linear' | 'exponential';
type CalculationGoal = 'xp_for_level' | 'level_for_xp' | 'xp_to_next_level';

export default function XpLevelProgressionCalculator() {
  const [formula, setFormula] = useState<ProgressionFormula>('linear');
  const [goal, setGoal] = useState<CalculationGoal>('xp_for_level');
  
  const [baseXp, setBaseXp] = useState<string>('100'); // XP for level 1 or base for formula
  const [incrementOrFactor, setIncrementOrFactor] = useState<string>('50'); // Increment for linear, Factor for exponential
  const [targetLevel, setTargetLevel] = useState<string>('10');
  const [currentXp, setCurrentXp] = useState<string>('0');
  const [currentLevel, setCurrentLevel] = useState<string>('1'); // For 'xp_to_next_level' goal

  const [resultValue, setResultValue] = useState<string | null>(null);
  const [resultLabel, setResultLabel] = useState<string>('');
  const [error, setError] = useState<string | null>(null);

  // Function to get total XP needed to REACH a specific level (sum of XP for all prior levels)
  const getTotalXpForLevel = (level: number, bXp: number, incOrFactor: number, form: ProgressionFormula): number => {
    let totalXp = 0;
    for (let i = 1; i < level; i++) { // XP to reach level L is sum of XP for levels 1 to L-1
      if (form === 'linear') {
        totalXp += bXp + (i - 1) * incOrFactor; // XP for level i
      } else { // exponential
        totalXp += bXp * Math.pow(incOrFactor, i - 1); // XP for level i
      }
    }
    return totalXp;
  };
  
  // XP required FOR a specific level (i.e., to pass from L-1 to L)
  const getXpRequiredForSingleLevel = (level: number, bXp: number, incOrFactor: number, form: ProgressionFormula): number => {
    if (level <= 0) return 0;
    if (form === 'linear') {
      return bXp + (level - 1) * incOrFactor;
    } else { // exponential
      return bXp * Math.pow(incOrFactor, level - 1);
    }
  };


  const calculateXp = () => {
    setError(null); setResultValue(null); setResultLabel('');
    const bXp = parseFloat(baseXp);
    const incFactor = parseFloat(incrementOrFactor);
    const tLvl = parseInt(targetLevel);
    const currXp = parseFloat(currentXp);
    const currLvl = parseInt(currentLevel);

    if (isNaN(bXp) || bXp < 0 || isNaN(incFactor) || (formula === 'linear' && incFactor < 0) || (formula === 'exponential' && incFactor <= 0) ) {
      setError('Base XP and Increment/Factor must be valid positive numbers (Factor > 0 for exponential).');
      return;
    }
    
    try {
      if (goal === 'xp_for_level') {
        if (isNaN(tLvl) || tLvl <= 0) throw new Error("Target Level must be a positive integer.");
        const xpNeeded = getTotalXpForLevel(tLvl, bXp, incFactor, formula);
        setResultValue(xpNeeded.toFixed(0));
        setResultLabel(`Total XP needed to reach Level ${tLvl}`);
      } else if (goal === 'level_for_xp') {
        if (isNaN(currXp) || currXp < 0) throw new Error("Current XP must be a non-negative number.");
        let level = 1;
        let accumulatedXp = 0;
        while (true) {
            const xpForThisLevel = getXpRequiredForSingleLevel(level, bXp, incFactor, formula);
            if (accumulatedXp + xpForThisLevel > currXp || level > 200) { // Cap at level 200 for safety
                 if (currXp < getTotalXpForLevel(1,bXp,incFactor,formula)) level = 0; // Not even level 1
                break;
            }
            accumulatedXp += xpForThisLevel;
            level++;
        }
        setResultValue(level.toString());
        setResultLabel(`Level achieved with ${currXp} total XP`);
      } else { // xp_to_next_level
        if (isNaN(currLvl) || currLvl <=0 || isNaN(currXp) || currXp < 0) throw new Error("Current Level and Current XP must be valid.");
        const xpForCurrentLevel = getTotalXpForLevel(currLvl, bXp, incFactor, formula);
        const xpForNextLevel = getTotalXpForLevel(currLvl + 1, bXp, incFactor, formula);
        const needed = xpForNextLevel - currXp;
        if(needed < 0) {
             setResultValue("0 (Already enough for next level or beyond)");
        } else {
            setResultValue(needed.toFixed(0));
        }
        setResultLabel(`XP needed for Level ${currLvl + 1}`);
      }
    } catch (e:any) { setError(e.message); }
  };
  
  const resetForm = () => {
    setBaseXp('100'); setIncrementOrFactor('50'); setTargetLevel('10'); setCurrentXp('0'); setCurrentLevel('1');
    setResultValue(null); setResultLabel(''); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>XP & Level Progression Calculator</AlertTitle><AlertDescription>Calculate XP requirements for levels, current level from total XP, or XP needed for the next level based on linear or exponential progression formulas.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Configure progression and goal.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div><Label htmlFor="xpFormula">Progression Formula</Label><Select value={formula} onValueChange={(v:ProgressionFormula)=>setFormula(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="linear">Linear</SelectItem><SelectItem value="exponential">Exponential</SelectItem></SelectContent></Select></div>
              <div><Label htmlFor="xpGoal">Calculation Goal</Label><Select value={goal} onValueChange={(v:CalculationGoal)=>setGoal(v)}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value="xp_for_level">Total XP for Level</SelectItem><SelectItem value="level_for_xp">Level for Total XP</SelectItem><SelectItem value="xp_to_next_level">XP to Next Level</SelectItem></SelectContent></Select></div>
            </div>
            <div><Label htmlFor="baseXp">Base XP (for Level 1 or initial value)</Label><Input id="baseXp" type="number" value={baseXp} onChange={e=>setBaseXp(e.target.value)}/></div>
            <div><Label htmlFor="incFactor">{formula==='linear' ? 'XP Increment per Level' : 'XP Factor per Level (e.g., 1.1 for 10% increase)'}</Label><Input id="incFactor" type="number" value={incrementOrFactor} onChange={e=>setIncrementOrFactor(e.target.value)}/></div>
            
            {goal === 'xp_for_level' && <div><Label htmlFor="targetLevelXP">Target Level</Label><Input id="targetLevelXP" type="number" value={targetLevel} onChange={e=>setTargetLevel(e.target.value)}/></div>}
            {goal === 'level_for_xp' && <div><Label htmlFor="currentXpXP">Current Total XP</Label><Input id="currentXpXP" type="number" value={currentXp} onChange={e=>setCurrentXp(e.target.value)}/></div>}
            {goal === 'xp_to_next_level' && <><div><Label htmlFor="currentLevelXP">Current Level</Label><Input id="currentLevelXP" type="number" value={currentLevel} onChange={e=>setCurrentLevel(e.target.value)}/></div><div><Label htmlFor="currentXpToNext">Current XP Progress in this Level</Label><Input id="currentXpToNext" type="number" value={currentXp} onChange={e=>setCurrentXp(e.target.value)} placeholder="Current total XP for better calc"/></div></>}
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateXp}>Calculate</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(resultValue || error) && (
          <Card>
            <CardHeader><CardDescription>Progression Result</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {resultValue && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">{resultLabel}</p><p className="text-2xl font-bold text-primary">{resultValue}</p></div><CopyButton textToCopy={resultValue}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: XpLevelProgressionCalculator.tsx ======
==================================================

// ====== START OF FILE: ZScoreCalculator.tsx ======
// File converted from TSX to TXT
// Original size: 3.88 KB
// Conversion date: 28/7/2025
// Last modified: 25/7/2025


"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import CopyButton from '@/components/shared/CopyButton';
import { Card, CardContent, CardFooter, CardHeader, CardDescription } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Terminal, Info, SigmaSquare as SigmaIcon } from "lucide-react";

// Z-score = (X - μ) / σ
// X = Value, μ = Population Mean, σ = Population Standard Deviation

export default function ZScoreCalculator() {
  const [dataPointX, setDataPointX] = useState<string>('');
  const [populationMean, setPopulationMean] = useState<string>(''); // μ
  const [populationStdDev, setPopulationStdDev] = useState<string>(''); // σ

  const [zScore, setZScore] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const calculateZScore = () => {
    setError(null); setZScore(null);
    const X = parseFloat(dataPointX);
    const mu = parseFloat(populationMean);
    const sigma = parseFloat(populationStdDev);

    if (isNaN(X) || isNaN(mu) || isNaN(sigma)) {
      setError('Please enter valid numbers for data point, population mean, and population standard deviation.');
      return;
    }
    if (sigma === 0) {
      setError('Population Standard Deviation (σ) cannot be zero.');
      return;
    }
    if (sigma < 0) {
        setError('Population Standard Deviation (σ) must be positive.');
        return;
    }

    const Z = (X - mu) / sigma;
    setZScore(Z.toFixed(4));
  };

  const resetForm = () => {
    setDataPointX(''); setPopulationMean(''); setPopulationStdDev('');
    setZScore(null); setError(null);
  };

  return (
    <div className="space-y-6">
      <Alert><Info className="h-4 w-4"/><AlertTitle>Z-Score Calculator</AlertTitle><AlertDescription>Calculate the Z-score of a data point given the population mean (μ) and population standard deviation (σ). The Z-score indicates how many standard deviations an element is from the mean.</AlertDescription></Alert>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader><CardDescription>Enter statistical values.</CardDescription></CardHeader>
          <CardContent className="space-y-4">
            <div><Label htmlFor="dataPointX">Data Point (X)</Label><Input id="dataPointX" type="number" value={dataPointX} onChange={e=>setDataPointX(e.target.value)} placeholder="e.g., 70"/></div>
            <div><Label htmlFor="populationMeanZ">Population Mean (μ)</Label><Input id="populationMeanZ" type="number" value={populationMean} onChange={e=>setPopulationMean(e.target.value)} placeholder="e.g., 60"/></div>
            <div><Label htmlFor="populationStdDevZ">Population Standard Deviation (σ)</Label><Input id="populationStdDevZ" type="number" value={populationStdDev} onChange={e=>setPopulationStdDev(e.target.value)} placeholder="e.g., 10"/></div>
          </CardContent>
          <CardFooter className="flex justify-between"><Button onClick={calculateZScore}>Calculate Z-Score</Button><Button variant="outline" onClick={resetForm}>Reset</Button></CardFooter>
        </Card>
        {(zScore || error) && (
          <Card>
            <CardHeader><CardDescription>Calculated Z-Score</CardDescription></CardHeader>
            <CardContent>
              {error && (<Alert variant="destructive"><Terminal className="h-4 w-4"/><AlertTitle>Error</AlertTitle><AlertDescription>{error}</AlertDescription></Alert>)}
              {zScore && (<div className="flex justify-between items-center p-3 bg-primary/10 rounded-md"><div><p className="text-sm text-muted-foreground">Z-Score</p><p className="text-2xl font-bold text-primary">{zScore}</p></div><CopyButton textToCopy={zScore}/></div>)}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}


// ====== END OF FILE: ZScoreCalculator.tsx ======
==================================================

